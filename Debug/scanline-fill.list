
scanline-fill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  0800bfd0  0800bfd0  0001bfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c778  0800c778  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800c778  0800c778  0001c778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c780  0800c780  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c780  0800c780  0001c780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c784  0800c784  0001c784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800c788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b90  20000350  0800cad8  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee0  0800cad8  00021ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a605  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041a0  00000000  00000000  0003a985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0003eb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  0003faa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a906  00000000  00000000  00040828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ffe  00000000  00000000  0005b12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b629  00000000  00000000  0007012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee4  00000000  00000000  000fb7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bfb4 	.word	0x0800bfb4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	0800bfb4 	.word	0x0800bfb4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <Artist_ClearCanvas>:
#include "font.h"
#include "scanline_fill.h"
#include "constants.h"

void Artist_ClearCanvas(Canvas *canvas, const color_t color)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
	for(size_t iRow = 0; iRow < canvas->numRows; ++iRow)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	e01a      	b.n	8000f98 <Artist_ClearCanvas+0x48>
	{
		for(size_t iCol = 0; iCol < canvas->numCols; ++iCol)
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	e00f      	b.n	8000f88 <Artist_ClearCanvas+0x38>
		{
			canvas->data[iRow * canvas->numCols + iCol] = color;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	68f9      	ldr	r1, [r7, #12]
 8000f72:	fb01 f103 	mul.w	r1, r1, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	440b      	add	r3, r1
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	801a      	strh	r2, [r3, #0]
		for(size_t iCol = 0; iCol < canvas->numCols; ++iCol)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3ea      	bcc.n	8000f68 <Artist_ClearCanvas+0x18>
	for(size_t iRow = 0; iRow < canvas->numRows; ++iRow)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3301      	adds	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d3df      	bcc.n	8000f62 <Artist_ClearCanvas+0x12>
		}
	}
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <Artist_DrawText>:

void Artist_DrawText(Canvas *canvas, const char *txt, const Point pos, const color_t color)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	4639      	mov	r1, r7
 8000fbc:	e881 000c 	stmia.w	r1, {r2, r3}
	Point currentPos = pos;
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	463a      	mov	r2, r7
 8000fc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fca:	e883 0003 	stmia.w	r3, {r0, r1}
	for (const char *c = txt; *c != '\0'; ++c)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e041      	b.n	8001058 <Artist_DrawText+0xa8>
	{
		// get character bytes from font array and write in data array
		for(uint8_t x = 0; x < FONT_WIDTH; ++x)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	76fb      	strb	r3, [r7, #27]
 8000fd8:	e038      	b.n	800104c <Artist_DrawText+0x9c>
		{
			currentPos.y = pos.y;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	617b      	str	r3, [r7, #20]
			uint8_t fontCol = font6x8[(*c - 32)*FONT_WIDTH + x];
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f1a3 0220 	sub.w	r2, r3, #32
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	461a      	mov	r2, r3
 8000ff0:	7efb      	ldrb	r3, [r7, #27]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <Artist_DrawText+0xc0>)
 8000ff6:	5cd3      	ldrb	r3, [r2, r3]
 8000ff8:	767b      	strb	r3, [r7, #25]
			for(uint8_t y = 0; y < FONT_HEIGHT; ++y)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	76bb      	strb	r3, [r7, #26]
 8000ffe:	e01c      	b.n	800103a <Artist_DrawText+0x8a>
			{
				if(fontCol & (1 << y))
 8001000:	7e7a      	ldrb	r2, [r7, #25]
 8001002:	7ebb      	ldrb	r3, [r7, #26]
 8001004:	fa42 f303 	asr.w	r3, r2, r3
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00e      	beq.n	800102e <Artist_DrawText+0x7e>
				{
					canvas->data[currentPos.x + currentPos.y * canvas->numCols] = color;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4619      	mov	r1, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	4618      	mov	r0, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	fb03 f300 	mul.w	r3, r3, r0
 8001024:	440b      	add	r3, r1
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800102c:	801a      	strh	r2, [r3, #0]
				}
				currentPos.y += 1;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
			for(uint8_t y = 0; y < FONT_HEIGHT; ++y)
 8001034:	7ebb      	ldrb	r3, [r7, #26]
 8001036:	3301      	adds	r3, #1
 8001038:	76bb      	strb	r3, [r7, #26]
 800103a:	7ebb      	ldrb	r3, [r7, #26]
 800103c:	2b07      	cmp	r3, #7
 800103e:	d9df      	bls.n	8001000 <Artist_DrawText+0x50>
			}
			currentPos.x += 1;
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	3301      	adds	r3, #1
 8001044:	613b      	str	r3, [r7, #16]
		for(uint8_t x = 0; x < FONT_WIDTH; ++x)
 8001046:	7efb      	ldrb	r3, [r7, #27]
 8001048:	3301      	adds	r3, #1
 800104a:	76fb      	strb	r3, [r7, #27]
 800104c:	7efb      	ldrb	r3, [r7, #27]
 800104e:	2b05      	cmp	r3, #5
 8001050:	d9c3      	bls.n	8000fda <Artist_DrawText+0x2a>
	for (const char *c = txt; *c != '\0'; ++c)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1b9      	bne.n	8000fd4 <Artist_DrawText+0x24>
		}
	}
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	0800c0d0 	.word	0x0800c0d0

08001074 <Artist_FillPolygon>:

void Artist_FillPolygon(Canvas *canvas, Point *points, const size_t numPoints, const color_t color)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	f6ad 6d04 	subw	sp, sp, #3588	; 0xe04
 800107a:	af02      	add	r7, sp, #8
 800107c:	f107 040c 	add.w	r4, r7, #12
 8001080:	6020      	str	r0, [r4, #0]
 8001082:	f107 0008 	add.w	r0, r7, #8
 8001086:	6001      	str	r1, [r0, #0]
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	600a      	str	r2, [r1, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	1cbb      	adds	r3, r7, #2
 8001090:	801a      	strh	r2, [r3, #0]
	//1. Sort points anti-clockwise
	Point_SortAntiClockwise(points, numPoints);
 8001092:	1d3a      	adds	r2, r7, #4
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	6811      	ldr	r1, [r2, #0]
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f001 f834 	bl	8002108 <Point_SortAntiClockwise>
	//2. Find ymin and ymax for the polygon
	int32_t ymin = points[0].y, ymax = points[1].y;
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f8c7 3df4 	str.w	r3, [r7, #3572]	; 0xdf4
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3308      	adds	r3, #8
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f8c7 3df0 	str.w	r3, [r7, #3568]	; 0xdf0
	for(const Point *p = points + 1; p != (points + numPoints); ++p)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3308      	adds	r3, #8
 80010c2:	f8c7 3dec 	str.w	r3, [r7, #3564]	; 0xdec
 80010c6:	e01c      	b.n	8001102 <Artist_FillPolygon+0x8e>
	{
		if(p->y < ymin) ymin = p->y;
 80010c8:	f8d7 3dec 	ldr.w	r3, [r7, #3564]	; 0xdec
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f8d7 2df4 	ldr.w	r2, [r7, #3572]	; 0xdf4
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dd04      	ble.n	80010e0 <Artist_FillPolygon+0x6c>
 80010d6:	f8d7 3dec 	ldr.w	r3, [r7, #3564]	; 0xdec
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f8c7 3df4 	str.w	r3, [r7, #3572]	; 0xdf4
		if(p->y > ymax) ymax = p->y;
 80010e0:	f8d7 3dec 	ldr.w	r3, [r7, #3564]	; 0xdec
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f8d7 2df0 	ldr.w	r2, [r7, #3568]	; 0xdf0
 80010ea:	429a      	cmp	r2, r3
 80010ec:	da04      	bge.n	80010f8 <Artist_FillPolygon+0x84>
 80010ee:	f8d7 3dec 	ldr.w	r3, [r7, #3564]	; 0xdec
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f8c7 3df0 	str.w	r3, [r7, #3568]	; 0xdf0
	for(const Point *p = points + 1; p != (points + numPoints); ++p)
 80010f8:	f8d7 3dec 	ldr.w	r3, [r7, #3564]	; 0xdec
 80010fc:	3308      	adds	r3, #8
 80010fe:	f8c7 3dec 	str.w	r3, [r7, #3564]	; 0xdec
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	4413      	add	r3, r2
 8001110:	f8d7 2dec 	ldr.w	r2, [r7, #3564]	; 0xdec
 8001114:	429a      	cmp	r2, r3
 8001116:	d1d7      	bne.n	80010c8 <Artist_FillPolygon+0x54>
	}
	// Create required lists
	Edge table[SCANLINE_FILL_TABLE_SIZE] = {};
 8001118:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800111c:	4618      	mov	r0, r3
 800111e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001122:	461a      	mov	r2, r3
 8001124:	2100      	movs	r1, #0
 8001126:	f007 fcb1 	bl	8008a8c <memset>
	Edge edges[SCANLINE_FILL_EDGES_MAX_NUM] = {};
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4618      	mov	r0, r3
 8001130:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001134:	461a      	mov	r2, r3
 8001136:	2100      	movs	r1, #0
 8001138:	f007 fca8 	bl	8008a8c <memset>
	Edge active = {}; // head of list of active edges
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	461a      	mov	r2, r3
 8001142:	2300      	movs	r3, #0
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	6053      	str	r3, [r2, #4]
 8001148:	6093      	str	r3, [r2, #8]
 800114a:	60d3      	str	r3, [r2, #12]
	//3. Build edge table
	ScanlineFill_BuildEdgeTable(table, SCANLINE_FILL_TABLE_SIZE, edges, SCANLINE_FILL_EDGES_MAX_NUM, points, numPoints);
 800114c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001150:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2314      	movs	r3, #20
 8001164:	21c8      	movs	r1, #200	; 0xc8
 8001166:	f001 f87b 	bl	8002260 <ScanlineFill_BuildEdgeTable>
	//4. Iterate through each scanline, applying scanline fill
	for(int32_t yScanline = ymin; yScanline <= ymax; ++yScanline)
 800116a:	f8d7 3df4 	ldr.w	r3, [r7, #3572]	; 0xdf4
 800116e:	f8c7 3de8 	str.w	r3, [r7, #3560]	; 0xde8
 8001172:	e031      	b.n	80011d8 <Artist_FillPolygon+0x164>
	{
		//4.1. Build list of active edges
		ScanlineFill_BuildActiveEdgeList(table, SCANLINE_FILL_TABLE_SIZE, &active, yScanline);
 8001174:	f107 0214 	add.w	r2, r7, #20
 8001178:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 800117c:	f8d7 3de8 	ldr.w	r3, [r7, #3560]	; 0xde8
 8001180:	21c8      	movs	r1, #200	; 0xc8
 8001182:	f001 f8d5 	bl	8002330 <ScanlineFill_BuildActiveEdgeList>
		if(active.next)
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d01e      	beq.n	80011ce <Artist_FillPolygon+0x15a>
		{
			//4.2. Fill the pixels inside the polygon on the given scanline
			ScanlineFill_FillScanline(&active, yScanline, canvas->data, canvas->numCols, canvas->numRows, color);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689c      	ldr	r4, [r3, #8]
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f107 0014 	add.w	r0, r7, #20
 80011ac:	1cba      	adds	r2, r7, #2
 80011ae:	8812      	ldrh	r2, [r2, #0]
 80011b0:	9201      	str	r2, [sp, #4]
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	4623      	mov	r3, r4
 80011b6:	460a      	mov	r2, r1
 80011b8:	f8d7 1de8 	ldr.w	r1, [r7, #3560]	; 0xde8
 80011bc:	f001 f91b 	bl	80023f6 <ScanlineFill_FillScanline>
			//4.3. Update active edges list
			ScanlineFill_UpdateActiveEdgeList(&active, yScanline);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	f8d7 1de8 	ldr.w	r1, [r7, #3560]	; 0xde8
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 f8d0 	bl	800236e <ScanlineFill_UpdateActiveEdgeList>
	for(int32_t yScanline = ymin; yScanline <= ymax; ++yScanline)
 80011ce:	f8d7 3de8 	ldr.w	r3, [r7, #3560]	; 0xde8
 80011d2:	3301      	adds	r3, #1
 80011d4:	f8c7 3de8 	str.w	r3, [r7, #3560]	; 0xde8
 80011d8:	f8d7 2de8 	ldr.w	r2, [r7, #3560]	; 0xde8
 80011dc:	f8d7 3df0 	ldr.w	r3, [r7, #3568]	; 0xdf0
 80011e0:	429a      	cmp	r2, r3
 80011e2:	ddc7      	ble.n	8001174 <Artist_FillPolygon+0x100>
		}
	}
	//5. Color polygon points
	for(const Point *p = points; p != (points + numPoints); ++p)
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f8c7 3de4 	str.w	r3, [r7, #3556]	; 0xde4
 80011ee:	e01b      	b.n	8001228 <Artist_FillPolygon+0x1b4>
	{
		canvas->data[p->y * canvas->numCols + p->x] = YELLOW;
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	f8d7 3de4 	ldr.w	r3, [r7, #3556]	; 0xde4
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4619      	mov	r1, r3
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	fb03 f301 	mul.w	r3, r3, r1
 800120c:	f8d7 1de4 	ldr.w	r1, [r7, #3556]	; 0xde4
 8001210:	6809      	ldr	r1, [r1, #0]
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800121c:	801a      	strh	r2, [r3, #0]
	for(const Point *p = points; p != (points + numPoints); ++p)
 800121e:	f8d7 3de4 	ldr.w	r3, [r7, #3556]	; 0xde4
 8001222:	3308      	adds	r3, #8
 8001224:	f8c7 3de4 	str.w	r3, [r7, #3556]	; 0xde4
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	4413      	add	r3, r2
 8001236:	f8d7 2de4 	ldr.w	r2, [r7, #3556]	; 0xde4
 800123a:	429a      	cmp	r2, r3
 800123c:	d1d8      	bne.n	80011f0 <Artist_FillPolygon+0x17c>
	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	f607 57fc 	addw	r7, r7, #3580	; 0xdfc
 8001246:	46bd      	mov	sp, r7
 8001248:	bd90      	pop	{r4, r7, pc}
	...

0800124c <CycleCounter_GetValue>:
/**
 * @brief Get the current cycle counter value
 * @retval current cycle counter value
 */
inline uint32_t CycleCounter_GetValue(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	return DWT->CYCCNT;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <CycleCounter_GetValue+0x14>)
 8001252:	685b      	ldr	r3, [r3, #4]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e0001000 	.word	0xe0001000

08001264 <CycleCounter_Init>:
 */

#include "cycle_counter.h"

void CycleCounter_Init(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <CycleCounter_Init+0x38>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <CycleCounter_Init+0x38>)
 800126e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001272:	60d3      	str	r3, [r2, #12]
	ITM->LAR = 0xc5acce55;
 8001274:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001278:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <CycleCounter_Init+0x3c>)
 800127a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	DWT->CYCCNT = 0;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <CycleCounter_Init+0x40>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <CycleCounter_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <CycleCounter_Init+0x40>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000edf0 	.word	0xe000edf0
 80012a0:	c5acce55 	.word	0xc5acce55
 80012a4:	e0001000 	.word	0xe0001000

080012a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b42      	ldr	r3, [pc, #264]	; (80013cc <MX_GPIO_Init+0x124>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a41      	ldr	r2, [pc, #260]	; (80013cc <MX_GPIO_Init+0x124>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <MX_GPIO_Init+0x124>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <MX_GPIO_Init+0x124>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a3a      	ldr	r2, [pc, #232]	; (80013cc <MX_GPIO_Init+0x124>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <MX_GPIO_Init+0x124>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <MX_GPIO_Init+0x124>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a33      	ldr	r2, [pc, #204]	; (80013cc <MX_GPIO_Init+0x124>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <MX_GPIO_Init+0x124>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_GPIO_Init+0x124>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <MX_GPIO_Init+0x124>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <MX_GPIO_Init+0x124>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001334:	4826      	ldr	r0, [pc, #152]	; (80013d0 <MX_GPIO_Init+0x128>)
 8001336:	f001 fe47 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2110      	movs	r1, #16
 800133e:	4825      	ldr	r0, [pc, #148]	; (80013d4 <MX_GPIO_Init+0x12c>)
 8001340:	f001 fe42 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BACKLIGHT_Pin|LCD_DC_Pin|LCD_RESET_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 7160 	mov.w	r1, #896	; 0x380
 800134a:	4823      	ldr	r0, [pc, #140]	; (80013d8 <MX_GPIO_Init+0x130>)
 800134c:	f001 fe3c 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4819      	ldr	r0, [pc, #100]	; (80013d0 <MX_GPIO_Init+0x128>)
 800136a:	f001 fca9 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800136e:	2310      	movs	r3, #16
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_GPIO_Init+0x12c>)
 8001386:	f001 fc9b 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_GPIO_Init+0x130>)
 80013a2:	f001 fc8d 	bl	8002cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RESET_Pin;
 80013a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <MX_GPIO_Init+0x130>)
 80013c0:	f001 fc7e 	bl	8002cc0 <HAL_GPIO_Init>

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400

080013dc <LCD_StartCom>:

// Private functions declarations

// helper functions
static inline void LCD_StartCom(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	// set CS low
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2110      	movs	r1, #16
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <LCD_StartCom+0x14>)
 80013e6:	f001 fdef 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020000 	.word	0x40020000

080013f4 <LCD_StopCom>:

static inline void LCD_StopCom(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	// set CS high
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2110      	movs	r1, #16
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <LCD_StopCom+0x14>)
 80013fe:	f001 fde3 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40020000 	.word	0x40020000

0800140c <LCD_SetDataWrite>:

static inline void LCD_SetDataWrite(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	// set DC pin high (data)
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001416:	4802      	ldr	r0, [pc, #8]	; (8001420 <LCD_SetDataWrite+0x14>)
 8001418:	f001 fdd6 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40020400 	.word	0x40020400

08001424 <LCD_SetCmdWrite>:

static inline void LCD_SetCmdWrite(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	// set DC pin low (command)
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142e:	4802      	ldr	r0, [pc, #8]	; (8001438 <LCD_SetCmdWrite+0x14>)
 8001430:	f001 fdca 	bl	8002fc8 <HAL_GPIO_WritePin>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40020400 	.word	0x40020400

0800143c <LCD_Reset>:
 */
static void LCD_PrepareGRAMWrite(void);

// Private functions definitions
void LCD_Reset(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	// set reset pin low
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <LCD_Reset+0x2c>)
 8001448:	f001 fdbe 	bl	8002fc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800144c:	2064      	movs	r0, #100	; 0x64
 800144e:	f001 fb01 	bl	8002a54 <HAL_Delay>
	// set reset pin high
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001458:	4803      	ldr	r0, [pc, #12]	; (8001468 <LCD_Reset+0x2c>)
 800145a:	f001 fdb5 	bl	8002fc8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800145e:	2032      	movs	r0, #50	; 0x32
 8001460:	f001 faf8 	bl	8002a54 <HAL_Delay>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40020400 	.word	0x40020400

0800146c <LCD_WriteCmd>:

void LCD_WriteCmd(uint8_t cmd)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	LCD_StartCom();
 8001476:	f7ff ffb1 	bl	80013dc <LCD_StartCom>
	LCD_SetCmdWrite();
 800147a:	f7ff ffd3 	bl	8001424 <LCD_SetCmdWrite>
	// send command via SPI
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800147e:	1df9      	adds	r1, r7, #7
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	2201      	movs	r2, #1
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <LCD_WriteCmd+0x2c>)
 8001488:	f003 fbfd 	bl	8004c86 <HAL_SPI_Transmit>
	LCD_StopCom();
 800148c:	f7ff ffb2 	bl	80013f4 <LCD_StopCom>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000059c 	.word	0x2000059c

0800149c <LCD_WriteData8>:

void LCD_WriteData8(uint8_t data)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	LCD_StartCom();
 80014a6:	f7ff ff99 	bl	80013dc <LCD_StartCom>
	LCD_SetDataWrite();
 80014aa:	f7ff ffaf 	bl	800140c <LCD_SetDataWrite>
	// send data via SPI
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80014ae:	1df9      	adds	r1, r7, #7
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	2201      	movs	r2, #1
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <LCD_WriteData8+0x2c>)
 80014b8:	f003 fbe5 	bl	8004c86 <HAL_SPI_Transmit>
	LCD_StopCom();
 80014bc:	f7ff ff9a 	bl	80013f4 <LCD_StopCom>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000059c 	.word	0x2000059c

080014cc <LCD_WriteDataColor>:

void LCD_WriteDataColor(const color_t color)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	80fb      	strh	r3, [r7, #6]
	// send red data
	LCD_WriteData8(((color >> 8) & 0xF8) | 0x8);
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	b29b      	uxth	r3, r3
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	f023 030f 	bic.w	r3, r3, #15
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ffd5 	bl	800149c <LCD_WriteData8>
	// send green data
	LCD_WriteData8((color >> 3) & 0xFC);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	08db      	lsrs	r3, r3, #3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ffcb 	bl	800149c <LCD_WriteData8>
	// send blue data
	LCD_WriteData8((color << 3) | 0x8);
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	b25b      	sxtb	r3, r3
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ffc1 	bl	800149c <LCD_WriteData8>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <LCD_PrepareGRAMWrite>:

void LCD_PrepareGRAMWrite(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
	LCD_WriteCmd(0x2C);
 8001526:	202c      	movs	r0, #44	; 0x2c
 8001528:	f7ff ffa0 	bl	800146c <LCD_WriteCmd>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <LCD_Init>:

// Public function definitions
void LCD_Init(Lcd *lcd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	// reset the LCD
 	LCD_Reset();
 8001538:	f7ff ff80 	bl	800143c <LCD_Reset>

 	// send initialization sequence
	LCD_WriteCmd(0XF7);
 800153c:	20f7      	movs	r0, #247	; 0xf7
 800153e:	f7ff ff95 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0xA9);
 8001542:	20a9      	movs	r0, #169	; 0xa9
 8001544:	f7ff ffaa 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x51);
 8001548:	2051      	movs	r0, #81	; 0x51
 800154a:	f7ff ffa7 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x2C);
 800154e:	202c      	movs	r0, #44	; 0x2c
 8001550:	f7ff ffa4 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x82);
 8001554:	2082      	movs	r0, #130	; 0x82
 8001556:	f7ff ffa1 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xC0);
 800155a:	20c0      	movs	r0, #192	; 0xc0
 800155c:	f7ff ff86 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x11);
 8001560:	2011      	movs	r0, #17
 8001562:	f7ff ff9b 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x09);
 8001566:	2009      	movs	r0, #9
 8001568:	f7ff ff98 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xC1);
 800156c:	20c1      	movs	r0, #193	; 0xc1
 800156e:	f7ff ff7d 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x41);
 8001572:	2041      	movs	r0, #65	; 0x41
 8001574:	f7ff ff92 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0XC5);
 8001578:	20c5      	movs	r0, #197	; 0xc5
 800157a:	f7ff ff77 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff ff8c 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 8001584:	200a      	movs	r0, #10
 8001586:	f7ff ff89 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x80);
 800158a:	2080      	movs	r0, #128	; 0x80
 800158c:	f7ff ff86 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xB1);
 8001590:	20b1      	movs	r0, #177	; 0xb1
 8001592:	f7ff ff6b 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0xB0);
 8001596:	20b0      	movs	r0, #176	; 0xb0
 8001598:	f7ff ff80 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x11);
 800159c:	2011      	movs	r0, #17
 800159e:	f7ff ff7d 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xB4);
 80015a2:	20b4      	movs	r0, #180	; 0xb4
 80015a4:	f7ff ff62 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x02);
 80015a8:	2002      	movs	r0, #2
 80015aa:	f7ff ff77 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xB6);
 80015ae:	20b6      	movs	r0, #182	; 0xb6
 80015b0:	f7ff ff5c 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x02);
 80015b4:	2002      	movs	r0, #2
 80015b6:	f7ff ff71 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x42);
 80015ba:	2042      	movs	r0, #66	; 0x42
 80015bc:	f7ff ff6e 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xB7);
 80015c0:	20b7      	movs	r0, #183	; 0xb7
 80015c2:	f7ff ff53 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0xc6);
 80015c6:	20c6      	movs	r0, #198	; 0xc6
 80015c8:	f7ff ff68 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xBE);
 80015cc:	20be      	movs	r0, #190	; 0xbe
 80015ce:	f7ff ff4d 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff ff62 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x04);
 80015d8:	2004      	movs	r0, #4
 80015da:	f7ff ff5f 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xE9);
 80015de:	20e9      	movs	r0, #233	; 0xe9
 80015e0:	f7ff ff44 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff ff59 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0x36);
 80015ea:	2036      	movs	r0, #54	; 0x36
 80015ec:	f7ff ff3e 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8((1<<3)|(0<<7)|(1<<6)|(1<<5));
 80015f0:	2068      	movs	r0, #104	; 0x68
 80015f2:	f7ff ff53 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0x3A);
 80015f6:	203a      	movs	r0, #58	; 0x3a
 80015f8:	f7ff ff38 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x66);
 80015fc:	2066      	movs	r0, #102	; 0x66
 80015fe:	f7ff ff4d 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xE0);
 8001602:	20e0      	movs	r0, #224	; 0xe0
 8001604:	f7ff ff32 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff ff47 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x07);
 800160e:	2007      	movs	r0, #7
 8001610:	f7ff ff44 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x10);
 8001614:	2010      	movs	r0, #16
 8001616:	f7ff ff41 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x09);
 800161a:	2009      	movs	r0, #9
 800161c:	f7ff ff3e 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x17);
 8001620:	2017      	movs	r0, #23
 8001622:	f7ff ff3b 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0B);
 8001626:	200b      	movs	r0, #11
 8001628:	f7ff ff38 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x41);
 800162c:	2041      	movs	r0, #65	; 0x41
 800162e:	f7ff ff35 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x89);
 8001632:	2089      	movs	r0, #137	; 0x89
 8001634:	f7ff ff32 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x4B);
 8001638:	204b      	movs	r0, #75	; 0x4b
 800163a:	f7ff ff2f 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 800163e:	200a      	movs	r0, #10
 8001640:	f7ff ff2c 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0C);
 8001644:	200c      	movs	r0, #12
 8001646:	f7ff ff29 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0E);
 800164a:	200e      	movs	r0, #14
 800164c:	f7ff ff26 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x18);
 8001650:	2018      	movs	r0, #24
 8001652:	f7ff ff23 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x1B);
 8001656:	201b      	movs	r0, #27
 8001658:	f7ff ff20 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0F);
 800165c:	200f      	movs	r0, #15
 800165e:	f7ff ff1d 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0XE1);
 8001662:	20e1      	movs	r0, #225	; 0xe1
 8001664:	f7ff ff02 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff ff17 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x17);
 800166e:	2017      	movs	r0, #23
 8001670:	f7ff ff14 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x1A);
 8001674:	201a      	movs	r0, #26
 8001676:	f7ff ff11 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x04);
 800167a:	2004      	movs	r0, #4
 800167c:	f7ff ff0e 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0E);
 8001680:	200e      	movs	r0, #14
 8001682:	f7ff ff0b 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x06);
 8001686:	2006      	movs	r0, #6
 8001688:	f7ff ff08 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x2F);
 800168c:	202f      	movs	r0, #47	; 0x2f
 800168e:	f7ff ff05 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x45);
 8001692:	2045      	movs	r0, #69	; 0x45
 8001694:	f7ff ff02 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x43);
 8001698:	2043      	movs	r0, #67	; 0x43
 800169a:	f7ff feff 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x02);
 800169e:	2002      	movs	r0, #2
 80016a0:	f7ff fefc 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 80016a4:	200a      	movs	r0, #10
 80016a6:	f7ff fef9 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x09);
 80016aa:	2009      	movs	r0, #9
 80016ac:	f7ff fef6 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x32);
 80016b0:	2032      	movs	r0, #50	; 0x32
 80016b2:	f7ff fef3 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x36);
 80016b6:	2036      	movs	r0, #54	; 0x36
 80016b8:	f7ff fef0 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0F);
 80016bc:	200f      	movs	r0, #15
 80016be:	f7ff feed 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0x11);
 80016c2:	2011      	movs	r0, #17
 80016c4:	f7ff fed2 	bl	800146c <LCD_WriteCmd>
	HAL_Delay(120);
 80016c8:	2078      	movs	r0, #120	; 0x78
 80016ca:	f001 f9c3 	bl	8002a54 <HAL_Delay>
	LCD_WriteCmd(0x29);
 80016ce:	2029      	movs	r0, #41	; 0x29
 80016d0:	f7ff fecc 	bl	800146c <LCD_WriteCmd>

  	// set orientation
	LCD_SetOrientation(lcd, 0);
 80016d4:	2100      	movs	r1, #0
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f864 	bl	80017a4 <LCD_SetOrientation>

	// turn on backlight
	HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_Port, LCD_BACKLIGHT_Pin, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	4808      	ldr	r0, [pc, #32]	; (8001704 <LCD_Init+0x1d4>)
 80016e2:	f001 fc71 	bl	8002fc8 <HAL_GPIO_WritePin>

	// clear display with black color
	LCD_Clear(lcd, BLACK);
 80016e6:	2100      	movs	r1, #0
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f8ad 	bl	8001848 <LCD_Clear>

	// set cursor to (x, y)
	lcd->cursor.x = lcd->cursor.y = 0;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40020400 	.word	0x40020400

08001708 <LCD_SetArea>:
{
	LCD_SetArea(lcd, p, p);
}

void LCD_SetArea(Lcd *lcd, const Point *startPoint, const Point *endPoint)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	LCD_WriteCmd(0x2A);
 8001714:	202a      	movs	r0, #42	; 0x2a
 8001716:	f7ff fea9 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(startPoint->x >> 8);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	121b      	asrs	r3, r3, #8
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff feba 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(startPoint->x & 0x00FF);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff feb4 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(endPoint->x >> 8);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	121b      	asrs	r3, r3, #8
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fead 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(endPoint->x & 0x00FF);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fea7 	bl	800149c <LCD_WriteData8>

	LCD_WriteCmd(0x2B);
 800174e:	202b      	movs	r0, #43	; 0x2b
 8001750:	f7ff fe8c 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(startPoint->y >> 8);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	121b      	asrs	r3, r3, #8
 800175a:	b2db      	uxtb	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fe9d 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(startPoint->y & 0x00FF);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fe97 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(endPoint->y >> 8);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	121b      	asrs	r3, r3, #8
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fe90 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(endPoint->y & 0x00FF);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fe8a 	bl	800149c <LCD_WriteData8>

	lcd->cursor.x = startPoint->x;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	601a      	str	r2, [r3, #0]
	lcd->cursor.y = startPoint->y;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	605a      	str	r2, [r3, #4]

	LCD_PrepareGRAMWrite();
 8001798:	f7ff fec3 	bl	8001522 <LCD_PrepareGRAMWrite>
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <LCD_SetOrientation>:

void LCD_SetOrientation(Lcd *lcd, const uint8_t rotation)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
	uint8_t memAccReg = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]
	switch(rotation){
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d836      	bhi.n	8001828 <LCD_SetOrientation+0x84>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <LCD_SetOrientation+0x1c>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	080017d1 	.word	0x080017d1
 80017c4:	080017e7 	.word	0x080017e7
 80017c8:	080017fd 	.word	0x080017fd
 80017cc:	08001813 	.word	0x08001813
		case 0:
			lcd->width = LCD_WIDTH;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017d6:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_HEIGHT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017de:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (0 << 6) | (0 << 7);
 80017e0:	2308      	movs	r3, #8
 80017e2:	73fb      	strb	r3, [r7, #15]
		break;
 80017e4:	e021      	b.n	800182a <LCD_SetOrientation+0x86>
		case 1:
			lcd->width = LCD_HEIGHT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017ec:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_WIDTH;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017f4:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (0 << 7) | (1 << 6) | (1 << 5);
 80017f6:	2368      	movs	r3, #104	; 0x68
 80017f8:	73fb      	strb	r3, [r7, #15]
		break;
 80017fa:	e016      	b.n	800182a <LCD_SetOrientation+0x86>
		case 2:
			lcd->width = LCD_WIDTH;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001802:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_HEIGHT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800180a:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (1 << 6) | (1 << 7);
 800180c:	23c8      	movs	r3, #200	; 0xc8
 800180e:	73fb      	strb	r3, [r7, #15]
		break;
 8001810:	e00b      	b.n	800182a <LCD_SetOrientation+0x86>
		case 3:
			lcd->width = LCD_HEIGHT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001818:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_WIDTH;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001820:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (1 << 7) | (1 << 5);
 8001822:	23a8      	movs	r3, #168	; 0xa8
 8001824:	73fb      	strb	r3, [r7, #15]
		break;
 8001826:	e000      	b.n	800182a <LCD_SetOrientation+0x86>
		default:
		break;
 8001828:	bf00      	nop
	}
	if(memAccReg != 0)
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <LCD_SetOrientation+0x9a>
	{
		LCD_WriteCmd(0x36);
 8001830:	2036      	movs	r0, #54	; 0x36
 8001832:	f7ff fe1b 	bl	800146c <LCD_WriteCmd>
		LCD_WriteData8(memAccReg);
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fe2f 	bl	800149c <LCD_WriteData8>
	}
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop

08001848 <LCD_Clear>:

void LCD_Clear(Lcd *lcd, const color_t color)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
	Point startPoint = {0, 0}, endPoint = {lcd->width - 1, lcd->height - 1};
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	891b      	ldrh	r3, [r3, #8]
 8001860:	3b01      	subs	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	895b      	ldrh	r3, [r3, #10]
 8001868:	3b01      	subs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
	LCD_SetArea(lcd, &startPoint, &endPoint);
 800186c:	f107 020c 	add.w	r2, r7, #12
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ff46 	bl	8001708 <LCD_SetArea>

	LCD_StartCom();
 800187c:	f7ff fdae 	bl	80013dc <LCD_StartCom>
	LCD_SetDataWrite();
 8001880:	f7ff fdc4 	bl	800140c <LCD_SetDataWrite>

	for(uint16_t y = 0; y < lcd->height; ++y)
 8001884:	2300      	movs	r3, #0
 8001886:	83fb      	strh	r3, [r7, #30]
 8001888:	e011      	b.n	80018ae <LCD_Clear+0x66>
	{
		for(uint16_t x = 0; x < lcd->width; ++x)
 800188a:	2300      	movs	r3, #0
 800188c:	83bb      	strh	r3, [r7, #28]
 800188e:	e006      	b.n	800189e <LCD_Clear+0x56>
		{
			LCD_WriteDataColor(color);
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fe1a 	bl	80014cc <LCD_WriteDataColor>
		for(uint16_t x = 0; x < lcd->width; ++x)
 8001898:	8bbb      	ldrh	r3, [r7, #28]
 800189a:	3301      	adds	r3, #1
 800189c:	83bb      	strh	r3, [r7, #28]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	891b      	ldrh	r3, [r3, #8]
 80018a2:	8bba      	ldrh	r2, [r7, #28]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3f3      	bcc.n	8001890 <LCD_Clear+0x48>
	for(uint16_t y = 0; y < lcd->height; ++y)
 80018a8:	8bfb      	ldrh	r3, [r7, #30]
 80018aa:	3301      	adds	r3, #1
 80018ac:	83fb      	strh	r3, [r7, #30]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	895b      	ldrh	r3, [r3, #10]
 80018b2:	8bfa      	ldrh	r2, [r7, #30]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d3e8      	bcc.n	800188a <LCD_Clear+0x42>
		}
	}

	LCD_StopCom();
 80018b8:	f7ff fd9c 	bl	80013f4 <LCD_StopCom>
}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <LCD_DrawArea>:
	LCD_SetCursor(lcd, p);
	LCD_WriteDataColor(color);
}

void LCD_DrawArea(Lcd *lcd, const color_t *data, const size_t numRows, const size_t numCols)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
	LCD_StartCom();
 80018d2:	f7ff fd83 	bl	80013dc <LCD_StartCom>
	LCD_SetDataWrite();
 80018d6:	f7ff fd99 	bl	800140c <LCD_SetDataWrite>

	for(uint16_t y = 0; y < numRows; ++y)
 80018da:	2300      	movs	r3, #0
 80018dc:	82fb      	strh	r3, [r7, #22]
 80018de:	e019      	b.n	8001914 <LCD_DrawArea+0x50>
	{
		for(uint16_t x = 0; x < numCols; ++x)
 80018e0:	2300      	movs	r3, #0
 80018e2:	82bb      	strh	r3, [r7, #20]
 80018e4:	e00f      	b.n	8001906 <LCD_DrawArea+0x42>
		{
			LCD_WriteDataColor(data[x + y * numCols]);
 80018e6:	8aba      	ldrh	r2, [r7, #20]
 80018e8:	8afb      	ldrh	r3, [r7, #22]
 80018ea:	6839      	ldr	r1, [r7, #0]
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	4413      	add	r3, r2
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fde6 	bl	80014cc <LCD_WriteDataColor>
		for(uint16_t x = 0; x < numCols; ++x)
 8001900:	8abb      	ldrh	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	82bb      	strh	r3, [r7, #20]
 8001906:	8abb      	ldrh	r3, [r7, #20]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d8eb      	bhi.n	80018e6 <LCD_DrawArea+0x22>
	for(uint16_t y = 0; y < numRows; ++y)
 800190e:	8afb      	ldrh	r3, [r7, #22]
 8001910:	3301      	adds	r3, #1
 8001912:	82fb      	strh	r3, [r7, #22]
 8001914:	8afb      	ldrh	r3, [r7, #22]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8e1      	bhi.n	80018e0 <LCD_DrawArea+0x1c>
		}
	}

	LCD_StopCom();
 800191c:	f7ff fd6a 	bl	80013f4 <LCD_StopCom>
}
 8001920:	bf00      	nop
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	f5ad 3da6 	sub.w	sp, sp, #84992	; 0x14c00
 800192e:	b0e4      	sub	sp, #400	; 0x190
 8001930:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char buf[100] = {};
 8001932:	2300      	movs	r3, #0
 8001934:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001938:	f502 728a 	add.w	r2, r2, #276	; 0x114
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001942:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001946:	2260      	movs	r2, #96	; 0x60
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f007 f89e 	bl	8008a8c <memset>
  Lcd lcd = {};
 8001950:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001954:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
  color_t textBuf[FONT_HEIGHT][LCD_WIDTH] = {};
 8001960:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001964:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001968:	4618      	mov	r0, r3
 800196a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800196e:	461a      	mov	r2, r3
 8001970:	2100      	movs	r1, #0
 8001972:	f007 f88b 	bl	8008a8c <memset>
  Canvas textCanvas = {
 8001976:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 800197a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800197e:	3b0c      	subs	r3, #12
 8001980:	f507 329c 	add.w	r2, r7, #79872	; 0x13800
 8001984:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 800198e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001992:	3b0c      	subs	r3, #12
 8001994:	2208      	movs	r2, #8
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 800199c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80019a0:	3b0c      	subs	r3, #12
 80019a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019a6:	609a      	str	r2, [r3, #8]
		  .data = (color_t*)textBuf,
		  .numRows = FONT_HEIGHT,
		  .numCols = LCD_WIDTH
  };
  color_t polygonBuf[POLYGON_BUF_HEIGHT][POLYGON_BUF_WIDTH] = {};
 80019a8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80019ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019b0:	4618      	mov	r0, r3
 80019b2:	4be2      	ldr	r3, [pc, #904]	; (8001d3c <main+0x414>)
 80019b4:	461a      	mov	r2, r3
 80019b6:	2100      	movs	r1, #0
 80019b8:	f007 f868 	bl	8008a8c <memset>
  Canvas polygonCanvas = {
 80019bc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80019c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019c4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80019c8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80019d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019d6:	22c8      	movs	r2, #200	; 0xc8
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80019de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019e2:	22c8      	movs	r2, #200	; 0xc8
 80019e4:	609a      	str	r2, [r3, #8]
//		  {40, 60},
//		  {50, 20},
//		  {20, 90},
//		  {1, 1}
//  };
  Point polygonPoints[] = {
 80019e6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80019ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019ee:	4ad4      	ldr	r2, [pc, #848]	; (8001d40 <main+0x418>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	4611      	mov	r1, r2
 80019f4:	2358      	movs	r3, #88	; 0x58
 80019f6:	461a      	mov	r2, r3
 80019f8:	f007 f83a 	bl	8008a70 <memcpy>
		  {120, 180},
		  {80, 120},
		  {40, 160},
		  {20, 100}
  };
  const size_t numPolygonPoints = sizeof(polygonPoints)/sizeof(polygonPoints[0]);
 80019fc:	230b      	movs	r3, #11
 80019fe:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001a02:	f502 72c2 	add.w	r2, r2, #388	; 0x184
 8001a06:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a08:	f000 ffb2 	bl	8002970 <HAL_Init>

  /* USER CODE BEGIN Init */
  CycleCounter_Init();
 8001a0c:	f7ff fc2a 	bl	8001264 <CycleCounter_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a10:	f000 fa2e 	bl	8001e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a14:	f7ff fc48 	bl	80012a8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001a18:	f006 fb16 	bl	8008048 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001a1c:	f000 fdcc 	bl	80025b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&lcd);
 8001a20:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001a24:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fd81 	bl	8001530 <LCD_Init>

  // Draw header text
  strcpy(buf, "Scanline Fill Algorithm Benchmark");
 8001a2e:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001a32:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001a36:	4ac3      	ldr	r2, [pc, #780]	; (8001d44 <main+0x41c>)
 8001a38:	461c      	mov	r4, r3
 8001a3a:	4615      	mov	r5, r2
 8001a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a44:	682b      	ldr	r3, [r5, #0]
 8001a46:	8023      	strh	r3, [r4, #0]
  Point bufPos = {0, 0}, screenStartPos = {0, 0}, screenEndPos = {LCD_WIDTH - 1, FONT_HEIGHT - 1};
 8001a48:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a4c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a58:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a64:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a70:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a7c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a80:	4ab1      	ldr	r2, [pc, #708]	; (8001d48 <main+0x420>)
 8001a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a86:	e883 0003 	stmia.w	r3, {r0, r1}
  Artist_ClearCanvas(&textCanvas, BLACK);
 8001a8a:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001a8e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001a92:	3b0c      	subs	r3, #12
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fa5a 	bl	8000f50 <Artist_ClearCanvas>
  Artist_DrawText(&textCanvas, buf, bufPos, GREEN);
 8001a9c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001aa0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001aa4:	f507 31a6 	add.w	r1, r7, #84992	; 0x14c00
 8001aa8:	f501 718a 	add.w	r1, r1, #276	; 0x114
 8001aac:	f507 309c 	add.w	r0, r7, #79872	; 0x13800
 8001ab0:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001ab4:	380c      	subs	r0, #12
 8001ab6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001aba:	9200      	str	r2, [sp, #0]
 8001abc:	cb0c      	ldmia	r3, {r2, r3}
 8001abe:	f7ff fa77 	bl	8000fb0 <Artist_DrawText>
  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001ac2:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001ac6:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001aca:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001ace:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ad2:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001ad6:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff fe14 	bl	8001708 <LCD_SetArea>
  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 8001ae0:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001ae4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001ae8:	3b0c      	subs	r3, #12
 8001aea:	6819      	ldr	r1, [r3, #0]
 8001aec:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001af0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001af4:	3b0c      	subs	r3, #12
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001afc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001b00:	3b0c      	subs	r3, #12
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001b08:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001b0c:	f7ff feda 	bl	80018c4 <LCD_DrawArea>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8001b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b14:	488d      	ldr	r0, [pc, #564]	; (8001d4c <main+0x424>)
 8001b16:	f001 fa70 	bl	8002ffa <HAL_GPIO_TogglePin>

	  Artist_ClearCanvas(&polygonCanvas, BLACK);
 8001b1a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001b1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fa13 	bl	8000f50 <Artist_ClearCanvas>
	  uint32_t start_ticks = CycleCounter_GetValue();
 8001b2a:	f7ff fb8f 	bl	800124c <CycleCounter_GetValue>
 8001b2e:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001b32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b36:	6018      	str	r0, [r3, #0]
	  Artist_FillPolygon(&polygonCanvas, polygonPoints, numPolygonPoints, BLUE);
 8001b38:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8001b3c:	f5a1 71b8 	sub.w	r1, r1, #368	; 0x170
 8001b40:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 8001b44:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8001b48:	231f      	movs	r3, #31
 8001b4a:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001b4e:	f502 72c2 	add.w	r2, r2, #388	; 0x184
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	f7ff fa8e 	bl	8001074 <Artist_FillPolygon>
	  uint32_t duration_ticks = CycleCounter_GetValue() - start_ticks;
 8001b58:	f7ff fb78 	bl	800124c <CycleCounter_GetValue>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001b62:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001b6e:	f502 72be 	add.w	r2, r2, #380	; 0x17c
 8001b72:	6013      	str	r3, [r2, #0]
	  float execution_time = (float)(duration_ticks) / (SystemCoreClock/1000000);
 8001b74:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001b78:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b86:	4b72      	ldr	r3, [pc, #456]	; (8001d50 <main+0x428>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a72      	ldr	r2, [pc, #456]	; (8001d54 <main+0x42c>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	0c9b      	lsrs	r3, r3, #18
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9e:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001ba2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ba6:	edc3 7a00 	vstr	s15, [r3]

	  screenStartPos.x = 60; screenStartPos.y = 100;
 8001baa:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bb2:	223c      	movs	r2, #60	; 0x3c
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bbe:	2264      	movs	r2, #100	; 0x64
 8001bc0:	605a      	str	r2, [r3, #4]
	  screenEndPos.x = screenStartPos.x + POLYGON_BUF_WIDTH - 1; screenEndPos.y = screenStartPos.y + POLYGON_BUF_HEIGHT - 1;
 8001bc2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bc6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f103 02c7 	add.w	r2, r3, #199	; 0xc7
 8001bd0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bd4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bde:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f103 02c7 	add.w	r2, r3, #199	; 0xc7
 8001be8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bf0:	605a      	str	r2, [r3, #4]
	  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001bf2:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001bf6:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001bfa:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bfe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c02:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001c06:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7ff fd7c 	bl	8001708 <LCD_SetArea>
	  LCD_DrawArea(&lcd, polygonCanvas.data, polygonCanvas.numRows, polygonCanvas.numCols);
 8001c10:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001c32:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001c36:	f7ff fe45 	bl	80018c4 <LCD_DrawArea>

	  sprintf(buf, "Execution ticks: %lu", duration_ticks);
 8001c3a:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001c3e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001c42:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001c46:	f502 72be 	add.w	r2, r2, #380	; 0x17c
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	4942      	ldr	r1, [pc, #264]	; (8001d58 <main+0x430>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f007 fd18 	bl	8009684 <siprintf>
	  bufPos.x = 0; bufPos.y = 0;
 8001c54:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c58:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c64:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
	  screenStartPos.x = 0; screenStartPos.y = 3*LCD_HEIGHT/4;
 8001c6c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c70:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c7c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c80:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001c84:	605a      	str	r2, [r3, #4]
	  screenEndPos.x = screenStartPos.x + LCD_WIDTH - 1; screenEndPos.y = screenStartPos.y + FONT_HEIGHT - 1;
 8001c86:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c8a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f203 123f 	addw	r2, r3, #319	; 0x13f
 8001c94:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c98:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001ca2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	1dda      	adds	r2, r3, #7
 8001caa:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001cae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001cb2:	605a      	str	r2, [r3, #4]
	  Artist_ClearCanvas(&textCanvas, BLACK);
 8001cb4:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001cb8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001cbc:	3b0c      	subs	r3, #12
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f945 	bl	8000f50 <Artist_ClearCanvas>
	  Artist_DrawText(&textCanvas, buf, bufPos, RED);
 8001cc6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001cca:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001cce:	f507 31a6 	add.w	r1, r7, #84992	; 0x14c00
 8001cd2:	f501 718a 	add.w	r1, r1, #276	; 0x114
 8001cd6:	f507 309c 	add.w	r0, r7, #79872	; 0x13800
 8001cda:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001cde:	380c      	subs	r0, #12
 8001ce0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001ce4:	9200      	str	r2, [sp, #0]
 8001ce6:	cb0c      	ldmia	r3, {r2, r3}
 8001ce8:	f7ff f962 	bl	8000fb0 <Artist_DrawText>
	  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001cec:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001cf0:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001cf4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001cf8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cfc:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001d00:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7ff fcff 	bl	8001708 <LCD_SetArea>
	  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 8001d0a:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001d0e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001d12:	3b0c      	subs	r3, #12
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001d1a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001d1e:	3b0c      	subs	r3, #12
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001d26:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001d2a:	3b0c      	subs	r3, #12
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001d32:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001d36:	f7ff fdc5 	bl	80018c4 <LCD_DrawArea>
 8001d3a:	e00f      	b.n	8001d5c <main+0x434>
 8001d3c:	00013880 	.word	0x00013880
 8001d40:	0800c028 	.word	0x0800c028
 8001d44:	0800bfd0 	.word	0x0800bfd0
 8001d48:	0800c080 	.word	0x0800c080
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	20000000 	.word	0x20000000
 8001d54:	431bde83 	.word	0x431bde83
 8001d58:	0800bff4 	.word	0x0800bff4

	  sprintf(buf, "Execution time : %.3f us", execution_time);
 8001d5c:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001d60:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	f7fe fbf7 	bl	8000558 <__aeabi_f2d>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001d72:	f500 708a 	add.w	r0, r0, #276	; 0x114
 8001d76:	493d      	ldr	r1, [pc, #244]	; (8001e6c <main+0x544>)
 8001d78:	f007 fc84 	bl	8009684 <siprintf>
	  bufPos.x = 0; bufPos.y = 0;
 8001d7c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d80:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d8c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
	  screenStartPos.x = 0; screenStartPos.y = 3*LCD_HEIGHT/4 + FONT_HEIGHT;
 8001d94:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d98:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001da4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001da8:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8001dac:	605a      	str	r2, [r3, #4]
	  screenEndPos.x = screenStartPos.x + LCD_WIDTH - 1; screenEndPos.y = screenStartPos.y + FONT_HEIGHT - 1;
 8001dae:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001db2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f203 123f 	addw	r2, r3, #319	; 0x13f
 8001dbc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dc0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	1dda      	adds	r2, r3, #7
 8001dd2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dd6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dda:	605a      	str	r2, [r3, #4]
	  Artist_ClearCanvas(&textCanvas, BLACK);
 8001ddc:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001de0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001de4:	3b0c      	subs	r3, #12
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f8b1 	bl	8000f50 <Artist_ClearCanvas>
	  Artist_DrawText(&textCanvas, buf, bufPos, YELLOW);
 8001dee:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001df2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001df6:	f507 31a6 	add.w	r1, r7, #84992	; 0x14c00
 8001dfa:	f501 718a 	add.w	r1, r1, #276	; 0x114
 8001dfe:	f507 309c 	add.w	r0, r7, #79872	; 0x13800
 8001e02:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001e06:	380c      	subs	r0, #12
 8001e08:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e0c:	9200      	str	r2, [sp, #0]
 8001e0e:	cb0c      	ldmia	r3, {r2, r3}
 8001e10:	f7ff f8ce 	bl	8000fb0 <Artist_DrawText>
	  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001e14:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001e18:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001e1c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e20:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001e24:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001e28:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7ff fc6b 	bl	8001708 <LCD_SetArea>
	  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 8001e32:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001e36:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001e3a:	3b0c      	subs	r3, #12
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001e42:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001e46:	3b0c      	subs	r3, #12
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001e4e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001e52:	3b0c      	subs	r3, #12
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001e5a:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001e5e:	f7ff fd31 	bl	80018c4 <LCD_DrawArea>
	  HAL_Delay(500);
 8001e62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e66:	f000 fdf5 	bl	8002a54 <HAL_Delay>
  {
 8001e6a:	e651      	b.n	8001b10 <main+0x1e8>
 8001e6c:	0800c00c 	.word	0x0800c00c

08001e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b094      	sub	sp, #80	; 0x50
 8001e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e76:	f107 0320 	add.w	r3, r7, #32
 8001e7a:	2230      	movs	r2, #48	; 0x30
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f006 fe04 	bl	8008a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <SystemClock_Config+0xc8>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <SystemClock_Config+0xc8>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <SystemClock_Config+0xc8>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <SystemClock_Config+0xcc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a20      	ldr	r2, [pc, #128]	; (8001f3c <SystemClock_Config+0xcc>)
 8001eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <SystemClock_Config+0xcc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ee0:	2319      	movs	r3, #25
 8001ee2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ee4:	23c0      	movs	r3, #192	; 0xc0
 8001ee6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eec:	2304      	movs	r3, #4
 8001eee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef0:	f107 0320 	add.w	r3, r7, #32
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 fa1d 	bl	8004334 <HAL_RCC_OscConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f00:	f000 f81e 	bl	8001f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f04:	230f      	movs	r3, #15
 8001f06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	2103      	movs	r1, #3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 fc7f 	bl	8004824 <HAL_RCC_ClockConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f2c:	f000 f808 	bl	8001f40 <Error_Handler>
  }
}
 8001f30:	bf00      	nop
 8001f32:	3750      	adds	r7, #80	; 0x50
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40007000 	.word	0x40007000

08001f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f44:	b672      	cpsid	i
}
 8001f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <Error_Handler+0x8>
	...

08001f4c <PolarPointWithIndex_compare>:
	size_t index;
} PolarPointWithIndex;

// compare polar points based on angle and radius
static int PolarPointWithIndex_compare(const void *a, const void *b)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
	static const float eps = 1e-5f;
	const float angleDiff = ((PolarPointWithIndex*)a)->point.angle - ((PolarPointWithIndex*)b)->point.angle;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f66:	edc7 7a03 	vstr	s15, [r7, #12]
	if (fabsf(angleDiff) < eps)
 8001f6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f6e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <PolarPointWithIndex_compare+0x74>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	d50d      	bpl.n	8001f9e <PolarPointWithIndex_compare+0x52>
	{
		const uint32_t radiusDiff = ((PolarPointWithIndex*)a)->point.radiusSquared - ((PolarPointWithIndex*)b)->point.radiusSquared;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	60bb      	str	r3, [r7, #8]
		if (radiusDiff < 0)
		{
			return 1;
		}
		else if (radiusDiff > 0)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <PolarPointWithIndex_compare+0x4e>
		{
			return -1;
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
 8001f98:	e00c      	b.n	8001fb4 <PolarPointWithIndex_compare+0x68>
		}
		else
		{
			return 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e00a      	b.n	8001fb4 <PolarPointWithIndex_compare+0x68>
		}
	}
	else if (angleDiff > 0)
 8001f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001faa:	dd01      	ble.n	8001fb0 <PolarPointWithIndex_compare+0x64>
	{
		return 1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e001      	b.n	8001fb4 <PolarPointWithIndex_compare+0x68>
	}
	else
	{
		return -1;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	0800c310 	.word	0x0800c310

08001fc4 <Point_CartesianToPolar>:

PointPolar Point_CartesianToPolar(const Point *point)
{
 8001fc4:	b5b0      	push	{r4, r5, r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
	PointPolar polar = {};
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
	polar.radiusSquared = point->x * point->x + point->y * point->y;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	fb02 f203 	mul.w	r2, r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	6849      	ldr	r1, [r1, #4]
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
	polar.angle = atan2(point->y, point->x);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fa9b 	bl	8000534 <__aeabi_i2d>
 8001ffe:	4604      	mov	r4, r0
 8002000:	460d      	mov	r5, r1
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fa94 	bl	8000534 <__aeabi_i2d>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	ec43 2b11 	vmov	d1, r2, r3
 8002014:	ec45 4b10 	vmov	d0, r4, r5
 8002018:	f009 fd52 	bl	800bac0 <atan2>
 800201c:	ec53 2b10 	vmov	r2, r3, d0
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	f7fe fdc8 	bl	8000bb8 <__aeabi_d2f>
 8002028:	4603      	mov	r3, r0
 800202a:	60fb      	str	r3, [r7, #12]
	return polar;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	461a      	mov	r2, r3
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002038:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bdb0      	pop	{r4, r5, r7, pc}

08002044 <Point_FindMassCenter>:

Point Point_FindMassCenter(const Point *points, const size_t numPoints)
{
 8002044:	b480      	push	{r7}
 8002046:	b08b      	sub	sp, #44	; 0x2c
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
	int32_t xSum = 0, ySum = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
	for(const Point *p = points; p != (points + numPoints); ++p)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	e00c      	b.n	8002078 <Point_FindMassCenter+0x34>
	{
		xSum += p->x;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002064:	4413      	add	r3, r2
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
		ySum += p->y;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	4413      	add	r3, r2
 8002070:	623b      	str	r3, [r7, #32]
	for(const Point *p = points; p != (points + numPoints); ++p)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3308      	adds	r3, #8
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	4413      	add	r3, r2
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	429a      	cmp	r2, r3
 8002084:	d1eb      	bne.n	800205e <Point_FindMassCenter+0x1a>
	}

	Point massCenter = {
			.x = xSum / numPoints,
 8002086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
	Point massCenter = {
 800208e:	617b      	str	r3, [r7, #20]
			.y = ySum / numPoints
 8002090:	6a3a      	ldr	r2, [r7, #32]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
	Point massCenter = {
 8002098:	61bb      	str	r3, [r7, #24]
	};

	return massCenter;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	461a      	mov	r2, r3
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020a6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	372c      	adds	r7, #44	; 0x2c
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <Point_MoveOrigin>:

void Point_MoveOrigin(Point *points, const size_t numPoints, const Point *origin)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b087      	sub	sp, #28
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
	for(Point *p = points; p != (points + numPoints); ++p)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	e010      	b.n	80020ea <Point_MoveOrigin+0x34>
	{
		p->x -= origin->x;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	1ad2      	subs	r2, r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	601a      	str	r2, [r3, #0]
		p->y -= origin->y;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	1ad2      	subs	r2, r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	605a      	str	r2, [r3, #4]
	for(Point *p = points; p != (points + numPoints); ++p)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3308      	adds	r3, #8
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1e7      	bne.n	80020c8 <Point_MoveOrigin+0x12>
	}
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <Point_SortAntiClockwise>:

void Point_SortAntiClockwise(Point *points, const size_t numPoints)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b0ed      	sub	sp, #436	; 0x1b4
 800210c:	af00      	add	r7, sp, #0
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	6018      	str	r0, [r3, #0]
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	6019      	str	r1, [r3, #0]
	// Make a copy of the points
	Point pointsOriginal[POINT_MAX_NUM] = {};
 800211a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800211e:	22a0      	movs	r2, #160	; 0xa0
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f006 fcb2 	bl	8008a8c <memset>
	memcpy(pointsOriginal, points, numPoints*sizeof(points[0]));
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	00da      	lsls	r2, r3, #3
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	f006 fc99 	bl	8008a70 <memcpy>
	// 1. Find mass center
	Point massCenter = Point_FindMassCenter(points, numPoints);
 800213e:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8002142:	f107 0208 	add.w	r2, r7, #8
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	6819      	ldr	r1, [r3, #0]
 800214e:	f7ff ff79 	bl	8002044 <Point_FindMassCenter>
	// 2. Shift points origin to mass center
	Point_MoveOrigin(points, numPoints, &massCenter);
 8002152:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8002156:	f107 0108 	add.w	r1, r7, #8
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	6809      	ldr	r1, [r1, #0]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	f7ff ffa8 	bl	80020b6 <Point_MoveOrigin>
	// 3. Convert to polar coordinates
	PolarPointWithIndex polarPointsWithIndex[POINT_MAX_NUM] = {};
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	4618      	mov	r0, r3
 800216c:	23f0      	movs	r3, #240	; 0xf0
 800216e:	461a      	mov	r2, r3
 8002170:	2100      	movs	r1, #0
 8002172:	f006 fc8b 	bl	8008a8c <memset>
	for (size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8002176:	2300      	movs	r3, #0
 8002178:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800217c:	e02c      	b.n	80021d8 <Point_SortAntiClockwise+0xd0>
	{
		polarPointsWithIndex[iPoint].point = Point_CartesianToPolar(points + iPoint);
 800217e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	f107 020c 	add.w	r2, r7, #12
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	18d0      	adds	r0, r2, r3
 800218c:	f107 0110 	add.w	r1, r7, #16
 8002190:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	18cc      	adds	r4, r1, r3
 800219e:	463b      	mov	r3, r7
 80021a0:	4601      	mov	r1, r0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff0e 	bl	8001fc4 <Point_CartesianToPolar>
 80021a8:	463a      	mov	r2, r7
 80021aa:	4623      	mov	r3, r4
 80021ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021b0:	e883 0003 	stmia.w	r3, {r0, r1}
		polarPointsWithIndex[iPoint].index = iPoint;
 80021b4:	f107 0110 	add.w	r1, r7, #16
 80021b8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3308      	adds	r3, #8
 80021c8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80021cc:	601a      	str	r2, [r3, #0]
	for (size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 80021ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80021d2:	3301      	adds	r3, #1
 80021d4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d3cb      	bcc.n	800217e <Point_SortAntiClockwise+0x76>
	}
	// 4. Sort points based on polar coordinates
	qsort(polarPointsWithIndex, numPoints, sizeof(PolarPointWithIndex), PolarPointWithIndex_compare);
 80021e6:	f107 0108 	add.w	r1, r7, #8
 80021ea:	f107 0010 	add.w	r0, r7, #16
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <Point_SortAntiClockwise+0x154>)
 80021f0:	220c      	movs	r2, #12
 80021f2:	6809      	ldr	r1, [r1, #0]
 80021f4:	f007 f8f5 	bl	80093e2 <qsort>
	// 5. Reorder original points based on the sorted order of polar points
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80021fe:	e01f      	b.n	8002240 <Point_SortAntiClockwise+0x138>
	{
		points[iPoint] = pointsOriginal[polarPointsWithIndex[iPoint].index];
 8002200:	f107 0110 	add.w	r1, r7, #16
 8002204:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	3308      	adds	r3, #8
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800221a:	00d2      	lsls	r2, r2, #3
 800221c:	f107 010c 	add.w	r1, r7, #12
 8002220:	6809      	ldr	r1, [r1, #0]
 8002222:	440a      	add	r2, r1
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 800222a:	440b      	add	r3, r1
 800222c:	3ba8      	subs	r3, #168	; 0xa8
 800222e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002232:	e882 0003 	stmia.w	r2, {r0, r1}
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8002236:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800223a:	3301      	adds	r3, #1
 800223c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002240:	f107 0308 	add.w	r3, r7, #8
 8002244:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d3d8      	bcc.n	8002200 <Point_SortAntiClockwise+0xf8>
	}
}
 800224e:	bf00      	nop
 8002250:	bf00      	nop
 8002252:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8002256:	46bd      	mov	sp, r7
 8002258:	bd90      	pop	{r4, r7, pc}
 800225a:	bf00      	nop
 800225c:	08001f4d 	.word	0x08001f4d

08002260 <ScanlineFill_BuildEdgeTable>:
 * if y-coordinates are monotonic or not
 */
static void ScanlineFill_FillEdgeData(Edge *table, const size_t maxTableSize, Edge *edge, const Point *lower, const Point *upper, int32_t yComp);

void ScanlineFill_BuildEdgeTable(Edge *table, const size_t maxTableSize, Edge *edges, const size_t maxNumEdges, const Point *points, const size_t numPoints)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b08d      	sub	sp, #52	; 0x34
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	603b      	str	r3, [r7, #0]
	// Iterate through every pair of points and create edges info
	const Point *p1 = points + (numPoints - 1);  // First edge point
 800226e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002270:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002274:	3b01      	subs	r3, #1
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800227a:	4413      	add	r3, r2
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
	const Point *p2 = NULL;  // Second point
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
	int32_t yPrev = points[numPoints - 2].y;
 8002282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002284:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002288:	3b02      	subs	r3, #2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800228e:	4413      	add	r3, r2
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	623b      	str	r3, [r7, #32]
	size_t iEdge = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	e03f      	b.n	800231e <ScanlineFill_BuildEdgeTable+0xbe>
	{
		p2 = points + iPoint;
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022a4:	4413      	add	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
		// Find lower and upper points of non-horizontal edge
		if(p1->y < p2->y)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	da16      	bge.n	80022e2 <ScanlineFill_BuildEdgeTable+0x82>
		{
			// p1 is lower, p2 is upper point, edge is going upwards
			ScanlineFill_FillEdgeData(table, maxTableSize, edges + iEdge, p1, p2, ScanlineFill_yNext(points, numPoints, iPoint));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	18d4      	adds	r4, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80022c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80022c2:	f000 f8d7 	bl	8002474 <ScanlineFill_yNext>
 80022c6:	4603      	mov	r3, r0
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	4622      	mov	r2, r4
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f92d 	bl	8002534 <ScanlineFill_FillEdgeData>
			++iEdge;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3301      	adds	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	e015      	b.n	800230e <ScanlineFill_BuildEdgeTable+0xae>
		}
		else if(p1->y > p2->y)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	dd0f      	ble.n	800230e <ScanlineFill_BuildEdgeTable+0xae>
		{
			// p2 is lower, p1 is upper point, edge is going downwards
			ScanlineFill_FillEdgeData(table, maxTableSize, edges + iEdge, p2, p1, yPrev);
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	441a      	add	r2, r3
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f916 	bl	8002534 <ScanlineFill_FillEdgeData>
			++iEdge;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	3301      	adds	r3, #1
 800230c:	61fb      	str	r3, [r7, #28]
		}
		yPrev = p1->y;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	623b      	str	r3, [r7, #32]
		p1 = p2;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	3301      	adds	r3, #1
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002322:	429a      	cmp	r2, r3
 8002324:	d3bb      	bcc.n	800229e <ScanlineFill_BuildEdgeTable+0x3e>
	}
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	372c      	adds	r7, #44	; 0x2c
 800232c:	46bd      	mov	sp, r7
 800232e:	bd90      	pop	{r4, r7, pc}

08002330 <ScanlineFill_BuildActiveEdgeList>:

void ScanlineFill_BuildActiveEdgeList(Edge *table, const size_t maxTableSize, Edge *active, int32_t yScanline)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
	Edge *scanlineEdge = table[yScanline].next, *nextScanlineEdge;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	617b      	str	r3, [r7, #20]
	// insert edges related to current scanline in the active edges list
	while(scanlineEdge)
 800234a:	e008      	b.n	800235e <ScanlineFill_BuildActiveEdgeList+0x2e>
	{
		nextScanlineEdge = scanlineEdge->next;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	613b      	str	r3, [r7, #16]
		ScanlineFill_InsertEdge(active, scanlineEdge);
 8002352:	6979      	ldr	r1, [r7, #20]
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f8bf 	bl	80024d8 <ScanlineFill_InsertEdge>
		scanlineEdge = nextScanlineEdge;
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	617b      	str	r3, [r7, #20]
	while(scanlineEdge)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f3      	bne.n	800234c <ScanlineFill_BuildActiveEdgeList+0x1c>
	}
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <ScanlineFill_UpdateActiveEdgeList>:

void ScanlineFill_UpdateActiveEdgeList(Edge *active, int32_t yScanline)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
	//1. Update edges x-coordinates
	Edge *currentEdge = active->next, *edgeBefore = active;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	613b      	str	r3, [r7, #16]
	while(currentEdge)
 8002382:	e01d      	b.n	80023c0 <ScanlineFill_UpdateActiveEdgeList+0x52>
	{
		if(yScanline >= currentEdge->yu)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	db08      	blt.n	80023a0 <ScanlineFill_UpdateActiveEdgeList+0x32>
		{
			// remove completed edges
			currentEdge = currentEdge->next;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	617b      	str	r3, [r7, #20]
			edgeBefore->next = edgeBefore->next->next;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	e00f      	b.n	80023c0 <ScanlineFill_UpdateActiveEdgeList+0x52>
		}
		else
		{
			// update edges in-progress
			currentEdge->xl = currentEdge->xl + currentEdge->dx;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	edc3 7a00 	vstr	s15, [r3]
			edgeBefore = currentEdge;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	613b      	str	r3, [r7, #16]
			currentEdge = currentEdge->next;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	617b      	str	r3, [r7, #20]
	while(currentEdge)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1de      	bne.n	8002384 <ScanlineFill_UpdateActiveEdgeList+0x16>
		}
	}
	//2. Resort list of active edges by rebuilding it
	Edge *nextEdge;
	currentEdge = active->next;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	617b      	str	r3, [r7, #20]
	active->next = NULL;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
	while(currentEdge)
 80023d2:	e008      	b.n	80023e6 <ScanlineFill_UpdateActiveEdgeList+0x78>
	{
		nextEdge = currentEdge->next;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	60fb      	str	r3, [r7, #12]
		ScanlineFill_InsertEdge(active, currentEdge);
 80023da:	6979      	ldr	r1, [r7, #20]
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f87b 	bl	80024d8 <ScanlineFill_InsertEdge>
		currentEdge = nextEdge;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	617b      	str	r3, [r7, #20]
	while(currentEdge)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f3      	bne.n	80023d4 <ScanlineFill_UpdateActiveEdgeList+0x66>
	}
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <ScanlineFill_FillScanline>:

void ScanlineFill_FillScanline(Edge *active, int32_t yScanline, color_t *data, const size_t dataWidth, const size_t dataHeight, const color_t color)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b089      	sub	sp, #36	; 0x24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	603b      	str	r3, [r7, #0]
	Edge *e1, *e2;
	e1 = active->next;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61fb      	str	r3, [r7, #28]
	while(e1)
 800240a:	e029      	b.n	8002460 <ScanlineFill_FillScanline+0x6a>
	{
		e2 = e1->next;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	617b      	str	r3, [r7, #20]
		// fill pixels between the pair of edge points
		for(int32_t x = e1->xl; x < e2->xl; ++x)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241c:	ee17 3a90 	vmov	r3, s15
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	e00d      	b.n	8002440 <ScanlineFill_FillScanline+0x4a>
		{
			data[dataWidth * yScanline + x] = color;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	fb02 f203 	mul.w	r2, r2, r3
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	4413      	add	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002438:	801a      	strh	r2, [r3, #0]
		for(int32_t x = e1->xl; x < e2->xl; ++x)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	3301      	adds	r3, #1
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	d4e4      	bmi.n	8002424 <ScanlineFill_FillScanline+0x2e>
		}
		e1 = e2->next;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	61fb      	str	r3, [r7, #28]
	while(e1)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1d2      	bne.n	800240c <ScanlineFill_FillScanline+0x16>
	}
}
 8002466:	bf00      	nop
 8002468:	bf00      	nop
 800246a:	3724      	adds	r7, #36	; 0x24
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <ScanlineFill_yNext>:

int32_t ScanlineFill_yNext(const Point *points, const size_t numPoints, const size_t iCurrentPoint)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
	size_t iNextPoint = (iCurrentPoint + 1) % numPoints;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3301      	adds	r3, #1
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	fbb3 f2f2 	udiv	r2, r3, r2
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	fb01 f202 	mul.w	r2, r1, r2
 8002490:	1a9b      	subs	r3, r3, r2
 8002492:	617b      	str	r3, [r7, #20]
	while (points[iNextPoint].y == points[iCurrentPoint].y)
 8002494:	e009      	b.n	80024aa <ScanlineFill_yNext+0x36>
	{
		iNextPoint = (iNextPoint + 1) % numPoints;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	fbb3 f2f2 	udiv	r2, r3, r2
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	fb01 f202 	mul.w	r2, r1, r2
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	617b      	str	r3, [r7, #20]
	while (points[iNextPoint].y == points[iCurrentPoint].y)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4413      	add	r3, r2
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	68f9      	ldr	r1, [r7, #12]
 80024ba:	440b      	add	r3, r1
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d0e9      	beq.n	8002496 <ScanlineFill_yNext+0x22>
	}
	return points[iNextPoint].y;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	685b      	ldr	r3, [r3, #4]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <ScanlineFill_InsertEdge>:

void ScanlineFill_InsertEdge(Edge *list, Edge *edge)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
	Edge *currentEdge = list->next, *edgeBefore = list;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	60bb      	str	r3, [r7, #8]
	while(currentEdge)
 80024ec:	e012      	b.n	8002514 <ScanlineFill_InsertEdge+0x3c>
	{
		if(edge->xl < currentEdge->xl)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002502:	d502      	bpl.n	800250a <ScanlineFill_InsertEdge+0x32>
		{
			currentEdge = NULL;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e004      	b.n	8002514 <ScanlineFill_InsertEdge+0x3c>
		}
		else
		{
			edgeBefore = currentEdge;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	60bb      	str	r3, [r7, #8]
			currentEdge = currentEdge->next;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	60fb      	str	r3, [r7, #12]
	while(currentEdge)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1e9      	bne.n	80024ee <ScanlineFill_InsertEdge+0x16>
		}
	}
	// insert the new edge in the linked list
	edge->next = edgeBefore->next;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	60da      	str	r2, [r3, #12]
	edgeBefore->next = edge;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	60da      	str	r2, [r3, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <ScanlineFill_FillEdgeData>:

void ScanlineFill_FillEdgeData(Edge *table, const size_t maxTableSize, Edge *edge, const Point *lower, const Point *upper, int32_t yComp)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
	// Fill edge info
	edge->xl = lower->x;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	edc3 7a00 	vstr	s15, [r3]
	edge->yu = (upper->y < yComp) ? upper->y - 1 : upper->y;  // adjust if edge is monotonically increasing or decreasing
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	429a      	cmp	r2, r3
 800255c:	dd03      	ble.n	8002566 <ScanlineFill_FillEdgeData+0x32>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	e001      	b.n	800256a <ScanlineFill_FillEdgeData+0x36>
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6053      	str	r3, [r2, #4]
	edge->dx = ((float)(upper->x - lower->x)) / (upper->y - lower->y);
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	edc3 7a02 	vstr	s15, [r3, #8]
	// Insert edge in edge table
	ScanlineFill_InsertEdge(table + lower->y, edge);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4413      	add	r3, r2
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff95 	bl	80024d8 <ScanlineFill_InsertEdge>
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <MX_SPI1_Init+0x64>)
 80025be:	4a18      	ldr	r2, [pc, #96]	; (8002620 <MX_SPI1_Init+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <MX_SPI1_Init+0x64>)
 80025c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <MX_SPI1_Init+0x64>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <MX_SPI1_Init+0x64>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <MX_SPI1_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MX_SPI1_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <MX_SPI1_Init+0x64>)
 80025e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <MX_SPI1_Init+0x64>)
 80025ec:	2208      	movs	r2, #8
 80025ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <MX_SPI1_Init+0x64>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <MX_SPI1_Init+0x64>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <MX_SPI1_Init+0x64>)
 80025fe:	2200      	movs	r2, #0
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_SPI1_Init+0x64>)
 8002604:	220a      	movs	r2, #10
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	; (800261c <MX_SPI1_Init+0x64>)
 800260a:	f002 fab3 	bl	8004b74 <HAL_SPI_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002614:	f7ff fc94 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	2000059c 	.word	0x2000059c
 8002620:	40013000 	.word	0x40013000

08002624 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <HAL_SPI_MspInit+0x84>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d12b      	bne.n	800269e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_SPI_MspInit+0x88>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a17      	ldr	r2, [pc, #92]	; (80026ac <HAL_SPI_MspInit+0x88>)
 8002650:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_SPI_MspInit+0x88>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_SPI_MspInit+0x88>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a10      	ldr	r2, [pc, #64]	; (80026ac <HAL_SPI_MspInit+0x88>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <HAL_SPI_MspInit+0x88>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800267e:	23e0      	movs	r3, #224	; 0xe0
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800268e:	2305      	movs	r3, #5
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	4805      	ldr	r0, [pc, #20]	; (80026b0 <HAL_SPI_MspInit+0x8c>)
 800269a:	f000 fb11 	bl	8002cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800269e:	bf00      	nop
 80026a0:	3728      	adds	r7, #40	; 0x28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40013000 	.word	0x40013000
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020000 	.word	0x40020000

080026b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_MspInit+0x4c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <HAL_MspInit+0x4c>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_MspInit+0x4c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_MspInit+0x4c>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_MspInit+0x4c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <NMI_Handler+0x4>

0800270a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <HardFault_Handler+0x4>

08002710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <MemManage_Handler+0x4>

08002716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271a:	e7fe      	b.n	800271a <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <UsageFault_Handler+0x4>

08002722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002750:	f000 f960 	bl	8002a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}

08002758 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <OTG_FS_IRQHandler+0x10>)
 800275e:	f000 fdb6 	bl	80032ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20001ac8 	.word	0x20001ac8

0800276c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
	return 1;
 8002770:	2301      	movs	r3, #1
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <_kill>:

int _kill(int pid, int sig)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002786:	f006 f949 	bl	8008a1c <__errno>
 800278a:	4603      	mov	r3, r0
 800278c:	2216      	movs	r2, #22
 800278e:	601a      	str	r2, [r3, #0]
	return -1;
 8002790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <_exit>:

void _exit (int status)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ffe7 	bl	800277c <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ae:	e7fe      	b.n	80027ae <_exit+0x12>

080027b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e00a      	b.n	80027d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027c2:	f3af 8000 	nop.w
 80027c6:	4601      	mov	r1, r0
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	60ba      	str	r2, [r7, #8]
 80027ce:	b2ca      	uxtb	r2, r1
 80027d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3301      	adds	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	dbf0      	blt.n	80027c2 <_read+0x12>
	}

return len;
 80027e0:	687b      	ldr	r3, [r7, #4]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	e009      	b.n	8002810 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	60ba      	str	r2, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3301      	adds	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	dbf1      	blt.n	80027fc <_write+0x12>
	}
	return len;
 8002818:	687b      	ldr	r3, [r7, #4]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_close>:

int _close(int file)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
	return -1;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800284a:	605a      	str	r2, [r3, #4]
	return 0;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_isatty>:

int _isatty(int file)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
	return 1;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
	return 0;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <_sbrk+0x5c>)
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <_sbrk+0x60>)
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <_sbrk+0x64>)
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <_sbrk+0x68>)
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d207      	bcs.n	80028cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028bc:	f006 f8ae 	bl	8008a1c <__errno>
 80028c0:	4603      	mov	r3, r0
 80028c2:	220c      	movs	r2, #12
 80028c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ca:	e009      	b.n	80028e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <_sbrk+0x64>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <_sbrk+0x64>)
 80028dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028de:	68fb      	ldr	r3, [r7, #12]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20020000 	.word	0x20020000
 80028ec:	00000400 	.word	0x00000400
 80028f0:	2000036c 	.word	0x2000036c
 80028f4:	20001ee0 	.word	0x20001ee0

080028f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <SystemInit+0x20>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <SystemInit+0x20>)
 8002904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800291c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002920:	480d      	ldr	r0, [pc, #52]	; (8002958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002922:	490e      	ldr	r1, [pc, #56]	; (800295c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002938:	4c0b      	ldr	r4, [pc, #44]	; (8002968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002946:	f7ff ffd7 	bl	80028f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800294a:	f006 f86d 	bl	8008a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294e:	f7fe ffeb 	bl	8001928 <main>
  bx  lr    
 8002952:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800295c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8002960:	0800c788 	.word	0x0800c788
  ldr r2, =_sbss
 8002964:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8002968:	20001ee0 	.word	0x20001ee0

0800296c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800296c:	e7fe      	b.n	800296c <ADC_IRQHandler>
	...

08002970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_Init+0x40>)
 800297a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_Init+0x40>)
 8002986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_Init+0x40>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_Init+0x40>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002998:	2003      	movs	r0, #3
 800299a:	f000 f94f 	bl	8002c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299e:	200f      	movs	r0, #15
 80029a0:	f000 f808 	bl	80029b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a4:	f7ff fe86 	bl	80026b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_InitTick+0x54>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_InitTick+0x58>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f967 	bl	8002ca6 <HAL_SYSTICK_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e00e      	b.n	8002a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b0f      	cmp	r3, #15
 80029e6:	d80a      	bhi.n	80029fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e8:	2200      	movs	r2, #0
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	f000 f92f 	bl	8002c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f4:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <HAL_InitTick+0x5c>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	20000004 	.word	0x20000004

08002a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_IncTick+0x20>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_IncTick+0x24>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_IncTick+0x24>)
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000008 	.word	0x20000008
 8002a38:	200005f4 	.word	0x200005f4

08002a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_GetTick+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	200005f4 	.word	0x200005f4

08002a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff ffee 	bl	8002a3c <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d005      	beq.n	8002a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_Delay+0x44>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a7a:	bf00      	nop
 8002a7c:	f7ff ffde 	bl	8002a3c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d8f7      	bhi.n	8002a7c <HAL_Delay+0x28>
  {
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000008 	.word	0x20000008

08002a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ace:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	60d3      	str	r3, [r2, #12]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <__NVIC_GetPriorityGrouping+0x18>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	f003 0307 	and.w	r3, r3, #7
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	db0b      	blt.n	8002b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	4907      	ldr	r1, [pc, #28]	; (8002b38 <__NVIC_EnableIRQ+0x38>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	2001      	movs	r0, #1
 8002b22:	fa00 f202 	lsl.w	r2, r0, r2
 8002b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000e100 	.word	0xe000e100

08002b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	db0a      	blt.n	8002b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	490c      	ldr	r1, [pc, #48]	; (8002b88 <__NVIC_SetPriority+0x4c>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	0112      	lsls	r2, r2, #4
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b64:	e00a      	b.n	8002b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4908      	ldr	r1, [pc, #32]	; (8002b8c <__NVIC_SetPriority+0x50>)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	3b04      	subs	r3, #4
 8002b74:	0112      	lsls	r2, r2, #4
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	440b      	add	r3, r1
 8002b7a:	761a      	strb	r2, [r3, #24]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000e100 	.word	0xe000e100
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f1c3 0307 	rsb	r3, r3, #7
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	bf28      	it	cs
 8002bae:	2304      	movcs	r3, #4
 8002bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d902      	bls.n	8002bc0 <NVIC_EncodePriority+0x30>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3b03      	subs	r3, #3
 8002bbe:	e000      	b.n	8002bc2 <NVIC_EncodePriority+0x32>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43d9      	mvns	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	4313      	orrs	r3, r2
         );
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3724      	adds	r7, #36	; 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c08:	d301      	bcc.n	8002c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00f      	b.n	8002c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <SysTick_Config+0x40>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c16:	210f      	movs	r1, #15
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	f7ff ff8e 	bl	8002b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <SysTick_Config+0x40>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <SysTick_Config+0x40>)
 8002c28:	2207      	movs	r2, #7
 8002c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	e000e010 	.word	0xe000e010

08002c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ff29 	bl	8002a9c <__NVIC_SetPriorityGrouping>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c64:	f7ff ff3e 	bl	8002ae4 <__NVIC_GetPriorityGrouping>
 8002c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f7ff ff8e 	bl	8002b90 <NVIC_EncodePriority>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff5d 	bl	8002b3c <__NVIC_SetPriority>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff31 	bl	8002b00 <__NVIC_EnableIRQ>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ffa2 	bl	8002bf8 <SysTick_Config>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	e159      	b.n	8002f90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f040 8148 	bne.w	8002f8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d005      	beq.n	8002d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d130      	bne.n	8002d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d48:	2201      	movs	r2, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 0201 	and.w	r2, r3, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d017      	beq.n	8002db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d123      	bne.n	8002e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	08da      	lsrs	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3208      	adds	r2, #8
 8002dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	08da      	lsrs	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3208      	adds	r2, #8
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0203 	and.w	r2, r3, #3
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80a2 	beq.w	8002f8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b57      	ldr	r3, [pc, #348]	; (8002fa8 <HAL_GPIO_Init+0x2e8>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	4a56      	ldr	r2, [pc, #344]	; (8002fa8 <HAL_GPIO_Init+0x2e8>)
 8002e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e54:	6453      	str	r3, [r2, #68]	; 0x44
 8002e56:	4b54      	ldr	r3, [pc, #336]	; (8002fa8 <HAL_GPIO_Init+0x2e8>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e62:	4a52      	ldr	r2, [pc, #328]	; (8002fac <HAL_GPIO_Init+0x2ec>)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3302      	adds	r3, #2
 8002e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	220f      	movs	r2, #15
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a49      	ldr	r2, [pc, #292]	; (8002fb0 <HAL_GPIO_Init+0x2f0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d019      	beq.n	8002ec2 <HAL_GPIO_Init+0x202>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a48      	ldr	r2, [pc, #288]	; (8002fb4 <HAL_GPIO_Init+0x2f4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_GPIO_Init+0x1fe>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a47      	ldr	r2, [pc, #284]	; (8002fb8 <HAL_GPIO_Init+0x2f8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00d      	beq.n	8002eba <HAL_GPIO_Init+0x1fa>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a46      	ldr	r2, [pc, #280]	; (8002fbc <HAL_GPIO_Init+0x2fc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d007      	beq.n	8002eb6 <HAL_GPIO_Init+0x1f6>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a45      	ldr	r2, [pc, #276]	; (8002fc0 <HAL_GPIO_Init+0x300>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d101      	bne.n	8002eb2 <HAL_GPIO_Init+0x1f2>
 8002eae:	2304      	movs	r3, #4
 8002eb0:	e008      	b.n	8002ec4 <HAL_GPIO_Init+0x204>
 8002eb2:	2307      	movs	r3, #7
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x204>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e004      	b.n	8002ec4 <HAL_GPIO_Init+0x204>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_Init+0x204>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x204>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f002 0203 	and.w	r2, r2, #3
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4093      	lsls	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed4:	4935      	ldr	r1, [pc, #212]	; (8002fac <HAL_GPIO_Init+0x2ec>)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee2:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f06:	4a2f      	ldr	r2, [pc, #188]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f30:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f5a:	4a1a      	ldr	r2, [pc, #104]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f60:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f84:	4a0f      	ldr	r2, [pc, #60]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	f67f aea2 	bls.w	8002cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40013c00 	.word	0x40013c00

08002fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd8:	787b      	ldrb	r3, [r7, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe4:	e003      	b.n	8002fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fe6:	887b      	ldrh	r3, [r7, #2]
 8002fe8:	041a      	lsls	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	619a      	str	r2, [r3, #24]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800300c:	887a      	ldrh	r2, [r7, #2]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4013      	ands	r3, r2
 8003012:	041a      	lsls	r2, r3, #16
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	43d9      	mvns	r1, r3
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	400b      	ands	r3, r1
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	619a      	str	r2, [r3, #24]
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800302e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003030:	b08f      	sub	sp, #60	; 0x3c
 8003032:	af0a      	add	r7, sp, #40	; 0x28
 8003034:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e10f      	b.n	8003260 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f005 f9d4 	bl	8008408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2203      	movs	r2, #3
 8003064:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f002 f91d 	bl	80052be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	687e      	ldr	r6, [r7, #4]
 800308c:	466d      	mov	r5, sp
 800308e:	f106 0410 	add.w	r4, r6, #16
 8003092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800309e:	e885 0003 	stmia.w	r5, {r0, r1}
 80030a2:	1d33      	adds	r3, r6, #4
 80030a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a6:	6838      	ldr	r0, [r7, #0]
 80030a8:	f001 fff4 	bl	8005094 <USB_CoreInit>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0d0      	b.n	8003260 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 f90b 	bl	80052e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	e04a      	b.n	8003166 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	333d      	adds	r3, #61	; 0x3d
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	333c      	adds	r3, #60	; 0x3c
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	b298      	uxth	r0, r3
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	3342      	adds	r3, #66	; 0x42
 800310c:	4602      	mov	r2, r0
 800310e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	333f      	adds	r3, #63	; 0x3f
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	3344      	adds	r3, #68	; 0x44
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	3348      	adds	r3, #72	; 0x48
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	3350      	adds	r3, #80	; 0x50
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	3301      	adds	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d3af      	bcc.n	80030d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e044      	b.n	8003200 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	3301      	adds	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d3b5      	bcc.n	8003176 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	687e      	ldr	r6, [r7, #4]
 8003212:	466d      	mov	r5, sp
 8003214:	f106 0410 	add.w	r4, r6, #16
 8003218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800321c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003220:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003224:	e885 0003 	stmia.w	r5, {r0, r1}
 8003228:	1d33      	adds	r3, r6, #4
 800322a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800322c:	6838      	ldr	r0, [r7, #0]
 800322e:	f002 f8a3 	bl	8005378 <USB_DevInit>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e00d      	b.n	8003260 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f003 f91f 	bl	800649c <USB_DevDisconnect>

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003268 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_PCD_Start+0x1c>
 8003280:	2302      	movs	r3, #2
 8003282:	e020      	b.n	80032c6 <HAL_PCD_Start+0x5e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	2b01      	cmp	r3, #1
 8003292:	d109      	bne.n	80032a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003298:	2b01      	cmp	r3, #1
 800329a:	d005      	beq.n	80032a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 fff5 	bl	800529c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 f8cf 	bl	800645a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032ce:	b590      	push	{r4, r7, lr}
 80032d0:	b08d      	sub	sp, #52	; 0x34
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f003 f98d 	bl	8006604 <USB_GetMode>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f040 839d 	bne.w	8003a2c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 f8f1 	bl	80064de <USB_ReadInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8393 	beq.w	8003a2a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f003 f8e8 	bl	80064de <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b02      	cmp	r3, #2
 8003316:	d107      	bne.n	8003328 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f002 0202 	and.w	r2, r2, #2
 8003326:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f003 f8d6 	bl	80064de <USB_ReadInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b10      	cmp	r3, #16
 800333a:	d161      	bne.n	8003400 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0210 	bic.w	r2, r2, #16
 800334a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f003 020f 	and.w	r2, r3, #15
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	3304      	adds	r3, #4
 800336a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	0c5b      	lsrs	r3, r3, #17
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	2b02      	cmp	r3, #2
 8003376:	d124      	bne.n	80033c2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d035      	beq.n	80033f0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800338e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003392:	b29b      	uxth	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	6a38      	ldr	r0, [r7, #32]
 8003398:	f002 ff0d 	bl	80061b6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a8:	441a      	add	r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ba:	441a      	add	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	619a      	str	r2, [r3, #24]
 80033c0:	e016      	b.n	80033f0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	0c5b      	lsrs	r3, r3, #17
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d110      	bne.n	80033f0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033d4:	2208      	movs	r2, #8
 80033d6:	4619      	mov	r1, r3
 80033d8:	6a38      	ldr	r0, [r7, #32]
 80033da:	f002 feec 	bl	80061b6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ea:	441a      	add	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0210 	orr.w	r2, r2, #16
 80033fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f003 f86a 	bl	80064de <USB_ReadInterrupts>
 800340a:	4603      	mov	r3, r0
 800340c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003410:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003414:	d16e      	bne.n	80034f4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f003 f870 	bl	8006504 <USB_ReadDevAllOutEpInterrupt>
 8003424:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003426:	e062      	b.n	80034ee <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d057      	beq.n	80034e2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f003 f895 	bl	800656c <USB_ReadDevOutEPInterrupt>
 8003442:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345a:	461a      	mov	r2, r3
 800345c:	2301      	movs	r3, #1
 800345e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fdb0 	bl	8003fc8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	461a      	mov	r2, r3
 8003480:	2308      	movs	r3, #8
 8003482:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 feaa 	bl	80041e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a2:	461a      	mov	r2, r3
 80034a4:	2310      	movs	r3, #16
 80034a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034be:	461a      	mov	r2, r3
 80034c0:	2320      	movs	r3, #32
 80034c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034da:	461a      	mov	r2, r3
 80034dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	3301      	adds	r3, #1
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d199      	bne.n	8003428 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f002 fff0 	bl	80064de <USB_ReadInterrupts>
 80034fe:	4603      	mov	r3, r0
 8003500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003504:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003508:	f040 80c0 	bne.w	800368c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f003 f811 	bl	8006538 <USB_ReadDevAllInEpInterrupt>
 8003516:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800351c:	e0b2      	b.n	8003684 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80a7 	beq.w	8003678 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f003 f837 	bl	80065a8 <USB_ReadDevInEPInterrupt>
 800353a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d057      	beq.n	80035f6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	2201      	movs	r2, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43db      	mvns	r3, r3
 8003560:	69f9      	ldr	r1, [r7, #28]
 8003562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003566:	4013      	ands	r3, r2
 8003568:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003576:	461a      	mov	r2, r3
 8003578:	2301      	movs	r3, #1
 800357a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d132      	bne.n	80035ea <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	3348      	adds	r3, #72	; 0x48
 8003594:	6819      	ldr	r1, [r3, #0]
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4403      	add	r3, r0
 80035a4:	3344      	adds	r3, #68	; 0x44
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4419      	add	r1, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4403      	add	r3, r0
 80035b8:	3348      	adds	r3, #72	; 0x48
 80035ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d113      	bne.n	80035ea <HAL_PCD_IRQHandler+0x31c>
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3350      	adds	r3, #80	; 0x50
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d108      	bne.n	80035ea <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035e2:	461a      	mov	r2, r3
 80035e4:	2101      	movs	r1, #1
 80035e6:	f003 f83f 	bl	8006668 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f004 ff8a 	bl	800850a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360c:	461a      	mov	r2, r3
 800360e:	2308      	movs	r3, #8
 8003610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003628:	461a      	mov	r2, r3
 800362a:	2310      	movs	r3, #16
 800362c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003644:	461a      	mov	r2, r3
 8003646:	2340      	movs	r3, #64	; 0x40
 8003648:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003660:	461a      	mov	r2, r3
 8003662:	2302      	movs	r3, #2
 8003664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fc1b 	bl	8003eae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	3301      	adds	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	f47f af49 	bne.w	800351e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f002 ff24 	bl	80064de <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800369c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036a0:	d122      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d108      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036c8:	2100      	movs	r1, #0
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fe26 	bl	800431c <HAL_PCDEx_LPM_Callback>
 80036d0:	e002      	b.n	80036d8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f004 ff86 	bl	80085e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f002 fef6 	bl	80064de <USB_ReadInterrupts>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036fc:	d112      	bne.n	8003724 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d102      	bne.n	8003714 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f004 ff42 	bl	8008598 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003722:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f002 fed8 	bl	80064de <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003738:	f040 80c7 	bne.w	80038ca <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2110      	movs	r1, #16
 8003756:	4618      	mov	r0, r3
 8003758:	f001 ff72 	bl	8005640 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375c:	2300      	movs	r3, #0
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003760:	e056      	b.n	8003810 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	461a      	mov	r2, r3
 8003770:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003774:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003790:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003794:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c2:	461a      	mov	r2, r3
 80037c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fa:	0151      	lsls	r1, r2, #5
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	440a      	add	r2, r1
 8003800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003804:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003808:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	3301      	adds	r3, #1
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003816:	429a      	cmp	r2, r3
 8003818:	d3a3      	bcc.n	8003762 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003828:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800382c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	2b00      	cmp	r3, #0
 8003834:	d016      	beq.n	8003864 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003846:	f043 030b 	orr.w	r3, r3, #11
 800384a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800385c:	f043 030b 	orr.w	r3, r3, #11
 8003860:	6453      	str	r3, [r2, #68]	; 0x44
 8003862:	e015      	b.n	8003890 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003876:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800387a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800388a:	f043 030b 	orr.w	r3, r3, #11
 800388e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800389e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038b4:	461a      	mov	r2, r3
 80038b6:	f002 fed7 	bl	8006668 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f002 fe05 	bl	80064de <USB_ReadInterrupts>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038de:	d124      	bne.n	800392a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f002 fe9b 	bl	8006620 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 ff03 	bl	80056fa <USB_GetDevSpeed>
 80038f4:	4603      	mov	r3, r0
 80038f6:	461a      	mov	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681c      	ldr	r4, [r3, #0]
 8003900:	f001 f92c 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8003904:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	4620      	mov	r0, r4
 8003910:	f001 fc22 	bl	8005158 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f004 fe20 	bl	800855a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003928:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f002 fdd5 	bl	80064de <USB_ReadInterrupts>
 8003934:	4603      	mov	r3, r0
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b08      	cmp	r3, #8
 800393c:	d10a      	bne.n	8003954 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f004 fdfd 	bl	800853e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f002 0208 	and.w	r2, r2, #8
 8003952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f002 fdc0 	bl	80064de <USB_ReadInterrupts>
 800395e:	4603      	mov	r3, r0
 8003960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003968:	d10f      	bne.n	800398a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	b2db      	uxtb	r3, r3
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f004 fe55 	bl	8008624 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003988:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f002 fda5 	bl	80064de <USB_ReadInterrupts>
 8003994:	4603      	mov	r3, r0
 8003996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800399e:	d10f      	bne.n	80039c0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f004 fe28 	bl	8008600 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f002 fd8a 	bl	80064de <USB_ReadInterrupts>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d10a      	bne.n	80039ec <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f004 fe36 	bl	8008648 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 fd74 	bl	80064de <USB_ReadInterrupts>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d115      	bne.n	8003a2c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f004 fe26 	bl	8008664 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6859      	ldr	r1, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
 8003a28:	e000      	b.n	8003a2c <HAL_PCD_IRQHandler+0x75e>
      return;
 8003a2a:	bf00      	nop
    }
  }
}
 8003a2c:	3734      	adds	r7, #52	; 0x34
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd90      	pop	{r4, r7, pc}

08003a32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_PCD_SetAddress+0x1a>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e013      	b.n	8003a74 <HAL_PCD_SetAddress+0x42>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f002 fcd2 	bl	800640e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	70fb      	strb	r3, [r7, #3]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	803b      	strh	r3, [r7, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	da0f      	bge.n	8003ac2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f003 020f 	and.w	r2, r3, #15
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	3338      	adds	r3, #56	; 0x38
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	705a      	strb	r2, [r3, #1]
 8003ac0:	e00f      	b.n	8003ae2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	f003 020f 	and.w	r2, r3, #15
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3304      	adds	r3, #4
 8003ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003aee:	883a      	ldrh	r2, [r7, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	78ba      	ldrb	r2, [r7, #2]
 8003af8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	785b      	ldrb	r3, [r3, #1]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b0c:	78bb      	ldrb	r3, [r7, #2]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d102      	bne.n	8003b18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_PCD_EP_Open+0xaa>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e00e      	b.n	8003b44 <HAL_PCD_EP_Open+0xc8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68f9      	ldr	r1, [r7, #12]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 fe05 	bl	8005744 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003b42:	7afb      	ldrb	r3, [r7, #11]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	da0f      	bge.n	8003b80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	f003 020f 	and.w	r2, r3, #15
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	3338      	adds	r3, #56	; 0x38
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	3304      	adds	r3, #4
 8003b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	705a      	strb	r2, [r3, #1]
 8003b7e:	e00f      	b.n	8003ba0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_PCD_EP_Close+0x6e>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e00e      	b.n	8003bd8 <HAL_PCD_EP_Close+0x8c>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 fe43 	bl	8005854 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	460b      	mov	r3, r1
 8003bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bf0:	7afb      	ldrb	r3, [r7, #11]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d102      	bne.n	8003c3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c3c:	7afb      	ldrb	r3, [r7, #11]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	6979      	ldr	r1, [r7, #20]
 8003c54:	f002 f91e 	bl	8005e94 <USB_EP0StartXfer>
 8003c58:	e008      	b.n	8003c6c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	6979      	ldr	r1, [r7, #20]
 8003c68:	f001 fed0 	bl	8005a0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c98:	681b      	ldr	r3, [r3, #0]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb6:	7afb      	ldrb	r3, [r7, #11]
 8003cb8:	f003 020f 	and.w	r2, r3, #15
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	3338      	adds	r3, #56	; 0x38
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	3304      	adds	r3, #4
 8003ccc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce6:	7afb      	ldrb	r3, [r7, #11]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d102      	bne.n	8003d00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	f002 f8bc 	bl	8005e94 <USB_EP0StartXfer>
 8003d1c:	e008      	b.n	8003d30 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6979      	ldr	r1, [r7, #20]
 8003d2c:	f001 fe6e 	bl	8005a0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 020f 	and.w	r2, r3, #15
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d901      	bls.n	8003d58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e050      	b.n	8003dfa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	da0f      	bge.n	8003d80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	f003 020f 	and.w	r2, r3, #15
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	3338      	adds	r3, #56	; 0x38
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	3304      	adds	r3, #4
 8003d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	705a      	strb	r2, [r3, #1]
 8003d7e:	e00d      	b.n	8003d9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	3304      	adds	r3, #4
 8003d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_PCD_EP_SetStall+0x82>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e01e      	b.n	8003dfa <HAL_PCD_EP_SetStall+0xc0>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f002 fa4b 	bl	8006266 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	b2d9      	uxtb	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dea:	461a      	mov	r2, r3
 8003dec:	f002 fc3c 	bl	8006668 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	f003 020f 	and.w	r2, r3, #15
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d901      	bls.n	8003e20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e042      	b.n	8003ea6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	da0f      	bge.n	8003e48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 020f 	and.w	r2, r3, #15
 8003e2e:	4613      	mov	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	3338      	adds	r3, #56	; 0x38
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	705a      	strb	r2, [r3, #1]
 8003e46:	e00f      	b.n	8003e68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	f003 020f 	and.w	r2, r3, #15
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3304      	adds	r3, #4
 8003e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_PCD_EP_ClrStall+0x86>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e00e      	b.n	8003ea6 <HAL_PCD_EP_ClrStall+0xa4>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68f9      	ldr	r1, [r7, #12]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f002 fa53 	bl	8006342 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b08a      	sub	sp, #40	; 0x28
 8003eb2:	af02      	add	r7, sp, #8
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	3338      	adds	r3, #56	; 0x38
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d901      	bls.n	8003ee6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e06c      	b.n	8003fc0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d902      	bls.n	8003f02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3303      	adds	r3, #3
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f0a:	e02b      	b.n	8003f64 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d902      	bls.n	8003f28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	3303      	adds	r3, #3
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68d9      	ldr	r1, [r3, #12]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4603      	mov	r3, r0
 8003f46:	6978      	ldr	r0, [r7, #20]
 8003f48:	f002 f8f7 	bl	800613a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	441a      	add	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	699a      	ldr	r2, [r3, #24]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	441a      	add	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d809      	bhi.n	8003f8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d203      	bcs.n	8003f8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1be      	bne.n	8003f0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d811      	bhi.n	8003fbe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	6939      	ldr	r1, [r7, #16]
 8003fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fba:	4013      	ands	r3, r2
 8003fbc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3720      	adds	r7, #32
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	333c      	adds	r3, #60	; 0x3c
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	f040 80a0 	bne.w	8004140 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d015      	beq.n	8004036 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a72      	ldr	r2, [pc, #456]	; (80041d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800400e:	4293      	cmp	r3, r2
 8004010:	f240 80dd 	bls.w	80041ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80d7 	beq.w	80041ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	461a      	mov	r2, r3
 800402e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004032:	6093      	str	r3, [r2, #8]
 8004034:	e0cb      	b.n	80041ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d009      	beq.n	8004054 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404c:	461a      	mov	r2, r3
 800404e:	2320      	movs	r3, #32
 8004050:	6093      	str	r3, [r2, #8]
 8004052:	e0bc      	b.n	80041ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	f040 80b7 	bne.w	80041ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a5d      	ldr	r2, [pc, #372]	; (80041d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d90f      	bls.n	8004088 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	461a      	mov	r2, r3
 8004080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004084:	6093      	str	r3, [r2, #8]
 8004086:	e0a2      	b.n	80041ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800409a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	0159      	lsls	r1, r3, #5
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	440b      	add	r3, r1
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80040ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4403      	add	r3, r0
 80040be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040d6:	6819      	ldr	r1, [r3, #0]
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4403      	add	r3, r0
 80040e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4419      	add	r1, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4403      	add	r3, r0
 80040fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004100:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d114      	bne.n	8004132 <PCD_EP_OutXfrComplete_int+0x16a>
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d108      	bne.n	8004132 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800412a:	461a      	mov	r2, r3
 800412c:	2101      	movs	r1, #1
 800412e:	f002 fa9b 	bl	8006668 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	4619      	mov	r1, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f004 f9cb 	bl	80084d4 <HAL_PCD_DataOutStageCallback>
 800413e:	e046      	b.n	80041ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a26      	ldr	r2, [pc, #152]	; (80041dc <PCD_EP_OutXfrComplete_int+0x214>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d124      	bne.n	8004192 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	461a      	mov	r2, r3
 8004160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004164:	6093      	str	r3, [r2, #8]
 8004166:	e032      	b.n	80041ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417e:	461a      	mov	r2, r3
 8004180:	2320      	movs	r3, #32
 8004182:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	4619      	mov	r1, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f004 f9a2 	bl	80084d4 <HAL_PCD_DataOutStageCallback>
 8004190:	e01d      	b.n	80041ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d114      	bne.n	80041c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d108      	bne.n	80041c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041ba:	461a      	mov	r2, r3
 80041bc:	2100      	movs	r1, #0
 80041be:	f002 fa53 	bl	8006668 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	4619      	mov	r1, r3
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f004 f983 	bl	80084d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	4f54300a 	.word	0x4f54300a
 80041dc:	4f54310a 	.word	0x4f54310a

080041e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	333c      	adds	r3, #60	; 0x3c
 80041f8:	3304      	adds	r3, #4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a15      	ldr	r2, [pc, #84]	; (8004268 <PCD_EP_OutSetupPacket_int+0x88>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d90e      	bls.n	8004234 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	461a      	mov	r2, r3
 800422e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004232:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f004 f93b 	bl	80084b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <PCD_EP_OutSetupPacket_int+0x88>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d90c      	bls.n	800425c <PCD_EP_OutSetupPacket_int+0x7c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d108      	bne.n	800425c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004254:	461a      	mov	r2, r3
 8004256:	2101      	movs	r1, #1
 8004258:	f002 fa06 	bl	8006668 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	4f54300a 	.word	0x4f54300a

0800426c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
 8004278:	4613      	mov	r3, r2
 800427a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d107      	bne.n	800429a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800428a:	883b      	ldrh	r3, [r7, #0]
 800428c:	0419      	lsls	r1, r3, #16
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	430a      	orrs	r2, r1
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
 8004298:	e028      	b.n	80042ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	4413      	add	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042a8:	2300      	movs	r3, #0
 80042aa:	73fb      	strb	r3, [r7, #15]
 80042ac:	e00d      	b.n	80042ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	3340      	adds	r3, #64	; 0x40
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4413      	add	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	3301      	adds	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d3ec      	bcc.n	80042ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042d4:	883b      	ldrh	r3, [r7, #0]
 80042d6:	0418      	lsls	r0, r3, #16
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6819      	ldr	r1, [r3, #0]
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	3b01      	subs	r3, #1
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	4302      	orrs	r2, r0
 80042e4:	3340      	adds	r3, #64	; 0x40
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	460b      	mov	r3, r1
 8004304:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	887a      	ldrh	r2, [r7, #2]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e264      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d075      	beq.n	800443e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004352:	4ba3      	ldr	r3, [pc, #652]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b04      	cmp	r3, #4
 800435c:	d00c      	beq.n	8004378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435e:	4ba0      	ldr	r3, [pc, #640]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004366:	2b08      	cmp	r3, #8
 8004368:	d112      	bne.n	8004390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436a:	4b9d      	ldr	r3, [pc, #628]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004376:	d10b      	bne.n	8004390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	4b99      	ldr	r3, [pc, #612]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d05b      	beq.n	800443c <HAL_RCC_OscConfig+0x108>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d157      	bne.n	800443c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e23f      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d106      	bne.n	80043a8 <HAL_RCC_OscConfig+0x74>
 800439a:	4b91      	ldr	r3, [pc, #580]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a90      	ldr	r2, [pc, #576]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e01d      	b.n	80043e4 <HAL_RCC_OscConfig+0xb0>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCC_OscConfig+0x98>
 80043b2:	4b8b      	ldr	r3, [pc, #556]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a8a      	ldr	r2, [pc, #552]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4b88      	ldr	r3, [pc, #544]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a87      	ldr	r2, [pc, #540]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e00b      	b.n	80043e4 <HAL_RCC_OscConfig+0xb0>
 80043cc:	4b84      	ldr	r3, [pc, #528]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a83      	ldr	r2, [pc, #524]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80043d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b81      	ldr	r3, [pc, #516]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a80      	ldr	r2, [pc, #512]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80043de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d013      	beq.n	8004414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ec:	f7fe fb26 	bl	8002a3c <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f4:	f7fe fb22 	bl	8002a3c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e204      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	4b76      	ldr	r3, [pc, #472]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0xc0>
 8004412:	e014      	b.n	800443e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fe fb12 	bl	8002a3c <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800441c:	f7fe fb0e 	bl	8002a3c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e1f0      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442e:	4b6c      	ldr	r3, [pc, #432]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0xe8>
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d063      	beq.n	8004512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800444a:	4b65      	ldr	r3, [pc, #404]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004456:	4b62      	ldr	r3, [pc, #392]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800445e:	2b08      	cmp	r3, #8
 8004460:	d11c      	bne.n	800449c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004462:	4b5f      	ldr	r3, [pc, #380]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d116      	bne.n	800449c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	4b5c      	ldr	r3, [pc, #368]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_RCC_OscConfig+0x152>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d001      	beq.n	8004486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e1c4      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b56      	ldr	r3, [pc, #344]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4952      	ldr	r1, [pc, #328]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449a:	e03a      	b.n	8004512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d020      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a4:	4b4f      	ldr	r3, [pc, #316]	; (80045e4 <HAL_RCC_OscConfig+0x2b0>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044aa:	f7fe fac7 	bl	8002a3c <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b2:	f7fe fac3 	bl	8002a3c <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e1a5      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c4:	4b46      	ldr	r3, [pc, #280]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d0:	4b43      	ldr	r3, [pc, #268]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4940      	ldr	r1, [pc, #256]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]
 80044e4:	e015      	b.n	8004512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e6:	4b3f      	ldr	r3, [pc, #252]	; (80045e4 <HAL_RCC_OscConfig+0x2b0>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fe faa6 	bl	8002a3c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f4:	f7fe faa2 	bl	8002a3c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e184      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	4b36      	ldr	r3, [pc, #216]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d030      	beq.n	8004580 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004526:	4b30      	ldr	r3, [pc, #192]	; (80045e8 <HAL_RCC_OscConfig+0x2b4>)
 8004528:	2201      	movs	r2, #1
 800452a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fe fa86 	bl	8002a3c <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004534:	f7fe fa82 	bl	8002a3c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e164      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004546:	4b26      	ldr	r3, [pc, #152]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x200>
 8004552:	e015      	b.n	8004580 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004554:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <HAL_RCC_OscConfig+0x2b4>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455a:	f7fe fa6f 	bl	8002a3c <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004562:	f7fe fa6b 	bl	8002a3c <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e14d      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f0      	bne.n	8004562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a0 	beq.w	80046ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004592:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	4a0e      	ldr	r2, [pc, #56]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ac:	6413      	str	r3, [r2, #64]	; 0x40
 80045ae:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCC_OscConfig+0x2b8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d121      	bne.n	800460e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <HAL_RCC_OscConfig+0x2b8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a07      	ldr	r2, [pc, #28]	; (80045ec <HAL_RCC_OscConfig+0x2b8>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d6:	f7fe fa31 	bl	8002a3c <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	e011      	b.n	8004602 <HAL_RCC_OscConfig+0x2ce>
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800
 80045e4:	42470000 	.word	0x42470000
 80045e8:	42470e80 	.word	0x42470e80
 80045ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f0:	f7fe fa24 	bl	8002a3c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e106      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004602:	4b85      	ldr	r3, [pc, #532]	; (8004818 <HAL_RCC_OscConfig+0x4e4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d106      	bne.n	8004624 <HAL_RCC_OscConfig+0x2f0>
 8004616:	4b81      	ldr	r3, [pc, #516]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	4a80      	ldr	r2, [pc, #512]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6713      	str	r3, [r2, #112]	; 0x70
 8004622:	e01c      	b.n	800465e <HAL_RCC_OscConfig+0x32a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b05      	cmp	r3, #5
 800462a:	d10c      	bne.n	8004646 <HAL_RCC_OscConfig+0x312>
 800462c:	4b7b      	ldr	r3, [pc, #492]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	4a7a      	ldr	r2, [pc, #488]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 8004632:	f043 0304 	orr.w	r3, r3, #4
 8004636:	6713      	str	r3, [r2, #112]	; 0x70
 8004638:	4b78      	ldr	r3, [pc, #480]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	4a77      	ldr	r2, [pc, #476]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6713      	str	r3, [r2, #112]	; 0x70
 8004644:	e00b      	b.n	800465e <HAL_RCC_OscConfig+0x32a>
 8004646:	4b75      	ldr	r3, [pc, #468]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	4a74      	ldr	r2, [pc, #464]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	6713      	str	r3, [r2, #112]	; 0x70
 8004652:	4b72      	ldr	r3, [pc, #456]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	4a71      	ldr	r2, [pc, #452]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 8004658:	f023 0304 	bic.w	r3, r3, #4
 800465c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d015      	beq.n	8004692 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004666:	f7fe f9e9 	bl	8002a3c <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466c:	e00a      	b.n	8004684 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fe f9e5 	bl	8002a3c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	; 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e0c5      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004684:	4b65      	ldr	r3, [pc, #404]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ee      	beq.n	800466e <HAL_RCC_OscConfig+0x33a>
 8004690:	e014      	b.n	80046bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004692:	f7fe f9d3 	bl	8002a3c <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004698:	e00a      	b.n	80046b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fe f9cf 	bl	8002a3c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e0af      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b0:	4b5a      	ldr	r3, [pc, #360]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ee      	bne.n	800469a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d105      	bne.n	80046ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c2:	4b56      	ldr	r3, [pc, #344]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	4a55      	ldr	r2, [pc, #340]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 80046c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 809b 	beq.w	800480e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046d8:	4b50      	ldr	r3, [pc, #320]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d05c      	beq.n	800479e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d141      	bne.n	8004770 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ec:	4b4c      	ldr	r3, [pc, #304]	; (8004820 <HAL_RCC_OscConfig+0x4ec>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fe f9a3 	bl	8002a3c <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fa:	f7fe f99f 	bl	8002a3c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e081      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470c:	4b43      	ldr	r3, [pc, #268]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f0      	bne.n	80046fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	019b      	lsls	r3, r3, #6
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	3b01      	subs	r3, #1
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	061b      	lsls	r3, r3, #24
 800473c:	4937      	ldr	r1, [pc, #220]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 800473e:	4313      	orrs	r3, r2
 8004740:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004742:	4b37      	ldr	r3, [pc, #220]	; (8004820 <HAL_RCC_OscConfig+0x4ec>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fe f978 	bl	8002a3c <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004750:	f7fe f974 	bl	8002a3c <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e056      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004762:	4b2e      	ldr	r3, [pc, #184]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x41c>
 800476e:	e04e      	b.n	800480e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004770:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <HAL_RCC_OscConfig+0x4ec>)
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004776:	f7fe f961 	bl	8002a3c <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800477e:	f7fe f95d 	bl	8002a3c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e03f      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004790:	4b22      	ldr	r3, [pc, #136]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f0      	bne.n	800477e <HAL_RCC_OscConfig+0x44a>
 800479c:	e037      	b.n	800480e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e032      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047aa:	4b1c      	ldr	r3, [pc, #112]	; (800481c <HAL_RCC_OscConfig+0x4e8>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d028      	beq.n	800480a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d121      	bne.n	800480a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d11a      	bne.n	800480a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047da:	4013      	ands	r3, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d111      	bne.n	800480a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	3b01      	subs	r3, #1
 80047f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d107      	bne.n	800480a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d001      	beq.n	800480e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40007000 	.word	0x40007000
 800481c:	40023800 	.word	0x40023800
 8004820:	42470060 	.word	0x42470060

08004824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0cc      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4b68      	ldr	r3, [pc, #416]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d90c      	bls.n	8004860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b65      	ldr	r3, [pc, #404]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b63      	ldr	r3, [pc, #396]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0b8      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d020      	beq.n	80048ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004878:	4b59      	ldr	r3, [pc, #356]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a58      	ldr	r2, [pc, #352]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a52      	ldr	r2, [pc, #328]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800489a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489c:	4b50      	ldr	r3, [pc, #320]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	494d      	ldr	r1, [pc, #308]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d044      	beq.n	8004944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b47      	ldr	r3, [pc, #284]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d119      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e07f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d003      	beq.n	80048e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e2:	4b3f      	ldr	r3, [pc, #252]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e06f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e067      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4934      	ldr	r1, [pc, #208]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004914:	f7fe f892 	bl	8002a3c <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fe f88e 	bl	8002a3c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	; 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e04f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d20c      	bcs.n	800496c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b22      	ldr	r3, [pc, #136]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e032      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4916      	ldr	r1, [pc, #88]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	490e      	ldr	r1, [pc, #56]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049aa:	f000 f821 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 80049ae:	4602      	mov	r2, r0
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	490a      	ldr	r1, [pc, #40]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	5ccb      	ldrb	r3, [r1, r3]
 80049be:	fa22 f303 	lsr.w	r3, r2, r3
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd fff2 	bl	80029b4 <HAL_InitTick>

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023c00 	.word	0x40023c00
 80049e0:	40023800 	.word	0x40023800
 80049e4:	0800c314 	.word	0x0800c314
 80049e8:	20000000 	.word	0x20000000
 80049ec:	20000004 	.word	0x20000004

080049f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f0:	b5b0      	push	{r4, r5, r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049f6:	2100      	movs	r1, #0
 80049f8:	6079      	str	r1, [r7, #4]
 80049fa:	2100      	movs	r1, #0
 80049fc:	60f9      	str	r1, [r7, #12]
 80049fe:	2100      	movs	r1, #0
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a02:	2100      	movs	r1, #0
 8004a04:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a06:	4952      	ldr	r1, [pc, #328]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a08:	6889      	ldr	r1, [r1, #8]
 8004a0a:	f001 010c 	and.w	r1, r1, #12
 8004a0e:	2908      	cmp	r1, #8
 8004a10:	d00d      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x3e>
 8004a12:	2908      	cmp	r1, #8
 8004a14:	f200 8094 	bhi.w	8004b40 <HAL_RCC_GetSysClockFreq+0x150>
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x32>
 8004a1c:	2904      	cmp	r1, #4
 8004a1e:	d003      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x38>
 8004a20:	e08e      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a22:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x164>)
 8004a24:	60bb      	str	r3, [r7, #8]
       break;
 8004a26:	e08e      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a28:	4b4b      	ldr	r3, [pc, #300]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a2a:	60bb      	str	r3, [r7, #8]
      break;
 8004a2c:	e08b      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a2e:	4948      	ldr	r1, [pc, #288]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a30:	6849      	ldr	r1, [r1, #4]
 8004a32:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004a36:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a38:	4945      	ldr	r1, [pc, #276]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a3a:	6849      	ldr	r1, [r1, #4]
 8004a3c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004a40:	2900      	cmp	r1, #0
 8004a42:	d024      	beq.n	8004a8e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a44:	4942      	ldr	r1, [pc, #264]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a46:	6849      	ldr	r1, [r1, #4]
 8004a48:	0989      	lsrs	r1, r1, #6
 8004a4a:	4608      	mov	r0, r1
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004a54:	f04f 0500 	mov.w	r5, #0
 8004a58:	ea00 0204 	and.w	r2, r0, r4
 8004a5c:	ea01 0305 	and.w	r3, r1, r5
 8004a60:	493d      	ldr	r1, [pc, #244]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a62:	fb01 f003 	mul.w	r0, r1, r3
 8004a66:	2100      	movs	r1, #0
 8004a68:	fb01 f102 	mul.w	r1, r1, r2
 8004a6c:	1844      	adds	r4, r0, r1
 8004a6e:	493a      	ldr	r1, [pc, #232]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a70:	fba2 0101 	umull	r0, r1, r2, r1
 8004a74:	1863      	adds	r3, r4, r1
 8004a76:	4619      	mov	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	f7fc f8ea 	bl	8000c58 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4613      	mov	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e04a      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	461a      	mov	r2, r3
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	ea02 0400 	and.w	r4, r2, r0
 8004aa6:	ea03 0501 	and.w	r5, r3, r1
 8004aaa:	4620      	mov	r0, r4
 8004aac:	4629      	mov	r1, r5
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	014b      	lsls	r3, r1, #5
 8004ab8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004abc:	0142      	lsls	r2, r0, #5
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	1b00      	subs	r0, r0, r4
 8004ac4:	eb61 0105 	sbc.w	r1, r1, r5
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	018b      	lsls	r3, r1, #6
 8004ad2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ad6:	0182      	lsls	r2, r0, #6
 8004ad8:	1a12      	subs	r2, r2, r0
 8004ada:	eb63 0301 	sbc.w	r3, r3, r1
 8004ade:	f04f 0000 	mov.w	r0, #0
 8004ae2:	f04f 0100 	mov.w	r1, #0
 8004ae6:	00d9      	lsls	r1, r3, #3
 8004ae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aec:	00d0      	lsls	r0, r2, #3
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	1912      	adds	r2, r2, r4
 8004af4:	eb45 0303 	adc.w	r3, r5, r3
 8004af8:	f04f 0000 	mov.w	r0, #0
 8004afc:	f04f 0100 	mov.w	r1, #0
 8004b00:	0299      	lsls	r1, r3, #10
 8004b02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b06:	0290      	lsls	r0, r2, #10
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	f7fc f89e 	bl	8000c58 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4613      	mov	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b24:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3c:	60bb      	str	r3, [r7, #8]
      break;
 8004b3e:	e002      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b40:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x164>)
 8004b42:	60bb      	str	r3, [r7, #8]
      break;
 8004b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b46:	68bb      	ldr	r3, [r7, #8]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b50:	40023800 	.word	0x40023800
 8004b54:	00f42400 	.word	0x00f42400
 8004b58:	017d7840 	.word	0x017d7840

08004b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b60:	4b03      	ldr	r3, [pc, #12]	; (8004b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b62:	681b      	ldr	r3, [r3, #0]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20000000 	.word	0x20000000

08004b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e07b      	b.n	8004c7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d108      	bne.n	8004ba0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b96:	d009      	beq.n	8004bac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	61da      	str	r2, [r3, #28]
 8004b9e:	e005      	b.n	8004bac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fd fd2c 	bl	8002624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c30:	ea42 0103 	orr.w	r1, r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	f003 0104 	and.w	r1, r3, #4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	f003 0210 	and.w	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b088      	sub	sp, #32
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_SPI_Transmit+0x22>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e126      	b.n	8004ef6 <HAL_SPI_Transmit+0x270>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb0:	f7fd fec4 	bl	8002a3c <HAL_GetTick>
 8004cb4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d002      	beq.n	8004ccc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cca:	e10b      	b.n	8004ee4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_SPI_Transmit+0x52>
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cdc:	e102      	b.n	8004ee4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	88fa      	ldrh	r2, [r7, #6]
 8004cf6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	88fa      	ldrh	r2, [r7, #6]
 8004cfc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d24:	d10f      	bne.n	8004d46 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d007      	beq.n	8004d64 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6c:	d14b      	bne.n	8004e06 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_SPI_Transmit+0xf6>
 8004d76:	8afb      	ldrh	r3, [r7, #22]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d13e      	bne.n	8004dfa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004da0:	e02b      	b.n	8004dfa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d112      	bne.n	8004dd6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	881a      	ldrh	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	1c9a      	adds	r2, r3, #2
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dd4:	e011      	b.n	8004dfa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd6:	f7fd fe31 	bl	8002a3c <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d803      	bhi.n	8004dee <HAL_SPI_Transmit+0x168>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d102      	bne.n	8004df4 <HAL_SPI_Transmit+0x16e>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004df8:	e074      	b.n	8004ee4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ce      	bne.n	8004da2 <HAL_SPI_Transmit+0x11c>
 8004e04:	e04c      	b.n	8004ea0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_SPI_Transmit+0x18e>
 8004e0e:	8afb      	ldrh	r3, [r7, #22]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d140      	bne.n	8004e96 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	330c      	adds	r3, #12
 8004e1e:	7812      	ldrb	r2, [r2, #0]
 8004e20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e3a:	e02c      	b.n	8004e96 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d113      	bne.n	8004e72 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	7812      	ldrb	r2, [r2, #0]
 8004e56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e70:	e011      	b.n	8004e96 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e72:	f7fd fde3 	bl	8002a3c <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d803      	bhi.n	8004e8a <HAL_SPI_Transmit+0x204>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e88:	d102      	bne.n	8004e90 <HAL_SPI_Transmit+0x20a>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e94:	e026      	b.n	8004ee4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1cd      	bne.n	8004e3c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f8b3 	bl	8005010 <SPI_EndRxTxTransaction>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e000      	b.n	8004ee4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004ee2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f10:	f7fd fd94 	bl	8002a3c <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f20:	f7fd fd8c 	bl	8002a3c <HAL_GetTick>
 8004f24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	015b      	lsls	r3, r3, #5
 8004f2c:	0d1b      	lsrs	r3, r3, #20
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	fb02 f303 	mul.w	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f36:	e054      	b.n	8004fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	d050      	beq.n	8004fe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f40:	f7fd fd7c 	bl	8002a3c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d902      	bls.n	8004f56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d13d      	bne.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6e:	d111      	bne.n	8004f94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f78:	d004      	beq.n	8004f84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f82:	d107      	bne.n	8004f94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f9c:	d10f      	bne.n	8004fbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e017      	b.n	8005002 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d19b      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000000 	.word	0x20000000

08005010 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800501c:	4b1b      	ldr	r3, [pc, #108]	; (800508c <SPI_EndRxTxTransaction+0x7c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <SPI_EndRxTxTransaction+0x80>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	0d5b      	lsrs	r3, r3, #21
 8005028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800503a:	d112      	bne.n	8005062 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2200      	movs	r2, #0
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7ff ff5a 	bl	8004f00 <SPI_WaitFlagStateUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	f043 0220 	orr.w	r2, r3, #32
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e00f      	b.n	8005082 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3b01      	subs	r3, #1
 800506c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005078:	2b80      	cmp	r3, #128	; 0x80
 800507a:	d0f2      	beq.n	8005062 <SPI_EndRxTxTransaction+0x52>
 800507c:	e000      	b.n	8005080 <SPI_EndRxTxTransaction+0x70>
        break;
 800507e:	bf00      	nop
  }

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20000000 	.word	0x20000000
 8005090:	165e9f81 	.word	0x165e9f81

08005094 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005094:	b084      	sub	sp, #16
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	f107 001c 	add.w	r0, r7, #28
 80050a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d122      	bne.n	80050f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f001 fb1c 	bl	8006724 <USB_CoreReset>
 80050ec:	4603      	mov	r3, r0
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	e01a      	b.n	8005128 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f001 fb10 	bl	8006724 <USB_CoreReset>
 8005104:	4603      	mov	r3, r0
 8005106:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	639a      	str	r2, [r3, #56]	; 0x38
 800511a:	e005      	b.n	8005128 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	2b01      	cmp	r3, #1
 800512c:	d10b      	bne.n	8005146 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f043 0206 	orr.w	r2, r3, #6
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005152:	b004      	add	sp, #16
 8005154:	4770      	bx	lr
	...

08005158 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	4613      	mov	r3, r2
 8005164:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d165      	bne.n	8005238 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4a41      	ldr	r2, [pc, #260]	; (8005274 <USB_SetTurnaroundTime+0x11c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d906      	bls.n	8005182 <USB_SetTurnaroundTime+0x2a>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4a40      	ldr	r2, [pc, #256]	; (8005278 <USB_SetTurnaroundTime+0x120>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d202      	bcs.n	8005182 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800517c:	230f      	movs	r3, #15
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e062      	b.n	8005248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4a3c      	ldr	r2, [pc, #240]	; (8005278 <USB_SetTurnaroundTime+0x120>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d306      	bcc.n	8005198 <USB_SetTurnaroundTime+0x40>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4a3b      	ldr	r2, [pc, #236]	; (800527c <USB_SetTurnaroundTime+0x124>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d202      	bcs.n	8005198 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005192:	230e      	movs	r3, #14
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e057      	b.n	8005248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a38      	ldr	r2, [pc, #224]	; (800527c <USB_SetTurnaroundTime+0x124>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d306      	bcc.n	80051ae <USB_SetTurnaroundTime+0x56>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4a37      	ldr	r2, [pc, #220]	; (8005280 <USB_SetTurnaroundTime+0x128>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d202      	bcs.n	80051ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051a8:	230d      	movs	r3, #13
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e04c      	b.n	8005248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4a33      	ldr	r2, [pc, #204]	; (8005280 <USB_SetTurnaroundTime+0x128>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d306      	bcc.n	80051c4 <USB_SetTurnaroundTime+0x6c>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4a32      	ldr	r2, [pc, #200]	; (8005284 <USB_SetTurnaroundTime+0x12c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d802      	bhi.n	80051c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051be:	230c      	movs	r3, #12
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	e041      	b.n	8005248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a2f      	ldr	r2, [pc, #188]	; (8005284 <USB_SetTurnaroundTime+0x12c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d906      	bls.n	80051da <USB_SetTurnaroundTime+0x82>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4a2e      	ldr	r2, [pc, #184]	; (8005288 <USB_SetTurnaroundTime+0x130>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d802      	bhi.n	80051da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051d4:	230b      	movs	r3, #11
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e036      	b.n	8005248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <USB_SetTurnaroundTime+0x130>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d906      	bls.n	80051f0 <USB_SetTurnaroundTime+0x98>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4a29      	ldr	r2, [pc, #164]	; (800528c <USB_SetTurnaroundTime+0x134>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d802      	bhi.n	80051f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80051ea:	230a      	movs	r3, #10
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e02b      	b.n	8005248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4a26      	ldr	r2, [pc, #152]	; (800528c <USB_SetTurnaroundTime+0x134>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d906      	bls.n	8005206 <USB_SetTurnaroundTime+0xae>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4a25      	ldr	r2, [pc, #148]	; (8005290 <USB_SetTurnaroundTime+0x138>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d202      	bcs.n	8005206 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005200:	2309      	movs	r3, #9
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e020      	b.n	8005248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a21      	ldr	r2, [pc, #132]	; (8005290 <USB_SetTurnaroundTime+0x138>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d306      	bcc.n	800521c <USB_SetTurnaroundTime+0xc4>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4a20      	ldr	r2, [pc, #128]	; (8005294 <USB_SetTurnaroundTime+0x13c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d802      	bhi.n	800521c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005216:	2308      	movs	r3, #8
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e015      	b.n	8005248 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <USB_SetTurnaroundTime+0x13c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d906      	bls.n	8005232 <USB_SetTurnaroundTime+0xda>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <USB_SetTurnaroundTime+0x140>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d202      	bcs.n	8005232 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800522c:	2307      	movs	r3, #7
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	e00a      	b.n	8005248 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005232:	2306      	movs	r3, #6
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e007      	b.n	8005248 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800523e:	2309      	movs	r3, #9
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e001      	b.n	8005248 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005244:	2309      	movs	r3, #9
 8005246:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	029b      	lsls	r3, r3, #10
 800525c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005260:	431a      	orrs	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	00d8acbf 	.word	0x00d8acbf
 8005278:	00e4e1c0 	.word	0x00e4e1c0
 800527c:	00f42400 	.word	0x00f42400
 8005280:	01067380 	.word	0x01067380
 8005284:	011a499f 	.word	0x011a499f
 8005288:	01312cff 	.word	0x01312cff
 800528c:	014ca43f 	.word	0x014ca43f
 8005290:	016e3600 	.word	0x016e3600
 8005294:	01a6ab1f 	.word	0x01a6ab1f
 8005298:	01e84800 	.word	0x01e84800

0800529c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f043 0201 	orr.w	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 0201 	bic.w	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d115      	bne.n	800532e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800530e:	2001      	movs	r0, #1
 8005310:	f7fd fba0 	bl	8002a54 <HAL_Delay>
      ms++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 f972 	bl	8006604 <USB_GetMode>
 8005320:	4603      	mov	r3, r0
 8005322:	2b01      	cmp	r3, #1
 8005324:	d01e      	beq.n	8005364 <USB_SetCurrentMode+0x84>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b31      	cmp	r3, #49	; 0x31
 800532a:	d9f0      	bls.n	800530e <USB_SetCurrentMode+0x2e>
 800532c:	e01a      	b.n	8005364 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d115      	bne.n	8005360 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005340:	2001      	movs	r0, #1
 8005342:	f7fd fb87 	bl	8002a54 <HAL_Delay>
      ms++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f001 f959 	bl	8006604 <USB_GetMode>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <USB_SetCurrentMode+0x84>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b31      	cmp	r3, #49	; 0x31
 800535c:	d9f0      	bls.n	8005340 <USB_SetCurrentMode+0x60>
 800535e:	e001      	b.n	8005364 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e005      	b.n	8005370 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b32      	cmp	r3, #50	; 0x32
 8005368:	d101      	bne.n	800536e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005378:	b084      	sub	sp, #16
 800537a:	b580      	push	{r7, lr}
 800537c:	b086      	sub	sp, #24
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	e009      	b.n	80053ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3340      	adds	r3, #64	; 0x40
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	2200      	movs	r2, #0
 80053a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	3301      	adds	r3, #1
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b0e      	cmp	r3, #14
 80053b0:	d9f2      	bls.n	8005398 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11c      	bne.n	80053f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c6:	f043 0302 	orr.w	r3, r3, #2
 80053ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
 80053f0:	e00b      	b.n	800540a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005410:	461a      	mov	r2, r3
 8005412:	2300      	movs	r3, #0
 8005414:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541c:	4619      	mov	r1, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005424:	461a      	mov	r2, r3
 8005426:	680b      	ldr	r3, [r1, #0]
 8005428:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	2b01      	cmp	r3, #1
 800542e:	d10c      	bne.n	800544a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005436:	2100      	movs	r1, #0
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f945 	bl	80056c8 <USB_SetDevSpeed>
 800543e:	e008      	b.n	8005452 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005440:	2101      	movs	r1, #1
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f940 	bl	80056c8 <USB_SetDevSpeed>
 8005448:	e003      	b.n	8005452 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800544a:	2103      	movs	r1, #3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f93b 	bl	80056c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005452:	2110      	movs	r1, #16
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8f3 	bl	8005640 <USB_FlushTxFifo>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f90f 	bl	8005688 <USB_FlushRxFifo>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	461a      	mov	r2, r3
 800547c:	2300      	movs	r3, #0
 800547e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	461a      	mov	r2, r3
 8005488:	2300      	movs	r3, #0
 800548a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	461a      	mov	r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	e043      	b.n	8005526 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b4:	d118      	bne.n	80054e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	461a      	mov	r2, r3
 80054ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	e013      	b.n	80054fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	461a      	mov	r2, r3
 80054e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e008      	b.n	80054fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005506:	461a      	mov	r2, r3
 8005508:	2300      	movs	r3, #0
 800550a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	461a      	mov	r2, r3
 800551a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800551e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	3301      	adds	r3, #1
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	429a      	cmp	r2, r3
 800552c:	d3b7      	bcc.n	800549e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	e043      	b.n	80055bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800554a:	d118      	bne.n	800557e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555e:	461a      	mov	r2, r3
 8005560:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e013      	b.n	8005590 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	461a      	mov	r2, r3
 8005576:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e008      	b.n	8005590 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	461a      	mov	r2, r3
 800558c:	2300      	movs	r3, #0
 800558e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	461a      	mov	r2, r3
 800559e:	2300      	movs	r3, #0
 80055a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	461a      	mov	r2, r3
 80055b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3301      	adds	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d3b7      	bcc.n	8005534 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d105      	bne.n	80055f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f043 0210 	orr.w	r2, r3, #16
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <USB_DevInit+0x2c4>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f043 0208 	orr.w	r2, r3, #8
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d107      	bne.n	800562c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005624:	f043 0304 	orr.w	r3, r3, #4
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005638:	b004      	add	sp, #16
 800563a:	4770      	bx	lr
 800563c:	803c3800 	.word	0x803c3800

08005640 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	019b      	lsls	r3, r3, #6
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3301      	adds	r3, #1
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	4a08      	ldr	r2, [pc, #32]	; (8005684 <USB_FlushTxFifo+0x44>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e006      	b.n	8005678 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b20      	cmp	r3, #32
 8005674:	d0f1      	beq.n	800565a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	00030d40 	.word	0x00030d40

08005688 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2210      	movs	r2, #16
 8005698:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3301      	adds	r3, #1
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <USB_FlushRxFifo+0x3c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d901      	bls.n	80056aa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e006      	b.n	80056b8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d0f1      	beq.n	800569a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	00030d40 	.word	0x00030d40

080056c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e8:	4313      	orrs	r3, r2
 80056ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b087      	sub	sp, #28
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 0306 	and.w	r3, r3, #6
 8005712:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d102      	bne.n	8005720 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800571a:	2300      	movs	r3, #0
 800571c:	75fb      	strb	r3, [r7, #23]
 800571e:	e00a      	b.n	8005736 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d002      	beq.n	800572c <USB_GetDevSpeed+0x32>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b06      	cmp	r3, #6
 800572a:	d102      	bne.n	8005732 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800572c:	2302      	movs	r3, #2
 800572e:	75fb      	strb	r3, [r7, #23]
 8005730:	e001      	b.n	8005736 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005732:	230f      	movs	r3, #15
 8005734:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005736:	7dfb      	ldrb	r3, [r7, #23]
}
 8005738:	4618      	mov	r0, r3
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d13a      	bne.n	80057d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005766:	69da      	ldr	r2, [r3, #28]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	2101      	movs	r1, #1
 8005772:	fa01 f303 	lsl.w	r3, r1, r3
 8005776:	b29b      	uxth	r3, r3
 8005778:	68f9      	ldr	r1, [r7, #12]
 800577a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800577e:	4313      	orrs	r3, r2
 8005780:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d155      	bne.n	8005844 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	78db      	ldrb	r3, [r3, #3]
 80057b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	059b      	lsls	r3, r3, #22
 80057ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057bc:	4313      	orrs	r3, r2
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	e036      	b.n	8005844 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	2101      	movs	r1, #1
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	041b      	lsls	r3, r3, #16
 80057ee:	68f9      	ldr	r1, [r7, #12]
 80057f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d11a      	bne.n	8005844 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	78db      	ldrb	r3, [r3, #3]
 8005828:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800582a:	430b      	orrs	r3, r1
 800582c:	4313      	orrs	r3, r2
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800583a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800583e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005842:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d161      	bne.n	8005934 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005886:	d11f      	bne.n	80058c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	2101      	movs	r1, #1
 80058da:	fa01 f303 	lsl.w	r3, r1, r3
 80058de:	b29b      	uxth	r3, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	68f9      	ldr	r1, [r7, #12]
 80058e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e8:	4013      	ands	r3, r2
 80058ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	2101      	movs	r1, #1
 80058fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005902:	b29b      	uxth	r3, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800590c:	4013      	ands	r3, r2
 800590e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	0159      	lsls	r1, r3, #5
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	440b      	add	r3, r1
 8005926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592a:	4619      	mov	r1, r3
 800592c:	4b35      	ldr	r3, [pc, #212]	; (8005a04 <USB_DeactivateEndpoint+0x1b0>)
 800592e:	4013      	ands	r3, r2
 8005930:	600b      	str	r3, [r1, #0]
 8005932:	e060      	b.n	80059f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800594a:	d11f      	bne.n	800598c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005966:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800596a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800598a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	2101      	movs	r1, #1
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	43db      	mvns	r3, r3
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ac:	4013      	ands	r3, r2
 80059ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	2101      	movs	r1, #1
 80059c2:	fa01 f303 	lsl.w	r3, r1, r3
 80059c6:	041b      	lsls	r3, r3, #16
 80059c8:	43db      	mvns	r3, r3
 80059ca:	68f9      	ldr	r1, [r7, #12]
 80059cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059d0:	4013      	ands	r3, r2
 80059d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	0159      	lsls	r1, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	440b      	add	r3, r1
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	4619      	mov	r1, r3
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <USB_DeactivateEndpoint+0x1b4>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	ec337800 	.word	0xec337800
 8005a08:	eff37800 	.word	0xeff37800

08005a0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08a      	sub	sp, #40	; 0x28
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	4613      	mov	r3, r2
 8005a18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	f040 815c 	bne.w	8005ce6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d132      	bne.n	8005a9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	0151      	lsls	r1, r2, #5
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	440a      	add	r2, r1
 8005a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a94:	0cdb      	lsrs	r3, r3, #19
 8005a96:	04db      	lsls	r3, r3, #19
 8005a98:	6113      	str	r3, [r2, #16]
 8005a9a:	e074      	b.n	8005b86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab6:	0cdb      	lsrs	r3, r3, #19
 8005ab8:	04db      	lsls	r3, r3, #19
 8005aba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	0151      	lsls	r1, r2, #5
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ada:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ade:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6959      	ldr	r1, [r3, #20]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	440b      	add	r3, r1
 8005af8:	1e59      	subs	r1, r3, #1
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b02:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b04:	4b9d      	ldr	r3, [pc, #628]	; (8005d7c <USB_EPStartXfer+0x370>)
 8005b06:	400b      	ands	r3, r1
 8005b08:	69b9      	ldr	r1, [r7, #24]
 8005b0a:	0148      	lsls	r0, r1, #5
 8005b0c:	69f9      	ldr	r1, [r7, #28]
 8005b0e:	4401      	add	r1, r0
 8005b10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b14:	4313      	orrs	r3, r2
 8005b16:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2e:	69b9      	ldr	r1, [r7, #24]
 8005b30:	0148      	lsls	r0, r1, #5
 8005b32:	69f9      	ldr	r1, [r7, #28]
 8005b34:	4401      	add	r1, r0
 8005b36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	78db      	ldrb	r3, [r3, #3]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d11f      	bne.n	8005b86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d14b      	bne.n	8005c24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d009      	beq.n	8005ba8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	78db      	ldrb	r3, [r3, #3]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d128      	bne.n	8005c02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d110      	bne.n	8005be2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e00f      	b.n	8005c02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e12f      	b.n	8005e84 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	78db      	ldrb	r3, [r3, #3]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d015      	beq.n	8005c78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8117 	beq.w	8005e84 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	2101      	movs	r1, #1
 8005c68:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6c:	69f9      	ldr	r1, [r7, #28]
 8005c6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c72:	4313      	orrs	r3, r2
 8005c74:	634b      	str	r3, [r1, #52]	; 0x34
 8005c76:	e105      	b.n	8005e84 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d110      	bne.n	8005caa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	e00f      	b.n	8005cca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	0151      	lsls	r1, r2, #5
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	68d9      	ldr	r1, [r3, #12]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781a      	ldrb	r2, [r3, #0]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	b298      	uxth	r0, r3
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	4603      	mov	r3, r0
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fa2b 	bl	800613a <USB_WritePacket>
 8005ce4:	e0ce      	b.n	8005e84 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d00:	0cdb      	lsrs	r3, r3, #19
 8005d02:	04db      	lsls	r3, r3, #19
 8005d04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d126      	bne.n	8005d80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d48:	69b9      	ldr	r1, [r7, #24]
 8005d4a:	0148      	lsls	r0, r1, #5
 8005d4c:	69f9      	ldr	r1, [r7, #28]
 8005d4e:	4401      	add	r1, r0
 8005d50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d54:	4313      	orrs	r3, r2
 8005d56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d76:	6113      	str	r3, [r2, #16]
 8005d78:	e036      	b.n	8005de8 <USB_EPStartXfer+0x3dc>
 8005d7a:	bf00      	nop
 8005d7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	695a      	ldr	r2, [r3, #20]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	4413      	add	r3, r2
 8005d8a:	1e5a      	subs	r2, r3, #1
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d94:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	8afb      	ldrh	r3, [r7, #22]
 8005da6:	04d9      	lsls	r1, r3, #19
 8005da8:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <USB_EPStartXfer+0x484>)
 8005daa:	400b      	ands	r3, r1
 8005dac:	69b9      	ldr	r1, [r7, #24]
 8005dae:	0148      	lsls	r0, r1, #5
 8005db0:	69f9      	ldr	r1, [r7, #28]
 8005db2:	4401      	add	r1, r0
 8005db4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005db8:	4313      	orrs	r3, r2
 8005dba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	8af9      	ldrh	r1, [r7, #22]
 8005dd0:	fb01 f303 	mul.w	r3, r1, r3
 8005dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dd8:	69b9      	ldr	r1, [r7, #24]
 8005dda:	0148      	lsls	r0, r1, #5
 8005ddc:	69f9      	ldr	r1, [r7, #28]
 8005dde:	4401      	add	r1, r0
 8005de0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005de4:	4313      	orrs	r3, r2
 8005de6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d10d      	bne.n	8005e0a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	68d9      	ldr	r1, [r3, #12]
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	460a      	mov	r2, r1
 8005e08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	78db      	ldrb	r3, [r3, #3]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d128      	bne.n	8005e64 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d110      	bne.n	8005e44 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e00f      	b.n	8005e64 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	1ff80000 	.word	0x1ff80000

08005e94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	f040 80cd 	bne.w	8006050 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d132      	bne.n	8005f24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005edc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1c:	0cdb      	lsrs	r3, r3, #19
 8005f1e:	04db      	lsls	r3, r3, #19
 8005f20:	6113      	str	r3, [r2, #16]
 8005f22:	e04e      	b.n	8005fc2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3e:	0cdb      	lsrs	r3, r3, #19
 8005f40:	04db      	lsls	r3, r3, #19
 8005f42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	695a      	ldr	r2, [r3, #20]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d903      	bls.n	8005f7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb2:	6939      	ldr	r1, [r7, #16]
 8005fb4:	0148      	lsls	r0, r1, #5
 8005fb6:	6979      	ldr	r1, [r7, #20]
 8005fb8:	4401      	add	r1, r0
 8005fba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d11e      	bne.n	8006006 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d009      	beq.n	8005fe4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	e092      	b.n	800612c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006020:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006024:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d07e      	beq.n	800612c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	2101      	movs	r1, #1
 8006040:	fa01 f303 	lsl.w	r3, r1, r3
 8006044:	6979      	ldr	r1, [r7, #20]
 8006046:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800604a:	4313      	orrs	r3, r2
 800604c:	634b      	str	r3, [r1, #52]	; 0x34
 800604e:	e06d      	b.n	800612c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800606a:	0cdb      	lsrs	r3, r3, #19
 800606c:	04db      	lsls	r3, r3, #19
 800606e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800608a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800608e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006092:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060da:	6939      	ldr	r1, [r7, #16]
 80060dc:	0148      	lsls	r0, r1, #5
 80060de:	6979      	ldr	r1, [r7, #20]
 80060e0:	4401      	add	r1, r0
 80060e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060e6:	4313      	orrs	r3, r2
 80060e8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d10d      	bne.n	800610c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	68d9      	ldr	r1, [r3, #12]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006108:	460a      	mov	r2, r1
 800610a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006126:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800612a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800613a:	b480      	push	{r7}
 800613c:	b089      	sub	sp, #36	; 0x24
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	4611      	mov	r1, r2
 8006146:	461a      	mov	r2, r3
 8006148:	460b      	mov	r3, r1
 800614a:	71fb      	strb	r3, [r7, #7]
 800614c:	4613      	mov	r3, r2
 800614e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006158:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800615c:	2b00      	cmp	r3, #0
 800615e:	d123      	bne.n	80061a8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006160:	88bb      	ldrh	r3, [r7, #4]
 8006162:	3303      	adds	r3, #3
 8006164:	089b      	lsrs	r3, r3, #2
 8006166:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006168:	2300      	movs	r3, #0
 800616a:	61bb      	str	r3, [r7, #24]
 800616c:	e018      	b.n	80061a0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	031a      	lsls	r2, r3, #12
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	4413      	add	r3, r2
 8006176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800617a:	461a      	mov	r2, r3
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	3301      	adds	r3, #1
 8006186:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	3301      	adds	r3, #1
 800618c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	3301      	adds	r3, #1
 8006192:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	3301      	adds	r3, #1
 8006198:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	3301      	adds	r3, #1
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d3e2      	bcc.n	800616e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3724      	adds	r7, #36	; 0x24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b08b      	sub	sp, #44	; 0x2c
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	089b      	lsrs	r3, r3, #2
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061d4:	88fb      	ldrh	r3, [r7, #6]
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061dc:	2300      	movs	r3, #0
 80061de:	623b      	str	r3, [r7, #32]
 80061e0:	e014      	b.n	800620c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	601a      	str	r2, [r3, #0]
    pDest++;
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	3301      	adds	r3, #1
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	3301      	adds	r3, #1
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	3301      	adds	r3, #1
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	3301      	adds	r3, #1
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	3301      	adds	r3, #1
 800620a:	623b      	str	r3, [r7, #32]
 800620c:	6a3a      	ldr	r2, [r7, #32]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	429a      	cmp	r2, r3
 8006212:	d3e6      	bcc.n	80061e2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006214:	8bfb      	ldrh	r3, [r7, #30]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01e      	beq.n	8006258 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006224:	461a      	mov	r2, r3
 8006226:	f107 0310 	add.w	r3, r7, #16
 800622a:	6812      	ldr	r2, [r2, #0]
 800622c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	b2db      	uxtb	r3, r3
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	fa22 f303 	lsr.w	r3, r2, r3
 800623a:	b2da      	uxtb	r2, r3
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	701a      	strb	r2, [r3, #0]
      i++;
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	3301      	adds	r3, #1
 8006244:	623b      	str	r3, [r7, #32]
      pDest++;
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	3301      	adds	r3, #1
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800624c:	8bfb      	ldrh	r3, [r7, #30]
 800624e:	3b01      	subs	r3, #1
 8006250:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006252:	8bfb      	ldrh	r3, [r7, #30]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1ea      	bne.n	800622e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800625a:	4618      	mov	r0, r3
 800625c:	372c      	adds	r7, #44	; 0x2c
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d12c      	bne.n	80062dc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	db12      	blt.n	80062ba <USB_EPSetStall+0x54>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00f      	beq.n	80062ba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062b8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	e02b      	b.n	8006334 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	db12      	blt.n	8006314 <USB_EPSetStall+0xae>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00f      	beq.n	8006314 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	440a      	add	r2, r1
 800630a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800630e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006312:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	440a      	add	r2, r1
 800632a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800632e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006332:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006342:	b480      	push	{r7}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d128      	bne.n	80063b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	440a      	add	r2, r1
 8006374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006378:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800637c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	78db      	ldrb	r3, [r3, #3]
 8006382:	2b03      	cmp	r3, #3
 8006384:	d003      	beq.n	800638e <USB_EPClearStall+0x4c>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	78db      	ldrb	r3, [r3, #3]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d138      	bne.n	8006400 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	e027      	b.n	8006400 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	0151      	lsls	r1, r2, #5
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	440a      	add	r2, r1
 80063c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	78db      	ldrb	r3, [r3, #3]
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d003      	beq.n	80063e0 <USB_EPClearStall+0x9e>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	78db      	ldrb	r3, [r3, #3]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d10f      	bne.n	8006400 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	460b      	mov	r3, r1
 8006418:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800642c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006430:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006448:	4313      	orrs	r3, r2
 800644a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006474:	f023 0303 	bic.w	r3, r3, #3
 8006478:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006488:	f023 0302 	bic.w	r3, r3, #2
 800648c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ca:	f043 0302 	orr.w	r3, r3, #2
 80064ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064de:	b480      	push	{r7}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4013      	ands	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064f6:	68fb      	ldr	r3, [r7, #12]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4013      	ands	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	0c1b      	lsrs	r3, r3, #16
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	4013      	ands	r3, r2
 800655a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	b29b      	uxth	r3, r3
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	4013      	ands	r3, r2
 8006598:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800659a:	68bb      	ldr	r3, [r7, #8]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	fa22 f303 	lsr.w	r3, r2, r3
 80065d8:	01db      	lsls	r3, r3, #7
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4013      	ands	r3, r2
 80065f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065f6:	68bb      	ldr	r3, [r7, #8]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	371c      	adds	r7, #28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	f003 0301 	and.w	r3, r3, #1
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800663e:	f023 0307 	bic.w	r3, r3, #7
 8006642:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006656:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	460b      	mov	r3, r1
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	333c      	adds	r3, #60	; 0x3c
 800667e:	3304      	adds	r3, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4a26      	ldr	r2, [pc, #152]	; (8006720 <USB_EP0_OutStart+0xb8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d90a      	bls.n	80066a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800669c:	d101      	bne.n	80066a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	e037      	b.n	8006712 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a8:	461a      	mov	r2, r3
 80066aa:	2300      	movs	r3, #0
 80066ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d0:	f043 0318 	orr.w	r3, r3, #24
 80066d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80066e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80066ea:	7afb      	ldrb	r3, [r7, #11]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d10f      	bne.n	8006710 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f6:	461a      	mov	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800670a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800670e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	4f54300a 	.word	0x4f54300a

08006724 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3301      	adds	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	4a13      	ldr	r2, [pc, #76]	; (8006784 <USB_CoreReset+0x60>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d901      	bls.n	8006740 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e01a      	b.n	8006776 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	daf3      	bge.n	8006730 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	f043 0201 	orr.w	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3301      	adds	r3, #1
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	4a09      	ldr	r2, [pc, #36]	; (8006784 <USB_CoreReset+0x60>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d901      	bls.n	8006768 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e006      	b.n	8006776 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b01      	cmp	r3, #1
 8006772:	d0f1      	beq.n	8006758 <USB_CoreReset+0x34>

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	00030d40 	.word	0x00030d40

08006788 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006794:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006798:	f002 f8fc 	bl	8008994 <USBD_static_malloc>
 800679c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d105      	bne.n	80067b0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80067ac:	2302      	movs	r3, #2
 80067ae:	e066      	b.n	800687e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	7c1b      	ldrb	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d119      	bne.n	80067f4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c4:	2202      	movs	r2, #2
 80067c6:	2181      	movs	r1, #129	; 0x81
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 ffc0 	bl	800874e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067d8:	2202      	movs	r2, #2
 80067da:	2101      	movs	r1, #1
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f001 ffb6 	bl	800874e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2210      	movs	r2, #16
 80067ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80067f2:	e016      	b.n	8006822 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067f4:	2340      	movs	r3, #64	; 0x40
 80067f6:	2202      	movs	r2, #2
 80067f8:	2181      	movs	r1, #129	; 0x81
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 ffa7 	bl	800874e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006806:	2340      	movs	r3, #64	; 0x40
 8006808:	2202      	movs	r2, #2
 800680a:	2101      	movs	r1, #1
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 ff9e 	bl	800874e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2210      	movs	r2, #16
 800681e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006822:	2308      	movs	r3, #8
 8006824:	2203      	movs	r2, #3
 8006826:	2182      	movs	r1, #130	; 0x82
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 ff90 	bl	800874e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7c1b      	ldrb	r3, [r3, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d109      	bne.n	800686c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800685e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006862:	2101      	movs	r1, #1
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f002 f861 	bl	800892c <USBD_LL_PrepareReceive>
 800686a:	e007      	b.n	800687c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006872:	2340      	movs	r3, #64	; 0x40
 8006874:	2101      	movs	r1, #1
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f002 f858 	bl	800892c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006892:	2181      	movs	r1, #129	; 0x81
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 ff80 	bl	800879a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068a0:	2101      	movs	r1, #1
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 ff79 	bl	800879a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80068b0:	2182      	movs	r1, #130	; 0x82
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 ff71 	bl	800879a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e2:	4618      	mov	r0, r3
 80068e4:	f002 f864 	bl	80089b0 <USBD_static_free>
    pdev->pClassData = NULL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800690c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	e0af      	b.n	8006a84 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800692c:	2b00      	cmp	r3, #0
 800692e:	d03f      	beq.n	80069b0 <USBD_CDC_Setup+0xb4>
 8006930:	2b20      	cmp	r3, #32
 8006932:	f040 809f 	bne.w	8006a74 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	88db      	ldrh	r3, [r3, #6]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d02e      	beq.n	800699c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	b25b      	sxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	da16      	bge.n	8006976 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006954:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	88d2      	ldrh	r2, [r2, #6]
 800695a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	88db      	ldrh	r3, [r3, #6]
 8006960:	2b07      	cmp	r3, #7
 8006962:	bf28      	it	cs
 8006964:	2307      	movcs	r3, #7
 8006966:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	89fa      	ldrh	r2, [r7, #14]
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fae9 	bl	8007f46 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006974:	e085      	b.n	8006a82 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	785a      	ldrb	r2, [r3, #1]
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	88db      	ldrh	r3, [r3, #6]
 8006984:	b2da      	uxtb	r2, r3
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800698c:	6939      	ldr	r1, [r7, #16]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	88db      	ldrh	r3, [r3, #6]
 8006992:	461a      	mov	r2, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fb02 	bl	8007f9e <USBD_CtlPrepareRx>
      break;
 800699a:	e072      	b.n	8006a82 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	7850      	ldrb	r0, [r2, #1]
 80069a8:	2200      	movs	r2, #0
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	4798      	blx	r3
      break;
 80069ae:	e068      	b.n	8006a82 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	2b0b      	cmp	r3, #11
 80069b6:	d852      	bhi.n	8006a5e <USBD_CDC_Setup+0x162>
 80069b8:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <USBD_CDC_Setup+0xc4>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069f1 	.word	0x080069f1
 80069c4:	08006a6d 	.word	0x08006a6d
 80069c8:	08006a5f 	.word	0x08006a5f
 80069cc:	08006a5f 	.word	0x08006a5f
 80069d0:	08006a5f 	.word	0x08006a5f
 80069d4:	08006a5f 	.word	0x08006a5f
 80069d8:	08006a5f 	.word	0x08006a5f
 80069dc:	08006a5f 	.word	0x08006a5f
 80069e0:	08006a5f 	.word	0x08006a5f
 80069e4:	08006a5f 	.word	0x08006a5f
 80069e8:	08006a1b 	.word	0x08006a1b
 80069ec:	08006a45 	.word	0x08006a45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d107      	bne.n	8006a0c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069fc:	f107 030a 	add.w	r3, r7, #10
 8006a00:	2202      	movs	r2, #2
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fa9e 	bl	8007f46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a0a:	e032      	b.n	8006a72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fa28 	bl	8007e64 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a14:	2303      	movs	r3, #3
 8006a16:	75fb      	strb	r3, [r7, #23]
          break;
 8006a18:	e02b      	b.n	8006a72 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d107      	bne.n	8006a36 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a26:	f107 030d 	add.w	r3, r7, #13
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fa89 	bl	8007f46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a34:	e01d      	b.n	8006a72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fa13 	bl	8007e64 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	75fb      	strb	r3, [r7, #23]
          break;
 8006a42:	e016      	b.n	8006a72 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d00f      	beq.n	8006a70 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fa06 	bl	8007e64 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a5c:	e008      	b.n	8006a70 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 f9ff 	bl	8007e64 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a66:	2303      	movs	r3, #3
 8006a68:	75fb      	strb	r3, [r7, #23]
          break;
 8006a6a:	e002      	b.n	8006a72 <USBD_CDC_Setup+0x176>
          break;
 8006a6c:	bf00      	nop
 8006a6e:	e008      	b.n	8006a82 <USBD_CDC_Setup+0x186>
          break;
 8006a70:	bf00      	nop
      }
      break;
 8006a72:	e006      	b.n	8006a82 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 f9f4 	bl	8007e64 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a80:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e04f      	b.n	8006b4e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ab4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3318      	adds	r3, #24
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d029      	beq.n	8006b20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006acc:	78fa      	ldrb	r2, [r7, #3]
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	3318      	adds	r3, #24
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	78f9      	ldrb	r1, [r7, #3]
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	1a5b      	subs	r3, r3, r1
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4403      	add	r3, r0
 8006aec:	3344      	adds	r3, #68	; 0x44
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006af4:	fb03 f301 	mul.w	r3, r3, r1
 8006af8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d110      	bne.n	8006b20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006afe:	78fa      	ldrb	r2, [r7, #3]
 8006b00:	6879      	ldr	r1, [r7, #4]
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	3318      	adds	r3, #24
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b12:	78f9      	ldrb	r1, [r7, #3]
 8006b14:	2300      	movs	r3, #0
 8006b16:	2200      	movs	r2, #0
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 fee6 	bl	80088ea <USBD_LL_Transmit>
 8006b1e:	e015      	b.n	8006b4c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b48:	78fa      	ldrb	r2, [r7, #3]
 8006b4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e015      	b.n	8006ba4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 fef6 	bl	800896e <USBD_LL_GetRxDataSize>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e01b      	b.n	8006bfe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d015      	beq.n	8006bfc <USBD_CDC_EP0_RxReady+0x50>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006bd6:	2bff      	cmp	r3, #255	; 0xff
 8006bd8:	d010      	beq.n	8006bfc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006be8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bf0:	b292      	uxth	r2, r2
 8006bf2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	22ff      	movs	r2, #255	; 0xff
 8006bf8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2243      	movs	r2, #67	; 0x43
 8006c14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006c16:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	20000094 	.word	0x20000094

08006c28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2243      	movs	r2, #67	; 0x43
 8006c34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006c36:	4b03      	ldr	r3, [pc, #12]	; (8006c44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	20000050 	.word	0x20000050

08006c48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2243      	movs	r2, #67	; 0x43
 8006c54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006c56:	4b03      	ldr	r3, [pc, #12]	; (8006c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	200000d8 	.word	0x200000d8

08006c68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	220a      	movs	r2, #10
 8006c74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c76:	4b03      	ldr	r3, [pc, #12]	; (8006c84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	2000000c 	.word	0x2000000c

08006c88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e004      	b.n	8006ca6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b087      	sub	sp, #28
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e008      	b.n	8006ce2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e004      	b.n	8006d14 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e016      	b.n	8006d6c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7c1b      	ldrb	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d50:	2101      	movs	r1, #1
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fdea 	bl	800892c <USBD_LL_PrepareReceive>
 8006d58:	e007      	b.n	8006d6a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d60:	2340      	movs	r3, #64	; 0x40
 8006d62:	2101      	movs	r1, #1
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 fde1 	bl	800892c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e01f      	b.n	8006dcc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	79fa      	ldrb	r2, [r7, #7]
 8006dbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f001 fc5d 	bl	8008680 <USBD_LL_Init>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e016      	b.n	8006e1a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	f107 020e 	add.w	r2, r7, #14
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4798      	blx	r3
 8006e10:	4602      	mov	r2, r0
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fc74 	bl	8008718 <USBD_LL_Start>
 8006e30:	4603      	mov	r3, r0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	4611      	mov	r1, r2
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	78fa      	ldrb	r2, [r7, #3]
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
  }

  return USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 ff90 	bl	8007df0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ede:	461a      	mov	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d01a      	beq.n	8006f2a <USBD_LL_SetupStage+0x72>
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d822      	bhi.n	8006f3e <USBD_LL_SetupStage+0x86>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <USBD_LL_SetupStage+0x4a>
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d00a      	beq.n	8006f16 <USBD_LL_SetupStage+0x5e>
 8006f00:	e01d      	b.n	8006f3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa62 	bl	80073d4 <USBD_StdDevReq>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]
      break;
 8006f14:	e020      	b.n	8006f58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fac6 	bl	80074b0 <USBD_StdItfReq>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]
      break;
 8006f28:	e016      	b.n	8006f58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fb05 	bl	8007542 <USBD_StdEPReq>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3c:	e00c      	b.n	8006f58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fc43 	bl	80087d8 <USBD_LL_StallEP>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]
      break;
 8006f56:	bf00      	nop
  }

  return ret;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d138      	bne.n	8006fe8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d14a      	bne.n	800701e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d913      	bls.n	8006fbc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	1ad2      	subs	r2, r2, r3
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	4293      	cmp	r3, r2
 8006fac:	bf28      	it	cs
 8006fae:	4613      	movcs	r3, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f001 f80f 	bl	8007fd8 <USBD_CtlContinueRx>
 8006fba:	e030      	b.n	800701e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d10b      	bne.n	8006fe0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f001 f80a 	bl	8007ffa <USBD_CtlSendStatus>
 8006fe6:	e01a      	b.n	800701e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d114      	bne.n	800701e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00e      	beq.n	800701e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	7afa      	ldrb	r2, [r7, #11]
 800700a:	4611      	mov	r1, r2
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	4798      	blx	r3
 8007010:	4603      	mov	r3, r0
 8007012:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	e000      	b.n	8007020 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	460b      	mov	r3, r1
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007036:	7afb      	ldrb	r3, [r7, #11]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d16b      	bne.n	8007114 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3314      	adds	r3, #20
 8007040:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007048:	2b02      	cmp	r3, #2
 800704a:	d156      	bne.n	80070fa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	429a      	cmp	r2, r3
 8007056:	d914      	bls.n	8007082 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	1ad2      	subs	r2, r2, r3
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	461a      	mov	r2, r3
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 ff84 	bl	8007f7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007074:	2300      	movs	r3, #0
 8007076:	2200      	movs	r2, #0
 8007078:	2100      	movs	r1, #0
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f001 fc56 	bl	800892c <USBD_LL_PrepareReceive>
 8007080:	e03b      	b.n	80070fa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	d11c      	bne.n	80070c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007096:	429a      	cmp	r2, r3
 8007098:	d316      	bcc.n	80070c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d20f      	bcs.n	80070c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070a8:	2200      	movs	r2, #0
 80070aa:	2100      	movs	r1, #0
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 ff65 	bl	8007f7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ba:	2300      	movs	r3, #0
 80070bc:	2200      	movs	r2, #0
 80070be:	2100      	movs	r1, #0
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f001 fc33 	bl	800892c <USBD_LL_PrepareReceive>
 80070c6:	e018      	b.n	80070fa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d10b      	bne.n	80070ec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070ec:	2180      	movs	r1, #128	; 0x80
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f001 fb72 	bl	80087d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 ff93 	bl	8008020 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007100:	2b01      	cmp	r3, #1
 8007102:	d122      	bne.n	800714a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f7ff fe98 	bl	8006e3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007112:	e01a      	b.n	800714a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b03      	cmp	r3, #3
 800711e:	d114      	bne.n	800714a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00e      	beq.n	800714a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	7afa      	ldrb	r2, [r7, #11]
 8007136:	4611      	mov	r1, r2
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	4798      	blx	r3
 800713c:	4603      	mov	r3, r0
 800713e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	e000      	b.n	800714c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007184:	2303      	movs	r3, #3
 8007186:	e02f      	b.n	80071e8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00f      	beq.n	80071b2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6852      	ldr	r2, [r2, #4]
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	4611      	mov	r1, r2
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071b2:	2340      	movs	r3, #64	; 0x40
 80071b4:	2200      	movs	r2, #0
 80071b6:	2100      	movs	r1, #0
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 fac8 	bl	800874e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2240      	movs	r2, #64	; 0x40
 80071ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071ce:	2340      	movs	r3, #64	; 0x40
 80071d0:	2200      	movs	r2, #0
 80071d2:	2180      	movs	r1, #128	; 0x80
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 faba 	bl	800874e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2240      	movs	r2, #64	; 0x40
 80071e4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721e:	b2da      	uxtb	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2204      	movs	r2, #4
 800722a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b04      	cmp	r3, #4
 800724e:	d106      	bne.n	800725e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007256:	b2da      	uxtb	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800727e:	2303      	movs	r3, #3
 8007280:	e012      	b.n	80072a8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b03      	cmp	r3, #3
 800728c:	d10b      	bne.n	80072a6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e014      	b.n	80072f4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d10d      	bne.n	80072f2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d007      	beq.n	80072f2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	78fa      	ldrb	r2, [r7, #3]
 80072ec:	4611      	mov	r1, r2
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007312:	2303      	movs	r3, #3
 8007314:	e014      	b.n	8007340 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d10d      	bne.n	800733e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d007      	beq.n	800733e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6852      	ldr	r2, [r2, #4]
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	4611      	mov	r1, r2
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
  }

  return USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007396:	b480      	push	{r7}
 8007398:	b087      	sub	sp, #28
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	3301      	adds	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073b4:	8a3b      	ldrh	r3, [r7, #16]
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	b21a      	sxth	r2, r3
 80073ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073be:	4313      	orrs	r3, r2
 80073c0:	b21b      	sxth	r3, r3
 80073c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073c4:	89fb      	ldrh	r3, [r7, #14]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ea:	2b40      	cmp	r3, #64	; 0x40
 80073ec:	d005      	beq.n	80073fa <USBD_StdDevReq+0x26>
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d853      	bhi.n	800749a <USBD_StdDevReq+0xc6>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <USBD_StdDevReq+0x3a>
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d14f      	bne.n	800749a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	4798      	blx	r3
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
      break;
 800740c:	e04a      	b.n	80074a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	785b      	ldrb	r3, [r3, #1]
 8007412:	2b09      	cmp	r3, #9
 8007414:	d83b      	bhi.n	800748e <USBD_StdDevReq+0xba>
 8007416:	a201      	add	r2, pc, #4	; (adr r2, 800741c <USBD_StdDevReq+0x48>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007471 	.word	0x08007471
 8007420:	08007485 	.word	0x08007485
 8007424:	0800748f 	.word	0x0800748f
 8007428:	0800747b 	.word	0x0800747b
 800742c:	0800748f 	.word	0x0800748f
 8007430:	0800744f 	.word	0x0800744f
 8007434:	08007445 	.word	0x08007445
 8007438:	0800748f 	.word	0x0800748f
 800743c:	08007467 	.word	0x08007467
 8007440:	08007459 	.word	0x08007459
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f9de 	bl	8007808 <USBD_GetDescriptor>
          break;
 800744c:	e024      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fb43 	bl	8007adc <USBD_SetAddress>
          break;
 8007456:	e01f      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fb82 	bl	8007b64 <USBD_SetConfig>
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
          break;
 8007464:	e018      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fc21 	bl	8007cb0 <USBD_GetConfig>
          break;
 800746e:	e013      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fc52 	bl	8007d1c <USBD_GetStatus>
          break;
 8007478:	e00e      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fc81 	bl	8007d84 <USBD_SetFeature>
          break;
 8007482:	e009      	b.n	8007498 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fc90 	bl	8007dac <USBD_ClrFeature>
          break;
 800748c:	e004      	b.n	8007498 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fce7 	bl	8007e64 <USBD_CtlError>
          break;
 8007496:	bf00      	nop
      }
      break;
 8007498:	e004      	b.n	80074a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fce1 	bl	8007e64 <USBD_CtlError>
      break;
 80074a2:	bf00      	nop
  }

  return ret;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop

080074b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d005      	beq.n	80074d6 <USBD_StdItfReq+0x26>
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	d82f      	bhi.n	800752e <USBD_StdItfReq+0x7e>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <USBD_StdItfReq+0x26>
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d12b      	bne.n	800752e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d81d      	bhi.n	8007520 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	889b      	ldrh	r3, [r3, #4]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d813      	bhi.n	8007516 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	88db      	ldrh	r3, [r3, #6]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d110      	bne.n	800752a <USBD_StdItfReq+0x7a>
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10d      	bne.n	800752a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fd73 	bl	8007ffa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007514:	e009      	b.n	800752a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fca3 	bl	8007e64 <USBD_CtlError>
          break;
 800751e:	e004      	b.n	800752a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fc9e 	bl	8007e64 <USBD_CtlError>
          break;
 8007528:	e000      	b.n	800752c <USBD_StdItfReq+0x7c>
          break;
 800752a:	bf00      	nop
      }
      break;
 800752c:	e004      	b.n	8007538 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fc97 	bl	8007e64 <USBD_CtlError>
      break;
 8007536:	bf00      	nop
  }

  return ret;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	889b      	ldrh	r3, [r3, #4]
 8007554:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d007      	beq.n	8007572 <USBD_StdEPReq+0x30>
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	f200 8145 	bhi.w	80077f2 <USBD_StdEPReq+0x2b0>
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00c      	beq.n	8007586 <USBD_StdEPReq+0x44>
 800756c:	2b20      	cmp	r3, #32
 800756e:	f040 8140 	bne.w	80077f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]
      break;
 8007584:	e13a      	b.n	80077fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	785b      	ldrb	r3, [r3, #1]
 800758a:	2b03      	cmp	r3, #3
 800758c:	d007      	beq.n	800759e <USBD_StdEPReq+0x5c>
 800758e:	2b03      	cmp	r3, #3
 8007590:	f300 8129 	bgt.w	80077e6 <USBD_StdEPReq+0x2a4>
 8007594:	2b00      	cmp	r3, #0
 8007596:	d07f      	beq.n	8007698 <USBD_StdEPReq+0x156>
 8007598:	2b01      	cmp	r3, #1
 800759a:	d03c      	beq.n	8007616 <USBD_StdEPReq+0xd4>
 800759c:	e123      	b.n	80077e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d002      	beq.n	80075b0 <USBD_StdEPReq+0x6e>
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d016      	beq.n	80075dc <USBD_StdEPReq+0x9a>
 80075ae:	e02c      	b.n	800760a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00d      	beq.n	80075d2 <USBD_StdEPReq+0x90>
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	2b80      	cmp	r3, #128	; 0x80
 80075ba:	d00a      	beq.n	80075d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 f909 	bl	80087d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075c6:	2180      	movs	r1, #128	; 0x80
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 f905 	bl	80087d8 <USBD_LL_StallEP>
 80075ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075d0:	e020      	b.n	8007614 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fc45 	bl	8007e64 <USBD_CtlError>
              break;
 80075da:	e01b      	b.n	8007614 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	885b      	ldrh	r3, [r3, #2]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10e      	bne.n	8007602 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <USBD_StdEPReq+0xc0>
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d008      	beq.n	8007602 <USBD_StdEPReq+0xc0>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	88db      	ldrh	r3, [r3, #6]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d104      	bne.n	8007602 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f8eb 	bl	80087d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fcf9 	bl	8007ffa <USBD_CtlSendStatus>

              break;
 8007608:	e004      	b.n	8007614 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fc29 	bl	8007e64 <USBD_CtlError>
              break;
 8007612:	bf00      	nop
          }
          break;
 8007614:	e0ec      	b.n	80077f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d002      	beq.n	8007628 <USBD_StdEPReq+0xe6>
 8007622:	2b03      	cmp	r3, #3
 8007624:	d016      	beq.n	8007654 <USBD_StdEPReq+0x112>
 8007626:	e030      	b.n	800768a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00d      	beq.n	800764a <USBD_StdEPReq+0x108>
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	2b80      	cmp	r3, #128	; 0x80
 8007632:	d00a      	beq.n	800764a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 f8cd 	bl	80087d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800763e:	2180      	movs	r1, #128	; 0x80
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 f8c9 	bl	80087d8 <USBD_LL_StallEP>
 8007646:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007648:	e025      	b.n	8007696 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fc09 	bl	8007e64 <USBD_CtlError>
              break;
 8007652:	e020      	b.n	8007696 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	885b      	ldrh	r3, [r3, #2]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d11b      	bne.n	8007694 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007662:	2b00      	cmp	r3, #0
 8007664:	d004      	beq.n	8007670 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 f8d3 	bl	8008816 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fcc2 	bl	8007ffa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007688:	e004      	b.n	8007694 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fbe9 	bl	8007e64 <USBD_CtlError>
              break;
 8007692:	e000      	b.n	8007696 <USBD_StdEPReq+0x154>
              break;
 8007694:	bf00      	nop
          }
          break;
 8007696:	e0ab      	b.n	80077f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d002      	beq.n	80076aa <USBD_StdEPReq+0x168>
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d032      	beq.n	800770e <USBD_StdEPReq+0x1cc>
 80076a8:	e097      	b.n	80077da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <USBD_StdEPReq+0x17e>
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b80      	cmp	r3, #128	; 0x80
 80076b4:	d004      	beq.n	80076c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fbd3 	bl	8007e64 <USBD_CtlError>
                break;
 80076be:	e091      	b.n	80077e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	da0b      	bge.n	80076e0 <USBD_StdEPReq+0x19e>
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	3310      	adds	r3, #16
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	3304      	adds	r3, #4
 80076de:	e00b      	b.n	80076f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4413      	add	r3, r2
 80076f6:	3304      	adds	r3, #4
 80076f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2202      	movs	r2, #2
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fc1d 	bl	8007f46 <USBD_CtlSendData>
              break;
 800770c:	e06a      	b.n	80077e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800770e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007712:	2b00      	cmp	r3, #0
 8007714:	da11      	bge.n	800773a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	f003 020f 	and.w	r2, r3, #15
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	3324      	adds	r3, #36	; 0x24
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d117      	bne.n	8007760 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fb96 	bl	8007e64 <USBD_CtlError>
                  break;
 8007738:	e054      	b.n	80077e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800773a:	7bbb      	ldrb	r3, [r7, #14]
 800773c:	f003 020f 	and.w	r2, r3, #15
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fb83 	bl	8007e64 <USBD_CtlError>
                  break;
 800775e:	e041      	b.n	80077e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	da0b      	bge.n	8007780 <USBD_StdEPReq+0x23e>
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	3310      	adds	r3, #16
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	4413      	add	r3, r2
 800777c:	3304      	adds	r3, #4
 800777e:	e00b      	b.n	8007798 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	3304      	adds	r3, #4
 8007798:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <USBD_StdEPReq+0x264>
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b80      	cmp	r3, #128	; 0x80
 80077a4:	d103      	bne.n	80077ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e00e      	b.n	80077cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 f84e 	bl	8008854 <USBD_LL_IsStallEP>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e002      	b.n	80077cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2202      	movs	r2, #2
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fbb7 	bl	8007f46 <USBD_CtlSendData>
              break;
 80077d8:	e004      	b.n	80077e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fb41 	bl	8007e64 <USBD_CtlError>
              break;
 80077e2:	bf00      	nop
          }
          break;
 80077e4:	e004      	b.n	80077f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fb3b 	bl	8007e64 <USBD_CtlError>
          break;
 80077ee:	bf00      	nop
      }
      break;
 80077f0:	e004      	b.n	80077fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fb35 	bl	8007e64 <USBD_CtlError>
      break;
 80077fa:	bf00      	nop
  }

  return ret;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	885b      	ldrh	r3, [r3, #2]
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	2b06      	cmp	r3, #6
 800782a:	f200 8128 	bhi.w	8007a7e <USBD_GetDescriptor+0x276>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <USBD_GetDescriptor+0x2c>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007851 	.word	0x08007851
 8007838:	08007869 	.word	0x08007869
 800783c:	080078a9 	.word	0x080078a9
 8007840:	08007a7f 	.word	0x08007a7f
 8007844:	08007a7f 	.word	0x08007a7f
 8007848:	08007a1f 	.word	0x08007a1f
 800784c:	08007a4b 	.word	0x08007a4b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	7c12      	ldrb	r2, [r2, #16]
 800785c:	f107 0108 	add.w	r1, r7, #8
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	60f8      	str	r0, [r7, #12]
      break;
 8007866:	e112      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	7c1b      	ldrb	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10d      	bne.n	800788c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	f107 0208 	add.w	r2, r7, #8
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
 8007880:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3301      	adds	r3, #1
 8007886:	2202      	movs	r2, #2
 8007888:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800788a:	e100      	b.n	8007a8e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	f107 0208 	add.w	r2, r7, #8
 8007898:	4610      	mov	r0, r2
 800789a:	4798      	blx	r3
 800789c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3301      	adds	r3, #1
 80078a2:	2202      	movs	r2, #2
 80078a4:	701a      	strb	r2, [r3, #0]
      break;
 80078a6:	e0f2      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	885b      	ldrh	r3, [r3, #2]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b05      	cmp	r3, #5
 80078b0:	f200 80ac 	bhi.w	8007a0c <USBD_GetDescriptor+0x204>
 80078b4:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <USBD_GetDescriptor+0xb4>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078d5 	.word	0x080078d5
 80078c0:	08007909 	.word	0x08007909
 80078c4:	0800793d 	.word	0x0800793d
 80078c8:	08007971 	.word	0x08007971
 80078cc:	080079a5 	.word	0x080079a5
 80078d0:	080079d9 	.word	0x080079d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	7c12      	ldrb	r2, [r2, #16]
 80078ec:	f107 0108 	add.w	r1, r7, #8
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f6:	e091      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fab2 	bl	8007e64 <USBD_CtlError>
            err++;
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	3301      	adds	r3, #1
 8007904:	72fb      	strb	r3, [r7, #11]
          break;
 8007906:	e089      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792a:	e077      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa98 	bl	8007e64 <USBD_CtlError>
            err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
          break;
 800793a:	e06f      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	7c12      	ldrb	r2, [r2, #16]
 8007954:	f107 0108 	add.w	r1, r7, #8
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795e:	e05d      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa7e 	bl	8007e64 <USBD_CtlError>
            err++;
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	3301      	adds	r3, #1
 800796c:	72fb      	strb	r3, [r7, #11]
          break;
 800796e:	e055      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007992:	e043      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa64 	bl	8007e64 <USBD_CtlError>
            err++;
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	3301      	adds	r3, #1
 80079a0:	72fb      	strb	r3, [r7, #11]
          break;
 80079a2:	e03b      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c6:	e029      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa4a 	bl	8007e64 <USBD_CtlError>
            err++;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	3301      	adds	r3, #1
 80079d4:	72fb      	strb	r3, [r7, #11]
          break;
 80079d6:	e021      	b.n	8007a1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e00f      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa30 	bl	8007e64 <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e007      	b.n	8007a1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa28 	bl	8007e64 <USBD_CtlError>
          err++;
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	3301      	adds	r3, #1
 8007a18:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007a1a:	bf00      	nop
      }
      break;
 8007a1c:	e037      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	7c1b      	ldrb	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2e:	f107 0208 	add.w	r2, r7, #8
 8007a32:	4610      	mov	r0, r2
 8007a34:	4798      	blx	r3
 8007a36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a38:	e029      	b.n	8007a8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fa11 	bl	8007e64 <USBD_CtlError>
        err++;
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	3301      	adds	r3, #1
 8007a46:	72fb      	strb	r3, [r7, #11]
      break;
 8007a48:	e021      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	7c1b      	ldrb	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10d      	bne.n	8007a6e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	f107 0208 	add.w	r2, r7, #8
 8007a5e:	4610      	mov	r0, r2
 8007a60:	4798      	blx	r3
 8007a62:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	2207      	movs	r2, #7
 8007a6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a6c:	e00f      	b.n	8007a8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f9f7 	bl	8007e64 <USBD_CtlError>
        err++;
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a7c:	e007      	b.n	8007a8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f9ef 	bl	8007e64 <USBD_CtlError>
      err++;
 8007a86:	7afb      	ldrb	r3, [r7, #11]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a8c:	bf00      	nop
  }

  if (err != 0U)
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d11e      	bne.n	8007ad2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	88db      	ldrh	r3, [r3, #6]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d016      	beq.n	8007aca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a9c:	893b      	ldrh	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00e      	beq.n	8007ac0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	88da      	ldrh	r2, [r3, #6]
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	bf28      	it	cs
 8007aac:	4613      	movcs	r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ab2:	893b      	ldrh	r3, [r7, #8]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fa44 	bl	8007f46 <USBD_CtlSendData>
 8007abe:	e009      	b.n	8007ad4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f9ce 	bl	8007e64 <USBD_CtlError>
 8007ac8:	e004      	b.n	8007ad4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa95 	bl	8007ffa <USBD_CtlSendStatus>
 8007ad0:	e000      	b.n	8007ad4 <USBD_GetDescriptor+0x2cc>
    return;
 8007ad2:	bf00      	nop
  }
}
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop

08007adc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	889b      	ldrh	r3, [r3, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d131      	bne.n	8007b52 <USBD_SetAddress+0x76>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	88db      	ldrh	r3, [r3, #6]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d12d      	bne.n	8007b52 <USBD_SetAddress+0x76>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	885b      	ldrh	r3, [r3, #2]
 8007afa:	2b7f      	cmp	r3, #127	; 0x7f
 8007afc:	d829      	bhi.n	8007b52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	885b      	ldrh	r3, [r3, #2]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d104      	bne.n	8007b20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f9a3 	bl	8007e64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1e:	e01d      	b.n	8007b5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	7bfa      	ldrb	r2, [r7, #15]
 8007b24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 febd 	bl	80088ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa61 	bl	8007ffa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2202      	movs	r2, #2
 8007b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b46:	e009      	b.n	8007b5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b50:	e004      	b.n	8007b5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f985 	bl	8007e64 <USBD_CtlError>
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	bf00      	nop
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	885b      	ldrh	r3, [r3, #2]
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	4b4c      	ldr	r3, [pc, #304]	; (8007cac <USBD_SetConfig+0x148>)
 8007b7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b7c:	4b4b      	ldr	r3, [pc, #300]	; (8007cac <USBD_SetConfig+0x148>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d905      	bls.n	8007b90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f96c 	bl	8007e64 <USBD_CtlError>
    return USBD_FAIL;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e088      	b.n	8007ca2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d002      	beq.n	8007ba2 <USBD_SetConfig+0x3e>
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d025      	beq.n	8007bec <USBD_SetConfig+0x88>
 8007ba0:	e071      	b.n	8007c86 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ba2:	4b42      	ldr	r3, [pc, #264]	; (8007cac <USBD_SetConfig+0x148>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01c      	beq.n	8007be4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007baa:	4b40      	ldr	r3, [pc, #256]	; (8007cac <USBD_SetConfig+0x148>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bb4:	4b3d      	ldr	r3, [pc, #244]	; (8007cac <USBD_SetConfig+0x148>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7ff f948 	bl	8006e50 <USBD_SetClassConfig>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d004      	beq.n	8007bd4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f949 	bl	8007e64 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bd2:	e065      	b.n	8007ca0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fa10 	bl	8007ffa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007be2:	e05d      	b.n	8007ca0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fa08 	bl	8007ffa <USBD_CtlSendStatus>
      break;
 8007bea:	e059      	b.n	8007ca0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007bec:	4b2f      	ldr	r3, [pc, #188]	; (8007cac <USBD_SetConfig+0x148>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d112      	bne.n	8007c1a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007bfc:	4b2b      	ldr	r3, [pc, #172]	; (8007cac <USBD_SetConfig+0x148>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c06:	4b29      	ldr	r3, [pc, #164]	; (8007cac <USBD_SetConfig+0x148>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff f93b 	bl	8006e88 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f9f1 	bl	8007ffa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c18:	e042      	b.n	8007ca0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c1a:	4b24      	ldr	r3, [pc, #144]	; (8007cac <USBD_SetConfig+0x148>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d02a      	beq.n	8007c7e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff f929 	bl	8006e88 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c36:	4b1d      	ldr	r3, [pc, #116]	; (8007cac <USBD_SetConfig+0x148>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c40:	4b1a      	ldr	r3, [pc, #104]	; (8007cac <USBD_SetConfig+0x148>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7ff f902 	bl	8006e50 <USBD_SetClassConfig>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00f      	beq.n	8007c76 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f903 	bl	8007e64 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff f90e 	bl	8006e88 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c74:	e014      	b.n	8007ca0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f9bf 	bl	8007ffa <USBD_CtlSendStatus>
      break;
 8007c7c:	e010      	b.n	8007ca0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f9bb 	bl	8007ffa <USBD_CtlSendStatus>
      break;
 8007c84:	e00c      	b.n	8007ca0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8eb 	bl	8007e64 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c8e:	4b07      	ldr	r3, [pc, #28]	; (8007cac <USBD_SetConfig+0x148>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff f8f7 	bl	8006e88 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c9e:	bf00      	nop
  }

  return ret;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000370 	.word	0x20000370

08007cb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	88db      	ldrh	r3, [r3, #6]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d004      	beq.n	8007ccc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f8cd 	bl	8007e64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cca:	e023      	b.n	8007d14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	dc02      	bgt.n	8007cde <USBD_GetConfig+0x2e>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	dc03      	bgt.n	8007ce4 <USBD_GetConfig+0x34>
 8007cdc:	e015      	b.n	8007d0a <USBD_GetConfig+0x5a>
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d00b      	beq.n	8007cfa <USBD_GetConfig+0x4a>
 8007ce2:	e012      	b.n	8007d0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3308      	adds	r3, #8
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f927 	bl	8007f46 <USBD_CtlSendData>
        break;
 8007cf8:	e00c      	b.n	8007d14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f91f 	bl	8007f46 <USBD_CtlSendData>
        break;
 8007d08:	e004      	b.n	8007d14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f8a9 	bl	8007e64 <USBD_CtlError>
        break;
 8007d12:	bf00      	nop
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d81e      	bhi.n	8007d72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	88db      	ldrh	r3, [r3, #6]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d004      	beq.n	8007d46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f890 	bl	8007e64 <USBD_CtlError>
        break;
 8007d44:	e01a      	b.n	8007d7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f043 0202 	orr.w	r2, r3, #2
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	330c      	adds	r3, #12
 8007d66:	2202      	movs	r2, #2
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f8eb 	bl	8007f46 <USBD_CtlSendData>
      break;
 8007d70:	e004      	b.n	8007d7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f875 	bl	8007e64 <USBD_CtlError>
      break;
 8007d7a:	bf00      	nop
  }
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	885b      	ldrh	r3, [r3, #2]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d106      	bne.n	8007da4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f92b 	bl	8007ffa <USBD_CtlSendStatus>
  }
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d80b      	bhi.n	8007ddc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	885b      	ldrh	r3, [r3, #2]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d10c      	bne.n	8007de6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f910 	bl	8007ffa <USBD_CtlSendStatus>
      }
      break;
 8007dda:	e004      	b.n	8007de6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f840 	bl	8007e64 <USBD_CtlError>
      break;
 8007de4:	e000      	b.n	8007de8 <USBD_ClrFeature+0x3c>
      break;
 8007de6:	bf00      	nop
  }
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	781a      	ldrb	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	781a      	ldrb	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3301      	adds	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7ff fabb 	bl	8007396 <SWAPBYTE>
 8007e20:	4603      	mov	r3, r0
 8007e22:	461a      	mov	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3301      	adds	r3, #1
 8007e32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7ff faae 	bl	8007396 <SWAPBYTE>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3301      	adds	r3, #1
 8007e46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff faa1 	bl	8007396 <SWAPBYTE>
 8007e54:	4603      	mov	r3, r0
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	80da      	strh	r2, [r3, #6]
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e6e:	2180      	movs	r1, #128	; 0x80
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fcb1 	bl	80087d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e76:	2100      	movs	r1, #0
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fcad 	bl	80087d8 <USBD_LL_StallEP>
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d036      	beq.n	8007f0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ea0:	6938      	ldr	r0, [r7, #16]
 8007ea2:	f000 f836 	bl	8007f12 <USBD_GetLen>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4413      	add	r3, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	7812      	ldrb	r2, [r2, #0]
 8007ebe:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	4413      	add	r3, r2
 8007ecc:	2203      	movs	r2, #3
 8007ece:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ed6:	e013      	b.n	8007f00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	7812      	ldrb	r2, [r2, #0]
 8007ee2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	613b      	str	r3, [r7, #16]
    idx++;
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	3301      	adds	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	701a      	strb	r2, [r3, #0]
    idx++;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	3301      	adds	r3, #1
 8007efe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e7      	bne.n	8007ed8 <USBD_GetString+0x52>
 8007f08:	e000      	b.n	8007f0c <USBD_GetString+0x86>
    return;
 8007f0a:	bf00      	nop
  }
}
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b085      	sub	sp, #20
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f22:	e005      	b.n	8007f30 <USBD_GetLen+0x1e>
  {
    len++;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	3301      	adds	r3, #1
 8007f28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1f5      	bne.n	8007f24 <USBD_GetLen+0x12>
  }

  return len;
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2202      	movs	r2, #2
 8007f56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 fcbc 	bl	80088ea <USBD_LL_Transmit>

  return USBD_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 fcab 	bl	80088ea <USBD_LL_Transmit>

  return USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2203      	movs	r2, #3
 8007fae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 fcaf 	bl	800892c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 fc9e 	bl	800892c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2204      	movs	r2, #4
 8008006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800800a:	2300      	movs	r3, #0
 800800c:	2200      	movs	r2, #0
 800800e:	2100      	movs	r1, #0
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fc6a 	bl	80088ea <USBD_LL_Transmit>

  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2205      	movs	r2, #5
 800802c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008030:	2300      	movs	r3, #0
 8008032:	2200      	movs	r2, #0
 8008034:	2100      	movs	r1, #0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fc78 	bl	800892c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800804c:	2200      	movs	r2, #0
 800804e:	4912      	ldr	r1, [pc, #72]	; (8008098 <MX_USB_DEVICE_Init+0x50>)
 8008050:	4812      	ldr	r0, [pc, #72]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008052:	f7fe fe8f 	bl	8006d74 <USBD_Init>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800805c:	f7f9 ff70 	bl	8001f40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008060:	490f      	ldr	r1, [pc, #60]	; (80080a0 <MX_USB_DEVICE_Init+0x58>)
 8008062:	480e      	ldr	r0, [pc, #56]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008064:	f7fe feb6 	bl	8006dd4 <USBD_RegisterClass>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800806e:	f7f9 ff67 	bl	8001f40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008072:	490c      	ldr	r1, [pc, #48]	; (80080a4 <MX_USB_DEVICE_Init+0x5c>)
 8008074:	4809      	ldr	r0, [pc, #36]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008076:	f7fe fe07 	bl	8006c88 <USBD_CDC_RegisterInterface>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008080:	f7f9 ff5e 	bl	8001f40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008084:	4805      	ldr	r0, [pc, #20]	; (800809c <MX_USB_DEVICE_Init+0x54>)
 8008086:	f7fe fecc 	bl	8006e22 <USBD_Start>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008090:	f7f9 ff56 	bl	8001f40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008094:	bf00      	nop
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000130 	.word	0x20000130
 800809c:	200005f8 	.word	0x200005f8
 80080a0:	20000018 	.word	0x20000018
 80080a4:	2000011c 	.word	0x2000011c

080080a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080ac:	2200      	movs	r2, #0
 80080ae:	4905      	ldr	r1, [pc, #20]	; (80080c4 <CDC_Init_FS+0x1c>)
 80080b0:	4805      	ldr	r0, [pc, #20]	; (80080c8 <CDC_Init_FS+0x20>)
 80080b2:	f7fe fdfe 	bl	8006cb2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080b6:	4905      	ldr	r1, [pc, #20]	; (80080cc <CDC_Init_FS+0x24>)
 80080b8:	4803      	ldr	r0, [pc, #12]	; (80080c8 <CDC_Init_FS+0x20>)
 80080ba:	f7fe fe18 	bl	8006cee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	200010c8 	.word	0x200010c8
 80080c8:	200005f8 	.word	0x200005f8
 80080cc:	200008c8 	.word	0x200008c8

080080d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	6039      	str	r1, [r7, #0]
 80080ea:	71fb      	strb	r3, [r7, #7]
 80080ec:	4613      	mov	r3, r2
 80080ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	2b23      	cmp	r3, #35	; 0x23
 80080f4:	d84a      	bhi.n	800818c <CDC_Control_FS+0xac>
 80080f6:	a201      	add	r2, pc, #4	; (adr r2, 80080fc <CDC_Control_FS+0x1c>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	0800818d 	.word	0x0800818d
 8008100:	0800818d 	.word	0x0800818d
 8008104:	0800818d 	.word	0x0800818d
 8008108:	0800818d 	.word	0x0800818d
 800810c:	0800818d 	.word	0x0800818d
 8008110:	0800818d 	.word	0x0800818d
 8008114:	0800818d 	.word	0x0800818d
 8008118:	0800818d 	.word	0x0800818d
 800811c:	0800818d 	.word	0x0800818d
 8008120:	0800818d 	.word	0x0800818d
 8008124:	0800818d 	.word	0x0800818d
 8008128:	0800818d 	.word	0x0800818d
 800812c:	0800818d 	.word	0x0800818d
 8008130:	0800818d 	.word	0x0800818d
 8008134:	0800818d 	.word	0x0800818d
 8008138:	0800818d 	.word	0x0800818d
 800813c:	0800818d 	.word	0x0800818d
 8008140:	0800818d 	.word	0x0800818d
 8008144:	0800818d 	.word	0x0800818d
 8008148:	0800818d 	.word	0x0800818d
 800814c:	0800818d 	.word	0x0800818d
 8008150:	0800818d 	.word	0x0800818d
 8008154:	0800818d 	.word	0x0800818d
 8008158:	0800818d 	.word	0x0800818d
 800815c:	0800818d 	.word	0x0800818d
 8008160:	0800818d 	.word	0x0800818d
 8008164:	0800818d 	.word	0x0800818d
 8008168:	0800818d 	.word	0x0800818d
 800816c:	0800818d 	.word	0x0800818d
 8008170:	0800818d 	.word	0x0800818d
 8008174:	0800818d 	.word	0x0800818d
 8008178:	0800818d 	.word	0x0800818d
 800817c:	0800818d 	.word	0x0800818d
 8008180:	0800818d 	.word	0x0800818d
 8008184:	0800818d 	.word	0x0800818d
 8008188:	0800818d 	.word	0x0800818d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800818c:	bf00      	nop
  }

  return (USBD_OK);
 800818e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4805      	ldr	r0, [pc, #20]	; (80081c0 <CDC_Receive_FS+0x24>)
 80081aa:	f7fe fda0 	bl	8006cee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081ae:	4804      	ldr	r0, [pc, #16]	; (80081c0 <CDC_Receive_FS+0x24>)
 80081b0:	f7fe fdb6 	bl	8006d20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	200005f8 	.word	0x200005f8

080081c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b087      	sub	sp, #28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	4613      	mov	r3, r2
 80081d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80081d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	371c      	adds	r7, #28
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
	...

080081e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	6039      	str	r1, [r7, #0]
 80081f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2212      	movs	r2, #18
 80081f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081fa:	4b03      	ldr	r3, [pc, #12]	; (8008208 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	2000014c 	.word	0x2000014c

0800820c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2204      	movs	r2, #4
 800821c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800821e:	4b03      	ldr	r3, [pc, #12]	; (800822c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	20000160 	.word	0x20000160

08008230 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	6039      	str	r1, [r7, #0]
 800823a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d105      	bne.n	800824e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	4907      	ldr	r1, [pc, #28]	; (8008264 <USBD_FS_ProductStrDescriptor+0x34>)
 8008246:	4808      	ldr	r0, [pc, #32]	; (8008268 <USBD_FS_ProductStrDescriptor+0x38>)
 8008248:	f7ff fe1d 	bl	8007e86 <USBD_GetString>
 800824c:	e004      	b.n	8008258 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	4904      	ldr	r1, [pc, #16]	; (8008264 <USBD_FS_ProductStrDescriptor+0x34>)
 8008252:	4805      	ldr	r0, [pc, #20]	; (8008268 <USBD_FS_ProductStrDescriptor+0x38>)
 8008254:	f7ff fe17 	bl	8007e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008258:	4b02      	ldr	r3, [pc, #8]	; (8008264 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	200018c8 	.word	0x200018c8
 8008268:	0800c088 	.word	0x0800c088

0800826c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	6039      	str	r1, [r7, #0]
 8008276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	4904      	ldr	r1, [pc, #16]	; (800828c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800827c:	4804      	ldr	r0, [pc, #16]	; (8008290 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800827e:	f7ff fe02 	bl	8007e86 <USBD_GetString>
  return USBD_StrDesc;
 8008282:	4b02      	ldr	r3, [pc, #8]	; (800828c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	200018c8 	.word	0x200018c8
 8008290:	0800c0a0 	.word	0x0800c0a0

08008294 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	6039      	str	r1, [r7, #0]
 800829e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	221a      	movs	r2, #26
 80082a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082a6:	f000 f843 	bl	8008330 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082aa:	4b02      	ldr	r3, [pc, #8]	; (80082b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000164 	.word	0x20000164

080082b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082c4:	79fb      	ldrb	r3, [r7, #7]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d105      	bne.n	80082d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	4907      	ldr	r1, [pc, #28]	; (80082ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80082ce:	4808      	ldr	r0, [pc, #32]	; (80082f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082d0:	f7ff fdd9 	bl	8007e86 <USBD_GetString>
 80082d4:	e004      	b.n	80082e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	4904      	ldr	r1, [pc, #16]	; (80082ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80082da:	4805      	ldr	r0, [pc, #20]	; (80082f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082dc:	f7ff fdd3 	bl	8007e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082e0:	4b02      	ldr	r3, [pc, #8]	; (80082ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	200018c8 	.word	0x200018c8
 80082f0:	0800c0b4 	.word	0x0800c0b4

080082f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	6039      	str	r1, [r7, #0]
 80082fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d105      	bne.n	8008312 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4907      	ldr	r1, [pc, #28]	; (8008328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800830a:	4808      	ldr	r0, [pc, #32]	; (800832c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800830c:	f7ff fdbb 	bl	8007e86 <USBD_GetString>
 8008310:	e004      	b.n	800831c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	4904      	ldr	r1, [pc, #16]	; (8008328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008316:	4805      	ldr	r0, [pc, #20]	; (800832c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008318:	f7ff fdb5 	bl	8007e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800831c:	4b02      	ldr	r3, [pc, #8]	; (8008328 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	200018c8 	.word	0x200018c8
 800832c:	0800c0c0 	.word	0x0800c0c0

08008330 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008336:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <Get_SerialNum+0x44>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800833c:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <Get_SerialNum+0x48>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008342:	4b0e      	ldr	r3, [pc, #56]	; (800837c <Get_SerialNum+0x4c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4413      	add	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008356:	2208      	movs	r2, #8
 8008358:	4909      	ldr	r1, [pc, #36]	; (8008380 <Get_SerialNum+0x50>)
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 f814 	bl	8008388 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008360:	2204      	movs	r2, #4
 8008362:	4908      	ldr	r1, [pc, #32]	; (8008384 <Get_SerialNum+0x54>)
 8008364:	68b8      	ldr	r0, [r7, #8]
 8008366:	f000 f80f 	bl	8008388 <IntToUnicode>
  }
}
 800836a:	bf00      	nop
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	1fff7a10 	.word	0x1fff7a10
 8008378:	1fff7a14 	.word	0x1fff7a14
 800837c:	1fff7a18 	.word	0x1fff7a18
 8008380:	20000166 	.word	0x20000166
 8008384:	20000176 	.word	0x20000176

08008388 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	4613      	mov	r3, r2
 8008394:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800839a:	2300      	movs	r3, #0
 800839c:	75fb      	strb	r3, [r7, #23]
 800839e:	e027      	b.n	80083f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	0f1b      	lsrs	r3, r3, #28
 80083a4:	2b09      	cmp	r3, #9
 80083a6:	d80b      	bhi.n	80083c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	0f1b      	lsrs	r3, r3, #28
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	4619      	mov	r1, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	440b      	add	r3, r1
 80083b8:	3230      	adds	r2, #48	; 0x30
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	e00a      	b.n	80083d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	0f1b      	lsrs	r3, r3, #28
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	4619      	mov	r1, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	440b      	add	r3, r1
 80083d0:	3237      	adds	r2, #55	; 0x37
 80083d2:	b2d2      	uxtb	r2, r2
 80083d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	005b      	lsls	r3, r3, #1
 80083e0:	3301      	adds	r3, #1
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	4413      	add	r3, r2
 80083e6:	2200      	movs	r2, #0
 80083e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	3301      	adds	r3, #1
 80083ee:	75fb      	strb	r3, [r7, #23]
 80083f0:	7dfa      	ldrb	r2, [r7, #23]
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d3d3      	bcc.n	80083a0 <IntToUnicode+0x18>
  }
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
	...

08008408 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08a      	sub	sp, #40	; 0x28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008410:	f107 0314 	add.w	r3, r7, #20
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	605a      	str	r2, [r3, #4]
 800841a:	609a      	str	r2, [r3, #8]
 800841c:	60da      	str	r2, [r3, #12]
 800841e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008428:	d13a      	bne.n	80084a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800842a:	2300      	movs	r3, #0
 800842c:	613b      	str	r3, [r7, #16]
 800842e:	4b1e      	ldr	r3, [pc, #120]	; (80084a8 <HAL_PCD_MspInit+0xa0>)
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	4a1d      	ldr	r2, [pc, #116]	; (80084a8 <HAL_PCD_MspInit+0xa0>)
 8008434:	f043 0301 	orr.w	r3, r3, #1
 8008438:	6313      	str	r3, [r2, #48]	; 0x30
 800843a:	4b1b      	ldr	r3, [pc, #108]	; (80084a8 <HAL_PCD_MspInit+0xa0>)
 800843c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	613b      	str	r3, [r7, #16]
 8008444:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008446:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800844a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800844c:	2302      	movs	r3, #2
 800844e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008450:	2300      	movs	r3, #0
 8008452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008454:	2303      	movs	r3, #3
 8008456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008458:	230a      	movs	r3, #10
 800845a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800845c:	f107 0314 	add.w	r3, r7, #20
 8008460:	4619      	mov	r1, r3
 8008462:	4812      	ldr	r0, [pc, #72]	; (80084ac <HAL_PCD_MspInit+0xa4>)
 8008464:	f7fa fc2c 	bl	8002cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008468:	4b0f      	ldr	r3, [pc, #60]	; (80084a8 <HAL_PCD_MspInit+0xa0>)
 800846a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846c:	4a0e      	ldr	r2, [pc, #56]	; (80084a8 <HAL_PCD_MspInit+0xa0>)
 800846e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008472:	6353      	str	r3, [r2, #52]	; 0x34
 8008474:	2300      	movs	r3, #0
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	4b0b      	ldr	r3, [pc, #44]	; (80084a8 <HAL_PCD_MspInit+0xa0>)
 800847a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800847c:	4a0a      	ldr	r2, [pc, #40]	; (80084a8 <HAL_PCD_MspInit+0xa0>)
 800847e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008482:	6453      	str	r3, [r2, #68]	; 0x44
 8008484:	4b08      	ldr	r3, [pc, #32]	; (80084a8 <HAL_PCD_MspInit+0xa0>)
 8008486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008490:	2200      	movs	r2, #0
 8008492:	2100      	movs	r1, #0
 8008494:	2043      	movs	r0, #67	; 0x43
 8008496:	f7fa fbdc 	bl	8002c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800849a:	2043      	movs	r0, #67	; 0x43
 800849c:	f7fa fbf5 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084a0:	bf00      	nop
 80084a2:	3728      	adds	r7, #40	; 0x28
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	40023800 	.word	0x40023800
 80084ac:	40020000 	.word	0x40020000

080084b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7fe fcf6 	bl	8006eb8 <USBD_LL_SetupStage>
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	6879      	ldr	r1, [r7, #4]
 80084ea:	4613      	mov	r3, r2
 80084ec:	00db      	lsls	r3, r3, #3
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	440b      	add	r3, r1
 80084f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	4619      	mov	r1, r3
 80084fe:	f7fe fd30 	bl	8006f62 <USBD_LL_DataOutStage>
}
 8008502:	bf00      	nop
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	460b      	mov	r3, r1
 8008514:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	3348      	adds	r3, #72	; 0x48
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	78fb      	ldrb	r3, [r7, #3]
 8008530:	4619      	mov	r1, r3
 8008532:	f7fe fd79 	bl	8007028 <USBD_LL_DataInStage>
}
 8008536:	bf00      	nop
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800854c:	4618      	mov	r0, r3
 800854e:	f7fe fe8d 	bl	800726c <USBD_LL_SOF>
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008562:	2301      	movs	r3, #1
 8008564:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	2b02      	cmp	r3, #2
 800856c:	d001      	beq.n	8008572 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800856e:	f7f9 fce7 	bl	8001f40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008578:	7bfa      	ldrb	r2, [r7, #15]
 800857a:	4611      	mov	r1, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe fe37 	bl	80071f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe fde3 	bl	8007154 <USBD_LL_Reset>
}
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe fe32 	bl	8007210 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6812      	ldr	r2, [r2, #0]
 80085ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085be:	f043 0301 	orr.w	r3, r3, #1
 80085c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085cc:	4b04      	ldr	r3, [pc, #16]	; (80085e0 <HAL_PCD_SuspendCallback+0x48>)
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	4a03      	ldr	r2, [pc, #12]	; (80085e0 <HAL_PCD_SuspendCallback+0x48>)
 80085d2:	f043 0306 	orr.w	r3, r3, #6
 80085d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	e000ed00 	.word	0xe000ed00

080085e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fe22 	bl	800723c <USBD_LL_Resume>
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fe70 	bl	80072fc <USBD_LL_IsoOUTIncomplete>
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008636:	78fa      	ldrb	r2, [r7, #3]
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fe38 	bl	80072b0 <USBD_LL_IsoINIncomplete>
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe fe76 	bl	8007348 <USBD_LL_DevConnected>
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fe73 	bl	800735e <USBD_LL_DevDisconnected>
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d13c      	bne.n	800870a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008690:	4a20      	ldr	r2, [pc, #128]	; (8008714 <USBD_LL_Init+0x94>)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a1e      	ldr	r2, [pc, #120]	; (8008714 <USBD_LL_Init+0x94>)
 800869c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086a0:	4b1c      	ldr	r3, [pc, #112]	; (8008714 <USBD_LL_Init+0x94>)
 80086a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80086a8:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <USBD_LL_Init+0x94>)
 80086aa:	2204      	movs	r2, #4
 80086ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80086ae:	4b19      	ldr	r3, [pc, #100]	; (8008714 <USBD_LL_Init+0x94>)
 80086b0:	2202      	movs	r2, #2
 80086b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086b4:	4b17      	ldr	r3, [pc, #92]	; (8008714 <USBD_LL_Init+0x94>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80086ba:	4b16      	ldr	r3, [pc, #88]	; (8008714 <USBD_LL_Init+0x94>)
 80086bc:	2202      	movs	r2, #2
 80086be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086c0:	4b14      	ldr	r3, [pc, #80]	; (8008714 <USBD_LL_Init+0x94>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80086c6:	4b13      	ldr	r3, [pc, #76]	; (8008714 <USBD_LL_Init+0x94>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80086cc:	4b11      	ldr	r3, [pc, #68]	; (8008714 <USBD_LL_Init+0x94>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80086d2:	4b10      	ldr	r3, [pc, #64]	; (8008714 <USBD_LL_Init+0x94>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80086d8:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <USBD_LL_Init+0x94>)
 80086da:	2200      	movs	r2, #0
 80086dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80086de:	480d      	ldr	r0, [pc, #52]	; (8008714 <USBD_LL_Init+0x94>)
 80086e0:	f7fa fca5 	bl	800302e <HAL_PCD_Init>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80086ea:	f7f9 fc29 	bl	8001f40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80086ee:	2180      	movs	r1, #128	; 0x80
 80086f0:	4808      	ldr	r0, [pc, #32]	; (8008714 <USBD_LL_Init+0x94>)
 80086f2:	f7fb fe02 	bl	80042fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80086f6:	2240      	movs	r2, #64	; 0x40
 80086f8:	2100      	movs	r1, #0
 80086fa:	4806      	ldr	r0, [pc, #24]	; (8008714 <USBD_LL_Init+0x94>)
 80086fc:	f7fb fdb6 	bl	800426c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008700:	2280      	movs	r2, #128	; 0x80
 8008702:	2101      	movs	r1, #1
 8008704:	4803      	ldr	r0, [pc, #12]	; (8008714 <USBD_LL_Init+0x94>)
 8008706:	f7fb fdb1 	bl	800426c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	20001ac8 	.word	0x20001ac8

08008718 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800872e:	4618      	mov	r0, r3
 8008730:	f7fa fd9a 	bl	8003268 <HAL_PCD_Start>
 8008734:	4603      	mov	r3, r0
 8008736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	4618      	mov	r0, r3
 800873c:	f000 f942 	bl	80089c4 <USBD_Get_USB_Status>
 8008740:	4603      	mov	r3, r0
 8008742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008744:	7bbb      	ldrb	r3, [r7, #14]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	4608      	mov	r0, r1
 8008758:	4611      	mov	r1, r2
 800875a:	461a      	mov	r2, r3
 800875c:	4603      	mov	r3, r0
 800875e:	70fb      	strb	r3, [r7, #3]
 8008760:	460b      	mov	r3, r1
 8008762:	70bb      	strb	r3, [r7, #2]
 8008764:	4613      	mov	r3, r2
 8008766:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008776:	78bb      	ldrb	r3, [r7, #2]
 8008778:	883a      	ldrh	r2, [r7, #0]
 800877a:	78f9      	ldrb	r1, [r7, #3]
 800877c:	f7fb f97e 	bl	8003a7c <HAL_PCD_EP_Open>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	4618      	mov	r0, r3
 8008788:	f000 f91c 	bl	80089c4 <USBD_Get_USB_Status>
 800878c:	4603      	mov	r3, r0
 800878e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008790:	7bbb      	ldrb	r3, [r7, #14]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	460b      	mov	r3, r1
 80087a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087b4:	78fa      	ldrb	r2, [r7, #3]
 80087b6:	4611      	mov	r1, r2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fb f9c7 	bl	8003b4c <HAL_PCD_EP_Close>
 80087be:	4603      	mov	r3, r0
 80087c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 f8fd 	bl	80089c4 <USBD_Get_USB_Status>
 80087ca:	4603      	mov	r3, r0
 80087cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087f2:	78fa      	ldrb	r2, [r7, #3]
 80087f4:	4611      	mov	r1, r2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fb fa9f 	bl	8003d3a <HAL_PCD_EP_SetStall>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	4618      	mov	r0, r3
 8008804:	f000 f8de 	bl	80089c4 <USBD_Get_USB_Status>
 8008808:	4603      	mov	r3, r0
 800880a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800880c:	7bbb      	ldrb	r3, [r7, #14]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f7fb fae4 	bl	8003e02 <HAL_PCD_EP_ClrStall>
 800883a:	4603      	mov	r3, r0
 800883c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 f8bf 	bl	80089c4 <USBD_Get_USB_Status>
 8008846:	4603      	mov	r3, r0
 8008848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800884a:	7bbb      	ldrb	r3, [r7, #14]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008866:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800886c:	2b00      	cmp	r3, #0
 800886e:	da0b      	bge.n	8008888 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008876:	68f9      	ldr	r1, [r7, #12]
 8008878:	4613      	mov	r3, r2
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	1a9b      	subs	r3, r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	440b      	add	r3, r1
 8008882:	333e      	adds	r3, #62	; 0x3e
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	e00b      	b.n	80088a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800888e:	68f9      	ldr	r1, [r7, #12]
 8008890:	4613      	mov	r3, r2
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	440b      	add	r3, r1
 800889a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800889e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	4611      	mov	r1, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fb f8b1 	bl	8003a32 <HAL_PCD_SetAddress>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 f874 	bl	80089c4 <USBD_Get_USB_Status>
 80088dc:	4603      	mov	r3, r0
 80088de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b086      	sub	sp, #24
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	603b      	str	r3, [r7, #0]
 80088f6:	460b      	mov	r3, r1
 80088f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008908:	7af9      	ldrb	r1, [r7, #11]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	f7fb f9ca 	bl	8003ca6 <HAL_PCD_EP_Transmit>
 8008912:	4603      	mov	r3, r0
 8008914:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f853 	bl	80089c4 <USBD_Get_USB_Status>
 800891e:	4603      	mov	r3, r0
 8008920:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008922:	7dbb      	ldrb	r3, [r7, #22]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	460b      	mov	r3, r1
 800893a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800894a:	7af9      	ldrb	r1, [r7, #11]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	f7fb f946 	bl	8003be0 <HAL_PCD_EP_Receive>
 8008954:	4603      	mov	r3, r0
 8008956:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 f832 	bl	80089c4 <USBD_Get_USB_Status>
 8008960:	4603      	mov	r3, r0
 8008962:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008964:	7dbb      	ldrb	r3, [r7, #22]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	460b      	mov	r3, r1
 8008978:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008980:	78fa      	ldrb	r2, [r7, #3]
 8008982:	4611      	mov	r1, r2
 8008984:	4618      	mov	r0, r3
 8008986:	f7fb f976 	bl	8003c76 <HAL_PCD_EP_GetRxCount>
 800898a:	4603      	mov	r3, r0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800899c:	4b03      	ldr	r3, [pc, #12]	; (80089ac <USBD_static_malloc+0x18>)
}
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	20000374 	.word	0x20000374

080089b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]

}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d817      	bhi.n	8008a08 <USBD_Get_USB_Status+0x44>
 80089d8:	a201      	add	r2, pc, #4	; (adr r2, 80089e0 <USBD_Get_USB_Status+0x1c>)
 80089da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089de:	bf00      	nop
 80089e0:	080089f1 	.word	0x080089f1
 80089e4:	080089f7 	.word	0x080089f7
 80089e8:	080089fd 	.word	0x080089fd
 80089ec:	08008a03 	.word	0x08008a03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
    break;
 80089f4:	e00b      	b.n	8008a0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089f6:	2303      	movs	r3, #3
 80089f8:	73fb      	strb	r3, [r7, #15]
    break;
 80089fa:	e008      	b.n	8008a0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089fc:	2301      	movs	r3, #1
 80089fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008a00:	e005      	b.n	8008a0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a02:	2303      	movs	r3, #3
 8008a04:	73fb      	strb	r3, [r7, #15]
    break;
 8008a06:	e002      	b.n	8008a0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a0c:	bf00      	nop
  }
  return usb_status;
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <__errno>:
 8008a1c:	4b01      	ldr	r3, [pc, #4]	; (8008a24 <__errno+0x8>)
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	20000180 	.word	0x20000180

08008a28 <__libc_init_array>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	4d0d      	ldr	r5, [pc, #52]	; (8008a60 <__libc_init_array+0x38>)
 8008a2c:	4c0d      	ldr	r4, [pc, #52]	; (8008a64 <__libc_init_array+0x3c>)
 8008a2e:	1b64      	subs	r4, r4, r5
 8008a30:	10a4      	asrs	r4, r4, #2
 8008a32:	2600      	movs	r6, #0
 8008a34:	42a6      	cmp	r6, r4
 8008a36:	d109      	bne.n	8008a4c <__libc_init_array+0x24>
 8008a38:	4d0b      	ldr	r5, [pc, #44]	; (8008a68 <__libc_init_array+0x40>)
 8008a3a:	4c0c      	ldr	r4, [pc, #48]	; (8008a6c <__libc_init_array+0x44>)
 8008a3c:	f003 faba 	bl	800bfb4 <_init>
 8008a40:	1b64      	subs	r4, r4, r5
 8008a42:	10a4      	asrs	r4, r4, #2
 8008a44:	2600      	movs	r6, #0
 8008a46:	42a6      	cmp	r6, r4
 8008a48:	d105      	bne.n	8008a56 <__libc_init_array+0x2e>
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a50:	4798      	blx	r3
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7ee      	b.n	8008a34 <__libc_init_array+0xc>
 8008a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a5a:	4798      	blx	r3
 8008a5c:	3601      	adds	r6, #1
 8008a5e:	e7f2      	b.n	8008a46 <__libc_init_array+0x1e>
 8008a60:	0800c780 	.word	0x0800c780
 8008a64:	0800c780 	.word	0x0800c780
 8008a68:	0800c780 	.word	0x0800c780
 8008a6c:	0800c784 	.word	0x0800c784

08008a70 <memcpy>:
 8008a70:	440a      	add	r2, r1
 8008a72:	4291      	cmp	r1, r2
 8008a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a78:	d100      	bne.n	8008a7c <memcpy+0xc>
 8008a7a:	4770      	bx	lr
 8008a7c:	b510      	push	{r4, lr}
 8008a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a86:	4291      	cmp	r1, r2
 8008a88:	d1f9      	bne.n	8008a7e <memcpy+0xe>
 8008a8a:	bd10      	pop	{r4, pc}

08008a8c <memset>:
 8008a8c:	4402      	add	r2, r0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d100      	bne.n	8008a96 <memset+0xa>
 8008a94:	4770      	bx	lr
 8008a96:	f803 1b01 	strb.w	r1, [r3], #1
 8008a9a:	e7f9      	b.n	8008a90 <memset+0x4>

08008a9c <__cvt>:
 8008a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa0:	ec55 4b10 	vmov	r4, r5, d0
 8008aa4:	2d00      	cmp	r5, #0
 8008aa6:	460e      	mov	r6, r1
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	462b      	mov	r3, r5
 8008aac:	bfbb      	ittet	lt
 8008aae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ab2:	461d      	movlt	r5, r3
 8008ab4:	2300      	movge	r3, #0
 8008ab6:	232d      	movlt	r3, #45	; 0x2d
 8008ab8:	700b      	strb	r3, [r1, #0]
 8008aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008abc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ac0:	4691      	mov	r9, r2
 8008ac2:	f023 0820 	bic.w	r8, r3, #32
 8008ac6:	bfbc      	itt	lt
 8008ac8:	4622      	movlt	r2, r4
 8008aca:	4614      	movlt	r4, r2
 8008acc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ad0:	d005      	beq.n	8008ade <__cvt+0x42>
 8008ad2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ad6:	d100      	bne.n	8008ada <__cvt+0x3e>
 8008ad8:	3601      	adds	r6, #1
 8008ada:	2102      	movs	r1, #2
 8008adc:	e000      	b.n	8008ae0 <__cvt+0x44>
 8008ade:	2103      	movs	r1, #3
 8008ae0:	ab03      	add	r3, sp, #12
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	ab02      	add	r3, sp, #8
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	ec45 4b10 	vmov	d0, r4, r5
 8008aec:	4653      	mov	r3, sl
 8008aee:	4632      	mov	r2, r6
 8008af0:	f000 fe76 	bl	80097e0 <_dtoa_r>
 8008af4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008af8:	4607      	mov	r7, r0
 8008afa:	d102      	bne.n	8008b02 <__cvt+0x66>
 8008afc:	f019 0f01 	tst.w	r9, #1
 8008b00:	d022      	beq.n	8008b48 <__cvt+0xac>
 8008b02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b06:	eb07 0906 	add.w	r9, r7, r6
 8008b0a:	d110      	bne.n	8008b2e <__cvt+0x92>
 8008b0c:	783b      	ldrb	r3, [r7, #0]
 8008b0e:	2b30      	cmp	r3, #48	; 0x30
 8008b10:	d10a      	bne.n	8008b28 <__cvt+0x8c>
 8008b12:	2200      	movs	r2, #0
 8008b14:	2300      	movs	r3, #0
 8008b16:	4620      	mov	r0, r4
 8008b18:	4629      	mov	r1, r5
 8008b1a:	f7f7 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b1e:	b918      	cbnz	r0, 8008b28 <__cvt+0x8c>
 8008b20:	f1c6 0601 	rsb	r6, r6, #1
 8008b24:	f8ca 6000 	str.w	r6, [sl]
 8008b28:	f8da 3000 	ldr.w	r3, [sl]
 8008b2c:	4499      	add	r9, r3
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2300      	movs	r3, #0
 8008b32:	4620      	mov	r0, r4
 8008b34:	4629      	mov	r1, r5
 8008b36:	f7f7 ffcf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b3a:	b108      	cbz	r0, 8008b40 <__cvt+0xa4>
 8008b3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b40:	2230      	movs	r2, #48	; 0x30
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	454b      	cmp	r3, r9
 8008b46:	d307      	bcc.n	8008b58 <__cvt+0xbc>
 8008b48:	9b03      	ldr	r3, [sp, #12]
 8008b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b4c:	1bdb      	subs	r3, r3, r7
 8008b4e:	4638      	mov	r0, r7
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	b004      	add	sp, #16
 8008b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b58:	1c59      	adds	r1, r3, #1
 8008b5a:	9103      	str	r1, [sp, #12]
 8008b5c:	701a      	strb	r2, [r3, #0]
 8008b5e:	e7f0      	b.n	8008b42 <__cvt+0xa6>

08008b60 <__exponent>:
 8008b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b62:	4603      	mov	r3, r0
 8008b64:	2900      	cmp	r1, #0
 8008b66:	bfb8      	it	lt
 8008b68:	4249      	neglt	r1, r1
 8008b6a:	f803 2b02 	strb.w	r2, [r3], #2
 8008b6e:	bfb4      	ite	lt
 8008b70:	222d      	movlt	r2, #45	; 0x2d
 8008b72:	222b      	movge	r2, #43	; 0x2b
 8008b74:	2909      	cmp	r1, #9
 8008b76:	7042      	strb	r2, [r0, #1]
 8008b78:	dd2a      	ble.n	8008bd0 <__exponent+0x70>
 8008b7a:	f10d 0407 	add.w	r4, sp, #7
 8008b7e:	46a4      	mov	ip, r4
 8008b80:	270a      	movs	r7, #10
 8008b82:	46a6      	mov	lr, r4
 8008b84:	460a      	mov	r2, r1
 8008b86:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b8a:	fb07 1516 	mls	r5, r7, r6, r1
 8008b8e:	3530      	adds	r5, #48	; 0x30
 8008b90:	2a63      	cmp	r2, #99	; 0x63
 8008b92:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	dcf1      	bgt.n	8008b82 <__exponent+0x22>
 8008b9e:	3130      	adds	r1, #48	; 0x30
 8008ba0:	f1ae 0502 	sub.w	r5, lr, #2
 8008ba4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ba8:	1c44      	adds	r4, r0, #1
 8008baa:	4629      	mov	r1, r5
 8008bac:	4561      	cmp	r1, ip
 8008bae:	d30a      	bcc.n	8008bc6 <__exponent+0x66>
 8008bb0:	f10d 0209 	add.w	r2, sp, #9
 8008bb4:	eba2 020e 	sub.w	r2, r2, lr
 8008bb8:	4565      	cmp	r5, ip
 8008bba:	bf88      	it	hi
 8008bbc:	2200      	movhi	r2, #0
 8008bbe:	4413      	add	r3, r2
 8008bc0:	1a18      	subs	r0, r3, r0
 8008bc2:	b003      	add	sp, #12
 8008bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008bce:	e7ed      	b.n	8008bac <__exponent+0x4c>
 8008bd0:	2330      	movs	r3, #48	; 0x30
 8008bd2:	3130      	adds	r1, #48	; 0x30
 8008bd4:	7083      	strb	r3, [r0, #2]
 8008bd6:	70c1      	strb	r1, [r0, #3]
 8008bd8:	1d03      	adds	r3, r0, #4
 8008bda:	e7f1      	b.n	8008bc0 <__exponent+0x60>

08008bdc <_printf_float>:
 8008bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be0:	ed2d 8b02 	vpush	{d8}
 8008be4:	b08d      	sub	sp, #52	; 0x34
 8008be6:	460c      	mov	r4, r1
 8008be8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008bec:	4616      	mov	r6, r2
 8008bee:	461f      	mov	r7, r3
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	f001 fbe1 	bl	800a3b8 <_localeconv_r>
 8008bf6:	f8d0 a000 	ldr.w	sl, [r0]
 8008bfa:	4650      	mov	r0, sl
 8008bfc:	f7f7 faf0 	bl	80001e0 <strlen>
 8008c00:	2300      	movs	r3, #0
 8008c02:	930a      	str	r3, [sp, #40]	; 0x28
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	9305      	str	r3, [sp, #20]
 8008c08:	f8d8 3000 	ldr.w	r3, [r8]
 8008c0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c10:	3307      	adds	r3, #7
 8008c12:	f023 0307 	bic.w	r3, r3, #7
 8008c16:	f103 0208 	add.w	r2, r3, #8
 8008c1a:	f8c8 2000 	str.w	r2, [r8]
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c2e:	9307      	str	r3, [sp, #28]
 8008c30:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c34:	ee08 0a10 	vmov	s16, r0
 8008c38:	4b9f      	ldr	r3, [pc, #636]	; (8008eb8 <_printf_float+0x2dc>)
 8008c3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c42:	f7f7 ff7b 	bl	8000b3c <__aeabi_dcmpun>
 8008c46:	bb88      	cbnz	r0, 8008cac <_printf_float+0xd0>
 8008c48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c4c:	4b9a      	ldr	r3, [pc, #616]	; (8008eb8 <_printf_float+0x2dc>)
 8008c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c52:	f7f7 ff55 	bl	8000b00 <__aeabi_dcmple>
 8008c56:	bb48      	cbnz	r0, 8008cac <_printf_float+0xd0>
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	4649      	mov	r1, r9
 8008c60:	f7f7 ff44 	bl	8000aec <__aeabi_dcmplt>
 8008c64:	b110      	cbz	r0, 8008c6c <_printf_float+0x90>
 8008c66:	232d      	movs	r3, #45	; 0x2d
 8008c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c6c:	4b93      	ldr	r3, [pc, #588]	; (8008ebc <_printf_float+0x2e0>)
 8008c6e:	4894      	ldr	r0, [pc, #592]	; (8008ec0 <_printf_float+0x2e4>)
 8008c70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c74:	bf94      	ite	ls
 8008c76:	4698      	movls	r8, r3
 8008c78:	4680      	movhi	r8, r0
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	6123      	str	r3, [r4, #16]
 8008c7e:	9b05      	ldr	r3, [sp, #20]
 8008c80:	f023 0204 	bic.w	r2, r3, #4
 8008c84:	6022      	str	r2, [r4, #0]
 8008c86:	f04f 0900 	mov.w	r9, #0
 8008c8a:	9700      	str	r7, [sp, #0]
 8008c8c:	4633      	mov	r3, r6
 8008c8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c90:	4621      	mov	r1, r4
 8008c92:	4628      	mov	r0, r5
 8008c94:	f000 f9d8 	bl	8009048 <_printf_common>
 8008c98:	3001      	adds	r0, #1
 8008c9a:	f040 8090 	bne.w	8008dbe <_printf_float+0x1e2>
 8008c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca2:	b00d      	add	sp, #52	; 0x34
 8008ca4:	ecbd 8b02 	vpop	{d8}
 8008ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cac:	4642      	mov	r2, r8
 8008cae:	464b      	mov	r3, r9
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	f7f7 ff42 	bl	8000b3c <__aeabi_dcmpun>
 8008cb8:	b140      	cbz	r0, 8008ccc <_printf_float+0xf0>
 8008cba:	464b      	mov	r3, r9
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	bfbc      	itt	lt
 8008cc0:	232d      	movlt	r3, #45	; 0x2d
 8008cc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008cc6:	487f      	ldr	r0, [pc, #508]	; (8008ec4 <_printf_float+0x2e8>)
 8008cc8:	4b7f      	ldr	r3, [pc, #508]	; (8008ec8 <_printf_float+0x2ec>)
 8008cca:	e7d1      	b.n	8008c70 <_printf_float+0x94>
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008cd2:	9206      	str	r2, [sp, #24]
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	d13f      	bne.n	8008d58 <_printf_float+0x17c>
 8008cd8:	2306      	movs	r3, #6
 8008cda:	6063      	str	r3, [r4, #4]
 8008cdc:	9b05      	ldr	r3, [sp, #20]
 8008cde:	6861      	ldr	r1, [r4, #4]
 8008ce0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9303      	str	r3, [sp, #12]
 8008ce8:	ab0a      	add	r3, sp, #40	; 0x28
 8008cea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008cee:	ab09      	add	r3, sp, #36	; 0x24
 8008cf0:	ec49 8b10 	vmov	d0, r8, r9
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	6022      	str	r2, [r4, #0]
 8008cf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f7ff fecd 	bl	8008a9c <__cvt>
 8008d02:	9b06      	ldr	r3, [sp, #24]
 8008d04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d06:	2b47      	cmp	r3, #71	; 0x47
 8008d08:	4680      	mov	r8, r0
 8008d0a:	d108      	bne.n	8008d1e <_printf_float+0x142>
 8008d0c:	1cc8      	adds	r0, r1, #3
 8008d0e:	db02      	blt.n	8008d16 <_printf_float+0x13a>
 8008d10:	6863      	ldr	r3, [r4, #4]
 8008d12:	4299      	cmp	r1, r3
 8008d14:	dd41      	ble.n	8008d9a <_printf_float+0x1be>
 8008d16:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d1a:	fa5f fb8b 	uxtb.w	fp, fp
 8008d1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d22:	d820      	bhi.n	8008d66 <_printf_float+0x18a>
 8008d24:	3901      	subs	r1, #1
 8008d26:	465a      	mov	r2, fp
 8008d28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d2c:	9109      	str	r1, [sp, #36]	; 0x24
 8008d2e:	f7ff ff17 	bl	8008b60 <__exponent>
 8008d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d34:	1813      	adds	r3, r2, r0
 8008d36:	2a01      	cmp	r2, #1
 8008d38:	4681      	mov	r9, r0
 8008d3a:	6123      	str	r3, [r4, #16]
 8008d3c:	dc02      	bgt.n	8008d44 <_printf_float+0x168>
 8008d3e:	6822      	ldr	r2, [r4, #0]
 8008d40:	07d2      	lsls	r2, r2, #31
 8008d42:	d501      	bpl.n	8008d48 <_printf_float+0x16c>
 8008d44:	3301      	adds	r3, #1
 8008d46:	6123      	str	r3, [r4, #16]
 8008d48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d09c      	beq.n	8008c8a <_printf_float+0xae>
 8008d50:	232d      	movs	r3, #45	; 0x2d
 8008d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d56:	e798      	b.n	8008c8a <_printf_float+0xae>
 8008d58:	9a06      	ldr	r2, [sp, #24]
 8008d5a:	2a47      	cmp	r2, #71	; 0x47
 8008d5c:	d1be      	bne.n	8008cdc <_printf_float+0x100>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1bc      	bne.n	8008cdc <_printf_float+0x100>
 8008d62:	2301      	movs	r3, #1
 8008d64:	e7b9      	b.n	8008cda <_printf_float+0xfe>
 8008d66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d6a:	d118      	bne.n	8008d9e <_printf_float+0x1c2>
 8008d6c:	2900      	cmp	r1, #0
 8008d6e:	6863      	ldr	r3, [r4, #4]
 8008d70:	dd0b      	ble.n	8008d8a <_printf_float+0x1ae>
 8008d72:	6121      	str	r1, [r4, #16]
 8008d74:	b913      	cbnz	r3, 8008d7c <_printf_float+0x1a0>
 8008d76:	6822      	ldr	r2, [r4, #0]
 8008d78:	07d0      	lsls	r0, r2, #31
 8008d7a:	d502      	bpl.n	8008d82 <_printf_float+0x1a6>
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	440b      	add	r3, r1
 8008d80:	6123      	str	r3, [r4, #16]
 8008d82:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d84:	f04f 0900 	mov.w	r9, #0
 8008d88:	e7de      	b.n	8008d48 <_printf_float+0x16c>
 8008d8a:	b913      	cbnz	r3, 8008d92 <_printf_float+0x1b6>
 8008d8c:	6822      	ldr	r2, [r4, #0]
 8008d8e:	07d2      	lsls	r2, r2, #31
 8008d90:	d501      	bpl.n	8008d96 <_printf_float+0x1ba>
 8008d92:	3302      	adds	r3, #2
 8008d94:	e7f4      	b.n	8008d80 <_printf_float+0x1a4>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e7f2      	b.n	8008d80 <_printf_float+0x1a4>
 8008d9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da0:	4299      	cmp	r1, r3
 8008da2:	db05      	blt.n	8008db0 <_printf_float+0x1d4>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	6121      	str	r1, [r4, #16]
 8008da8:	07d8      	lsls	r0, r3, #31
 8008daa:	d5ea      	bpl.n	8008d82 <_printf_float+0x1a6>
 8008dac:	1c4b      	adds	r3, r1, #1
 8008dae:	e7e7      	b.n	8008d80 <_printf_float+0x1a4>
 8008db0:	2900      	cmp	r1, #0
 8008db2:	bfd4      	ite	le
 8008db4:	f1c1 0202 	rsble	r2, r1, #2
 8008db8:	2201      	movgt	r2, #1
 8008dba:	4413      	add	r3, r2
 8008dbc:	e7e0      	b.n	8008d80 <_printf_float+0x1a4>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	055a      	lsls	r2, r3, #21
 8008dc2:	d407      	bmi.n	8008dd4 <_printf_float+0x1f8>
 8008dc4:	6923      	ldr	r3, [r4, #16]
 8008dc6:	4642      	mov	r2, r8
 8008dc8:	4631      	mov	r1, r6
 8008dca:	4628      	mov	r0, r5
 8008dcc:	47b8      	blx	r7
 8008dce:	3001      	adds	r0, #1
 8008dd0:	d12c      	bne.n	8008e2c <_printf_float+0x250>
 8008dd2:	e764      	b.n	8008c9e <_printf_float+0xc2>
 8008dd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dd8:	f240 80e0 	bls.w	8008f9c <_printf_float+0x3c0>
 8008ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008de0:	2200      	movs	r2, #0
 8008de2:	2300      	movs	r3, #0
 8008de4:	f7f7 fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d034      	beq.n	8008e56 <_printf_float+0x27a>
 8008dec:	4a37      	ldr	r2, [pc, #220]	; (8008ecc <_printf_float+0x2f0>)
 8008dee:	2301      	movs	r3, #1
 8008df0:	4631      	mov	r1, r6
 8008df2:	4628      	mov	r0, r5
 8008df4:	47b8      	blx	r7
 8008df6:	3001      	adds	r0, #1
 8008df8:	f43f af51 	beq.w	8008c9e <_printf_float+0xc2>
 8008dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e00:	429a      	cmp	r2, r3
 8008e02:	db02      	blt.n	8008e0a <_printf_float+0x22e>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	07d8      	lsls	r0, r3, #31
 8008e08:	d510      	bpl.n	8008e2c <_printf_float+0x250>
 8008e0a:	ee18 3a10 	vmov	r3, s16
 8008e0e:	4652      	mov	r2, sl
 8008e10:	4631      	mov	r1, r6
 8008e12:	4628      	mov	r0, r5
 8008e14:	47b8      	blx	r7
 8008e16:	3001      	adds	r0, #1
 8008e18:	f43f af41 	beq.w	8008c9e <_printf_float+0xc2>
 8008e1c:	f04f 0800 	mov.w	r8, #0
 8008e20:	f104 091a 	add.w	r9, r4, #26
 8008e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e26:	3b01      	subs	r3, #1
 8008e28:	4543      	cmp	r3, r8
 8008e2a:	dc09      	bgt.n	8008e40 <_printf_float+0x264>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	079b      	lsls	r3, r3, #30
 8008e30:	f100 8105 	bmi.w	800903e <_printf_float+0x462>
 8008e34:	68e0      	ldr	r0, [r4, #12]
 8008e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e38:	4298      	cmp	r0, r3
 8008e3a:	bfb8      	it	lt
 8008e3c:	4618      	movlt	r0, r3
 8008e3e:	e730      	b.n	8008ca2 <_printf_float+0xc6>
 8008e40:	2301      	movs	r3, #1
 8008e42:	464a      	mov	r2, r9
 8008e44:	4631      	mov	r1, r6
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b8      	blx	r7
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	f43f af27 	beq.w	8008c9e <_printf_float+0xc2>
 8008e50:	f108 0801 	add.w	r8, r8, #1
 8008e54:	e7e6      	b.n	8008e24 <_printf_float+0x248>
 8008e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	dc39      	bgt.n	8008ed0 <_printf_float+0x2f4>
 8008e5c:	4a1b      	ldr	r2, [pc, #108]	; (8008ecc <_printf_float+0x2f0>)
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4631      	mov	r1, r6
 8008e62:	4628      	mov	r0, r5
 8008e64:	47b8      	blx	r7
 8008e66:	3001      	adds	r0, #1
 8008e68:	f43f af19 	beq.w	8008c9e <_printf_float+0xc2>
 8008e6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e70:	4313      	orrs	r3, r2
 8008e72:	d102      	bne.n	8008e7a <_printf_float+0x29e>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	07d9      	lsls	r1, r3, #31
 8008e78:	d5d8      	bpl.n	8008e2c <_printf_float+0x250>
 8008e7a:	ee18 3a10 	vmov	r3, s16
 8008e7e:	4652      	mov	r2, sl
 8008e80:	4631      	mov	r1, r6
 8008e82:	4628      	mov	r0, r5
 8008e84:	47b8      	blx	r7
 8008e86:	3001      	adds	r0, #1
 8008e88:	f43f af09 	beq.w	8008c9e <_printf_float+0xc2>
 8008e8c:	f04f 0900 	mov.w	r9, #0
 8008e90:	f104 0a1a 	add.w	sl, r4, #26
 8008e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e96:	425b      	negs	r3, r3
 8008e98:	454b      	cmp	r3, r9
 8008e9a:	dc01      	bgt.n	8008ea0 <_printf_float+0x2c4>
 8008e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9e:	e792      	b.n	8008dc6 <_printf_float+0x1ea>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	4652      	mov	r2, sl
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b8      	blx	r7
 8008eaa:	3001      	adds	r0, #1
 8008eac:	f43f aef7 	beq.w	8008c9e <_printf_float+0xc2>
 8008eb0:	f109 0901 	add.w	r9, r9, #1
 8008eb4:	e7ee      	b.n	8008e94 <_printf_float+0x2b8>
 8008eb6:	bf00      	nop
 8008eb8:	7fefffff 	.word	0x7fefffff
 8008ebc:	0800c328 	.word	0x0800c328
 8008ec0:	0800c32c 	.word	0x0800c32c
 8008ec4:	0800c334 	.word	0x0800c334
 8008ec8:	0800c330 	.word	0x0800c330
 8008ecc:	0800c338 	.word	0x0800c338
 8008ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	bfa8      	it	ge
 8008ed8:	461a      	movge	r2, r3
 8008eda:	2a00      	cmp	r2, #0
 8008edc:	4691      	mov	r9, r2
 8008ede:	dc37      	bgt.n	8008f50 <_printf_float+0x374>
 8008ee0:	f04f 0b00 	mov.w	fp, #0
 8008ee4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ee8:	f104 021a 	add.w	r2, r4, #26
 8008eec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008eee:	9305      	str	r3, [sp, #20]
 8008ef0:	eba3 0309 	sub.w	r3, r3, r9
 8008ef4:	455b      	cmp	r3, fp
 8008ef6:	dc33      	bgt.n	8008f60 <_printf_float+0x384>
 8008ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008efc:	429a      	cmp	r2, r3
 8008efe:	db3b      	blt.n	8008f78 <_printf_float+0x39c>
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	07da      	lsls	r2, r3, #31
 8008f04:	d438      	bmi.n	8008f78 <_printf_float+0x39c>
 8008f06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f08:	9b05      	ldr	r3, [sp, #20]
 8008f0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	eba2 0901 	sub.w	r9, r2, r1
 8008f12:	4599      	cmp	r9, r3
 8008f14:	bfa8      	it	ge
 8008f16:	4699      	movge	r9, r3
 8008f18:	f1b9 0f00 	cmp.w	r9, #0
 8008f1c:	dc35      	bgt.n	8008f8a <_printf_float+0x3ae>
 8008f1e:	f04f 0800 	mov.w	r8, #0
 8008f22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f26:	f104 0a1a 	add.w	sl, r4, #26
 8008f2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f2e:	1a9b      	subs	r3, r3, r2
 8008f30:	eba3 0309 	sub.w	r3, r3, r9
 8008f34:	4543      	cmp	r3, r8
 8008f36:	f77f af79 	ble.w	8008e2c <_printf_float+0x250>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	4652      	mov	r2, sl
 8008f3e:	4631      	mov	r1, r6
 8008f40:	4628      	mov	r0, r5
 8008f42:	47b8      	blx	r7
 8008f44:	3001      	adds	r0, #1
 8008f46:	f43f aeaa 	beq.w	8008c9e <_printf_float+0xc2>
 8008f4a:	f108 0801 	add.w	r8, r8, #1
 8008f4e:	e7ec      	b.n	8008f2a <_printf_float+0x34e>
 8008f50:	4613      	mov	r3, r2
 8008f52:	4631      	mov	r1, r6
 8008f54:	4642      	mov	r2, r8
 8008f56:	4628      	mov	r0, r5
 8008f58:	47b8      	blx	r7
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d1c0      	bne.n	8008ee0 <_printf_float+0x304>
 8008f5e:	e69e      	b.n	8008c9e <_printf_float+0xc2>
 8008f60:	2301      	movs	r3, #1
 8008f62:	4631      	mov	r1, r6
 8008f64:	4628      	mov	r0, r5
 8008f66:	9205      	str	r2, [sp, #20]
 8008f68:	47b8      	blx	r7
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	f43f ae97 	beq.w	8008c9e <_printf_float+0xc2>
 8008f70:	9a05      	ldr	r2, [sp, #20]
 8008f72:	f10b 0b01 	add.w	fp, fp, #1
 8008f76:	e7b9      	b.n	8008eec <_printf_float+0x310>
 8008f78:	ee18 3a10 	vmov	r3, s16
 8008f7c:	4652      	mov	r2, sl
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4628      	mov	r0, r5
 8008f82:	47b8      	blx	r7
 8008f84:	3001      	adds	r0, #1
 8008f86:	d1be      	bne.n	8008f06 <_printf_float+0x32a>
 8008f88:	e689      	b.n	8008c9e <_printf_float+0xc2>
 8008f8a:	9a05      	ldr	r2, [sp, #20]
 8008f8c:	464b      	mov	r3, r9
 8008f8e:	4442      	add	r2, r8
 8008f90:	4631      	mov	r1, r6
 8008f92:	4628      	mov	r0, r5
 8008f94:	47b8      	blx	r7
 8008f96:	3001      	adds	r0, #1
 8008f98:	d1c1      	bne.n	8008f1e <_printf_float+0x342>
 8008f9a:	e680      	b.n	8008c9e <_printf_float+0xc2>
 8008f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f9e:	2a01      	cmp	r2, #1
 8008fa0:	dc01      	bgt.n	8008fa6 <_printf_float+0x3ca>
 8008fa2:	07db      	lsls	r3, r3, #31
 8008fa4:	d538      	bpl.n	8009018 <_printf_float+0x43c>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4642      	mov	r2, r8
 8008faa:	4631      	mov	r1, r6
 8008fac:	4628      	mov	r0, r5
 8008fae:	47b8      	blx	r7
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	f43f ae74 	beq.w	8008c9e <_printf_float+0xc2>
 8008fb6:	ee18 3a10 	vmov	r3, s16
 8008fba:	4652      	mov	r2, sl
 8008fbc:	4631      	mov	r1, r6
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	47b8      	blx	r7
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	f43f ae6b 	beq.w	8008c9e <_printf_float+0xc2>
 8008fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fcc:	2200      	movs	r2, #0
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f7f7 fd82 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fd4:	b9d8      	cbnz	r0, 800900e <_printf_float+0x432>
 8008fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd8:	f108 0201 	add.w	r2, r8, #1
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	47b8      	blx	r7
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d10e      	bne.n	8009006 <_printf_float+0x42a>
 8008fe8:	e659      	b.n	8008c9e <_printf_float+0xc2>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4652      	mov	r2, sl
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b8      	blx	r7
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	f43f ae52 	beq.w	8008c9e <_printf_float+0xc2>
 8008ffa:	f108 0801 	add.w	r8, r8, #1
 8008ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009000:	3b01      	subs	r3, #1
 8009002:	4543      	cmp	r3, r8
 8009004:	dcf1      	bgt.n	8008fea <_printf_float+0x40e>
 8009006:	464b      	mov	r3, r9
 8009008:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800900c:	e6dc      	b.n	8008dc8 <_printf_float+0x1ec>
 800900e:	f04f 0800 	mov.w	r8, #0
 8009012:	f104 0a1a 	add.w	sl, r4, #26
 8009016:	e7f2      	b.n	8008ffe <_printf_float+0x422>
 8009018:	2301      	movs	r3, #1
 800901a:	4642      	mov	r2, r8
 800901c:	e7df      	b.n	8008fde <_printf_float+0x402>
 800901e:	2301      	movs	r3, #1
 8009020:	464a      	mov	r2, r9
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	f43f ae38 	beq.w	8008c9e <_printf_float+0xc2>
 800902e:	f108 0801 	add.w	r8, r8, #1
 8009032:	68e3      	ldr	r3, [r4, #12]
 8009034:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009036:	1a5b      	subs	r3, r3, r1
 8009038:	4543      	cmp	r3, r8
 800903a:	dcf0      	bgt.n	800901e <_printf_float+0x442>
 800903c:	e6fa      	b.n	8008e34 <_printf_float+0x258>
 800903e:	f04f 0800 	mov.w	r8, #0
 8009042:	f104 0919 	add.w	r9, r4, #25
 8009046:	e7f4      	b.n	8009032 <_printf_float+0x456>

08009048 <_printf_common>:
 8009048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800904c:	4616      	mov	r6, r2
 800904e:	4699      	mov	r9, r3
 8009050:	688a      	ldr	r2, [r1, #8]
 8009052:	690b      	ldr	r3, [r1, #16]
 8009054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009058:	4293      	cmp	r3, r2
 800905a:	bfb8      	it	lt
 800905c:	4613      	movlt	r3, r2
 800905e:	6033      	str	r3, [r6, #0]
 8009060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009064:	4607      	mov	r7, r0
 8009066:	460c      	mov	r4, r1
 8009068:	b10a      	cbz	r2, 800906e <_printf_common+0x26>
 800906a:	3301      	adds	r3, #1
 800906c:	6033      	str	r3, [r6, #0]
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	0699      	lsls	r1, r3, #26
 8009072:	bf42      	ittt	mi
 8009074:	6833      	ldrmi	r3, [r6, #0]
 8009076:	3302      	addmi	r3, #2
 8009078:	6033      	strmi	r3, [r6, #0]
 800907a:	6825      	ldr	r5, [r4, #0]
 800907c:	f015 0506 	ands.w	r5, r5, #6
 8009080:	d106      	bne.n	8009090 <_printf_common+0x48>
 8009082:	f104 0a19 	add.w	sl, r4, #25
 8009086:	68e3      	ldr	r3, [r4, #12]
 8009088:	6832      	ldr	r2, [r6, #0]
 800908a:	1a9b      	subs	r3, r3, r2
 800908c:	42ab      	cmp	r3, r5
 800908e:	dc26      	bgt.n	80090de <_printf_common+0x96>
 8009090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009094:	1e13      	subs	r3, r2, #0
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	bf18      	it	ne
 800909a:	2301      	movne	r3, #1
 800909c:	0692      	lsls	r2, r2, #26
 800909e:	d42b      	bmi.n	80090f8 <_printf_common+0xb0>
 80090a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090a4:	4649      	mov	r1, r9
 80090a6:	4638      	mov	r0, r7
 80090a8:	47c0      	blx	r8
 80090aa:	3001      	adds	r0, #1
 80090ac:	d01e      	beq.n	80090ec <_printf_common+0xa4>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	68e5      	ldr	r5, [r4, #12]
 80090b2:	6832      	ldr	r2, [r6, #0]
 80090b4:	f003 0306 	and.w	r3, r3, #6
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	bf08      	it	eq
 80090bc:	1aad      	subeq	r5, r5, r2
 80090be:	68a3      	ldr	r3, [r4, #8]
 80090c0:	6922      	ldr	r2, [r4, #16]
 80090c2:	bf0c      	ite	eq
 80090c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090c8:	2500      	movne	r5, #0
 80090ca:	4293      	cmp	r3, r2
 80090cc:	bfc4      	itt	gt
 80090ce:	1a9b      	subgt	r3, r3, r2
 80090d0:	18ed      	addgt	r5, r5, r3
 80090d2:	2600      	movs	r6, #0
 80090d4:	341a      	adds	r4, #26
 80090d6:	42b5      	cmp	r5, r6
 80090d8:	d11a      	bne.n	8009110 <_printf_common+0xc8>
 80090da:	2000      	movs	r0, #0
 80090dc:	e008      	b.n	80090f0 <_printf_common+0xa8>
 80090de:	2301      	movs	r3, #1
 80090e0:	4652      	mov	r2, sl
 80090e2:	4649      	mov	r1, r9
 80090e4:	4638      	mov	r0, r7
 80090e6:	47c0      	blx	r8
 80090e8:	3001      	adds	r0, #1
 80090ea:	d103      	bne.n	80090f4 <_printf_common+0xac>
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f4:	3501      	adds	r5, #1
 80090f6:	e7c6      	b.n	8009086 <_printf_common+0x3e>
 80090f8:	18e1      	adds	r1, r4, r3
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	2030      	movs	r0, #48	; 0x30
 80090fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009102:	4422      	add	r2, r4
 8009104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800910c:	3302      	adds	r3, #2
 800910e:	e7c7      	b.n	80090a0 <_printf_common+0x58>
 8009110:	2301      	movs	r3, #1
 8009112:	4622      	mov	r2, r4
 8009114:	4649      	mov	r1, r9
 8009116:	4638      	mov	r0, r7
 8009118:	47c0      	blx	r8
 800911a:	3001      	adds	r0, #1
 800911c:	d0e6      	beq.n	80090ec <_printf_common+0xa4>
 800911e:	3601      	adds	r6, #1
 8009120:	e7d9      	b.n	80090d6 <_printf_common+0x8e>
	...

08009124 <_printf_i>:
 8009124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	460c      	mov	r4, r1
 800912a:	4691      	mov	r9, r2
 800912c:	7e27      	ldrb	r7, [r4, #24]
 800912e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009130:	2f78      	cmp	r7, #120	; 0x78
 8009132:	4680      	mov	r8, r0
 8009134:	469a      	mov	sl, r3
 8009136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800913a:	d807      	bhi.n	800914c <_printf_i+0x28>
 800913c:	2f62      	cmp	r7, #98	; 0x62
 800913e:	d80a      	bhi.n	8009156 <_printf_i+0x32>
 8009140:	2f00      	cmp	r7, #0
 8009142:	f000 80d8 	beq.w	80092f6 <_printf_i+0x1d2>
 8009146:	2f58      	cmp	r7, #88	; 0x58
 8009148:	f000 80a3 	beq.w	8009292 <_printf_i+0x16e>
 800914c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009154:	e03a      	b.n	80091cc <_printf_i+0xa8>
 8009156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800915a:	2b15      	cmp	r3, #21
 800915c:	d8f6      	bhi.n	800914c <_printf_i+0x28>
 800915e:	a001      	add	r0, pc, #4	; (adr r0, 8009164 <_printf_i+0x40>)
 8009160:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009164:	080091bd 	.word	0x080091bd
 8009168:	080091d1 	.word	0x080091d1
 800916c:	0800914d 	.word	0x0800914d
 8009170:	0800914d 	.word	0x0800914d
 8009174:	0800914d 	.word	0x0800914d
 8009178:	0800914d 	.word	0x0800914d
 800917c:	080091d1 	.word	0x080091d1
 8009180:	0800914d 	.word	0x0800914d
 8009184:	0800914d 	.word	0x0800914d
 8009188:	0800914d 	.word	0x0800914d
 800918c:	0800914d 	.word	0x0800914d
 8009190:	080092dd 	.word	0x080092dd
 8009194:	08009201 	.word	0x08009201
 8009198:	080092bf 	.word	0x080092bf
 800919c:	0800914d 	.word	0x0800914d
 80091a0:	0800914d 	.word	0x0800914d
 80091a4:	080092ff 	.word	0x080092ff
 80091a8:	0800914d 	.word	0x0800914d
 80091ac:	08009201 	.word	0x08009201
 80091b0:	0800914d 	.word	0x0800914d
 80091b4:	0800914d 	.word	0x0800914d
 80091b8:	080092c7 	.word	0x080092c7
 80091bc:	680b      	ldr	r3, [r1, #0]
 80091be:	1d1a      	adds	r2, r3, #4
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	600a      	str	r2, [r1, #0]
 80091c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091cc:	2301      	movs	r3, #1
 80091ce:	e0a3      	b.n	8009318 <_printf_i+0x1f4>
 80091d0:	6825      	ldr	r5, [r4, #0]
 80091d2:	6808      	ldr	r0, [r1, #0]
 80091d4:	062e      	lsls	r6, r5, #24
 80091d6:	f100 0304 	add.w	r3, r0, #4
 80091da:	d50a      	bpl.n	80091f2 <_printf_i+0xce>
 80091dc:	6805      	ldr	r5, [r0, #0]
 80091de:	600b      	str	r3, [r1, #0]
 80091e0:	2d00      	cmp	r5, #0
 80091e2:	da03      	bge.n	80091ec <_printf_i+0xc8>
 80091e4:	232d      	movs	r3, #45	; 0x2d
 80091e6:	426d      	negs	r5, r5
 80091e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ec:	485e      	ldr	r0, [pc, #376]	; (8009368 <_printf_i+0x244>)
 80091ee:	230a      	movs	r3, #10
 80091f0:	e019      	b.n	8009226 <_printf_i+0x102>
 80091f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80091f6:	6805      	ldr	r5, [r0, #0]
 80091f8:	600b      	str	r3, [r1, #0]
 80091fa:	bf18      	it	ne
 80091fc:	b22d      	sxthne	r5, r5
 80091fe:	e7ef      	b.n	80091e0 <_printf_i+0xbc>
 8009200:	680b      	ldr	r3, [r1, #0]
 8009202:	6825      	ldr	r5, [r4, #0]
 8009204:	1d18      	adds	r0, r3, #4
 8009206:	6008      	str	r0, [r1, #0]
 8009208:	0628      	lsls	r0, r5, #24
 800920a:	d501      	bpl.n	8009210 <_printf_i+0xec>
 800920c:	681d      	ldr	r5, [r3, #0]
 800920e:	e002      	b.n	8009216 <_printf_i+0xf2>
 8009210:	0669      	lsls	r1, r5, #25
 8009212:	d5fb      	bpl.n	800920c <_printf_i+0xe8>
 8009214:	881d      	ldrh	r5, [r3, #0]
 8009216:	4854      	ldr	r0, [pc, #336]	; (8009368 <_printf_i+0x244>)
 8009218:	2f6f      	cmp	r7, #111	; 0x6f
 800921a:	bf0c      	ite	eq
 800921c:	2308      	moveq	r3, #8
 800921e:	230a      	movne	r3, #10
 8009220:	2100      	movs	r1, #0
 8009222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009226:	6866      	ldr	r6, [r4, #4]
 8009228:	60a6      	str	r6, [r4, #8]
 800922a:	2e00      	cmp	r6, #0
 800922c:	bfa2      	ittt	ge
 800922e:	6821      	ldrge	r1, [r4, #0]
 8009230:	f021 0104 	bicge.w	r1, r1, #4
 8009234:	6021      	strge	r1, [r4, #0]
 8009236:	b90d      	cbnz	r5, 800923c <_printf_i+0x118>
 8009238:	2e00      	cmp	r6, #0
 800923a:	d04d      	beq.n	80092d8 <_printf_i+0x1b4>
 800923c:	4616      	mov	r6, r2
 800923e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009242:	fb03 5711 	mls	r7, r3, r1, r5
 8009246:	5dc7      	ldrb	r7, [r0, r7]
 8009248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800924c:	462f      	mov	r7, r5
 800924e:	42bb      	cmp	r3, r7
 8009250:	460d      	mov	r5, r1
 8009252:	d9f4      	bls.n	800923e <_printf_i+0x11a>
 8009254:	2b08      	cmp	r3, #8
 8009256:	d10b      	bne.n	8009270 <_printf_i+0x14c>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	07df      	lsls	r7, r3, #31
 800925c:	d508      	bpl.n	8009270 <_printf_i+0x14c>
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	6861      	ldr	r1, [r4, #4]
 8009262:	4299      	cmp	r1, r3
 8009264:	bfde      	ittt	le
 8009266:	2330      	movle	r3, #48	; 0x30
 8009268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800926c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009270:	1b92      	subs	r2, r2, r6
 8009272:	6122      	str	r2, [r4, #16]
 8009274:	f8cd a000 	str.w	sl, [sp]
 8009278:	464b      	mov	r3, r9
 800927a:	aa03      	add	r2, sp, #12
 800927c:	4621      	mov	r1, r4
 800927e:	4640      	mov	r0, r8
 8009280:	f7ff fee2 	bl	8009048 <_printf_common>
 8009284:	3001      	adds	r0, #1
 8009286:	d14c      	bne.n	8009322 <_printf_i+0x1fe>
 8009288:	f04f 30ff 	mov.w	r0, #4294967295
 800928c:	b004      	add	sp, #16
 800928e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009292:	4835      	ldr	r0, [pc, #212]	; (8009368 <_printf_i+0x244>)
 8009294:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	680e      	ldr	r6, [r1, #0]
 800929c:	061f      	lsls	r7, r3, #24
 800929e:	f856 5b04 	ldr.w	r5, [r6], #4
 80092a2:	600e      	str	r6, [r1, #0]
 80092a4:	d514      	bpl.n	80092d0 <_printf_i+0x1ac>
 80092a6:	07d9      	lsls	r1, r3, #31
 80092a8:	bf44      	itt	mi
 80092aa:	f043 0320 	orrmi.w	r3, r3, #32
 80092ae:	6023      	strmi	r3, [r4, #0]
 80092b0:	b91d      	cbnz	r5, 80092ba <_printf_i+0x196>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	f023 0320 	bic.w	r3, r3, #32
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	2310      	movs	r3, #16
 80092bc:	e7b0      	b.n	8009220 <_printf_i+0xfc>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	f043 0320 	orr.w	r3, r3, #32
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	2378      	movs	r3, #120	; 0x78
 80092c8:	4828      	ldr	r0, [pc, #160]	; (800936c <_printf_i+0x248>)
 80092ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092ce:	e7e3      	b.n	8009298 <_printf_i+0x174>
 80092d0:	065e      	lsls	r6, r3, #25
 80092d2:	bf48      	it	mi
 80092d4:	b2ad      	uxthmi	r5, r5
 80092d6:	e7e6      	b.n	80092a6 <_printf_i+0x182>
 80092d8:	4616      	mov	r6, r2
 80092da:	e7bb      	b.n	8009254 <_printf_i+0x130>
 80092dc:	680b      	ldr	r3, [r1, #0]
 80092de:	6826      	ldr	r6, [r4, #0]
 80092e0:	6960      	ldr	r0, [r4, #20]
 80092e2:	1d1d      	adds	r5, r3, #4
 80092e4:	600d      	str	r5, [r1, #0]
 80092e6:	0635      	lsls	r5, r6, #24
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	d501      	bpl.n	80092f0 <_printf_i+0x1cc>
 80092ec:	6018      	str	r0, [r3, #0]
 80092ee:	e002      	b.n	80092f6 <_printf_i+0x1d2>
 80092f0:	0671      	lsls	r1, r6, #25
 80092f2:	d5fb      	bpl.n	80092ec <_printf_i+0x1c8>
 80092f4:	8018      	strh	r0, [r3, #0]
 80092f6:	2300      	movs	r3, #0
 80092f8:	6123      	str	r3, [r4, #16]
 80092fa:	4616      	mov	r6, r2
 80092fc:	e7ba      	b.n	8009274 <_printf_i+0x150>
 80092fe:	680b      	ldr	r3, [r1, #0]
 8009300:	1d1a      	adds	r2, r3, #4
 8009302:	600a      	str	r2, [r1, #0]
 8009304:	681e      	ldr	r6, [r3, #0]
 8009306:	6862      	ldr	r2, [r4, #4]
 8009308:	2100      	movs	r1, #0
 800930a:	4630      	mov	r0, r6
 800930c:	f7f6 ff70 	bl	80001f0 <memchr>
 8009310:	b108      	cbz	r0, 8009316 <_printf_i+0x1f2>
 8009312:	1b80      	subs	r0, r0, r6
 8009314:	6060      	str	r0, [r4, #4]
 8009316:	6863      	ldr	r3, [r4, #4]
 8009318:	6123      	str	r3, [r4, #16]
 800931a:	2300      	movs	r3, #0
 800931c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009320:	e7a8      	b.n	8009274 <_printf_i+0x150>
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	4632      	mov	r2, r6
 8009326:	4649      	mov	r1, r9
 8009328:	4640      	mov	r0, r8
 800932a:	47d0      	blx	sl
 800932c:	3001      	adds	r0, #1
 800932e:	d0ab      	beq.n	8009288 <_printf_i+0x164>
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	079b      	lsls	r3, r3, #30
 8009334:	d413      	bmi.n	800935e <_printf_i+0x23a>
 8009336:	68e0      	ldr	r0, [r4, #12]
 8009338:	9b03      	ldr	r3, [sp, #12]
 800933a:	4298      	cmp	r0, r3
 800933c:	bfb8      	it	lt
 800933e:	4618      	movlt	r0, r3
 8009340:	e7a4      	b.n	800928c <_printf_i+0x168>
 8009342:	2301      	movs	r3, #1
 8009344:	4632      	mov	r2, r6
 8009346:	4649      	mov	r1, r9
 8009348:	4640      	mov	r0, r8
 800934a:	47d0      	blx	sl
 800934c:	3001      	adds	r0, #1
 800934e:	d09b      	beq.n	8009288 <_printf_i+0x164>
 8009350:	3501      	adds	r5, #1
 8009352:	68e3      	ldr	r3, [r4, #12]
 8009354:	9903      	ldr	r1, [sp, #12]
 8009356:	1a5b      	subs	r3, r3, r1
 8009358:	42ab      	cmp	r3, r5
 800935a:	dcf2      	bgt.n	8009342 <_printf_i+0x21e>
 800935c:	e7eb      	b.n	8009336 <_printf_i+0x212>
 800935e:	2500      	movs	r5, #0
 8009360:	f104 0619 	add.w	r6, r4, #25
 8009364:	e7f5      	b.n	8009352 <_printf_i+0x22e>
 8009366:	bf00      	nop
 8009368:	0800c33a 	.word	0x0800c33a
 800936c:	0800c34b 	.word	0x0800c34b

08009370 <swapfunc>:
 8009370:	2b02      	cmp	r3, #2
 8009372:	b510      	push	{r4, lr}
 8009374:	d00a      	beq.n	800938c <swapfunc+0x1c>
 8009376:	0892      	lsrs	r2, r2, #2
 8009378:	3a01      	subs	r2, #1
 800937a:	6803      	ldr	r3, [r0, #0]
 800937c:	680c      	ldr	r4, [r1, #0]
 800937e:	f840 4b04 	str.w	r4, [r0], #4
 8009382:	2a00      	cmp	r2, #0
 8009384:	f841 3b04 	str.w	r3, [r1], #4
 8009388:	dcf6      	bgt.n	8009378 <swapfunc+0x8>
 800938a:	bd10      	pop	{r4, pc}
 800938c:	4402      	add	r2, r0
 800938e:	780c      	ldrb	r4, [r1, #0]
 8009390:	7803      	ldrb	r3, [r0, #0]
 8009392:	f800 4b01 	strb.w	r4, [r0], #1
 8009396:	f801 3b01 	strb.w	r3, [r1], #1
 800939a:	1a13      	subs	r3, r2, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	dcf6      	bgt.n	800938e <swapfunc+0x1e>
 80093a0:	e7f3      	b.n	800938a <swapfunc+0x1a>

080093a2 <med3.isra.0>:
 80093a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a4:	460f      	mov	r7, r1
 80093a6:	4614      	mov	r4, r2
 80093a8:	4606      	mov	r6, r0
 80093aa:	461d      	mov	r5, r3
 80093ac:	4798      	blx	r3
 80093ae:	2800      	cmp	r0, #0
 80093b0:	4621      	mov	r1, r4
 80093b2:	4638      	mov	r0, r7
 80093b4:	da0c      	bge.n	80093d0 <med3.isra.0+0x2e>
 80093b6:	47a8      	blx	r5
 80093b8:	2800      	cmp	r0, #0
 80093ba:	da02      	bge.n	80093c2 <med3.isra.0+0x20>
 80093bc:	463c      	mov	r4, r7
 80093be:	4620      	mov	r0, r4
 80093c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c2:	4621      	mov	r1, r4
 80093c4:	4630      	mov	r0, r6
 80093c6:	47a8      	blx	r5
 80093c8:	2800      	cmp	r0, #0
 80093ca:	dbf8      	blt.n	80093be <med3.isra.0+0x1c>
 80093cc:	4634      	mov	r4, r6
 80093ce:	e7f6      	b.n	80093be <med3.isra.0+0x1c>
 80093d0:	47a8      	blx	r5
 80093d2:	2800      	cmp	r0, #0
 80093d4:	dcf2      	bgt.n	80093bc <med3.isra.0+0x1a>
 80093d6:	4621      	mov	r1, r4
 80093d8:	4630      	mov	r0, r6
 80093da:	47a8      	blx	r5
 80093dc:	2800      	cmp	r0, #0
 80093de:	daee      	bge.n	80093be <med3.isra.0+0x1c>
 80093e0:	e7f4      	b.n	80093cc <med3.isra.0+0x2a>

080093e2 <qsort>:
 80093e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e6:	469a      	mov	sl, r3
 80093e8:	ea40 0302 	orr.w	r3, r0, r2
 80093ec:	079b      	lsls	r3, r3, #30
 80093ee:	b097      	sub	sp, #92	; 0x5c
 80093f0:	4606      	mov	r6, r0
 80093f2:	4614      	mov	r4, r2
 80093f4:	d11a      	bne.n	800942c <qsort+0x4a>
 80093f6:	f1b2 0804 	subs.w	r8, r2, #4
 80093fa:	bf18      	it	ne
 80093fc:	f04f 0801 	movne.w	r8, #1
 8009400:	2300      	movs	r3, #0
 8009402:	9302      	str	r3, [sp, #8]
 8009404:	1933      	adds	r3, r6, r4
 8009406:	fb04 f701 	mul.w	r7, r4, r1
 800940a:	9301      	str	r3, [sp, #4]
 800940c:	2906      	cmp	r1, #6
 800940e:	eb06 0307 	add.w	r3, r6, r7
 8009412:	9303      	str	r3, [sp, #12]
 8009414:	d82a      	bhi.n	800946c <qsort+0x8a>
 8009416:	9b01      	ldr	r3, [sp, #4]
 8009418:	9a03      	ldr	r2, [sp, #12]
 800941a:	4293      	cmp	r3, r2
 800941c:	d310      	bcc.n	8009440 <qsort+0x5e>
 800941e:	9b02      	ldr	r3, [sp, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	f040 811f 	bne.w	8009664 <qsort+0x282>
 8009426:	b017      	add	sp, #92	; 0x5c
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942c:	f04f 0802 	mov.w	r8, #2
 8009430:	e7e6      	b.n	8009400 <qsort+0x1e>
 8009432:	4643      	mov	r3, r8
 8009434:	4622      	mov	r2, r4
 8009436:	4639      	mov	r1, r7
 8009438:	4628      	mov	r0, r5
 800943a:	f7ff ff99 	bl	8009370 <swapfunc>
 800943e:	e00e      	b.n	800945e <qsort+0x7c>
 8009440:	9d01      	ldr	r5, [sp, #4]
 8009442:	e00d      	b.n	8009460 <qsort+0x7e>
 8009444:	1b2f      	subs	r7, r5, r4
 8009446:	4629      	mov	r1, r5
 8009448:	4638      	mov	r0, r7
 800944a:	47d0      	blx	sl
 800944c:	2800      	cmp	r0, #0
 800944e:	dd09      	ble.n	8009464 <qsort+0x82>
 8009450:	f1b8 0f00 	cmp.w	r8, #0
 8009454:	d1ed      	bne.n	8009432 <qsort+0x50>
 8009456:	682b      	ldr	r3, [r5, #0]
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	602a      	str	r2, [r5, #0]
 800945c:	603b      	str	r3, [r7, #0]
 800945e:	463d      	mov	r5, r7
 8009460:	42ae      	cmp	r6, r5
 8009462:	d3ef      	bcc.n	8009444 <qsort+0x62>
 8009464:	9b01      	ldr	r3, [sp, #4]
 8009466:	4423      	add	r3, r4
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	e7d4      	b.n	8009416 <qsort+0x34>
 800946c:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8009470:	1b3f      	subs	r7, r7, r4
 8009472:	2907      	cmp	r1, #7
 8009474:	fb04 6909 	mla	r9, r4, r9, r6
 8009478:	4437      	add	r7, r6
 800947a:	d022      	beq.n	80094c2 <qsort+0xe0>
 800947c:	2928      	cmp	r1, #40	; 0x28
 800947e:	d945      	bls.n	800950c <qsort+0x12a>
 8009480:	08c9      	lsrs	r1, r1, #3
 8009482:	fb04 f501 	mul.w	r5, r4, r1
 8009486:	4653      	mov	r3, sl
 8009488:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800948c:	1971      	adds	r1, r6, r5
 800948e:	4630      	mov	r0, r6
 8009490:	f7ff ff87 	bl	80093a2 <med3.isra.0>
 8009494:	4649      	mov	r1, r9
 8009496:	eb09 0205 	add.w	r2, r9, r5
 800949a:	4653      	mov	r3, sl
 800949c:	4683      	mov	fp, r0
 800949e:	1b48      	subs	r0, r1, r5
 80094a0:	f7ff ff7f 	bl	80093a2 <med3.isra.0>
 80094a4:	463a      	mov	r2, r7
 80094a6:	4681      	mov	r9, r0
 80094a8:	4653      	mov	r3, sl
 80094aa:	1b79      	subs	r1, r7, r5
 80094ac:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 80094b0:	f7ff ff77 	bl	80093a2 <med3.isra.0>
 80094b4:	4602      	mov	r2, r0
 80094b6:	4649      	mov	r1, r9
 80094b8:	4653      	mov	r3, sl
 80094ba:	4658      	mov	r0, fp
 80094bc:	f7ff ff71 	bl	80093a2 <med3.isra.0>
 80094c0:	4681      	mov	r9, r0
 80094c2:	f1b8 0f00 	cmp.w	r8, #0
 80094c6:	d124      	bne.n	8009512 <qsort+0x130>
 80094c8:	6833      	ldr	r3, [r6, #0]
 80094ca:	f8d9 2000 	ldr.w	r2, [r9]
 80094ce:	6032      	str	r2, [r6, #0]
 80094d0:	f8c9 3000 	str.w	r3, [r9]
 80094d4:	eb06 0b04 	add.w	fp, r6, r4
 80094d8:	46b9      	mov	r9, r7
 80094da:	465d      	mov	r5, fp
 80094dc:	2300      	movs	r3, #0
 80094de:	45bb      	cmp	fp, r7
 80094e0:	d835      	bhi.n	800954e <qsort+0x16c>
 80094e2:	4631      	mov	r1, r6
 80094e4:	4658      	mov	r0, fp
 80094e6:	9304      	str	r3, [sp, #16]
 80094e8:	47d0      	blx	sl
 80094ea:	2800      	cmp	r0, #0
 80094ec:	9b04      	ldr	r3, [sp, #16]
 80094ee:	dc3e      	bgt.n	800956e <qsort+0x18c>
 80094f0:	d10a      	bne.n	8009508 <qsort+0x126>
 80094f2:	f1b8 0f00 	cmp.w	r8, #0
 80094f6:	d113      	bne.n	8009520 <qsort+0x13e>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	f8db 2000 	ldr.w	r2, [fp]
 80094fe:	602a      	str	r2, [r5, #0]
 8009500:	f8cb 3000 	str.w	r3, [fp]
 8009504:	4425      	add	r5, r4
 8009506:	2301      	movs	r3, #1
 8009508:	44a3      	add	fp, r4
 800950a:	e7e8      	b.n	80094de <qsort+0xfc>
 800950c:	463a      	mov	r2, r7
 800950e:	46b3      	mov	fp, r6
 8009510:	e7d1      	b.n	80094b6 <qsort+0xd4>
 8009512:	4643      	mov	r3, r8
 8009514:	4622      	mov	r2, r4
 8009516:	4649      	mov	r1, r9
 8009518:	4630      	mov	r0, r6
 800951a:	f7ff ff29 	bl	8009370 <swapfunc>
 800951e:	e7d9      	b.n	80094d4 <qsort+0xf2>
 8009520:	4643      	mov	r3, r8
 8009522:	4622      	mov	r2, r4
 8009524:	4659      	mov	r1, fp
 8009526:	4628      	mov	r0, r5
 8009528:	f7ff ff22 	bl	8009370 <swapfunc>
 800952c:	e7ea      	b.n	8009504 <qsort+0x122>
 800952e:	d10b      	bne.n	8009548 <qsort+0x166>
 8009530:	f1b8 0f00 	cmp.w	r8, #0
 8009534:	d114      	bne.n	8009560 <qsort+0x17e>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	f8d9 2000 	ldr.w	r2, [r9]
 800953c:	603a      	str	r2, [r7, #0]
 800953e:	f8c9 3000 	str.w	r3, [r9]
 8009542:	eba9 0904 	sub.w	r9, r9, r4
 8009546:	2301      	movs	r3, #1
 8009548:	9f04      	ldr	r7, [sp, #16]
 800954a:	45bb      	cmp	fp, r7
 800954c:	d90f      	bls.n	800956e <qsort+0x18c>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d143      	bne.n	80095da <qsort+0x1f8>
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	9a03      	ldr	r2, [sp, #12]
 8009556:	4293      	cmp	r3, r2
 8009558:	f4bf af61 	bcs.w	800941e <qsort+0x3c>
 800955c:	9d01      	ldr	r5, [sp, #4]
 800955e:	e036      	b.n	80095ce <qsort+0x1ec>
 8009560:	4643      	mov	r3, r8
 8009562:	4622      	mov	r2, r4
 8009564:	4649      	mov	r1, r9
 8009566:	4638      	mov	r0, r7
 8009568:	f7ff ff02 	bl	8009370 <swapfunc>
 800956c:	e7e9      	b.n	8009542 <qsort+0x160>
 800956e:	4631      	mov	r1, r6
 8009570:	4638      	mov	r0, r7
 8009572:	9305      	str	r3, [sp, #20]
 8009574:	47d0      	blx	sl
 8009576:	1b3b      	subs	r3, r7, r4
 8009578:	2800      	cmp	r0, #0
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	9b05      	ldr	r3, [sp, #20]
 800957e:	dad6      	bge.n	800952e <qsort+0x14c>
 8009580:	f1b8 0f00 	cmp.w	r8, #0
 8009584:	d006      	beq.n	8009594 <qsort+0x1b2>
 8009586:	4643      	mov	r3, r8
 8009588:	4622      	mov	r2, r4
 800958a:	4639      	mov	r1, r7
 800958c:	4658      	mov	r0, fp
 800958e:	f7ff feef 	bl	8009370 <swapfunc>
 8009592:	e005      	b.n	80095a0 <qsort+0x1be>
 8009594:	f8db 3000 	ldr.w	r3, [fp]
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	f8cb 2000 	str.w	r2, [fp]
 800959e:	603b      	str	r3, [r7, #0]
 80095a0:	9f04      	ldr	r7, [sp, #16]
 80095a2:	e7b0      	b.n	8009506 <qsort+0x124>
 80095a4:	4643      	mov	r3, r8
 80095a6:	4622      	mov	r2, r4
 80095a8:	4639      	mov	r1, r7
 80095aa:	4628      	mov	r0, r5
 80095ac:	f7ff fee0 	bl	8009370 <swapfunc>
 80095b0:	e00c      	b.n	80095cc <qsort+0x1ea>
 80095b2:	1b2f      	subs	r7, r5, r4
 80095b4:	4629      	mov	r1, r5
 80095b6:	4638      	mov	r0, r7
 80095b8:	47d0      	blx	sl
 80095ba:	2800      	cmp	r0, #0
 80095bc:	dd09      	ble.n	80095d2 <qsort+0x1f0>
 80095be:	f1b8 0f00 	cmp.w	r8, #0
 80095c2:	d1ef      	bne.n	80095a4 <qsort+0x1c2>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	602a      	str	r2, [r5, #0]
 80095ca:	603b      	str	r3, [r7, #0]
 80095cc:	463d      	mov	r5, r7
 80095ce:	42ae      	cmp	r6, r5
 80095d0:	d3ef      	bcc.n	80095b2 <qsort+0x1d0>
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	4423      	add	r3, r4
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	e7bb      	b.n	8009552 <qsort+0x170>
 80095da:	ebab 0305 	sub.w	r3, fp, r5
 80095de:	1baa      	subs	r2, r5, r6
 80095e0:	429a      	cmp	r2, r3
 80095e2:	bfa8      	it	ge
 80095e4:	461a      	movge	r2, r3
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	b12a      	cbz	r2, 80095f6 <qsort+0x214>
 80095ea:	4643      	mov	r3, r8
 80095ec:	ebab 0102 	sub.w	r1, fp, r2
 80095f0:	4630      	mov	r0, r6
 80095f2:	f7ff febd 	bl	8009370 <swapfunc>
 80095f6:	9b03      	ldr	r3, [sp, #12]
 80095f8:	eba3 0209 	sub.w	r2, r3, r9
 80095fc:	eba9 0707 	sub.w	r7, r9, r7
 8009600:	1b12      	subs	r2, r2, r4
 8009602:	42ba      	cmp	r2, r7
 8009604:	bf28      	it	cs
 8009606:	463a      	movcs	r2, r7
 8009608:	b12a      	cbz	r2, 8009616 <qsort+0x234>
 800960a:	9903      	ldr	r1, [sp, #12]
 800960c:	4643      	mov	r3, r8
 800960e:	1a89      	subs	r1, r1, r2
 8009610:	4658      	mov	r0, fp
 8009612:	f7ff fead 	bl	8009370 <swapfunc>
 8009616:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800961a:	9b03      	ldr	r3, [sp, #12]
 800961c:	454f      	cmp	r7, r9
 800961e:	eba3 0007 	sub.w	r0, r3, r7
 8009622:	d904      	bls.n	800962e <qsort+0x24c>
 8009624:	4633      	mov	r3, r6
 8009626:	46b9      	mov	r9, r7
 8009628:	9f01      	ldr	r7, [sp, #4]
 800962a:	4606      	mov	r6, r0
 800962c:	4618      	mov	r0, r3
 800962e:	42a7      	cmp	r7, r4
 8009630:	d921      	bls.n	8009676 <qsort+0x294>
 8009632:	fbb7 f1f4 	udiv	r1, r7, r4
 8009636:	9b02      	ldr	r3, [sp, #8]
 8009638:	2b07      	cmp	r3, #7
 800963a:	d80d      	bhi.n	8009658 <qsort+0x276>
 800963c:	fbb9 f7f4 	udiv	r7, r9, r4
 8009640:	aa16      	add	r2, sp, #88	; 0x58
 8009642:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009646:	f843 6c40 	str.w	r6, [r3, #-64]
 800964a:	f843 7c3c 	str.w	r7, [r3, #-60]
 800964e:	9b02      	ldr	r3, [sp, #8]
 8009650:	3301      	adds	r3, #1
 8009652:	9302      	str	r3, [sp, #8]
 8009654:	4606      	mov	r6, r0
 8009656:	e6d5      	b.n	8009404 <qsort+0x22>
 8009658:	4653      	mov	r3, sl
 800965a:	4622      	mov	r2, r4
 800965c:	f7ff fec1 	bl	80093e2 <qsort>
 8009660:	45a1      	cmp	r9, r4
 8009662:	d80b      	bhi.n	800967c <qsort+0x29a>
 8009664:	9b02      	ldr	r3, [sp, #8]
 8009666:	aa16      	add	r2, sp, #88	; 0x58
 8009668:	3b01      	subs	r3, #1
 800966a:	9302      	str	r3, [sp, #8]
 800966c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009670:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8009674:	e7ee      	b.n	8009654 <qsort+0x272>
 8009676:	45a1      	cmp	r9, r4
 8009678:	f67f aed1 	bls.w	800941e <qsort+0x3c>
 800967c:	fbb9 f1f4 	udiv	r1, r9, r4
 8009680:	4630      	mov	r0, r6
 8009682:	e7e7      	b.n	8009654 <qsort+0x272>

08009684 <siprintf>:
 8009684:	b40e      	push	{r1, r2, r3}
 8009686:	b500      	push	{lr}
 8009688:	b09c      	sub	sp, #112	; 0x70
 800968a:	ab1d      	add	r3, sp, #116	; 0x74
 800968c:	9002      	str	r0, [sp, #8]
 800968e:	9006      	str	r0, [sp, #24]
 8009690:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009694:	4809      	ldr	r0, [pc, #36]	; (80096bc <siprintf+0x38>)
 8009696:	9107      	str	r1, [sp, #28]
 8009698:	9104      	str	r1, [sp, #16]
 800969a:	4909      	ldr	r1, [pc, #36]	; (80096c0 <siprintf+0x3c>)
 800969c:	f853 2b04 	ldr.w	r2, [r3], #4
 80096a0:	9105      	str	r1, [sp, #20]
 80096a2:	6800      	ldr	r0, [r0, #0]
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	a902      	add	r1, sp, #8
 80096a8:	f001 fb26 	bl	800acf8 <_svfiprintf_r>
 80096ac:	9b02      	ldr	r3, [sp, #8]
 80096ae:	2200      	movs	r2, #0
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	b01c      	add	sp, #112	; 0x70
 80096b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096b8:	b003      	add	sp, #12
 80096ba:	4770      	bx	lr
 80096bc:	20000180 	.word	0x20000180
 80096c0:	ffff0208 	.word	0xffff0208

080096c4 <quorem>:
 80096c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c8:	6903      	ldr	r3, [r0, #16]
 80096ca:	690c      	ldr	r4, [r1, #16]
 80096cc:	42a3      	cmp	r3, r4
 80096ce:	4607      	mov	r7, r0
 80096d0:	f2c0 8081 	blt.w	80097d6 <quorem+0x112>
 80096d4:	3c01      	subs	r4, #1
 80096d6:	f101 0814 	add.w	r8, r1, #20
 80096da:	f100 0514 	add.w	r5, r0, #20
 80096de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096e2:	9301      	str	r3, [sp, #4]
 80096e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096ec:	3301      	adds	r3, #1
 80096ee:	429a      	cmp	r2, r3
 80096f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80096fc:	d331      	bcc.n	8009762 <quorem+0x9e>
 80096fe:	f04f 0e00 	mov.w	lr, #0
 8009702:	4640      	mov	r0, r8
 8009704:	46ac      	mov	ip, r5
 8009706:	46f2      	mov	sl, lr
 8009708:	f850 2b04 	ldr.w	r2, [r0], #4
 800970c:	b293      	uxth	r3, r2
 800970e:	fb06 e303 	mla	r3, r6, r3, lr
 8009712:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009716:	b29b      	uxth	r3, r3
 8009718:	ebaa 0303 	sub.w	r3, sl, r3
 800971c:	0c12      	lsrs	r2, r2, #16
 800971e:	f8dc a000 	ldr.w	sl, [ip]
 8009722:	fb06 e202 	mla	r2, r6, r2, lr
 8009726:	fa13 f38a 	uxtah	r3, r3, sl
 800972a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800972e:	fa1f fa82 	uxth.w	sl, r2
 8009732:	f8dc 2000 	ldr.w	r2, [ip]
 8009736:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800973a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800973e:	b29b      	uxth	r3, r3
 8009740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009744:	4581      	cmp	r9, r0
 8009746:	f84c 3b04 	str.w	r3, [ip], #4
 800974a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800974e:	d2db      	bcs.n	8009708 <quorem+0x44>
 8009750:	f855 300b 	ldr.w	r3, [r5, fp]
 8009754:	b92b      	cbnz	r3, 8009762 <quorem+0x9e>
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	3b04      	subs	r3, #4
 800975a:	429d      	cmp	r5, r3
 800975c:	461a      	mov	r2, r3
 800975e:	d32e      	bcc.n	80097be <quorem+0xfa>
 8009760:	613c      	str	r4, [r7, #16]
 8009762:	4638      	mov	r0, r7
 8009764:	f001 f8b2 	bl	800a8cc <__mcmp>
 8009768:	2800      	cmp	r0, #0
 800976a:	db24      	blt.n	80097b6 <quorem+0xf2>
 800976c:	3601      	adds	r6, #1
 800976e:	4628      	mov	r0, r5
 8009770:	f04f 0c00 	mov.w	ip, #0
 8009774:	f858 2b04 	ldr.w	r2, [r8], #4
 8009778:	f8d0 e000 	ldr.w	lr, [r0]
 800977c:	b293      	uxth	r3, r2
 800977e:	ebac 0303 	sub.w	r3, ip, r3
 8009782:	0c12      	lsrs	r2, r2, #16
 8009784:	fa13 f38e 	uxtah	r3, r3, lr
 8009788:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800978c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009790:	b29b      	uxth	r3, r3
 8009792:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009796:	45c1      	cmp	r9, r8
 8009798:	f840 3b04 	str.w	r3, [r0], #4
 800979c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097a0:	d2e8      	bcs.n	8009774 <quorem+0xb0>
 80097a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097aa:	b922      	cbnz	r2, 80097b6 <quorem+0xf2>
 80097ac:	3b04      	subs	r3, #4
 80097ae:	429d      	cmp	r5, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	d30a      	bcc.n	80097ca <quorem+0x106>
 80097b4:	613c      	str	r4, [r7, #16]
 80097b6:	4630      	mov	r0, r6
 80097b8:	b003      	add	sp, #12
 80097ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097be:	6812      	ldr	r2, [r2, #0]
 80097c0:	3b04      	subs	r3, #4
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	d1cc      	bne.n	8009760 <quorem+0x9c>
 80097c6:	3c01      	subs	r4, #1
 80097c8:	e7c7      	b.n	800975a <quorem+0x96>
 80097ca:	6812      	ldr	r2, [r2, #0]
 80097cc:	3b04      	subs	r3, #4
 80097ce:	2a00      	cmp	r2, #0
 80097d0:	d1f0      	bne.n	80097b4 <quorem+0xf0>
 80097d2:	3c01      	subs	r4, #1
 80097d4:	e7eb      	b.n	80097ae <quorem+0xea>
 80097d6:	2000      	movs	r0, #0
 80097d8:	e7ee      	b.n	80097b8 <quorem+0xf4>
 80097da:	0000      	movs	r0, r0
 80097dc:	0000      	movs	r0, r0
	...

080097e0 <_dtoa_r>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	ed2d 8b02 	vpush	{d8}
 80097e8:	ec57 6b10 	vmov	r6, r7, d0
 80097ec:	b095      	sub	sp, #84	; 0x54
 80097ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097f4:	9105      	str	r1, [sp, #20]
 80097f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80097fa:	4604      	mov	r4, r0
 80097fc:	9209      	str	r2, [sp, #36]	; 0x24
 80097fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009800:	b975      	cbnz	r5, 8009820 <_dtoa_r+0x40>
 8009802:	2010      	movs	r0, #16
 8009804:	f000 fddc 	bl	800a3c0 <malloc>
 8009808:	4602      	mov	r2, r0
 800980a:	6260      	str	r0, [r4, #36]	; 0x24
 800980c:	b920      	cbnz	r0, 8009818 <_dtoa_r+0x38>
 800980e:	4bb2      	ldr	r3, [pc, #712]	; (8009ad8 <_dtoa_r+0x2f8>)
 8009810:	21ea      	movs	r1, #234	; 0xea
 8009812:	48b2      	ldr	r0, [pc, #712]	; (8009adc <_dtoa_r+0x2fc>)
 8009814:	f001 fb80 	bl	800af18 <__assert_func>
 8009818:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800981c:	6005      	str	r5, [r0, #0]
 800981e:	60c5      	str	r5, [r0, #12]
 8009820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009822:	6819      	ldr	r1, [r3, #0]
 8009824:	b151      	cbz	r1, 800983c <_dtoa_r+0x5c>
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	604a      	str	r2, [r1, #4]
 800982a:	2301      	movs	r3, #1
 800982c:	4093      	lsls	r3, r2
 800982e:	608b      	str	r3, [r1, #8]
 8009830:	4620      	mov	r0, r4
 8009832:	f000 fe0d 	bl	800a450 <_Bfree>
 8009836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	1e3b      	subs	r3, r7, #0
 800983e:	bfb9      	ittee	lt
 8009840:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009844:	9303      	strlt	r3, [sp, #12]
 8009846:	2300      	movge	r3, #0
 8009848:	f8c8 3000 	strge.w	r3, [r8]
 800984c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009850:	4ba3      	ldr	r3, [pc, #652]	; (8009ae0 <_dtoa_r+0x300>)
 8009852:	bfbc      	itt	lt
 8009854:	2201      	movlt	r2, #1
 8009856:	f8c8 2000 	strlt.w	r2, [r8]
 800985a:	ea33 0309 	bics.w	r3, r3, r9
 800985e:	d11b      	bne.n	8009898 <_dtoa_r+0xb8>
 8009860:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009862:	f242 730f 	movw	r3, #9999	; 0x270f
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800986c:	4333      	orrs	r3, r6
 800986e:	f000 857a 	beq.w	800a366 <_dtoa_r+0xb86>
 8009872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009874:	b963      	cbnz	r3, 8009890 <_dtoa_r+0xb0>
 8009876:	4b9b      	ldr	r3, [pc, #620]	; (8009ae4 <_dtoa_r+0x304>)
 8009878:	e024      	b.n	80098c4 <_dtoa_r+0xe4>
 800987a:	4b9b      	ldr	r3, [pc, #620]	; (8009ae8 <_dtoa_r+0x308>)
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	9800      	ldr	r0, [sp, #0]
 8009886:	b015      	add	sp, #84	; 0x54
 8009888:	ecbd 8b02 	vpop	{d8}
 800988c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009890:	4b94      	ldr	r3, [pc, #592]	; (8009ae4 <_dtoa_r+0x304>)
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	3303      	adds	r3, #3
 8009896:	e7f3      	b.n	8009880 <_dtoa_r+0xa0>
 8009898:	ed9d 7b02 	vldr	d7, [sp, #8]
 800989c:	2200      	movs	r2, #0
 800989e:	ec51 0b17 	vmov	r0, r1, d7
 80098a2:	2300      	movs	r3, #0
 80098a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80098a8:	f7f7 f916 	bl	8000ad8 <__aeabi_dcmpeq>
 80098ac:	4680      	mov	r8, r0
 80098ae:	b158      	cbz	r0, 80098c8 <_dtoa_r+0xe8>
 80098b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098b2:	2301      	movs	r3, #1
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f000 8551 	beq.w	800a360 <_dtoa_r+0xb80>
 80098be:	488b      	ldr	r0, [pc, #556]	; (8009aec <_dtoa_r+0x30c>)
 80098c0:	6018      	str	r0, [r3, #0]
 80098c2:	1e43      	subs	r3, r0, #1
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	e7dd      	b.n	8009884 <_dtoa_r+0xa4>
 80098c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80098cc:	aa12      	add	r2, sp, #72	; 0x48
 80098ce:	a913      	add	r1, sp, #76	; 0x4c
 80098d0:	4620      	mov	r0, r4
 80098d2:	f001 f89f 	bl	800aa14 <__d2b>
 80098d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098da:	4683      	mov	fp, r0
 80098dc:	2d00      	cmp	r5, #0
 80098de:	d07c      	beq.n	80099da <_dtoa_r+0x1fa>
 80098e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80098e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80098ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098fa:	4b7d      	ldr	r3, [pc, #500]	; (8009af0 <_dtoa_r+0x310>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	4630      	mov	r0, r6
 8009900:	4639      	mov	r1, r7
 8009902:	f7f6 fcc9 	bl	8000298 <__aeabi_dsub>
 8009906:	a36e      	add	r3, pc, #440	; (adr r3, 8009ac0 <_dtoa_r+0x2e0>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f7f6 fe7c 	bl	8000608 <__aeabi_dmul>
 8009910:	a36d      	add	r3, pc, #436	; (adr r3, 8009ac8 <_dtoa_r+0x2e8>)
 8009912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009916:	f7f6 fcc1 	bl	800029c <__adddf3>
 800991a:	4606      	mov	r6, r0
 800991c:	4628      	mov	r0, r5
 800991e:	460f      	mov	r7, r1
 8009920:	f7f6 fe08 	bl	8000534 <__aeabi_i2d>
 8009924:	a36a      	add	r3, pc, #424	; (adr r3, 8009ad0 <_dtoa_r+0x2f0>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7f6 fe6d 	bl	8000608 <__aeabi_dmul>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4630      	mov	r0, r6
 8009934:	4639      	mov	r1, r7
 8009936:	f7f6 fcb1 	bl	800029c <__adddf3>
 800993a:	4606      	mov	r6, r0
 800993c:	460f      	mov	r7, r1
 800993e:	f7f7 f913 	bl	8000b68 <__aeabi_d2iz>
 8009942:	2200      	movs	r2, #0
 8009944:	4682      	mov	sl, r0
 8009946:	2300      	movs	r3, #0
 8009948:	4630      	mov	r0, r6
 800994a:	4639      	mov	r1, r7
 800994c:	f7f7 f8ce 	bl	8000aec <__aeabi_dcmplt>
 8009950:	b148      	cbz	r0, 8009966 <_dtoa_r+0x186>
 8009952:	4650      	mov	r0, sl
 8009954:	f7f6 fdee 	bl	8000534 <__aeabi_i2d>
 8009958:	4632      	mov	r2, r6
 800995a:	463b      	mov	r3, r7
 800995c:	f7f7 f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009960:	b908      	cbnz	r0, 8009966 <_dtoa_r+0x186>
 8009962:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009966:	f1ba 0f16 	cmp.w	sl, #22
 800996a:	d854      	bhi.n	8009a16 <_dtoa_r+0x236>
 800996c:	4b61      	ldr	r3, [pc, #388]	; (8009af4 <_dtoa_r+0x314>)
 800996e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800997a:	f7f7 f8b7 	bl	8000aec <__aeabi_dcmplt>
 800997e:	2800      	cmp	r0, #0
 8009980:	d04b      	beq.n	8009a1a <_dtoa_r+0x23a>
 8009982:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009986:	2300      	movs	r3, #0
 8009988:	930e      	str	r3, [sp, #56]	; 0x38
 800998a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800998c:	1b5d      	subs	r5, r3, r5
 800998e:	1e6b      	subs	r3, r5, #1
 8009990:	9304      	str	r3, [sp, #16]
 8009992:	bf43      	ittte	mi
 8009994:	2300      	movmi	r3, #0
 8009996:	f1c5 0801 	rsbmi	r8, r5, #1
 800999a:	9304      	strmi	r3, [sp, #16]
 800999c:	f04f 0800 	movpl.w	r8, #0
 80099a0:	f1ba 0f00 	cmp.w	sl, #0
 80099a4:	db3b      	blt.n	8009a1e <_dtoa_r+0x23e>
 80099a6:	9b04      	ldr	r3, [sp, #16]
 80099a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80099ac:	4453      	add	r3, sl
 80099ae:	9304      	str	r3, [sp, #16]
 80099b0:	2300      	movs	r3, #0
 80099b2:	9306      	str	r3, [sp, #24]
 80099b4:	9b05      	ldr	r3, [sp, #20]
 80099b6:	2b09      	cmp	r3, #9
 80099b8:	d869      	bhi.n	8009a8e <_dtoa_r+0x2ae>
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	bfc4      	itt	gt
 80099be:	3b04      	subgt	r3, #4
 80099c0:	9305      	strgt	r3, [sp, #20]
 80099c2:	9b05      	ldr	r3, [sp, #20]
 80099c4:	f1a3 0302 	sub.w	r3, r3, #2
 80099c8:	bfcc      	ite	gt
 80099ca:	2500      	movgt	r5, #0
 80099cc:	2501      	movle	r5, #1
 80099ce:	2b03      	cmp	r3, #3
 80099d0:	d869      	bhi.n	8009aa6 <_dtoa_r+0x2c6>
 80099d2:	e8df f003 	tbb	[pc, r3]
 80099d6:	4e2c      	.short	0x4e2c
 80099d8:	5a4c      	.short	0x5a4c
 80099da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80099de:	441d      	add	r5, r3
 80099e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099e4:	2b20      	cmp	r3, #32
 80099e6:	bfc1      	itttt	gt
 80099e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80099f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80099f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099f8:	bfda      	itte	le
 80099fa:	f1c3 0320 	rsble	r3, r3, #32
 80099fe:	fa06 f003 	lslle.w	r0, r6, r3
 8009a02:	4318      	orrgt	r0, r3
 8009a04:	f7f6 fd86 	bl	8000514 <__aeabi_ui2d>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a10:	3d01      	subs	r5, #1
 8009a12:	9310      	str	r3, [sp, #64]	; 0x40
 8009a14:	e771      	b.n	80098fa <_dtoa_r+0x11a>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e7b6      	b.n	8009988 <_dtoa_r+0x1a8>
 8009a1a:	900e      	str	r0, [sp, #56]	; 0x38
 8009a1c:	e7b5      	b.n	800998a <_dtoa_r+0x1aa>
 8009a1e:	f1ca 0300 	rsb	r3, sl, #0
 8009a22:	9306      	str	r3, [sp, #24]
 8009a24:	2300      	movs	r3, #0
 8009a26:	eba8 080a 	sub.w	r8, r8, sl
 8009a2a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a2c:	e7c2      	b.n	80099b4 <_dtoa_r+0x1d4>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	9308      	str	r3, [sp, #32]
 8009a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	dc39      	bgt.n	8009aac <_dtoa_r+0x2cc>
 8009a38:	f04f 0901 	mov.w	r9, #1
 8009a3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a40:	464b      	mov	r3, r9
 8009a42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a48:	2200      	movs	r2, #0
 8009a4a:	6042      	str	r2, [r0, #4]
 8009a4c:	2204      	movs	r2, #4
 8009a4e:	f102 0614 	add.w	r6, r2, #20
 8009a52:	429e      	cmp	r6, r3
 8009a54:	6841      	ldr	r1, [r0, #4]
 8009a56:	d92f      	bls.n	8009ab8 <_dtoa_r+0x2d8>
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 fcb9 	bl	800a3d0 <_Balloc>
 8009a5e:	9000      	str	r0, [sp, #0]
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d14b      	bne.n	8009afc <_dtoa_r+0x31c>
 8009a64:	4b24      	ldr	r3, [pc, #144]	; (8009af8 <_dtoa_r+0x318>)
 8009a66:	4602      	mov	r2, r0
 8009a68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a6c:	e6d1      	b.n	8009812 <_dtoa_r+0x32>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e7de      	b.n	8009a30 <_dtoa_r+0x250>
 8009a72:	2300      	movs	r3, #0
 8009a74:	9308      	str	r3, [sp, #32]
 8009a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a78:	eb0a 0903 	add.w	r9, sl, r3
 8009a7c:	f109 0301 	add.w	r3, r9, #1
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	bfb8      	it	lt
 8009a86:	2301      	movlt	r3, #1
 8009a88:	e7dd      	b.n	8009a46 <_dtoa_r+0x266>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e7f2      	b.n	8009a74 <_dtoa_r+0x294>
 8009a8e:	2501      	movs	r5, #1
 8009a90:	2300      	movs	r3, #0
 8009a92:	9305      	str	r3, [sp, #20]
 8009a94:	9508      	str	r5, [sp, #32]
 8009a96:	f04f 39ff 	mov.w	r9, #4294967295
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009aa0:	2312      	movs	r3, #18
 8009aa2:	9209      	str	r2, [sp, #36]	; 0x24
 8009aa4:	e7cf      	b.n	8009a46 <_dtoa_r+0x266>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	9308      	str	r3, [sp, #32]
 8009aaa:	e7f4      	b.n	8009a96 <_dtoa_r+0x2b6>
 8009aac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009ab0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ab4:	464b      	mov	r3, r9
 8009ab6:	e7c6      	b.n	8009a46 <_dtoa_r+0x266>
 8009ab8:	3101      	adds	r1, #1
 8009aba:	6041      	str	r1, [r0, #4]
 8009abc:	0052      	lsls	r2, r2, #1
 8009abe:	e7c6      	b.n	8009a4e <_dtoa_r+0x26e>
 8009ac0:	636f4361 	.word	0x636f4361
 8009ac4:	3fd287a7 	.word	0x3fd287a7
 8009ac8:	8b60c8b3 	.word	0x8b60c8b3
 8009acc:	3fc68a28 	.word	0x3fc68a28
 8009ad0:	509f79fb 	.word	0x509f79fb
 8009ad4:	3fd34413 	.word	0x3fd34413
 8009ad8:	0800c369 	.word	0x0800c369
 8009adc:	0800c380 	.word	0x0800c380
 8009ae0:	7ff00000 	.word	0x7ff00000
 8009ae4:	0800c365 	.word	0x0800c365
 8009ae8:	0800c35c 	.word	0x0800c35c
 8009aec:	0800c339 	.word	0x0800c339
 8009af0:	3ff80000 	.word	0x3ff80000
 8009af4:	0800c478 	.word	0x0800c478
 8009af8:	0800c3df 	.word	0x0800c3df
 8009afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009afe:	9a00      	ldr	r2, [sp, #0]
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	9b01      	ldr	r3, [sp, #4]
 8009b04:	2b0e      	cmp	r3, #14
 8009b06:	f200 80ad 	bhi.w	8009c64 <_dtoa_r+0x484>
 8009b0a:	2d00      	cmp	r5, #0
 8009b0c:	f000 80aa 	beq.w	8009c64 <_dtoa_r+0x484>
 8009b10:	f1ba 0f00 	cmp.w	sl, #0
 8009b14:	dd36      	ble.n	8009b84 <_dtoa_r+0x3a4>
 8009b16:	4ac3      	ldr	r2, [pc, #780]	; (8009e24 <_dtoa_r+0x644>)
 8009b18:	f00a 030f 	and.w	r3, sl, #15
 8009b1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b20:	ed93 7b00 	vldr	d7, [r3]
 8009b24:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b28:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009b2c:	eeb0 8a47 	vmov.f32	s16, s14
 8009b30:	eef0 8a67 	vmov.f32	s17, s15
 8009b34:	d016      	beq.n	8009b64 <_dtoa_r+0x384>
 8009b36:	4bbc      	ldr	r3, [pc, #752]	; (8009e28 <_dtoa_r+0x648>)
 8009b38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b40:	f7f6 fe8c 	bl	800085c <__aeabi_ddiv>
 8009b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b48:	f007 070f 	and.w	r7, r7, #15
 8009b4c:	2503      	movs	r5, #3
 8009b4e:	4eb6      	ldr	r6, [pc, #728]	; (8009e28 <_dtoa_r+0x648>)
 8009b50:	b957      	cbnz	r7, 8009b68 <_dtoa_r+0x388>
 8009b52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b56:	ec53 2b18 	vmov	r2, r3, d8
 8009b5a:	f7f6 fe7f 	bl	800085c <__aeabi_ddiv>
 8009b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b62:	e029      	b.n	8009bb8 <_dtoa_r+0x3d8>
 8009b64:	2502      	movs	r5, #2
 8009b66:	e7f2      	b.n	8009b4e <_dtoa_r+0x36e>
 8009b68:	07f9      	lsls	r1, r7, #31
 8009b6a:	d508      	bpl.n	8009b7e <_dtoa_r+0x39e>
 8009b6c:	ec51 0b18 	vmov	r0, r1, d8
 8009b70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b74:	f7f6 fd48 	bl	8000608 <__aeabi_dmul>
 8009b78:	ec41 0b18 	vmov	d8, r0, r1
 8009b7c:	3501      	adds	r5, #1
 8009b7e:	107f      	asrs	r7, r7, #1
 8009b80:	3608      	adds	r6, #8
 8009b82:	e7e5      	b.n	8009b50 <_dtoa_r+0x370>
 8009b84:	f000 80a6 	beq.w	8009cd4 <_dtoa_r+0x4f4>
 8009b88:	f1ca 0600 	rsb	r6, sl, #0
 8009b8c:	4ba5      	ldr	r3, [pc, #660]	; (8009e24 <_dtoa_r+0x644>)
 8009b8e:	4fa6      	ldr	r7, [pc, #664]	; (8009e28 <_dtoa_r+0x648>)
 8009b90:	f006 020f 	and.w	r2, r6, #15
 8009b94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ba0:	f7f6 fd32 	bl	8000608 <__aeabi_dmul>
 8009ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba8:	1136      	asrs	r6, r6, #4
 8009baa:	2300      	movs	r3, #0
 8009bac:	2502      	movs	r5, #2
 8009bae:	2e00      	cmp	r6, #0
 8009bb0:	f040 8085 	bne.w	8009cbe <_dtoa_r+0x4de>
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1d2      	bne.n	8009b5e <_dtoa_r+0x37e>
 8009bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 808c 	beq.w	8009cd8 <_dtoa_r+0x4f8>
 8009bc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009bc4:	4b99      	ldr	r3, [pc, #612]	; (8009e2c <_dtoa_r+0x64c>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	4630      	mov	r0, r6
 8009bca:	4639      	mov	r1, r7
 8009bcc:	f7f6 ff8e 	bl	8000aec <__aeabi_dcmplt>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	f000 8081 	beq.w	8009cd8 <_dtoa_r+0x4f8>
 8009bd6:	9b01      	ldr	r3, [sp, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d07d      	beq.n	8009cd8 <_dtoa_r+0x4f8>
 8009bdc:	f1b9 0f00 	cmp.w	r9, #0
 8009be0:	dd3c      	ble.n	8009c5c <_dtoa_r+0x47c>
 8009be2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009be6:	9307      	str	r3, [sp, #28]
 8009be8:	2200      	movs	r2, #0
 8009bea:	4b91      	ldr	r3, [pc, #580]	; (8009e30 <_dtoa_r+0x650>)
 8009bec:	4630      	mov	r0, r6
 8009bee:	4639      	mov	r1, r7
 8009bf0:	f7f6 fd0a 	bl	8000608 <__aeabi_dmul>
 8009bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf8:	3501      	adds	r5, #1
 8009bfa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009bfe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c02:	4628      	mov	r0, r5
 8009c04:	f7f6 fc96 	bl	8000534 <__aeabi_i2d>
 8009c08:	4632      	mov	r2, r6
 8009c0a:	463b      	mov	r3, r7
 8009c0c:	f7f6 fcfc 	bl	8000608 <__aeabi_dmul>
 8009c10:	4b88      	ldr	r3, [pc, #544]	; (8009e34 <_dtoa_r+0x654>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	f7f6 fb42 	bl	800029c <__adddf3>
 8009c18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c20:	9303      	str	r3, [sp, #12]
 8009c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d15c      	bne.n	8009ce2 <_dtoa_r+0x502>
 8009c28:	4b83      	ldr	r3, [pc, #524]	; (8009e38 <_dtoa_r+0x658>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	4639      	mov	r1, r7
 8009c30:	f7f6 fb32 	bl	8000298 <__aeabi_dsub>
 8009c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c38:	4606      	mov	r6, r0
 8009c3a:	460f      	mov	r7, r1
 8009c3c:	f7f6 ff74 	bl	8000b28 <__aeabi_dcmpgt>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	f040 8296 	bne.w	800a172 <_dtoa_r+0x992>
 8009c46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7f6 ff4b 	bl	8000aec <__aeabi_dcmplt>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f040 8288 	bne.w	800a16c <_dtoa_r+0x98c>
 8009c5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f2c0 8158 	blt.w	8009f1c <_dtoa_r+0x73c>
 8009c6c:	f1ba 0f0e 	cmp.w	sl, #14
 8009c70:	f300 8154 	bgt.w	8009f1c <_dtoa_r+0x73c>
 8009c74:	4b6b      	ldr	r3, [pc, #428]	; (8009e24 <_dtoa_r+0x644>)
 8009c76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f280 80e3 	bge.w	8009e4c <_dtoa_r+0x66c>
 8009c86:	9b01      	ldr	r3, [sp, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f300 80df 	bgt.w	8009e4c <_dtoa_r+0x66c>
 8009c8e:	f040 826d 	bne.w	800a16c <_dtoa_r+0x98c>
 8009c92:	4b69      	ldr	r3, [pc, #420]	; (8009e38 <_dtoa_r+0x658>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	4640      	mov	r0, r8
 8009c98:	4649      	mov	r1, r9
 8009c9a:	f7f6 fcb5 	bl	8000608 <__aeabi_dmul>
 8009c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ca2:	f7f6 ff37 	bl	8000b14 <__aeabi_dcmpge>
 8009ca6:	9e01      	ldr	r6, [sp, #4]
 8009ca8:	4637      	mov	r7, r6
 8009caa:	2800      	cmp	r0, #0
 8009cac:	f040 8243 	bne.w	800a136 <_dtoa_r+0x956>
 8009cb0:	9d00      	ldr	r5, [sp, #0]
 8009cb2:	2331      	movs	r3, #49	; 0x31
 8009cb4:	f805 3b01 	strb.w	r3, [r5], #1
 8009cb8:	f10a 0a01 	add.w	sl, sl, #1
 8009cbc:	e23f      	b.n	800a13e <_dtoa_r+0x95e>
 8009cbe:	07f2      	lsls	r2, r6, #31
 8009cc0:	d505      	bpl.n	8009cce <_dtoa_r+0x4ee>
 8009cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc6:	f7f6 fc9f 	bl	8000608 <__aeabi_dmul>
 8009cca:	3501      	adds	r5, #1
 8009ccc:	2301      	movs	r3, #1
 8009cce:	1076      	asrs	r6, r6, #1
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	e76c      	b.n	8009bae <_dtoa_r+0x3ce>
 8009cd4:	2502      	movs	r5, #2
 8009cd6:	e76f      	b.n	8009bb8 <_dtoa_r+0x3d8>
 8009cd8:	9b01      	ldr	r3, [sp, #4]
 8009cda:	f8cd a01c 	str.w	sl, [sp, #28]
 8009cde:	930c      	str	r3, [sp, #48]	; 0x30
 8009ce0:	e78d      	b.n	8009bfe <_dtoa_r+0x41e>
 8009ce2:	9900      	ldr	r1, [sp, #0]
 8009ce4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009ce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ce8:	4b4e      	ldr	r3, [pc, #312]	; (8009e24 <_dtoa_r+0x644>)
 8009cea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cee:	4401      	add	r1, r0
 8009cf0:	9102      	str	r1, [sp, #8]
 8009cf2:	9908      	ldr	r1, [sp, #32]
 8009cf4:	eeb0 8a47 	vmov.f32	s16, s14
 8009cf8:	eef0 8a67 	vmov.f32	s17, s15
 8009cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d04:	2900      	cmp	r1, #0
 8009d06:	d045      	beq.n	8009d94 <_dtoa_r+0x5b4>
 8009d08:	494c      	ldr	r1, [pc, #304]	; (8009e3c <_dtoa_r+0x65c>)
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	f7f6 fda6 	bl	800085c <__aeabi_ddiv>
 8009d10:	ec53 2b18 	vmov	r2, r3, d8
 8009d14:	f7f6 fac0 	bl	8000298 <__aeabi_dsub>
 8009d18:	9d00      	ldr	r5, [sp, #0]
 8009d1a:	ec41 0b18 	vmov	d8, r0, r1
 8009d1e:	4639      	mov	r1, r7
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7f6 ff21 	bl	8000b68 <__aeabi_d2iz>
 8009d26:	900c      	str	r0, [sp, #48]	; 0x30
 8009d28:	f7f6 fc04 	bl	8000534 <__aeabi_i2d>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	f7f6 fab0 	bl	8000298 <__aeabi_dsub>
 8009d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d3a:	3330      	adds	r3, #48	; 0x30
 8009d3c:	f805 3b01 	strb.w	r3, [r5], #1
 8009d40:	ec53 2b18 	vmov	r2, r3, d8
 8009d44:	4606      	mov	r6, r0
 8009d46:	460f      	mov	r7, r1
 8009d48:	f7f6 fed0 	bl	8000aec <__aeabi_dcmplt>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d165      	bne.n	8009e1c <_dtoa_r+0x63c>
 8009d50:	4632      	mov	r2, r6
 8009d52:	463b      	mov	r3, r7
 8009d54:	4935      	ldr	r1, [pc, #212]	; (8009e2c <_dtoa_r+0x64c>)
 8009d56:	2000      	movs	r0, #0
 8009d58:	f7f6 fa9e 	bl	8000298 <__aeabi_dsub>
 8009d5c:	ec53 2b18 	vmov	r2, r3, d8
 8009d60:	f7f6 fec4 	bl	8000aec <__aeabi_dcmplt>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	f040 80b9 	bne.w	8009edc <_dtoa_r+0x6fc>
 8009d6a:	9b02      	ldr	r3, [sp, #8]
 8009d6c:	429d      	cmp	r5, r3
 8009d6e:	f43f af75 	beq.w	8009c5c <_dtoa_r+0x47c>
 8009d72:	4b2f      	ldr	r3, [pc, #188]	; (8009e30 <_dtoa_r+0x650>)
 8009d74:	ec51 0b18 	vmov	r0, r1, d8
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f7f6 fc45 	bl	8000608 <__aeabi_dmul>
 8009d7e:	4b2c      	ldr	r3, [pc, #176]	; (8009e30 <_dtoa_r+0x650>)
 8009d80:	ec41 0b18 	vmov	d8, r0, r1
 8009d84:	2200      	movs	r2, #0
 8009d86:	4630      	mov	r0, r6
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 fc3d 	bl	8000608 <__aeabi_dmul>
 8009d8e:	4606      	mov	r6, r0
 8009d90:	460f      	mov	r7, r1
 8009d92:	e7c4      	b.n	8009d1e <_dtoa_r+0x53e>
 8009d94:	ec51 0b17 	vmov	r0, r1, d7
 8009d98:	f7f6 fc36 	bl	8000608 <__aeabi_dmul>
 8009d9c:	9b02      	ldr	r3, [sp, #8]
 8009d9e:	9d00      	ldr	r5, [sp, #0]
 8009da0:	930c      	str	r3, [sp, #48]	; 0x30
 8009da2:	ec41 0b18 	vmov	d8, r0, r1
 8009da6:	4639      	mov	r1, r7
 8009da8:	4630      	mov	r0, r6
 8009daa:	f7f6 fedd 	bl	8000b68 <__aeabi_d2iz>
 8009dae:	9011      	str	r0, [sp, #68]	; 0x44
 8009db0:	f7f6 fbc0 	bl	8000534 <__aeabi_i2d>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4630      	mov	r0, r6
 8009dba:	4639      	mov	r1, r7
 8009dbc:	f7f6 fa6c 	bl	8000298 <__aeabi_dsub>
 8009dc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dc2:	3330      	adds	r3, #48	; 0x30
 8009dc4:	f805 3b01 	strb.w	r3, [r5], #1
 8009dc8:	9b02      	ldr	r3, [sp, #8]
 8009dca:	429d      	cmp	r5, r3
 8009dcc:	4606      	mov	r6, r0
 8009dce:	460f      	mov	r7, r1
 8009dd0:	f04f 0200 	mov.w	r2, #0
 8009dd4:	d134      	bne.n	8009e40 <_dtoa_r+0x660>
 8009dd6:	4b19      	ldr	r3, [pc, #100]	; (8009e3c <_dtoa_r+0x65c>)
 8009dd8:	ec51 0b18 	vmov	r0, r1, d8
 8009ddc:	f7f6 fa5e 	bl	800029c <__adddf3>
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4630      	mov	r0, r6
 8009de6:	4639      	mov	r1, r7
 8009de8:	f7f6 fe9e 	bl	8000b28 <__aeabi_dcmpgt>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d175      	bne.n	8009edc <_dtoa_r+0x6fc>
 8009df0:	ec53 2b18 	vmov	r2, r3, d8
 8009df4:	4911      	ldr	r1, [pc, #68]	; (8009e3c <_dtoa_r+0x65c>)
 8009df6:	2000      	movs	r0, #0
 8009df8:	f7f6 fa4e 	bl	8000298 <__aeabi_dsub>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4630      	mov	r0, r6
 8009e02:	4639      	mov	r1, r7
 8009e04:	f7f6 fe72 	bl	8000aec <__aeabi_dcmplt>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	f43f af27 	beq.w	8009c5c <_dtoa_r+0x47c>
 8009e0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e10:	1e6b      	subs	r3, r5, #1
 8009e12:	930c      	str	r3, [sp, #48]	; 0x30
 8009e14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e18:	2b30      	cmp	r3, #48	; 0x30
 8009e1a:	d0f8      	beq.n	8009e0e <_dtoa_r+0x62e>
 8009e1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e20:	e04a      	b.n	8009eb8 <_dtoa_r+0x6d8>
 8009e22:	bf00      	nop
 8009e24:	0800c478 	.word	0x0800c478
 8009e28:	0800c450 	.word	0x0800c450
 8009e2c:	3ff00000 	.word	0x3ff00000
 8009e30:	40240000 	.word	0x40240000
 8009e34:	401c0000 	.word	0x401c0000
 8009e38:	40140000 	.word	0x40140000
 8009e3c:	3fe00000 	.word	0x3fe00000
 8009e40:	4baf      	ldr	r3, [pc, #700]	; (800a100 <_dtoa_r+0x920>)
 8009e42:	f7f6 fbe1 	bl	8000608 <__aeabi_dmul>
 8009e46:	4606      	mov	r6, r0
 8009e48:	460f      	mov	r7, r1
 8009e4a:	e7ac      	b.n	8009da6 <_dtoa_r+0x5c6>
 8009e4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e50:	9d00      	ldr	r5, [sp, #0]
 8009e52:	4642      	mov	r2, r8
 8009e54:	464b      	mov	r3, r9
 8009e56:	4630      	mov	r0, r6
 8009e58:	4639      	mov	r1, r7
 8009e5a:	f7f6 fcff 	bl	800085c <__aeabi_ddiv>
 8009e5e:	f7f6 fe83 	bl	8000b68 <__aeabi_d2iz>
 8009e62:	9002      	str	r0, [sp, #8]
 8009e64:	f7f6 fb66 	bl	8000534 <__aeabi_i2d>
 8009e68:	4642      	mov	r2, r8
 8009e6a:	464b      	mov	r3, r9
 8009e6c:	f7f6 fbcc 	bl	8000608 <__aeabi_dmul>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4630      	mov	r0, r6
 8009e76:	4639      	mov	r1, r7
 8009e78:	f7f6 fa0e 	bl	8000298 <__aeabi_dsub>
 8009e7c:	9e02      	ldr	r6, [sp, #8]
 8009e7e:	9f01      	ldr	r7, [sp, #4]
 8009e80:	3630      	adds	r6, #48	; 0x30
 8009e82:	f805 6b01 	strb.w	r6, [r5], #1
 8009e86:	9e00      	ldr	r6, [sp, #0]
 8009e88:	1bae      	subs	r6, r5, r6
 8009e8a:	42b7      	cmp	r7, r6
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	d137      	bne.n	8009f02 <_dtoa_r+0x722>
 8009e92:	f7f6 fa03 	bl	800029c <__adddf3>
 8009e96:	4642      	mov	r2, r8
 8009e98:	464b      	mov	r3, r9
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	460f      	mov	r7, r1
 8009e9e:	f7f6 fe43 	bl	8000b28 <__aeabi_dcmpgt>
 8009ea2:	b9c8      	cbnz	r0, 8009ed8 <_dtoa_r+0x6f8>
 8009ea4:	4642      	mov	r2, r8
 8009ea6:	464b      	mov	r3, r9
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	4639      	mov	r1, r7
 8009eac:	f7f6 fe14 	bl	8000ad8 <__aeabi_dcmpeq>
 8009eb0:	b110      	cbz	r0, 8009eb8 <_dtoa_r+0x6d8>
 8009eb2:	9b02      	ldr	r3, [sp, #8]
 8009eb4:	07d9      	lsls	r1, r3, #31
 8009eb6:	d40f      	bmi.n	8009ed8 <_dtoa_r+0x6f8>
 8009eb8:	4620      	mov	r0, r4
 8009eba:	4659      	mov	r1, fp
 8009ebc:	f000 fac8 	bl	800a450 <_Bfree>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	702b      	strb	r3, [r5, #0]
 8009ec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ec6:	f10a 0001 	add.w	r0, sl, #1
 8009eca:	6018      	str	r0, [r3, #0]
 8009ecc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f43f acd8 	beq.w	8009884 <_dtoa_r+0xa4>
 8009ed4:	601d      	str	r5, [r3, #0]
 8009ed6:	e4d5      	b.n	8009884 <_dtoa_r+0xa4>
 8009ed8:	f8cd a01c 	str.w	sl, [sp, #28]
 8009edc:	462b      	mov	r3, r5
 8009ede:	461d      	mov	r5, r3
 8009ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ee4:	2a39      	cmp	r2, #57	; 0x39
 8009ee6:	d108      	bne.n	8009efa <_dtoa_r+0x71a>
 8009ee8:	9a00      	ldr	r2, [sp, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d1f7      	bne.n	8009ede <_dtoa_r+0x6fe>
 8009eee:	9a07      	ldr	r2, [sp, #28]
 8009ef0:	9900      	ldr	r1, [sp, #0]
 8009ef2:	3201      	adds	r2, #1
 8009ef4:	9207      	str	r2, [sp, #28]
 8009ef6:	2230      	movs	r2, #48	; 0x30
 8009ef8:	700a      	strb	r2, [r1, #0]
 8009efa:	781a      	ldrb	r2, [r3, #0]
 8009efc:	3201      	adds	r2, #1
 8009efe:	701a      	strb	r2, [r3, #0]
 8009f00:	e78c      	b.n	8009e1c <_dtoa_r+0x63c>
 8009f02:	4b7f      	ldr	r3, [pc, #508]	; (800a100 <_dtoa_r+0x920>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	f7f6 fb7f 	bl	8000608 <__aeabi_dmul>
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4606      	mov	r6, r0
 8009f10:	460f      	mov	r7, r1
 8009f12:	f7f6 fde1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d09b      	beq.n	8009e52 <_dtoa_r+0x672>
 8009f1a:	e7cd      	b.n	8009eb8 <_dtoa_r+0x6d8>
 8009f1c:	9a08      	ldr	r2, [sp, #32]
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	f000 80c4 	beq.w	800a0ac <_dtoa_r+0x8cc>
 8009f24:	9a05      	ldr	r2, [sp, #20]
 8009f26:	2a01      	cmp	r2, #1
 8009f28:	f300 80a8 	bgt.w	800a07c <_dtoa_r+0x89c>
 8009f2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f2e:	2a00      	cmp	r2, #0
 8009f30:	f000 80a0 	beq.w	800a074 <_dtoa_r+0x894>
 8009f34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f38:	9e06      	ldr	r6, [sp, #24]
 8009f3a:	4645      	mov	r5, r8
 8009f3c:	9a04      	ldr	r2, [sp, #16]
 8009f3e:	2101      	movs	r1, #1
 8009f40:	441a      	add	r2, r3
 8009f42:	4620      	mov	r0, r4
 8009f44:	4498      	add	r8, r3
 8009f46:	9204      	str	r2, [sp, #16]
 8009f48:	f000 fb3e 	bl	800a5c8 <__i2b>
 8009f4c:	4607      	mov	r7, r0
 8009f4e:	2d00      	cmp	r5, #0
 8009f50:	dd0b      	ble.n	8009f6a <_dtoa_r+0x78a>
 8009f52:	9b04      	ldr	r3, [sp, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dd08      	ble.n	8009f6a <_dtoa_r+0x78a>
 8009f58:	42ab      	cmp	r3, r5
 8009f5a:	9a04      	ldr	r2, [sp, #16]
 8009f5c:	bfa8      	it	ge
 8009f5e:	462b      	movge	r3, r5
 8009f60:	eba8 0803 	sub.w	r8, r8, r3
 8009f64:	1aed      	subs	r5, r5, r3
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	9b06      	ldr	r3, [sp, #24]
 8009f6c:	b1fb      	cbz	r3, 8009fae <_dtoa_r+0x7ce>
 8009f6e:	9b08      	ldr	r3, [sp, #32]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 809f 	beq.w	800a0b4 <_dtoa_r+0x8d4>
 8009f76:	2e00      	cmp	r6, #0
 8009f78:	dd11      	ble.n	8009f9e <_dtoa_r+0x7be>
 8009f7a:	4639      	mov	r1, r7
 8009f7c:	4632      	mov	r2, r6
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 fbde 	bl	800a740 <__pow5mult>
 8009f84:	465a      	mov	r2, fp
 8009f86:	4601      	mov	r1, r0
 8009f88:	4607      	mov	r7, r0
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 fb32 	bl	800a5f4 <__multiply>
 8009f90:	4659      	mov	r1, fp
 8009f92:	9007      	str	r0, [sp, #28]
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 fa5b 	bl	800a450 <_Bfree>
 8009f9a:	9b07      	ldr	r3, [sp, #28]
 8009f9c:	469b      	mov	fp, r3
 8009f9e:	9b06      	ldr	r3, [sp, #24]
 8009fa0:	1b9a      	subs	r2, r3, r6
 8009fa2:	d004      	beq.n	8009fae <_dtoa_r+0x7ce>
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 fbca 	bl	800a740 <__pow5mult>
 8009fac:	4683      	mov	fp, r0
 8009fae:	2101      	movs	r1, #1
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f000 fb09 	bl	800a5c8 <__i2b>
 8009fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	4606      	mov	r6, r0
 8009fbc:	dd7c      	ble.n	800a0b8 <_dtoa_r+0x8d8>
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	4601      	mov	r1, r0
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 fbbc 	bl	800a740 <__pow5mult>
 8009fc8:	9b05      	ldr	r3, [sp, #20]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	4606      	mov	r6, r0
 8009fce:	dd76      	ble.n	800a0be <_dtoa_r+0x8de>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9306      	str	r3, [sp, #24]
 8009fd4:	6933      	ldr	r3, [r6, #16]
 8009fd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fda:	6918      	ldr	r0, [r3, #16]
 8009fdc:	f000 faa4 	bl	800a528 <__hi0bits>
 8009fe0:	f1c0 0020 	rsb	r0, r0, #32
 8009fe4:	9b04      	ldr	r3, [sp, #16]
 8009fe6:	4418      	add	r0, r3
 8009fe8:	f010 001f 	ands.w	r0, r0, #31
 8009fec:	f000 8086 	beq.w	800a0fc <_dtoa_r+0x91c>
 8009ff0:	f1c0 0320 	rsb	r3, r0, #32
 8009ff4:	2b04      	cmp	r3, #4
 8009ff6:	dd7f      	ble.n	800a0f8 <_dtoa_r+0x918>
 8009ff8:	f1c0 001c 	rsb	r0, r0, #28
 8009ffc:	9b04      	ldr	r3, [sp, #16]
 8009ffe:	4403      	add	r3, r0
 800a000:	4480      	add	r8, r0
 800a002:	4405      	add	r5, r0
 800a004:	9304      	str	r3, [sp, #16]
 800a006:	f1b8 0f00 	cmp.w	r8, #0
 800a00a:	dd05      	ble.n	800a018 <_dtoa_r+0x838>
 800a00c:	4659      	mov	r1, fp
 800a00e:	4642      	mov	r2, r8
 800a010:	4620      	mov	r0, r4
 800a012:	f000 fbef 	bl	800a7f4 <__lshift>
 800a016:	4683      	mov	fp, r0
 800a018:	9b04      	ldr	r3, [sp, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	dd05      	ble.n	800a02a <_dtoa_r+0x84a>
 800a01e:	4631      	mov	r1, r6
 800a020:	461a      	mov	r2, r3
 800a022:	4620      	mov	r0, r4
 800a024:	f000 fbe6 	bl	800a7f4 <__lshift>
 800a028:	4606      	mov	r6, r0
 800a02a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d069      	beq.n	800a104 <_dtoa_r+0x924>
 800a030:	4631      	mov	r1, r6
 800a032:	4658      	mov	r0, fp
 800a034:	f000 fc4a 	bl	800a8cc <__mcmp>
 800a038:	2800      	cmp	r0, #0
 800a03a:	da63      	bge.n	800a104 <_dtoa_r+0x924>
 800a03c:	2300      	movs	r3, #0
 800a03e:	4659      	mov	r1, fp
 800a040:	220a      	movs	r2, #10
 800a042:	4620      	mov	r0, r4
 800a044:	f000 fa26 	bl	800a494 <__multadd>
 800a048:	9b08      	ldr	r3, [sp, #32]
 800a04a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a04e:	4683      	mov	fp, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 818f 	beq.w	800a374 <_dtoa_r+0xb94>
 800a056:	4639      	mov	r1, r7
 800a058:	2300      	movs	r3, #0
 800a05a:	220a      	movs	r2, #10
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 fa19 	bl	800a494 <__multadd>
 800a062:	f1b9 0f00 	cmp.w	r9, #0
 800a066:	4607      	mov	r7, r0
 800a068:	f300 808e 	bgt.w	800a188 <_dtoa_r+0x9a8>
 800a06c:	9b05      	ldr	r3, [sp, #20]
 800a06e:	2b02      	cmp	r3, #2
 800a070:	dc50      	bgt.n	800a114 <_dtoa_r+0x934>
 800a072:	e089      	b.n	800a188 <_dtoa_r+0x9a8>
 800a074:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a07a:	e75d      	b.n	8009f38 <_dtoa_r+0x758>
 800a07c:	9b01      	ldr	r3, [sp, #4]
 800a07e:	1e5e      	subs	r6, r3, #1
 800a080:	9b06      	ldr	r3, [sp, #24]
 800a082:	42b3      	cmp	r3, r6
 800a084:	bfbf      	itttt	lt
 800a086:	9b06      	ldrlt	r3, [sp, #24]
 800a088:	9606      	strlt	r6, [sp, #24]
 800a08a:	1af2      	sublt	r2, r6, r3
 800a08c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a08e:	bfb6      	itet	lt
 800a090:	189b      	addlt	r3, r3, r2
 800a092:	1b9e      	subge	r6, r3, r6
 800a094:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	bfb8      	it	lt
 800a09a:	2600      	movlt	r6, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	bfb5      	itete	lt
 800a0a0:	eba8 0503 	sublt.w	r5, r8, r3
 800a0a4:	9b01      	ldrge	r3, [sp, #4]
 800a0a6:	2300      	movlt	r3, #0
 800a0a8:	4645      	movge	r5, r8
 800a0aa:	e747      	b.n	8009f3c <_dtoa_r+0x75c>
 800a0ac:	9e06      	ldr	r6, [sp, #24]
 800a0ae:	9f08      	ldr	r7, [sp, #32]
 800a0b0:	4645      	mov	r5, r8
 800a0b2:	e74c      	b.n	8009f4e <_dtoa_r+0x76e>
 800a0b4:	9a06      	ldr	r2, [sp, #24]
 800a0b6:	e775      	b.n	8009fa4 <_dtoa_r+0x7c4>
 800a0b8:	9b05      	ldr	r3, [sp, #20]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	dc18      	bgt.n	800a0f0 <_dtoa_r+0x910>
 800a0be:	9b02      	ldr	r3, [sp, #8]
 800a0c0:	b9b3      	cbnz	r3, 800a0f0 <_dtoa_r+0x910>
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0c8:	b9a3      	cbnz	r3, 800a0f4 <_dtoa_r+0x914>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0d0:	0d1b      	lsrs	r3, r3, #20
 800a0d2:	051b      	lsls	r3, r3, #20
 800a0d4:	b12b      	cbz	r3, 800a0e2 <_dtoa_r+0x902>
 800a0d6:	9b04      	ldr	r3, [sp, #16]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	f108 0801 	add.w	r8, r8, #1
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	9306      	str	r3, [sp, #24]
 800a0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f47f af74 	bne.w	8009fd4 <_dtoa_r+0x7f4>
 800a0ec:	2001      	movs	r0, #1
 800a0ee:	e779      	b.n	8009fe4 <_dtoa_r+0x804>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	e7f6      	b.n	800a0e2 <_dtoa_r+0x902>
 800a0f4:	9b02      	ldr	r3, [sp, #8]
 800a0f6:	e7f4      	b.n	800a0e2 <_dtoa_r+0x902>
 800a0f8:	d085      	beq.n	800a006 <_dtoa_r+0x826>
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	301c      	adds	r0, #28
 800a0fe:	e77d      	b.n	8009ffc <_dtoa_r+0x81c>
 800a100:	40240000 	.word	0x40240000
 800a104:	9b01      	ldr	r3, [sp, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	dc38      	bgt.n	800a17c <_dtoa_r+0x99c>
 800a10a:	9b05      	ldr	r3, [sp, #20]
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	dd35      	ble.n	800a17c <_dtoa_r+0x99c>
 800a110:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a114:	f1b9 0f00 	cmp.w	r9, #0
 800a118:	d10d      	bne.n	800a136 <_dtoa_r+0x956>
 800a11a:	4631      	mov	r1, r6
 800a11c:	464b      	mov	r3, r9
 800a11e:	2205      	movs	r2, #5
 800a120:	4620      	mov	r0, r4
 800a122:	f000 f9b7 	bl	800a494 <__multadd>
 800a126:	4601      	mov	r1, r0
 800a128:	4606      	mov	r6, r0
 800a12a:	4658      	mov	r0, fp
 800a12c:	f000 fbce 	bl	800a8cc <__mcmp>
 800a130:	2800      	cmp	r0, #0
 800a132:	f73f adbd 	bgt.w	8009cb0 <_dtoa_r+0x4d0>
 800a136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a138:	9d00      	ldr	r5, [sp, #0]
 800a13a:	ea6f 0a03 	mvn.w	sl, r3
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	4631      	mov	r1, r6
 800a144:	4620      	mov	r0, r4
 800a146:	f000 f983 	bl	800a450 <_Bfree>
 800a14a:	2f00      	cmp	r7, #0
 800a14c:	f43f aeb4 	beq.w	8009eb8 <_dtoa_r+0x6d8>
 800a150:	f1b8 0f00 	cmp.w	r8, #0
 800a154:	d005      	beq.n	800a162 <_dtoa_r+0x982>
 800a156:	45b8      	cmp	r8, r7
 800a158:	d003      	beq.n	800a162 <_dtoa_r+0x982>
 800a15a:	4641      	mov	r1, r8
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 f977 	bl	800a450 <_Bfree>
 800a162:	4639      	mov	r1, r7
 800a164:	4620      	mov	r0, r4
 800a166:	f000 f973 	bl	800a450 <_Bfree>
 800a16a:	e6a5      	b.n	8009eb8 <_dtoa_r+0x6d8>
 800a16c:	2600      	movs	r6, #0
 800a16e:	4637      	mov	r7, r6
 800a170:	e7e1      	b.n	800a136 <_dtoa_r+0x956>
 800a172:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a174:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a178:	4637      	mov	r7, r6
 800a17a:	e599      	b.n	8009cb0 <_dtoa_r+0x4d0>
 800a17c:	9b08      	ldr	r3, [sp, #32]
 800a17e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	f000 80fd 	beq.w	800a382 <_dtoa_r+0xba2>
 800a188:	2d00      	cmp	r5, #0
 800a18a:	dd05      	ble.n	800a198 <_dtoa_r+0x9b8>
 800a18c:	4639      	mov	r1, r7
 800a18e:	462a      	mov	r2, r5
 800a190:	4620      	mov	r0, r4
 800a192:	f000 fb2f 	bl	800a7f4 <__lshift>
 800a196:	4607      	mov	r7, r0
 800a198:	9b06      	ldr	r3, [sp, #24]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d05c      	beq.n	800a258 <_dtoa_r+0xa78>
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f000 f915 	bl	800a3d0 <_Balloc>
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	b928      	cbnz	r0, 800a1b6 <_dtoa_r+0x9d6>
 800a1aa:	4b80      	ldr	r3, [pc, #512]	; (800a3ac <_dtoa_r+0xbcc>)
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1b2:	f7ff bb2e 	b.w	8009812 <_dtoa_r+0x32>
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	3202      	adds	r2, #2
 800a1ba:	0092      	lsls	r2, r2, #2
 800a1bc:	f107 010c 	add.w	r1, r7, #12
 800a1c0:	300c      	adds	r0, #12
 800a1c2:	f7fe fc55 	bl	8008a70 <memcpy>
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 fb12 	bl	800a7f4 <__lshift>
 800a1d0:	9b00      	ldr	r3, [sp, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	9301      	str	r3, [sp, #4]
 800a1d6:	9b00      	ldr	r3, [sp, #0]
 800a1d8:	444b      	add	r3, r9
 800a1da:	9307      	str	r3, [sp, #28]
 800a1dc:	9b02      	ldr	r3, [sp, #8]
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	46b8      	mov	r8, r7
 800a1e4:	9306      	str	r3, [sp, #24]
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	9b01      	ldr	r3, [sp, #4]
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	4658      	mov	r0, fp
 800a1f0:	9302      	str	r3, [sp, #8]
 800a1f2:	f7ff fa67 	bl	80096c4 <quorem>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	3330      	adds	r3, #48	; 0x30
 800a1fa:	9004      	str	r0, [sp, #16]
 800a1fc:	4641      	mov	r1, r8
 800a1fe:	4658      	mov	r0, fp
 800a200:	9308      	str	r3, [sp, #32]
 800a202:	f000 fb63 	bl	800a8cc <__mcmp>
 800a206:	463a      	mov	r2, r7
 800a208:	4681      	mov	r9, r0
 800a20a:	4631      	mov	r1, r6
 800a20c:	4620      	mov	r0, r4
 800a20e:	f000 fb79 	bl	800a904 <__mdiff>
 800a212:	68c2      	ldr	r2, [r0, #12]
 800a214:	9b08      	ldr	r3, [sp, #32]
 800a216:	4605      	mov	r5, r0
 800a218:	bb02      	cbnz	r2, 800a25c <_dtoa_r+0xa7c>
 800a21a:	4601      	mov	r1, r0
 800a21c:	4658      	mov	r0, fp
 800a21e:	f000 fb55 	bl	800a8cc <__mcmp>
 800a222:	9b08      	ldr	r3, [sp, #32]
 800a224:	4602      	mov	r2, r0
 800a226:	4629      	mov	r1, r5
 800a228:	4620      	mov	r0, r4
 800a22a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a22e:	f000 f90f 	bl	800a450 <_Bfree>
 800a232:	9b05      	ldr	r3, [sp, #20]
 800a234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a236:	9d01      	ldr	r5, [sp, #4]
 800a238:	ea43 0102 	orr.w	r1, r3, r2
 800a23c:	9b06      	ldr	r3, [sp, #24]
 800a23e:	430b      	orrs	r3, r1
 800a240:	9b08      	ldr	r3, [sp, #32]
 800a242:	d10d      	bne.n	800a260 <_dtoa_r+0xa80>
 800a244:	2b39      	cmp	r3, #57	; 0x39
 800a246:	d029      	beq.n	800a29c <_dtoa_r+0xabc>
 800a248:	f1b9 0f00 	cmp.w	r9, #0
 800a24c:	dd01      	ble.n	800a252 <_dtoa_r+0xa72>
 800a24e:	9b04      	ldr	r3, [sp, #16]
 800a250:	3331      	adds	r3, #49	; 0x31
 800a252:	9a02      	ldr	r2, [sp, #8]
 800a254:	7013      	strb	r3, [r2, #0]
 800a256:	e774      	b.n	800a142 <_dtoa_r+0x962>
 800a258:	4638      	mov	r0, r7
 800a25a:	e7b9      	b.n	800a1d0 <_dtoa_r+0x9f0>
 800a25c:	2201      	movs	r2, #1
 800a25e:	e7e2      	b.n	800a226 <_dtoa_r+0xa46>
 800a260:	f1b9 0f00 	cmp.w	r9, #0
 800a264:	db06      	blt.n	800a274 <_dtoa_r+0xa94>
 800a266:	9905      	ldr	r1, [sp, #20]
 800a268:	ea41 0909 	orr.w	r9, r1, r9
 800a26c:	9906      	ldr	r1, [sp, #24]
 800a26e:	ea59 0101 	orrs.w	r1, r9, r1
 800a272:	d120      	bne.n	800a2b6 <_dtoa_r+0xad6>
 800a274:	2a00      	cmp	r2, #0
 800a276:	ddec      	ble.n	800a252 <_dtoa_r+0xa72>
 800a278:	4659      	mov	r1, fp
 800a27a:	2201      	movs	r2, #1
 800a27c:	4620      	mov	r0, r4
 800a27e:	9301      	str	r3, [sp, #4]
 800a280:	f000 fab8 	bl	800a7f4 <__lshift>
 800a284:	4631      	mov	r1, r6
 800a286:	4683      	mov	fp, r0
 800a288:	f000 fb20 	bl	800a8cc <__mcmp>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	9b01      	ldr	r3, [sp, #4]
 800a290:	dc02      	bgt.n	800a298 <_dtoa_r+0xab8>
 800a292:	d1de      	bne.n	800a252 <_dtoa_r+0xa72>
 800a294:	07da      	lsls	r2, r3, #31
 800a296:	d5dc      	bpl.n	800a252 <_dtoa_r+0xa72>
 800a298:	2b39      	cmp	r3, #57	; 0x39
 800a29a:	d1d8      	bne.n	800a24e <_dtoa_r+0xa6e>
 800a29c:	9a02      	ldr	r2, [sp, #8]
 800a29e:	2339      	movs	r3, #57	; 0x39
 800a2a0:	7013      	strb	r3, [r2, #0]
 800a2a2:	462b      	mov	r3, r5
 800a2a4:	461d      	mov	r5, r3
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2ac:	2a39      	cmp	r2, #57	; 0x39
 800a2ae:	d050      	beq.n	800a352 <_dtoa_r+0xb72>
 800a2b0:	3201      	adds	r2, #1
 800a2b2:	701a      	strb	r2, [r3, #0]
 800a2b4:	e745      	b.n	800a142 <_dtoa_r+0x962>
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	dd03      	ble.n	800a2c2 <_dtoa_r+0xae2>
 800a2ba:	2b39      	cmp	r3, #57	; 0x39
 800a2bc:	d0ee      	beq.n	800a29c <_dtoa_r+0xabc>
 800a2be:	3301      	adds	r3, #1
 800a2c0:	e7c7      	b.n	800a252 <_dtoa_r+0xa72>
 800a2c2:	9a01      	ldr	r2, [sp, #4]
 800a2c4:	9907      	ldr	r1, [sp, #28]
 800a2c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2ca:	428a      	cmp	r2, r1
 800a2cc:	d02a      	beq.n	800a324 <_dtoa_r+0xb44>
 800a2ce:	4659      	mov	r1, fp
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	220a      	movs	r2, #10
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 f8dd 	bl	800a494 <__multadd>
 800a2da:	45b8      	cmp	r8, r7
 800a2dc:	4683      	mov	fp, r0
 800a2de:	f04f 0300 	mov.w	r3, #0
 800a2e2:	f04f 020a 	mov.w	r2, #10
 800a2e6:	4641      	mov	r1, r8
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	d107      	bne.n	800a2fc <_dtoa_r+0xb1c>
 800a2ec:	f000 f8d2 	bl	800a494 <__multadd>
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	4607      	mov	r7, r0
 800a2f4:	9b01      	ldr	r3, [sp, #4]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	9301      	str	r3, [sp, #4]
 800a2fa:	e775      	b.n	800a1e8 <_dtoa_r+0xa08>
 800a2fc:	f000 f8ca 	bl	800a494 <__multadd>
 800a300:	4639      	mov	r1, r7
 800a302:	4680      	mov	r8, r0
 800a304:	2300      	movs	r3, #0
 800a306:	220a      	movs	r2, #10
 800a308:	4620      	mov	r0, r4
 800a30a:	f000 f8c3 	bl	800a494 <__multadd>
 800a30e:	4607      	mov	r7, r0
 800a310:	e7f0      	b.n	800a2f4 <_dtoa_r+0xb14>
 800a312:	f1b9 0f00 	cmp.w	r9, #0
 800a316:	9a00      	ldr	r2, [sp, #0]
 800a318:	bfcc      	ite	gt
 800a31a:	464d      	movgt	r5, r9
 800a31c:	2501      	movle	r5, #1
 800a31e:	4415      	add	r5, r2
 800a320:	f04f 0800 	mov.w	r8, #0
 800a324:	4659      	mov	r1, fp
 800a326:	2201      	movs	r2, #1
 800a328:	4620      	mov	r0, r4
 800a32a:	9301      	str	r3, [sp, #4]
 800a32c:	f000 fa62 	bl	800a7f4 <__lshift>
 800a330:	4631      	mov	r1, r6
 800a332:	4683      	mov	fp, r0
 800a334:	f000 faca 	bl	800a8cc <__mcmp>
 800a338:	2800      	cmp	r0, #0
 800a33a:	dcb2      	bgt.n	800a2a2 <_dtoa_r+0xac2>
 800a33c:	d102      	bne.n	800a344 <_dtoa_r+0xb64>
 800a33e:	9b01      	ldr	r3, [sp, #4]
 800a340:	07db      	lsls	r3, r3, #31
 800a342:	d4ae      	bmi.n	800a2a2 <_dtoa_r+0xac2>
 800a344:	462b      	mov	r3, r5
 800a346:	461d      	mov	r5, r3
 800a348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a34c:	2a30      	cmp	r2, #48	; 0x30
 800a34e:	d0fa      	beq.n	800a346 <_dtoa_r+0xb66>
 800a350:	e6f7      	b.n	800a142 <_dtoa_r+0x962>
 800a352:	9a00      	ldr	r2, [sp, #0]
 800a354:	429a      	cmp	r2, r3
 800a356:	d1a5      	bne.n	800a2a4 <_dtoa_r+0xac4>
 800a358:	f10a 0a01 	add.w	sl, sl, #1
 800a35c:	2331      	movs	r3, #49	; 0x31
 800a35e:	e779      	b.n	800a254 <_dtoa_r+0xa74>
 800a360:	4b13      	ldr	r3, [pc, #76]	; (800a3b0 <_dtoa_r+0xbd0>)
 800a362:	f7ff baaf 	b.w	80098c4 <_dtoa_r+0xe4>
 800a366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f47f aa86 	bne.w	800987a <_dtoa_r+0x9a>
 800a36e:	4b11      	ldr	r3, [pc, #68]	; (800a3b4 <_dtoa_r+0xbd4>)
 800a370:	f7ff baa8 	b.w	80098c4 <_dtoa_r+0xe4>
 800a374:	f1b9 0f00 	cmp.w	r9, #0
 800a378:	dc03      	bgt.n	800a382 <_dtoa_r+0xba2>
 800a37a:	9b05      	ldr	r3, [sp, #20]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	f73f aec9 	bgt.w	800a114 <_dtoa_r+0x934>
 800a382:	9d00      	ldr	r5, [sp, #0]
 800a384:	4631      	mov	r1, r6
 800a386:	4658      	mov	r0, fp
 800a388:	f7ff f99c 	bl	80096c4 <quorem>
 800a38c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a390:	f805 3b01 	strb.w	r3, [r5], #1
 800a394:	9a00      	ldr	r2, [sp, #0]
 800a396:	1aaa      	subs	r2, r5, r2
 800a398:	4591      	cmp	r9, r2
 800a39a:	ddba      	ble.n	800a312 <_dtoa_r+0xb32>
 800a39c:	4659      	mov	r1, fp
 800a39e:	2300      	movs	r3, #0
 800a3a0:	220a      	movs	r2, #10
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 f876 	bl	800a494 <__multadd>
 800a3a8:	4683      	mov	fp, r0
 800a3aa:	e7eb      	b.n	800a384 <_dtoa_r+0xba4>
 800a3ac:	0800c3df 	.word	0x0800c3df
 800a3b0:	0800c338 	.word	0x0800c338
 800a3b4:	0800c35c 	.word	0x0800c35c

0800a3b8 <_localeconv_r>:
 800a3b8:	4800      	ldr	r0, [pc, #0]	; (800a3bc <_localeconv_r+0x4>)
 800a3ba:	4770      	bx	lr
 800a3bc:	200002d4 	.word	0x200002d4

0800a3c0 <malloc>:
 800a3c0:	4b02      	ldr	r3, [pc, #8]	; (800a3cc <malloc+0xc>)
 800a3c2:	4601      	mov	r1, r0
 800a3c4:	6818      	ldr	r0, [r3, #0]
 800a3c6:	f000 bbe1 	b.w	800ab8c <_malloc_r>
 800a3ca:	bf00      	nop
 800a3cc:	20000180 	.word	0x20000180

0800a3d0 <_Balloc>:
 800a3d0:	b570      	push	{r4, r5, r6, lr}
 800a3d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	460d      	mov	r5, r1
 800a3d8:	b976      	cbnz	r6, 800a3f8 <_Balloc+0x28>
 800a3da:	2010      	movs	r0, #16
 800a3dc:	f7ff fff0 	bl	800a3c0 <malloc>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	6260      	str	r0, [r4, #36]	; 0x24
 800a3e4:	b920      	cbnz	r0, 800a3f0 <_Balloc+0x20>
 800a3e6:	4b18      	ldr	r3, [pc, #96]	; (800a448 <_Balloc+0x78>)
 800a3e8:	4818      	ldr	r0, [pc, #96]	; (800a44c <_Balloc+0x7c>)
 800a3ea:	2166      	movs	r1, #102	; 0x66
 800a3ec:	f000 fd94 	bl	800af18 <__assert_func>
 800a3f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3f4:	6006      	str	r6, [r0, #0]
 800a3f6:	60c6      	str	r6, [r0, #12]
 800a3f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3fa:	68f3      	ldr	r3, [r6, #12]
 800a3fc:	b183      	cbz	r3, 800a420 <_Balloc+0x50>
 800a3fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a406:	b9b8      	cbnz	r0, 800a438 <_Balloc+0x68>
 800a408:	2101      	movs	r1, #1
 800a40a:	fa01 f605 	lsl.w	r6, r1, r5
 800a40e:	1d72      	adds	r2, r6, #5
 800a410:	0092      	lsls	r2, r2, #2
 800a412:	4620      	mov	r0, r4
 800a414:	f000 fb5a 	bl	800aacc <_calloc_r>
 800a418:	b160      	cbz	r0, 800a434 <_Balloc+0x64>
 800a41a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a41e:	e00e      	b.n	800a43e <_Balloc+0x6e>
 800a420:	2221      	movs	r2, #33	; 0x21
 800a422:	2104      	movs	r1, #4
 800a424:	4620      	mov	r0, r4
 800a426:	f000 fb51 	bl	800aacc <_calloc_r>
 800a42a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a42c:	60f0      	str	r0, [r6, #12]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1e4      	bne.n	800a3fe <_Balloc+0x2e>
 800a434:	2000      	movs	r0, #0
 800a436:	bd70      	pop	{r4, r5, r6, pc}
 800a438:	6802      	ldr	r2, [r0, #0]
 800a43a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a43e:	2300      	movs	r3, #0
 800a440:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a444:	e7f7      	b.n	800a436 <_Balloc+0x66>
 800a446:	bf00      	nop
 800a448:	0800c369 	.word	0x0800c369
 800a44c:	0800c3f0 	.word	0x0800c3f0

0800a450 <_Bfree>:
 800a450:	b570      	push	{r4, r5, r6, lr}
 800a452:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a454:	4605      	mov	r5, r0
 800a456:	460c      	mov	r4, r1
 800a458:	b976      	cbnz	r6, 800a478 <_Bfree+0x28>
 800a45a:	2010      	movs	r0, #16
 800a45c:	f7ff ffb0 	bl	800a3c0 <malloc>
 800a460:	4602      	mov	r2, r0
 800a462:	6268      	str	r0, [r5, #36]	; 0x24
 800a464:	b920      	cbnz	r0, 800a470 <_Bfree+0x20>
 800a466:	4b09      	ldr	r3, [pc, #36]	; (800a48c <_Bfree+0x3c>)
 800a468:	4809      	ldr	r0, [pc, #36]	; (800a490 <_Bfree+0x40>)
 800a46a:	218a      	movs	r1, #138	; 0x8a
 800a46c:	f000 fd54 	bl	800af18 <__assert_func>
 800a470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a474:	6006      	str	r6, [r0, #0]
 800a476:	60c6      	str	r6, [r0, #12]
 800a478:	b13c      	cbz	r4, 800a48a <_Bfree+0x3a>
 800a47a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a47c:	6862      	ldr	r2, [r4, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a484:	6021      	str	r1, [r4, #0]
 800a486:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	0800c369 	.word	0x0800c369
 800a490:	0800c3f0 	.word	0x0800c3f0

0800a494 <__multadd>:
 800a494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a498:	690e      	ldr	r6, [r1, #16]
 800a49a:	4607      	mov	r7, r0
 800a49c:	4698      	mov	r8, r3
 800a49e:	460c      	mov	r4, r1
 800a4a0:	f101 0014 	add.w	r0, r1, #20
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	6805      	ldr	r5, [r0, #0]
 800a4a8:	b2a9      	uxth	r1, r5
 800a4aa:	fb02 8101 	mla	r1, r2, r1, r8
 800a4ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a4b2:	0c2d      	lsrs	r5, r5, #16
 800a4b4:	fb02 c505 	mla	r5, r2, r5, ip
 800a4b8:	b289      	uxth	r1, r1
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a4c0:	429e      	cmp	r6, r3
 800a4c2:	f840 1b04 	str.w	r1, [r0], #4
 800a4c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a4ca:	dcec      	bgt.n	800a4a6 <__multadd+0x12>
 800a4cc:	f1b8 0f00 	cmp.w	r8, #0
 800a4d0:	d022      	beq.n	800a518 <__multadd+0x84>
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	42b3      	cmp	r3, r6
 800a4d6:	dc19      	bgt.n	800a50c <__multadd+0x78>
 800a4d8:	6861      	ldr	r1, [r4, #4]
 800a4da:	4638      	mov	r0, r7
 800a4dc:	3101      	adds	r1, #1
 800a4de:	f7ff ff77 	bl	800a3d0 <_Balloc>
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	b928      	cbnz	r0, 800a4f2 <__multadd+0x5e>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	4b0d      	ldr	r3, [pc, #52]	; (800a520 <__multadd+0x8c>)
 800a4ea:	480e      	ldr	r0, [pc, #56]	; (800a524 <__multadd+0x90>)
 800a4ec:	21b5      	movs	r1, #181	; 0xb5
 800a4ee:	f000 fd13 	bl	800af18 <__assert_func>
 800a4f2:	6922      	ldr	r2, [r4, #16]
 800a4f4:	3202      	adds	r2, #2
 800a4f6:	f104 010c 	add.w	r1, r4, #12
 800a4fa:	0092      	lsls	r2, r2, #2
 800a4fc:	300c      	adds	r0, #12
 800a4fe:	f7fe fab7 	bl	8008a70 <memcpy>
 800a502:	4621      	mov	r1, r4
 800a504:	4638      	mov	r0, r7
 800a506:	f7ff ffa3 	bl	800a450 <_Bfree>
 800a50a:	462c      	mov	r4, r5
 800a50c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a510:	3601      	adds	r6, #1
 800a512:	f8c3 8014 	str.w	r8, [r3, #20]
 800a516:	6126      	str	r6, [r4, #16]
 800a518:	4620      	mov	r0, r4
 800a51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a51e:	bf00      	nop
 800a520:	0800c3df 	.word	0x0800c3df
 800a524:	0800c3f0 	.word	0x0800c3f0

0800a528 <__hi0bits>:
 800a528:	0c03      	lsrs	r3, r0, #16
 800a52a:	041b      	lsls	r3, r3, #16
 800a52c:	b9d3      	cbnz	r3, 800a564 <__hi0bits+0x3c>
 800a52e:	0400      	lsls	r0, r0, #16
 800a530:	2310      	movs	r3, #16
 800a532:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a536:	bf04      	itt	eq
 800a538:	0200      	lsleq	r0, r0, #8
 800a53a:	3308      	addeq	r3, #8
 800a53c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a540:	bf04      	itt	eq
 800a542:	0100      	lsleq	r0, r0, #4
 800a544:	3304      	addeq	r3, #4
 800a546:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a54a:	bf04      	itt	eq
 800a54c:	0080      	lsleq	r0, r0, #2
 800a54e:	3302      	addeq	r3, #2
 800a550:	2800      	cmp	r0, #0
 800a552:	db05      	blt.n	800a560 <__hi0bits+0x38>
 800a554:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a558:	f103 0301 	add.w	r3, r3, #1
 800a55c:	bf08      	it	eq
 800a55e:	2320      	moveq	r3, #32
 800a560:	4618      	mov	r0, r3
 800a562:	4770      	bx	lr
 800a564:	2300      	movs	r3, #0
 800a566:	e7e4      	b.n	800a532 <__hi0bits+0xa>

0800a568 <__lo0bits>:
 800a568:	6803      	ldr	r3, [r0, #0]
 800a56a:	f013 0207 	ands.w	r2, r3, #7
 800a56e:	4601      	mov	r1, r0
 800a570:	d00b      	beq.n	800a58a <__lo0bits+0x22>
 800a572:	07da      	lsls	r2, r3, #31
 800a574:	d424      	bmi.n	800a5c0 <__lo0bits+0x58>
 800a576:	0798      	lsls	r0, r3, #30
 800a578:	bf49      	itett	mi
 800a57a:	085b      	lsrmi	r3, r3, #1
 800a57c:	089b      	lsrpl	r3, r3, #2
 800a57e:	2001      	movmi	r0, #1
 800a580:	600b      	strmi	r3, [r1, #0]
 800a582:	bf5c      	itt	pl
 800a584:	600b      	strpl	r3, [r1, #0]
 800a586:	2002      	movpl	r0, #2
 800a588:	4770      	bx	lr
 800a58a:	b298      	uxth	r0, r3
 800a58c:	b9b0      	cbnz	r0, 800a5bc <__lo0bits+0x54>
 800a58e:	0c1b      	lsrs	r3, r3, #16
 800a590:	2010      	movs	r0, #16
 800a592:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a596:	bf04      	itt	eq
 800a598:	0a1b      	lsreq	r3, r3, #8
 800a59a:	3008      	addeq	r0, #8
 800a59c:	071a      	lsls	r2, r3, #28
 800a59e:	bf04      	itt	eq
 800a5a0:	091b      	lsreq	r3, r3, #4
 800a5a2:	3004      	addeq	r0, #4
 800a5a4:	079a      	lsls	r2, r3, #30
 800a5a6:	bf04      	itt	eq
 800a5a8:	089b      	lsreq	r3, r3, #2
 800a5aa:	3002      	addeq	r0, #2
 800a5ac:	07da      	lsls	r2, r3, #31
 800a5ae:	d403      	bmi.n	800a5b8 <__lo0bits+0x50>
 800a5b0:	085b      	lsrs	r3, r3, #1
 800a5b2:	f100 0001 	add.w	r0, r0, #1
 800a5b6:	d005      	beq.n	800a5c4 <__lo0bits+0x5c>
 800a5b8:	600b      	str	r3, [r1, #0]
 800a5ba:	4770      	bx	lr
 800a5bc:	4610      	mov	r0, r2
 800a5be:	e7e8      	b.n	800a592 <__lo0bits+0x2a>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	4770      	bx	lr
 800a5c4:	2020      	movs	r0, #32
 800a5c6:	4770      	bx	lr

0800a5c8 <__i2b>:
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	f7ff feff 	bl	800a3d0 <_Balloc>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	b928      	cbnz	r0, 800a5e2 <__i2b+0x1a>
 800a5d6:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <__i2b+0x24>)
 800a5d8:	4805      	ldr	r0, [pc, #20]	; (800a5f0 <__i2b+0x28>)
 800a5da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5de:	f000 fc9b 	bl	800af18 <__assert_func>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	6144      	str	r4, [r0, #20]
 800a5e6:	6103      	str	r3, [r0, #16]
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	bf00      	nop
 800a5ec:	0800c3df 	.word	0x0800c3df
 800a5f0:	0800c3f0 	.word	0x0800c3f0

0800a5f4 <__multiply>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	4614      	mov	r4, r2
 800a5fa:	690a      	ldr	r2, [r1, #16]
 800a5fc:	6923      	ldr	r3, [r4, #16]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	bfb8      	it	lt
 800a602:	460b      	movlt	r3, r1
 800a604:	460d      	mov	r5, r1
 800a606:	bfbc      	itt	lt
 800a608:	4625      	movlt	r5, r4
 800a60a:	461c      	movlt	r4, r3
 800a60c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a610:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a614:	68ab      	ldr	r3, [r5, #8]
 800a616:	6869      	ldr	r1, [r5, #4]
 800a618:	eb0a 0709 	add.w	r7, sl, r9
 800a61c:	42bb      	cmp	r3, r7
 800a61e:	b085      	sub	sp, #20
 800a620:	bfb8      	it	lt
 800a622:	3101      	addlt	r1, #1
 800a624:	f7ff fed4 	bl	800a3d0 <_Balloc>
 800a628:	b930      	cbnz	r0, 800a638 <__multiply+0x44>
 800a62a:	4602      	mov	r2, r0
 800a62c:	4b42      	ldr	r3, [pc, #264]	; (800a738 <__multiply+0x144>)
 800a62e:	4843      	ldr	r0, [pc, #268]	; (800a73c <__multiply+0x148>)
 800a630:	f240 115d 	movw	r1, #349	; 0x15d
 800a634:	f000 fc70 	bl	800af18 <__assert_func>
 800a638:	f100 0614 	add.w	r6, r0, #20
 800a63c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a640:	4633      	mov	r3, r6
 800a642:	2200      	movs	r2, #0
 800a644:	4543      	cmp	r3, r8
 800a646:	d31e      	bcc.n	800a686 <__multiply+0x92>
 800a648:	f105 0c14 	add.w	ip, r5, #20
 800a64c:	f104 0314 	add.w	r3, r4, #20
 800a650:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a654:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a658:	9202      	str	r2, [sp, #8]
 800a65a:	ebac 0205 	sub.w	r2, ip, r5
 800a65e:	3a15      	subs	r2, #21
 800a660:	f022 0203 	bic.w	r2, r2, #3
 800a664:	3204      	adds	r2, #4
 800a666:	f105 0115 	add.w	r1, r5, #21
 800a66a:	458c      	cmp	ip, r1
 800a66c:	bf38      	it	cc
 800a66e:	2204      	movcc	r2, #4
 800a670:	9201      	str	r2, [sp, #4]
 800a672:	9a02      	ldr	r2, [sp, #8]
 800a674:	9303      	str	r3, [sp, #12]
 800a676:	429a      	cmp	r2, r3
 800a678:	d808      	bhi.n	800a68c <__multiply+0x98>
 800a67a:	2f00      	cmp	r7, #0
 800a67c:	dc55      	bgt.n	800a72a <__multiply+0x136>
 800a67e:	6107      	str	r7, [r0, #16]
 800a680:	b005      	add	sp, #20
 800a682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a686:	f843 2b04 	str.w	r2, [r3], #4
 800a68a:	e7db      	b.n	800a644 <__multiply+0x50>
 800a68c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a690:	f1ba 0f00 	cmp.w	sl, #0
 800a694:	d020      	beq.n	800a6d8 <__multiply+0xe4>
 800a696:	f105 0e14 	add.w	lr, r5, #20
 800a69a:	46b1      	mov	r9, r6
 800a69c:	2200      	movs	r2, #0
 800a69e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a6a2:	f8d9 b000 	ldr.w	fp, [r9]
 800a6a6:	b2a1      	uxth	r1, r4
 800a6a8:	fa1f fb8b 	uxth.w	fp, fp
 800a6ac:	fb0a b101 	mla	r1, sl, r1, fp
 800a6b0:	4411      	add	r1, r2
 800a6b2:	f8d9 2000 	ldr.w	r2, [r9]
 800a6b6:	0c24      	lsrs	r4, r4, #16
 800a6b8:	0c12      	lsrs	r2, r2, #16
 800a6ba:	fb0a 2404 	mla	r4, sl, r4, r2
 800a6be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a6c2:	b289      	uxth	r1, r1
 800a6c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a6c8:	45f4      	cmp	ip, lr
 800a6ca:	f849 1b04 	str.w	r1, [r9], #4
 800a6ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a6d2:	d8e4      	bhi.n	800a69e <__multiply+0xaa>
 800a6d4:	9901      	ldr	r1, [sp, #4]
 800a6d6:	5072      	str	r2, [r6, r1]
 800a6d8:	9a03      	ldr	r2, [sp, #12]
 800a6da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6de:	3304      	adds	r3, #4
 800a6e0:	f1b9 0f00 	cmp.w	r9, #0
 800a6e4:	d01f      	beq.n	800a726 <__multiply+0x132>
 800a6e6:	6834      	ldr	r4, [r6, #0]
 800a6e8:	f105 0114 	add.w	r1, r5, #20
 800a6ec:	46b6      	mov	lr, r6
 800a6ee:	f04f 0a00 	mov.w	sl, #0
 800a6f2:	880a      	ldrh	r2, [r1, #0]
 800a6f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a6f8:	fb09 b202 	mla	r2, r9, r2, fp
 800a6fc:	4492      	add	sl, r2
 800a6fe:	b2a4      	uxth	r4, r4
 800a700:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a704:	f84e 4b04 	str.w	r4, [lr], #4
 800a708:	f851 4b04 	ldr.w	r4, [r1], #4
 800a70c:	f8be 2000 	ldrh.w	r2, [lr]
 800a710:	0c24      	lsrs	r4, r4, #16
 800a712:	fb09 2404 	mla	r4, r9, r4, r2
 800a716:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a71a:	458c      	cmp	ip, r1
 800a71c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a720:	d8e7      	bhi.n	800a6f2 <__multiply+0xfe>
 800a722:	9a01      	ldr	r2, [sp, #4]
 800a724:	50b4      	str	r4, [r6, r2]
 800a726:	3604      	adds	r6, #4
 800a728:	e7a3      	b.n	800a672 <__multiply+0x7e>
 800a72a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1a5      	bne.n	800a67e <__multiply+0x8a>
 800a732:	3f01      	subs	r7, #1
 800a734:	e7a1      	b.n	800a67a <__multiply+0x86>
 800a736:	bf00      	nop
 800a738:	0800c3df 	.word	0x0800c3df
 800a73c:	0800c3f0 	.word	0x0800c3f0

0800a740 <__pow5mult>:
 800a740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a744:	4615      	mov	r5, r2
 800a746:	f012 0203 	ands.w	r2, r2, #3
 800a74a:	4606      	mov	r6, r0
 800a74c:	460f      	mov	r7, r1
 800a74e:	d007      	beq.n	800a760 <__pow5mult+0x20>
 800a750:	4c25      	ldr	r4, [pc, #148]	; (800a7e8 <__pow5mult+0xa8>)
 800a752:	3a01      	subs	r2, #1
 800a754:	2300      	movs	r3, #0
 800a756:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a75a:	f7ff fe9b 	bl	800a494 <__multadd>
 800a75e:	4607      	mov	r7, r0
 800a760:	10ad      	asrs	r5, r5, #2
 800a762:	d03d      	beq.n	800a7e0 <__pow5mult+0xa0>
 800a764:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a766:	b97c      	cbnz	r4, 800a788 <__pow5mult+0x48>
 800a768:	2010      	movs	r0, #16
 800a76a:	f7ff fe29 	bl	800a3c0 <malloc>
 800a76e:	4602      	mov	r2, r0
 800a770:	6270      	str	r0, [r6, #36]	; 0x24
 800a772:	b928      	cbnz	r0, 800a780 <__pow5mult+0x40>
 800a774:	4b1d      	ldr	r3, [pc, #116]	; (800a7ec <__pow5mult+0xac>)
 800a776:	481e      	ldr	r0, [pc, #120]	; (800a7f0 <__pow5mult+0xb0>)
 800a778:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a77c:	f000 fbcc 	bl	800af18 <__assert_func>
 800a780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a784:	6004      	str	r4, [r0, #0]
 800a786:	60c4      	str	r4, [r0, #12]
 800a788:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a78c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a790:	b94c      	cbnz	r4, 800a7a6 <__pow5mult+0x66>
 800a792:	f240 2171 	movw	r1, #625	; 0x271
 800a796:	4630      	mov	r0, r6
 800a798:	f7ff ff16 	bl	800a5c8 <__i2b>
 800a79c:	2300      	movs	r3, #0
 800a79e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	6003      	str	r3, [r0, #0]
 800a7a6:	f04f 0900 	mov.w	r9, #0
 800a7aa:	07eb      	lsls	r3, r5, #31
 800a7ac:	d50a      	bpl.n	800a7c4 <__pow5mult+0x84>
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	4622      	mov	r2, r4
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7ff ff1e 	bl	800a5f4 <__multiply>
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	4680      	mov	r8, r0
 800a7bc:	4630      	mov	r0, r6
 800a7be:	f7ff fe47 	bl	800a450 <_Bfree>
 800a7c2:	4647      	mov	r7, r8
 800a7c4:	106d      	asrs	r5, r5, #1
 800a7c6:	d00b      	beq.n	800a7e0 <__pow5mult+0xa0>
 800a7c8:	6820      	ldr	r0, [r4, #0]
 800a7ca:	b938      	cbnz	r0, 800a7dc <__pow5mult+0x9c>
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f7ff ff0f 	bl	800a5f4 <__multiply>
 800a7d6:	6020      	str	r0, [r4, #0]
 800a7d8:	f8c0 9000 	str.w	r9, [r0]
 800a7dc:	4604      	mov	r4, r0
 800a7de:	e7e4      	b.n	800a7aa <__pow5mult+0x6a>
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7e6:	bf00      	nop
 800a7e8:	0800c540 	.word	0x0800c540
 800a7ec:	0800c369 	.word	0x0800c369
 800a7f0:	0800c3f0 	.word	0x0800c3f0

0800a7f4 <__lshift>:
 800a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	6849      	ldr	r1, [r1, #4]
 800a7fc:	6923      	ldr	r3, [r4, #16]
 800a7fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a802:	68a3      	ldr	r3, [r4, #8]
 800a804:	4607      	mov	r7, r0
 800a806:	4691      	mov	r9, r2
 800a808:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a80c:	f108 0601 	add.w	r6, r8, #1
 800a810:	42b3      	cmp	r3, r6
 800a812:	db0b      	blt.n	800a82c <__lshift+0x38>
 800a814:	4638      	mov	r0, r7
 800a816:	f7ff fddb 	bl	800a3d0 <_Balloc>
 800a81a:	4605      	mov	r5, r0
 800a81c:	b948      	cbnz	r0, 800a832 <__lshift+0x3e>
 800a81e:	4602      	mov	r2, r0
 800a820:	4b28      	ldr	r3, [pc, #160]	; (800a8c4 <__lshift+0xd0>)
 800a822:	4829      	ldr	r0, [pc, #164]	; (800a8c8 <__lshift+0xd4>)
 800a824:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a828:	f000 fb76 	bl	800af18 <__assert_func>
 800a82c:	3101      	adds	r1, #1
 800a82e:	005b      	lsls	r3, r3, #1
 800a830:	e7ee      	b.n	800a810 <__lshift+0x1c>
 800a832:	2300      	movs	r3, #0
 800a834:	f100 0114 	add.w	r1, r0, #20
 800a838:	f100 0210 	add.w	r2, r0, #16
 800a83c:	4618      	mov	r0, r3
 800a83e:	4553      	cmp	r3, sl
 800a840:	db33      	blt.n	800a8aa <__lshift+0xb6>
 800a842:	6920      	ldr	r0, [r4, #16]
 800a844:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a848:	f104 0314 	add.w	r3, r4, #20
 800a84c:	f019 091f 	ands.w	r9, r9, #31
 800a850:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a854:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a858:	d02b      	beq.n	800a8b2 <__lshift+0xbe>
 800a85a:	f1c9 0e20 	rsb	lr, r9, #32
 800a85e:	468a      	mov	sl, r1
 800a860:	2200      	movs	r2, #0
 800a862:	6818      	ldr	r0, [r3, #0]
 800a864:	fa00 f009 	lsl.w	r0, r0, r9
 800a868:	4302      	orrs	r2, r0
 800a86a:	f84a 2b04 	str.w	r2, [sl], #4
 800a86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a872:	459c      	cmp	ip, r3
 800a874:	fa22 f20e 	lsr.w	r2, r2, lr
 800a878:	d8f3      	bhi.n	800a862 <__lshift+0x6e>
 800a87a:	ebac 0304 	sub.w	r3, ip, r4
 800a87e:	3b15      	subs	r3, #21
 800a880:	f023 0303 	bic.w	r3, r3, #3
 800a884:	3304      	adds	r3, #4
 800a886:	f104 0015 	add.w	r0, r4, #21
 800a88a:	4584      	cmp	ip, r0
 800a88c:	bf38      	it	cc
 800a88e:	2304      	movcc	r3, #4
 800a890:	50ca      	str	r2, [r1, r3]
 800a892:	b10a      	cbz	r2, 800a898 <__lshift+0xa4>
 800a894:	f108 0602 	add.w	r6, r8, #2
 800a898:	3e01      	subs	r6, #1
 800a89a:	4638      	mov	r0, r7
 800a89c:	612e      	str	r6, [r5, #16]
 800a89e:	4621      	mov	r1, r4
 800a8a0:	f7ff fdd6 	bl	800a450 <_Bfree>
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	e7c5      	b.n	800a83e <__lshift+0x4a>
 800a8b2:	3904      	subs	r1, #4
 800a8b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8bc:	459c      	cmp	ip, r3
 800a8be:	d8f9      	bhi.n	800a8b4 <__lshift+0xc0>
 800a8c0:	e7ea      	b.n	800a898 <__lshift+0xa4>
 800a8c2:	bf00      	nop
 800a8c4:	0800c3df 	.word	0x0800c3df
 800a8c8:	0800c3f0 	.word	0x0800c3f0

0800a8cc <__mcmp>:
 800a8cc:	b530      	push	{r4, r5, lr}
 800a8ce:	6902      	ldr	r2, [r0, #16]
 800a8d0:	690c      	ldr	r4, [r1, #16]
 800a8d2:	1b12      	subs	r2, r2, r4
 800a8d4:	d10e      	bne.n	800a8f4 <__mcmp+0x28>
 800a8d6:	f100 0314 	add.w	r3, r0, #20
 800a8da:	3114      	adds	r1, #20
 800a8dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8ec:	42a5      	cmp	r5, r4
 800a8ee:	d003      	beq.n	800a8f8 <__mcmp+0x2c>
 800a8f0:	d305      	bcc.n	800a8fe <__mcmp+0x32>
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	bd30      	pop	{r4, r5, pc}
 800a8f8:	4283      	cmp	r3, r0
 800a8fa:	d3f3      	bcc.n	800a8e4 <__mcmp+0x18>
 800a8fc:	e7fa      	b.n	800a8f4 <__mcmp+0x28>
 800a8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a902:	e7f7      	b.n	800a8f4 <__mcmp+0x28>

0800a904 <__mdiff>:
 800a904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a908:	460c      	mov	r4, r1
 800a90a:	4606      	mov	r6, r0
 800a90c:	4611      	mov	r1, r2
 800a90e:	4620      	mov	r0, r4
 800a910:	4617      	mov	r7, r2
 800a912:	f7ff ffdb 	bl	800a8cc <__mcmp>
 800a916:	1e05      	subs	r5, r0, #0
 800a918:	d110      	bne.n	800a93c <__mdiff+0x38>
 800a91a:	4629      	mov	r1, r5
 800a91c:	4630      	mov	r0, r6
 800a91e:	f7ff fd57 	bl	800a3d0 <_Balloc>
 800a922:	b930      	cbnz	r0, 800a932 <__mdiff+0x2e>
 800a924:	4b39      	ldr	r3, [pc, #228]	; (800aa0c <__mdiff+0x108>)
 800a926:	4602      	mov	r2, r0
 800a928:	f240 2132 	movw	r1, #562	; 0x232
 800a92c:	4838      	ldr	r0, [pc, #224]	; (800aa10 <__mdiff+0x10c>)
 800a92e:	f000 faf3 	bl	800af18 <__assert_func>
 800a932:	2301      	movs	r3, #1
 800a934:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93c:	bfa4      	itt	ge
 800a93e:	463b      	movge	r3, r7
 800a940:	4627      	movge	r7, r4
 800a942:	4630      	mov	r0, r6
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	bfa6      	itte	ge
 800a948:	461c      	movge	r4, r3
 800a94a:	2500      	movge	r5, #0
 800a94c:	2501      	movlt	r5, #1
 800a94e:	f7ff fd3f 	bl	800a3d0 <_Balloc>
 800a952:	b920      	cbnz	r0, 800a95e <__mdiff+0x5a>
 800a954:	4b2d      	ldr	r3, [pc, #180]	; (800aa0c <__mdiff+0x108>)
 800a956:	4602      	mov	r2, r0
 800a958:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a95c:	e7e6      	b.n	800a92c <__mdiff+0x28>
 800a95e:	693e      	ldr	r6, [r7, #16]
 800a960:	60c5      	str	r5, [r0, #12]
 800a962:	6925      	ldr	r5, [r4, #16]
 800a964:	f107 0114 	add.w	r1, r7, #20
 800a968:	f104 0914 	add.w	r9, r4, #20
 800a96c:	f100 0e14 	add.w	lr, r0, #20
 800a970:	f107 0210 	add.w	r2, r7, #16
 800a974:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a978:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a97c:	46f2      	mov	sl, lr
 800a97e:	2700      	movs	r7, #0
 800a980:	f859 3b04 	ldr.w	r3, [r9], #4
 800a984:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a988:	fa1f f883 	uxth.w	r8, r3
 800a98c:	fa17 f78b 	uxtah	r7, r7, fp
 800a990:	0c1b      	lsrs	r3, r3, #16
 800a992:	eba7 0808 	sub.w	r8, r7, r8
 800a996:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a99a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a99e:	fa1f f888 	uxth.w	r8, r8
 800a9a2:	141f      	asrs	r7, r3, #16
 800a9a4:	454d      	cmp	r5, r9
 800a9a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9aa:	f84a 3b04 	str.w	r3, [sl], #4
 800a9ae:	d8e7      	bhi.n	800a980 <__mdiff+0x7c>
 800a9b0:	1b2b      	subs	r3, r5, r4
 800a9b2:	3b15      	subs	r3, #21
 800a9b4:	f023 0303 	bic.w	r3, r3, #3
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	3415      	adds	r4, #21
 800a9bc:	42a5      	cmp	r5, r4
 800a9be:	bf38      	it	cc
 800a9c0:	2304      	movcc	r3, #4
 800a9c2:	4419      	add	r1, r3
 800a9c4:	4473      	add	r3, lr
 800a9c6:	469e      	mov	lr, r3
 800a9c8:	460d      	mov	r5, r1
 800a9ca:	4565      	cmp	r5, ip
 800a9cc:	d30e      	bcc.n	800a9ec <__mdiff+0xe8>
 800a9ce:	f10c 0203 	add.w	r2, ip, #3
 800a9d2:	1a52      	subs	r2, r2, r1
 800a9d4:	f022 0203 	bic.w	r2, r2, #3
 800a9d8:	3903      	subs	r1, #3
 800a9da:	458c      	cmp	ip, r1
 800a9dc:	bf38      	it	cc
 800a9de:	2200      	movcc	r2, #0
 800a9e0:	441a      	add	r2, r3
 800a9e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a9e6:	b17b      	cbz	r3, 800aa08 <__mdiff+0x104>
 800a9e8:	6106      	str	r6, [r0, #16]
 800a9ea:	e7a5      	b.n	800a938 <__mdiff+0x34>
 800a9ec:	f855 8b04 	ldr.w	r8, [r5], #4
 800a9f0:	fa17 f488 	uxtah	r4, r7, r8
 800a9f4:	1422      	asrs	r2, r4, #16
 800a9f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a9fa:	b2a4      	uxth	r4, r4
 800a9fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aa00:	f84e 4b04 	str.w	r4, [lr], #4
 800aa04:	1417      	asrs	r7, r2, #16
 800aa06:	e7e0      	b.n	800a9ca <__mdiff+0xc6>
 800aa08:	3e01      	subs	r6, #1
 800aa0a:	e7ea      	b.n	800a9e2 <__mdiff+0xde>
 800aa0c:	0800c3df 	.word	0x0800c3df
 800aa10:	0800c3f0 	.word	0x0800c3f0

0800aa14 <__d2b>:
 800aa14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa18:	4689      	mov	r9, r1
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	ec57 6b10 	vmov	r6, r7, d0
 800aa20:	4690      	mov	r8, r2
 800aa22:	f7ff fcd5 	bl	800a3d0 <_Balloc>
 800aa26:	4604      	mov	r4, r0
 800aa28:	b930      	cbnz	r0, 800aa38 <__d2b+0x24>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	4b25      	ldr	r3, [pc, #148]	; (800aac4 <__d2b+0xb0>)
 800aa2e:	4826      	ldr	r0, [pc, #152]	; (800aac8 <__d2b+0xb4>)
 800aa30:	f240 310a 	movw	r1, #778	; 0x30a
 800aa34:	f000 fa70 	bl	800af18 <__assert_func>
 800aa38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa40:	bb35      	cbnz	r5, 800aa90 <__d2b+0x7c>
 800aa42:	2e00      	cmp	r6, #0
 800aa44:	9301      	str	r3, [sp, #4]
 800aa46:	d028      	beq.n	800aa9a <__d2b+0x86>
 800aa48:	4668      	mov	r0, sp
 800aa4a:	9600      	str	r6, [sp, #0]
 800aa4c:	f7ff fd8c 	bl	800a568 <__lo0bits>
 800aa50:	9900      	ldr	r1, [sp, #0]
 800aa52:	b300      	cbz	r0, 800aa96 <__d2b+0x82>
 800aa54:	9a01      	ldr	r2, [sp, #4]
 800aa56:	f1c0 0320 	rsb	r3, r0, #32
 800aa5a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5e:	430b      	orrs	r3, r1
 800aa60:	40c2      	lsrs	r2, r0
 800aa62:	6163      	str	r3, [r4, #20]
 800aa64:	9201      	str	r2, [sp, #4]
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	61a3      	str	r3, [r4, #24]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	bf14      	ite	ne
 800aa6e:	2202      	movne	r2, #2
 800aa70:	2201      	moveq	r2, #1
 800aa72:	6122      	str	r2, [r4, #16]
 800aa74:	b1d5      	cbz	r5, 800aaac <__d2b+0x98>
 800aa76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa7a:	4405      	add	r5, r0
 800aa7c:	f8c9 5000 	str.w	r5, [r9]
 800aa80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa84:	f8c8 0000 	str.w	r0, [r8]
 800aa88:	4620      	mov	r0, r4
 800aa8a:	b003      	add	sp, #12
 800aa8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa94:	e7d5      	b.n	800aa42 <__d2b+0x2e>
 800aa96:	6161      	str	r1, [r4, #20]
 800aa98:	e7e5      	b.n	800aa66 <__d2b+0x52>
 800aa9a:	a801      	add	r0, sp, #4
 800aa9c:	f7ff fd64 	bl	800a568 <__lo0bits>
 800aaa0:	9b01      	ldr	r3, [sp, #4]
 800aaa2:	6163      	str	r3, [r4, #20]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	6122      	str	r2, [r4, #16]
 800aaa8:	3020      	adds	r0, #32
 800aaaa:	e7e3      	b.n	800aa74 <__d2b+0x60>
 800aaac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aab0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aab4:	f8c9 0000 	str.w	r0, [r9]
 800aab8:	6918      	ldr	r0, [r3, #16]
 800aaba:	f7ff fd35 	bl	800a528 <__hi0bits>
 800aabe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aac2:	e7df      	b.n	800aa84 <__d2b+0x70>
 800aac4:	0800c3df 	.word	0x0800c3df
 800aac8:	0800c3f0 	.word	0x0800c3f0

0800aacc <_calloc_r>:
 800aacc:	b513      	push	{r0, r1, r4, lr}
 800aace:	434a      	muls	r2, r1
 800aad0:	4611      	mov	r1, r2
 800aad2:	9201      	str	r2, [sp, #4]
 800aad4:	f000 f85a 	bl	800ab8c <_malloc_r>
 800aad8:	4604      	mov	r4, r0
 800aada:	b118      	cbz	r0, 800aae4 <_calloc_r+0x18>
 800aadc:	9a01      	ldr	r2, [sp, #4]
 800aade:	2100      	movs	r1, #0
 800aae0:	f7fd ffd4 	bl	8008a8c <memset>
 800aae4:	4620      	mov	r0, r4
 800aae6:	b002      	add	sp, #8
 800aae8:	bd10      	pop	{r4, pc}
	...

0800aaec <_free_r>:
 800aaec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaee:	2900      	cmp	r1, #0
 800aaf0:	d048      	beq.n	800ab84 <_free_r+0x98>
 800aaf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf6:	9001      	str	r0, [sp, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f1a1 0404 	sub.w	r4, r1, #4
 800aafe:	bfb8      	it	lt
 800ab00:	18e4      	addlt	r4, r4, r3
 800ab02:	f000 fa65 	bl	800afd0 <__malloc_lock>
 800ab06:	4a20      	ldr	r2, [pc, #128]	; (800ab88 <_free_r+0x9c>)
 800ab08:	9801      	ldr	r0, [sp, #4]
 800ab0a:	6813      	ldr	r3, [r2, #0]
 800ab0c:	4615      	mov	r5, r2
 800ab0e:	b933      	cbnz	r3, 800ab1e <_free_r+0x32>
 800ab10:	6063      	str	r3, [r4, #4]
 800ab12:	6014      	str	r4, [r2, #0]
 800ab14:	b003      	add	sp, #12
 800ab16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab1a:	f000 ba5f 	b.w	800afdc <__malloc_unlock>
 800ab1e:	42a3      	cmp	r3, r4
 800ab20:	d90b      	bls.n	800ab3a <_free_r+0x4e>
 800ab22:	6821      	ldr	r1, [r4, #0]
 800ab24:	1862      	adds	r2, r4, r1
 800ab26:	4293      	cmp	r3, r2
 800ab28:	bf04      	itt	eq
 800ab2a:	681a      	ldreq	r2, [r3, #0]
 800ab2c:	685b      	ldreq	r3, [r3, #4]
 800ab2e:	6063      	str	r3, [r4, #4]
 800ab30:	bf04      	itt	eq
 800ab32:	1852      	addeq	r2, r2, r1
 800ab34:	6022      	streq	r2, [r4, #0]
 800ab36:	602c      	str	r4, [r5, #0]
 800ab38:	e7ec      	b.n	800ab14 <_free_r+0x28>
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	b10b      	cbz	r3, 800ab44 <_free_r+0x58>
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	d9fa      	bls.n	800ab3a <_free_r+0x4e>
 800ab44:	6811      	ldr	r1, [r2, #0]
 800ab46:	1855      	adds	r5, r2, r1
 800ab48:	42a5      	cmp	r5, r4
 800ab4a:	d10b      	bne.n	800ab64 <_free_r+0x78>
 800ab4c:	6824      	ldr	r4, [r4, #0]
 800ab4e:	4421      	add	r1, r4
 800ab50:	1854      	adds	r4, r2, r1
 800ab52:	42a3      	cmp	r3, r4
 800ab54:	6011      	str	r1, [r2, #0]
 800ab56:	d1dd      	bne.n	800ab14 <_free_r+0x28>
 800ab58:	681c      	ldr	r4, [r3, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	6053      	str	r3, [r2, #4]
 800ab5e:	4421      	add	r1, r4
 800ab60:	6011      	str	r1, [r2, #0]
 800ab62:	e7d7      	b.n	800ab14 <_free_r+0x28>
 800ab64:	d902      	bls.n	800ab6c <_free_r+0x80>
 800ab66:	230c      	movs	r3, #12
 800ab68:	6003      	str	r3, [r0, #0]
 800ab6a:	e7d3      	b.n	800ab14 <_free_r+0x28>
 800ab6c:	6825      	ldr	r5, [r4, #0]
 800ab6e:	1961      	adds	r1, r4, r5
 800ab70:	428b      	cmp	r3, r1
 800ab72:	bf04      	itt	eq
 800ab74:	6819      	ldreq	r1, [r3, #0]
 800ab76:	685b      	ldreq	r3, [r3, #4]
 800ab78:	6063      	str	r3, [r4, #4]
 800ab7a:	bf04      	itt	eq
 800ab7c:	1949      	addeq	r1, r1, r5
 800ab7e:	6021      	streq	r1, [r4, #0]
 800ab80:	6054      	str	r4, [r2, #4]
 800ab82:	e7c7      	b.n	800ab14 <_free_r+0x28>
 800ab84:	b003      	add	sp, #12
 800ab86:	bd30      	pop	{r4, r5, pc}
 800ab88:	20000594 	.word	0x20000594

0800ab8c <_malloc_r>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	1ccd      	adds	r5, r1, #3
 800ab90:	f025 0503 	bic.w	r5, r5, #3
 800ab94:	3508      	adds	r5, #8
 800ab96:	2d0c      	cmp	r5, #12
 800ab98:	bf38      	it	cc
 800ab9a:	250c      	movcc	r5, #12
 800ab9c:	2d00      	cmp	r5, #0
 800ab9e:	4606      	mov	r6, r0
 800aba0:	db01      	blt.n	800aba6 <_malloc_r+0x1a>
 800aba2:	42a9      	cmp	r1, r5
 800aba4:	d903      	bls.n	800abae <_malloc_r+0x22>
 800aba6:	230c      	movs	r3, #12
 800aba8:	6033      	str	r3, [r6, #0]
 800abaa:	2000      	movs	r0, #0
 800abac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abae:	f000 fa0f 	bl	800afd0 <__malloc_lock>
 800abb2:	4921      	ldr	r1, [pc, #132]	; (800ac38 <_malloc_r+0xac>)
 800abb4:	680a      	ldr	r2, [r1, #0]
 800abb6:	4614      	mov	r4, r2
 800abb8:	b99c      	cbnz	r4, 800abe2 <_malloc_r+0x56>
 800abba:	4f20      	ldr	r7, [pc, #128]	; (800ac3c <_malloc_r+0xb0>)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	b923      	cbnz	r3, 800abca <_malloc_r+0x3e>
 800abc0:	4621      	mov	r1, r4
 800abc2:	4630      	mov	r0, r6
 800abc4:	f000 f998 	bl	800aef8 <_sbrk_r>
 800abc8:	6038      	str	r0, [r7, #0]
 800abca:	4629      	mov	r1, r5
 800abcc:	4630      	mov	r0, r6
 800abce:	f000 f993 	bl	800aef8 <_sbrk_r>
 800abd2:	1c43      	adds	r3, r0, #1
 800abd4:	d123      	bne.n	800ac1e <_malloc_r+0x92>
 800abd6:	230c      	movs	r3, #12
 800abd8:	6033      	str	r3, [r6, #0]
 800abda:	4630      	mov	r0, r6
 800abdc:	f000 f9fe 	bl	800afdc <__malloc_unlock>
 800abe0:	e7e3      	b.n	800abaa <_malloc_r+0x1e>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	1b5b      	subs	r3, r3, r5
 800abe6:	d417      	bmi.n	800ac18 <_malloc_r+0x8c>
 800abe8:	2b0b      	cmp	r3, #11
 800abea:	d903      	bls.n	800abf4 <_malloc_r+0x68>
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	441c      	add	r4, r3
 800abf0:	6025      	str	r5, [r4, #0]
 800abf2:	e004      	b.n	800abfe <_malloc_r+0x72>
 800abf4:	6863      	ldr	r3, [r4, #4]
 800abf6:	42a2      	cmp	r2, r4
 800abf8:	bf0c      	ite	eq
 800abfa:	600b      	streq	r3, [r1, #0]
 800abfc:	6053      	strne	r3, [r2, #4]
 800abfe:	4630      	mov	r0, r6
 800ac00:	f000 f9ec 	bl	800afdc <__malloc_unlock>
 800ac04:	f104 000b 	add.w	r0, r4, #11
 800ac08:	1d23      	adds	r3, r4, #4
 800ac0a:	f020 0007 	bic.w	r0, r0, #7
 800ac0e:	1ac2      	subs	r2, r0, r3
 800ac10:	d0cc      	beq.n	800abac <_malloc_r+0x20>
 800ac12:	1a1b      	subs	r3, r3, r0
 800ac14:	50a3      	str	r3, [r4, r2]
 800ac16:	e7c9      	b.n	800abac <_malloc_r+0x20>
 800ac18:	4622      	mov	r2, r4
 800ac1a:	6864      	ldr	r4, [r4, #4]
 800ac1c:	e7cc      	b.n	800abb8 <_malloc_r+0x2c>
 800ac1e:	1cc4      	adds	r4, r0, #3
 800ac20:	f024 0403 	bic.w	r4, r4, #3
 800ac24:	42a0      	cmp	r0, r4
 800ac26:	d0e3      	beq.n	800abf0 <_malloc_r+0x64>
 800ac28:	1a21      	subs	r1, r4, r0
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f000 f964 	bl	800aef8 <_sbrk_r>
 800ac30:	3001      	adds	r0, #1
 800ac32:	d1dd      	bne.n	800abf0 <_malloc_r+0x64>
 800ac34:	e7cf      	b.n	800abd6 <_malloc_r+0x4a>
 800ac36:	bf00      	nop
 800ac38:	20000594 	.word	0x20000594
 800ac3c:	20000598 	.word	0x20000598

0800ac40 <__ssputs_r>:
 800ac40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac44:	688e      	ldr	r6, [r1, #8]
 800ac46:	429e      	cmp	r6, r3
 800ac48:	4682      	mov	sl, r0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	4690      	mov	r8, r2
 800ac4e:	461f      	mov	r7, r3
 800ac50:	d838      	bhi.n	800acc4 <__ssputs_r+0x84>
 800ac52:	898a      	ldrh	r2, [r1, #12]
 800ac54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac58:	d032      	beq.n	800acc0 <__ssputs_r+0x80>
 800ac5a:	6825      	ldr	r5, [r4, #0]
 800ac5c:	6909      	ldr	r1, [r1, #16]
 800ac5e:	eba5 0901 	sub.w	r9, r5, r1
 800ac62:	6965      	ldr	r5, [r4, #20]
 800ac64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	444b      	add	r3, r9
 800ac70:	106d      	asrs	r5, r5, #1
 800ac72:	429d      	cmp	r5, r3
 800ac74:	bf38      	it	cc
 800ac76:	461d      	movcc	r5, r3
 800ac78:	0553      	lsls	r3, r2, #21
 800ac7a:	d531      	bpl.n	800ace0 <__ssputs_r+0xa0>
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	f7ff ff85 	bl	800ab8c <_malloc_r>
 800ac82:	4606      	mov	r6, r0
 800ac84:	b950      	cbnz	r0, 800ac9c <__ssputs_r+0x5c>
 800ac86:	230c      	movs	r3, #12
 800ac88:	f8ca 3000 	str.w	r3, [sl]
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac92:	81a3      	strh	r3, [r4, #12]
 800ac94:	f04f 30ff 	mov.w	r0, #4294967295
 800ac98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9c:	6921      	ldr	r1, [r4, #16]
 800ac9e:	464a      	mov	r2, r9
 800aca0:	f7fd fee6 	bl	8008a70 <memcpy>
 800aca4:	89a3      	ldrh	r3, [r4, #12]
 800aca6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acae:	81a3      	strh	r3, [r4, #12]
 800acb0:	6126      	str	r6, [r4, #16]
 800acb2:	6165      	str	r5, [r4, #20]
 800acb4:	444e      	add	r6, r9
 800acb6:	eba5 0509 	sub.w	r5, r5, r9
 800acba:	6026      	str	r6, [r4, #0]
 800acbc:	60a5      	str	r5, [r4, #8]
 800acbe:	463e      	mov	r6, r7
 800acc0:	42be      	cmp	r6, r7
 800acc2:	d900      	bls.n	800acc6 <__ssputs_r+0x86>
 800acc4:	463e      	mov	r6, r7
 800acc6:	4632      	mov	r2, r6
 800acc8:	6820      	ldr	r0, [r4, #0]
 800acca:	4641      	mov	r1, r8
 800accc:	f000 f966 	bl	800af9c <memmove>
 800acd0:	68a3      	ldr	r3, [r4, #8]
 800acd2:	6822      	ldr	r2, [r4, #0]
 800acd4:	1b9b      	subs	r3, r3, r6
 800acd6:	4432      	add	r2, r6
 800acd8:	60a3      	str	r3, [r4, #8]
 800acda:	6022      	str	r2, [r4, #0]
 800acdc:	2000      	movs	r0, #0
 800acde:	e7db      	b.n	800ac98 <__ssputs_r+0x58>
 800ace0:	462a      	mov	r2, r5
 800ace2:	f000 f981 	bl	800afe8 <_realloc_r>
 800ace6:	4606      	mov	r6, r0
 800ace8:	2800      	cmp	r0, #0
 800acea:	d1e1      	bne.n	800acb0 <__ssputs_r+0x70>
 800acec:	6921      	ldr	r1, [r4, #16]
 800acee:	4650      	mov	r0, sl
 800acf0:	f7ff fefc 	bl	800aaec <_free_r>
 800acf4:	e7c7      	b.n	800ac86 <__ssputs_r+0x46>
	...

0800acf8 <_svfiprintf_r>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	4698      	mov	r8, r3
 800acfe:	898b      	ldrh	r3, [r1, #12]
 800ad00:	061b      	lsls	r3, r3, #24
 800ad02:	b09d      	sub	sp, #116	; 0x74
 800ad04:	4607      	mov	r7, r0
 800ad06:	460d      	mov	r5, r1
 800ad08:	4614      	mov	r4, r2
 800ad0a:	d50e      	bpl.n	800ad2a <_svfiprintf_r+0x32>
 800ad0c:	690b      	ldr	r3, [r1, #16]
 800ad0e:	b963      	cbnz	r3, 800ad2a <_svfiprintf_r+0x32>
 800ad10:	2140      	movs	r1, #64	; 0x40
 800ad12:	f7ff ff3b 	bl	800ab8c <_malloc_r>
 800ad16:	6028      	str	r0, [r5, #0]
 800ad18:	6128      	str	r0, [r5, #16]
 800ad1a:	b920      	cbnz	r0, 800ad26 <_svfiprintf_r+0x2e>
 800ad1c:	230c      	movs	r3, #12
 800ad1e:	603b      	str	r3, [r7, #0]
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	e0d1      	b.n	800aeca <_svfiprintf_r+0x1d2>
 800ad26:	2340      	movs	r3, #64	; 0x40
 800ad28:	616b      	str	r3, [r5, #20]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad2e:	2320      	movs	r3, #32
 800ad30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad38:	2330      	movs	r3, #48	; 0x30
 800ad3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aee4 <_svfiprintf_r+0x1ec>
 800ad3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad42:	f04f 0901 	mov.w	r9, #1
 800ad46:	4623      	mov	r3, r4
 800ad48:	469a      	mov	sl, r3
 800ad4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad4e:	b10a      	cbz	r2, 800ad54 <_svfiprintf_r+0x5c>
 800ad50:	2a25      	cmp	r2, #37	; 0x25
 800ad52:	d1f9      	bne.n	800ad48 <_svfiprintf_r+0x50>
 800ad54:	ebba 0b04 	subs.w	fp, sl, r4
 800ad58:	d00b      	beq.n	800ad72 <_svfiprintf_r+0x7a>
 800ad5a:	465b      	mov	r3, fp
 800ad5c:	4622      	mov	r2, r4
 800ad5e:	4629      	mov	r1, r5
 800ad60:	4638      	mov	r0, r7
 800ad62:	f7ff ff6d 	bl	800ac40 <__ssputs_r>
 800ad66:	3001      	adds	r0, #1
 800ad68:	f000 80aa 	beq.w	800aec0 <_svfiprintf_r+0x1c8>
 800ad6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad6e:	445a      	add	r2, fp
 800ad70:	9209      	str	r2, [sp, #36]	; 0x24
 800ad72:	f89a 3000 	ldrb.w	r3, [sl]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 80a2 	beq.w	800aec0 <_svfiprintf_r+0x1c8>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad86:	f10a 0a01 	add.w	sl, sl, #1
 800ad8a:	9304      	str	r3, [sp, #16]
 800ad8c:	9307      	str	r3, [sp, #28]
 800ad8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad92:	931a      	str	r3, [sp, #104]	; 0x68
 800ad94:	4654      	mov	r4, sl
 800ad96:	2205      	movs	r2, #5
 800ad98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad9c:	4851      	ldr	r0, [pc, #324]	; (800aee4 <_svfiprintf_r+0x1ec>)
 800ad9e:	f7f5 fa27 	bl	80001f0 <memchr>
 800ada2:	9a04      	ldr	r2, [sp, #16]
 800ada4:	b9d8      	cbnz	r0, 800adde <_svfiprintf_r+0xe6>
 800ada6:	06d0      	lsls	r0, r2, #27
 800ada8:	bf44      	itt	mi
 800adaa:	2320      	movmi	r3, #32
 800adac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adb0:	0711      	lsls	r1, r2, #28
 800adb2:	bf44      	itt	mi
 800adb4:	232b      	movmi	r3, #43	; 0x2b
 800adb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adba:	f89a 3000 	ldrb.w	r3, [sl]
 800adbe:	2b2a      	cmp	r3, #42	; 0x2a
 800adc0:	d015      	beq.n	800adee <_svfiprintf_r+0xf6>
 800adc2:	9a07      	ldr	r2, [sp, #28]
 800adc4:	4654      	mov	r4, sl
 800adc6:	2000      	movs	r0, #0
 800adc8:	f04f 0c0a 	mov.w	ip, #10
 800adcc:	4621      	mov	r1, r4
 800adce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800add2:	3b30      	subs	r3, #48	; 0x30
 800add4:	2b09      	cmp	r3, #9
 800add6:	d94e      	bls.n	800ae76 <_svfiprintf_r+0x17e>
 800add8:	b1b0      	cbz	r0, 800ae08 <_svfiprintf_r+0x110>
 800adda:	9207      	str	r2, [sp, #28]
 800addc:	e014      	b.n	800ae08 <_svfiprintf_r+0x110>
 800adde:	eba0 0308 	sub.w	r3, r0, r8
 800ade2:	fa09 f303 	lsl.w	r3, r9, r3
 800ade6:	4313      	orrs	r3, r2
 800ade8:	9304      	str	r3, [sp, #16]
 800adea:	46a2      	mov	sl, r4
 800adec:	e7d2      	b.n	800ad94 <_svfiprintf_r+0x9c>
 800adee:	9b03      	ldr	r3, [sp, #12]
 800adf0:	1d19      	adds	r1, r3, #4
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	9103      	str	r1, [sp, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bfbb      	ittet	lt
 800adfa:	425b      	neglt	r3, r3
 800adfc:	f042 0202 	orrlt.w	r2, r2, #2
 800ae00:	9307      	strge	r3, [sp, #28]
 800ae02:	9307      	strlt	r3, [sp, #28]
 800ae04:	bfb8      	it	lt
 800ae06:	9204      	strlt	r2, [sp, #16]
 800ae08:	7823      	ldrb	r3, [r4, #0]
 800ae0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae0c:	d10c      	bne.n	800ae28 <_svfiprintf_r+0x130>
 800ae0e:	7863      	ldrb	r3, [r4, #1]
 800ae10:	2b2a      	cmp	r3, #42	; 0x2a
 800ae12:	d135      	bne.n	800ae80 <_svfiprintf_r+0x188>
 800ae14:	9b03      	ldr	r3, [sp, #12]
 800ae16:	1d1a      	adds	r2, r3, #4
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	9203      	str	r2, [sp, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	bfb8      	it	lt
 800ae20:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae24:	3402      	adds	r4, #2
 800ae26:	9305      	str	r3, [sp, #20]
 800ae28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aef4 <_svfiprintf_r+0x1fc>
 800ae2c:	7821      	ldrb	r1, [r4, #0]
 800ae2e:	2203      	movs	r2, #3
 800ae30:	4650      	mov	r0, sl
 800ae32:	f7f5 f9dd 	bl	80001f0 <memchr>
 800ae36:	b140      	cbz	r0, 800ae4a <_svfiprintf_r+0x152>
 800ae38:	2340      	movs	r3, #64	; 0x40
 800ae3a:	eba0 000a 	sub.w	r0, r0, sl
 800ae3e:	fa03 f000 	lsl.w	r0, r3, r0
 800ae42:	9b04      	ldr	r3, [sp, #16]
 800ae44:	4303      	orrs	r3, r0
 800ae46:	3401      	adds	r4, #1
 800ae48:	9304      	str	r3, [sp, #16]
 800ae4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4e:	4826      	ldr	r0, [pc, #152]	; (800aee8 <_svfiprintf_r+0x1f0>)
 800ae50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae54:	2206      	movs	r2, #6
 800ae56:	f7f5 f9cb 	bl	80001f0 <memchr>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d038      	beq.n	800aed0 <_svfiprintf_r+0x1d8>
 800ae5e:	4b23      	ldr	r3, [pc, #140]	; (800aeec <_svfiprintf_r+0x1f4>)
 800ae60:	bb1b      	cbnz	r3, 800aeaa <_svfiprintf_r+0x1b2>
 800ae62:	9b03      	ldr	r3, [sp, #12]
 800ae64:	3307      	adds	r3, #7
 800ae66:	f023 0307 	bic.w	r3, r3, #7
 800ae6a:	3308      	adds	r3, #8
 800ae6c:	9303      	str	r3, [sp, #12]
 800ae6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae70:	4433      	add	r3, r6
 800ae72:	9309      	str	r3, [sp, #36]	; 0x24
 800ae74:	e767      	b.n	800ad46 <_svfiprintf_r+0x4e>
 800ae76:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	2001      	movs	r0, #1
 800ae7e:	e7a5      	b.n	800adcc <_svfiprintf_r+0xd4>
 800ae80:	2300      	movs	r3, #0
 800ae82:	3401      	adds	r4, #1
 800ae84:	9305      	str	r3, [sp, #20]
 800ae86:	4619      	mov	r1, r3
 800ae88:	f04f 0c0a 	mov.w	ip, #10
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae92:	3a30      	subs	r2, #48	; 0x30
 800ae94:	2a09      	cmp	r2, #9
 800ae96:	d903      	bls.n	800aea0 <_svfiprintf_r+0x1a8>
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d0c5      	beq.n	800ae28 <_svfiprintf_r+0x130>
 800ae9c:	9105      	str	r1, [sp, #20]
 800ae9e:	e7c3      	b.n	800ae28 <_svfiprintf_r+0x130>
 800aea0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aea4:	4604      	mov	r4, r0
 800aea6:	2301      	movs	r3, #1
 800aea8:	e7f0      	b.n	800ae8c <_svfiprintf_r+0x194>
 800aeaa:	ab03      	add	r3, sp, #12
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	462a      	mov	r2, r5
 800aeb0:	4b0f      	ldr	r3, [pc, #60]	; (800aef0 <_svfiprintf_r+0x1f8>)
 800aeb2:	a904      	add	r1, sp, #16
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	f7fd fe91 	bl	8008bdc <_printf_float>
 800aeba:	1c42      	adds	r2, r0, #1
 800aebc:	4606      	mov	r6, r0
 800aebe:	d1d6      	bne.n	800ae6e <_svfiprintf_r+0x176>
 800aec0:	89ab      	ldrh	r3, [r5, #12]
 800aec2:	065b      	lsls	r3, r3, #25
 800aec4:	f53f af2c 	bmi.w	800ad20 <_svfiprintf_r+0x28>
 800aec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeca:	b01d      	add	sp, #116	; 0x74
 800aecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed0:	ab03      	add	r3, sp, #12
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	462a      	mov	r2, r5
 800aed6:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <_svfiprintf_r+0x1f8>)
 800aed8:	a904      	add	r1, sp, #16
 800aeda:	4638      	mov	r0, r7
 800aedc:	f7fe f922 	bl	8009124 <_printf_i>
 800aee0:	e7eb      	b.n	800aeba <_svfiprintf_r+0x1c2>
 800aee2:	bf00      	nop
 800aee4:	0800c54c 	.word	0x0800c54c
 800aee8:	0800c556 	.word	0x0800c556
 800aeec:	08008bdd 	.word	0x08008bdd
 800aef0:	0800ac41 	.word	0x0800ac41
 800aef4:	0800c552 	.word	0x0800c552

0800aef8 <_sbrk_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d06      	ldr	r5, [pc, #24]	; (800af14 <_sbrk_r+0x1c>)
 800aefc:	2300      	movs	r3, #0
 800aefe:	4604      	mov	r4, r0
 800af00:	4608      	mov	r0, r1
 800af02:	602b      	str	r3, [r5, #0]
 800af04:	f7f7 fcc2 	bl	800288c <_sbrk>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_sbrk_r+0x1a>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_sbrk_r+0x1a>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	20001ed0 	.word	0x20001ed0

0800af18 <__assert_func>:
 800af18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af1a:	4614      	mov	r4, r2
 800af1c:	461a      	mov	r2, r3
 800af1e:	4b09      	ldr	r3, [pc, #36]	; (800af44 <__assert_func+0x2c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4605      	mov	r5, r0
 800af24:	68d8      	ldr	r0, [r3, #12]
 800af26:	b14c      	cbz	r4, 800af3c <__assert_func+0x24>
 800af28:	4b07      	ldr	r3, [pc, #28]	; (800af48 <__assert_func+0x30>)
 800af2a:	9100      	str	r1, [sp, #0]
 800af2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af30:	4906      	ldr	r1, [pc, #24]	; (800af4c <__assert_func+0x34>)
 800af32:	462b      	mov	r3, r5
 800af34:	f000 f80e 	bl	800af54 <fiprintf>
 800af38:	f000 faa4 	bl	800b484 <abort>
 800af3c:	4b04      	ldr	r3, [pc, #16]	; (800af50 <__assert_func+0x38>)
 800af3e:	461c      	mov	r4, r3
 800af40:	e7f3      	b.n	800af2a <__assert_func+0x12>
 800af42:	bf00      	nop
 800af44:	20000180 	.word	0x20000180
 800af48:	0800c55d 	.word	0x0800c55d
 800af4c:	0800c56a 	.word	0x0800c56a
 800af50:	0800c598 	.word	0x0800c598

0800af54 <fiprintf>:
 800af54:	b40e      	push	{r1, r2, r3}
 800af56:	b503      	push	{r0, r1, lr}
 800af58:	4601      	mov	r1, r0
 800af5a:	ab03      	add	r3, sp, #12
 800af5c:	4805      	ldr	r0, [pc, #20]	; (800af74 <fiprintf+0x20>)
 800af5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af62:	6800      	ldr	r0, [r0, #0]
 800af64:	9301      	str	r3, [sp, #4]
 800af66:	f000 f88f 	bl	800b088 <_vfiprintf_r>
 800af6a:	b002      	add	sp, #8
 800af6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af70:	b003      	add	sp, #12
 800af72:	4770      	bx	lr
 800af74:	20000180 	.word	0x20000180

0800af78 <__ascii_mbtowc>:
 800af78:	b082      	sub	sp, #8
 800af7a:	b901      	cbnz	r1, 800af7e <__ascii_mbtowc+0x6>
 800af7c:	a901      	add	r1, sp, #4
 800af7e:	b142      	cbz	r2, 800af92 <__ascii_mbtowc+0x1a>
 800af80:	b14b      	cbz	r3, 800af96 <__ascii_mbtowc+0x1e>
 800af82:	7813      	ldrb	r3, [r2, #0]
 800af84:	600b      	str	r3, [r1, #0]
 800af86:	7812      	ldrb	r2, [r2, #0]
 800af88:	1e10      	subs	r0, r2, #0
 800af8a:	bf18      	it	ne
 800af8c:	2001      	movne	r0, #1
 800af8e:	b002      	add	sp, #8
 800af90:	4770      	bx	lr
 800af92:	4610      	mov	r0, r2
 800af94:	e7fb      	b.n	800af8e <__ascii_mbtowc+0x16>
 800af96:	f06f 0001 	mvn.w	r0, #1
 800af9a:	e7f8      	b.n	800af8e <__ascii_mbtowc+0x16>

0800af9c <memmove>:
 800af9c:	4288      	cmp	r0, r1
 800af9e:	b510      	push	{r4, lr}
 800afa0:	eb01 0402 	add.w	r4, r1, r2
 800afa4:	d902      	bls.n	800afac <memmove+0x10>
 800afa6:	4284      	cmp	r4, r0
 800afa8:	4623      	mov	r3, r4
 800afaa:	d807      	bhi.n	800afbc <memmove+0x20>
 800afac:	1e43      	subs	r3, r0, #1
 800afae:	42a1      	cmp	r1, r4
 800afb0:	d008      	beq.n	800afc4 <memmove+0x28>
 800afb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afba:	e7f8      	b.n	800afae <memmove+0x12>
 800afbc:	4402      	add	r2, r0
 800afbe:	4601      	mov	r1, r0
 800afc0:	428a      	cmp	r2, r1
 800afc2:	d100      	bne.n	800afc6 <memmove+0x2a>
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afce:	e7f7      	b.n	800afc0 <memmove+0x24>

0800afd0 <__malloc_lock>:
 800afd0:	4801      	ldr	r0, [pc, #4]	; (800afd8 <__malloc_lock+0x8>)
 800afd2:	f000 bc17 	b.w	800b804 <__retarget_lock_acquire_recursive>
 800afd6:	bf00      	nop
 800afd8:	20001ed8 	.word	0x20001ed8

0800afdc <__malloc_unlock>:
 800afdc:	4801      	ldr	r0, [pc, #4]	; (800afe4 <__malloc_unlock+0x8>)
 800afde:	f000 bc12 	b.w	800b806 <__retarget_lock_release_recursive>
 800afe2:	bf00      	nop
 800afe4:	20001ed8 	.word	0x20001ed8

0800afe8 <_realloc_r>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	4607      	mov	r7, r0
 800afec:	4614      	mov	r4, r2
 800afee:	460e      	mov	r6, r1
 800aff0:	b921      	cbnz	r1, 800affc <_realloc_r+0x14>
 800aff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aff6:	4611      	mov	r1, r2
 800aff8:	f7ff bdc8 	b.w	800ab8c <_malloc_r>
 800affc:	b922      	cbnz	r2, 800b008 <_realloc_r+0x20>
 800affe:	f7ff fd75 	bl	800aaec <_free_r>
 800b002:	4625      	mov	r5, r4
 800b004:	4628      	mov	r0, r5
 800b006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b008:	f000 fc62 	bl	800b8d0 <_malloc_usable_size_r>
 800b00c:	42a0      	cmp	r0, r4
 800b00e:	d20f      	bcs.n	800b030 <_realloc_r+0x48>
 800b010:	4621      	mov	r1, r4
 800b012:	4638      	mov	r0, r7
 800b014:	f7ff fdba 	bl	800ab8c <_malloc_r>
 800b018:	4605      	mov	r5, r0
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d0f2      	beq.n	800b004 <_realloc_r+0x1c>
 800b01e:	4631      	mov	r1, r6
 800b020:	4622      	mov	r2, r4
 800b022:	f7fd fd25 	bl	8008a70 <memcpy>
 800b026:	4631      	mov	r1, r6
 800b028:	4638      	mov	r0, r7
 800b02a:	f7ff fd5f 	bl	800aaec <_free_r>
 800b02e:	e7e9      	b.n	800b004 <_realloc_r+0x1c>
 800b030:	4635      	mov	r5, r6
 800b032:	e7e7      	b.n	800b004 <_realloc_r+0x1c>

0800b034 <__sfputc_r>:
 800b034:	6893      	ldr	r3, [r2, #8]
 800b036:	3b01      	subs	r3, #1
 800b038:	2b00      	cmp	r3, #0
 800b03a:	b410      	push	{r4}
 800b03c:	6093      	str	r3, [r2, #8]
 800b03e:	da08      	bge.n	800b052 <__sfputc_r+0x1e>
 800b040:	6994      	ldr	r4, [r2, #24]
 800b042:	42a3      	cmp	r3, r4
 800b044:	db01      	blt.n	800b04a <__sfputc_r+0x16>
 800b046:	290a      	cmp	r1, #10
 800b048:	d103      	bne.n	800b052 <__sfputc_r+0x1e>
 800b04a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b04e:	f000 b94b 	b.w	800b2e8 <__swbuf_r>
 800b052:	6813      	ldr	r3, [r2, #0]
 800b054:	1c58      	adds	r0, r3, #1
 800b056:	6010      	str	r0, [r2, #0]
 800b058:	7019      	strb	r1, [r3, #0]
 800b05a:	4608      	mov	r0, r1
 800b05c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <__sfputs_r>:
 800b062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b064:	4606      	mov	r6, r0
 800b066:	460f      	mov	r7, r1
 800b068:	4614      	mov	r4, r2
 800b06a:	18d5      	adds	r5, r2, r3
 800b06c:	42ac      	cmp	r4, r5
 800b06e:	d101      	bne.n	800b074 <__sfputs_r+0x12>
 800b070:	2000      	movs	r0, #0
 800b072:	e007      	b.n	800b084 <__sfputs_r+0x22>
 800b074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b078:	463a      	mov	r2, r7
 800b07a:	4630      	mov	r0, r6
 800b07c:	f7ff ffda 	bl	800b034 <__sfputc_r>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d1f3      	bne.n	800b06c <__sfputs_r+0xa>
 800b084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b088 <_vfiprintf_r>:
 800b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08c:	460d      	mov	r5, r1
 800b08e:	b09d      	sub	sp, #116	; 0x74
 800b090:	4614      	mov	r4, r2
 800b092:	4698      	mov	r8, r3
 800b094:	4606      	mov	r6, r0
 800b096:	b118      	cbz	r0, 800b0a0 <_vfiprintf_r+0x18>
 800b098:	6983      	ldr	r3, [r0, #24]
 800b09a:	b90b      	cbnz	r3, 800b0a0 <_vfiprintf_r+0x18>
 800b09c:	f000 fb14 	bl	800b6c8 <__sinit>
 800b0a0:	4b89      	ldr	r3, [pc, #548]	; (800b2c8 <_vfiprintf_r+0x240>)
 800b0a2:	429d      	cmp	r5, r3
 800b0a4:	d11b      	bne.n	800b0de <_vfiprintf_r+0x56>
 800b0a6:	6875      	ldr	r5, [r6, #4]
 800b0a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0aa:	07d9      	lsls	r1, r3, #31
 800b0ac:	d405      	bmi.n	800b0ba <_vfiprintf_r+0x32>
 800b0ae:	89ab      	ldrh	r3, [r5, #12]
 800b0b0:	059a      	lsls	r2, r3, #22
 800b0b2:	d402      	bmi.n	800b0ba <_vfiprintf_r+0x32>
 800b0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0b6:	f000 fba5 	bl	800b804 <__retarget_lock_acquire_recursive>
 800b0ba:	89ab      	ldrh	r3, [r5, #12]
 800b0bc:	071b      	lsls	r3, r3, #28
 800b0be:	d501      	bpl.n	800b0c4 <_vfiprintf_r+0x3c>
 800b0c0:	692b      	ldr	r3, [r5, #16]
 800b0c2:	b9eb      	cbnz	r3, 800b100 <_vfiprintf_r+0x78>
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f000 f96e 	bl	800b3a8 <__swsetup_r>
 800b0cc:	b1c0      	cbz	r0, 800b100 <_vfiprintf_r+0x78>
 800b0ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0d0:	07dc      	lsls	r4, r3, #31
 800b0d2:	d50e      	bpl.n	800b0f2 <_vfiprintf_r+0x6a>
 800b0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d8:	b01d      	add	sp, #116	; 0x74
 800b0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0de:	4b7b      	ldr	r3, [pc, #492]	; (800b2cc <_vfiprintf_r+0x244>)
 800b0e0:	429d      	cmp	r5, r3
 800b0e2:	d101      	bne.n	800b0e8 <_vfiprintf_r+0x60>
 800b0e4:	68b5      	ldr	r5, [r6, #8]
 800b0e6:	e7df      	b.n	800b0a8 <_vfiprintf_r+0x20>
 800b0e8:	4b79      	ldr	r3, [pc, #484]	; (800b2d0 <_vfiprintf_r+0x248>)
 800b0ea:	429d      	cmp	r5, r3
 800b0ec:	bf08      	it	eq
 800b0ee:	68f5      	ldreq	r5, [r6, #12]
 800b0f0:	e7da      	b.n	800b0a8 <_vfiprintf_r+0x20>
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	0598      	lsls	r0, r3, #22
 800b0f6:	d4ed      	bmi.n	800b0d4 <_vfiprintf_r+0x4c>
 800b0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0fa:	f000 fb84 	bl	800b806 <__retarget_lock_release_recursive>
 800b0fe:	e7e9      	b.n	800b0d4 <_vfiprintf_r+0x4c>
 800b100:	2300      	movs	r3, #0
 800b102:	9309      	str	r3, [sp, #36]	; 0x24
 800b104:	2320      	movs	r3, #32
 800b106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b10a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b10e:	2330      	movs	r3, #48	; 0x30
 800b110:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2d4 <_vfiprintf_r+0x24c>
 800b114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b118:	f04f 0901 	mov.w	r9, #1
 800b11c:	4623      	mov	r3, r4
 800b11e:	469a      	mov	sl, r3
 800b120:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b124:	b10a      	cbz	r2, 800b12a <_vfiprintf_r+0xa2>
 800b126:	2a25      	cmp	r2, #37	; 0x25
 800b128:	d1f9      	bne.n	800b11e <_vfiprintf_r+0x96>
 800b12a:	ebba 0b04 	subs.w	fp, sl, r4
 800b12e:	d00b      	beq.n	800b148 <_vfiprintf_r+0xc0>
 800b130:	465b      	mov	r3, fp
 800b132:	4622      	mov	r2, r4
 800b134:	4629      	mov	r1, r5
 800b136:	4630      	mov	r0, r6
 800b138:	f7ff ff93 	bl	800b062 <__sfputs_r>
 800b13c:	3001      	adds	r0, #1
 800b13e:	f000 80aa 	beq.w	800b296 <_vfiprintf_r+0x20e>
 800b142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b144:	445a      	add	r2, fp
 800b146:	9209      	str	r2, [sp, #36]	; 0x24
 800b148:	f89a 3000 	ldrb.w	r3, [sl]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 80a2 	beq.w	800b296 <_vfiprintf_r+0x20e>
 800b152:	2300      	movs	r3, #0
 800b154:	f04f 32ff 	mov.w	r2, #4294967295
 800b158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b15c:	f10a 0a01 	add.w	sl, sl, #1
 800b160:	9304      	str	r3, [sp, #16]
 800b162:	9307      	str	r3, [sp, #28]
 800b164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b168:	931a      	str	r3, [sp, #104]	; 0x68
 800b16a:	4654      	mov	r4, sl
 800b16c:	2205      	movs	r2, #5
 800b16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b172:	4858      	ldr	r0, [pc, #352]	; (800b2d4 <_vfiprintf_r+0x24c>)
 800b174:	f7f5 f83c 	bl	80001f0 <memchr>
 800b178:	9a04      	ldr	r2, [sp, #16]
 800b17a:	b9d8      	cbnz	r0, 800b1b4 <_vfiprintf_r+0x12c>
 800b17c:	06d1      	lsls	r1, r2, #27
 800b17e:	bf44      	itt	mi
 800b180:	2320      	movmi	r3, #32
 800b182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b186:	0713      	lsls	r3, r2, #28
 800b188:	bf44      	itt	mi
 800b18a:	232b      	movmi	r3, #43	; 0x2b
 800b18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b190:	f89a 3000 	ldrb.w	r3, [sl]
 800b194:	2b2a      	cmp	r3, #42	; 0x2a
 800b196:	d015      	beq.n	800b1c4 <_vfiprintf_r+0x13c>
 800b198:	9a07      	ldr	r2, [sp, #28]
 800b19a:	4654      	mov	r4, sl
 800b19c:	2000      	movs	r0, #0
 800b19e:	f04f 0c0a 	mov.w	ip, #10
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1a8:	3b30      	subs	r3, #48	; 0x30
 800b1aa:	2b09      	cmp	r3, #9
 800b1ac:	d94e      	bls.n	800b24c <_vfiprintf_r+0x1c4>
 800b1ae:	b1b0      	cbz	r0, 800b1de <_vfiprintf_r+0x156>
 800b1b0:	9207      	str	r2, [sp, #28]
 800b1b2:	e014      	b.n	800b1de <_vfiprintf_r+0x156>
 800b1b4:	eba0 0308 	sub.w	r3, r0, r8
 800b1b8:	fa09 f303 	lsl.w	r3, r9, r3
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	9304      	str	r3, [sp, #16]
 800b1c0:	46a2      	mov	sl, r4
 800b1c2:	e7d2      	b.n	800b16a <_vfiprintf_r+0xe2>
 800b1c4:	9b03      	ldr	r3, [sp, #12]
 800b1c6:	1d19      	adds	r1, r3, #4
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	9103      	str	r1, [sp, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	bfbb      	ittet	lt
 800b1d0:	425b      	neglt	r3, r3
 800b1d2:	f042 0202 	orrlt.w	r2, r2, #2
 800b1d6:	9307      	strge	r3, [sp, #28]
 800b1d8:	9307      	strlt	r3, [sp, #28]
 800b1da:	bfb8      	it	lt
 800b1dc:	9204      	strlt	r2, [sp, #16]
 800b1de:	7823      	ldrb	r3, [r4, #0]
 800b1e0:	2b2e      	cmp	r3, #46	; 0x2e
 800b1e2:	d10c      	bne.n	800b1fe <_vfiprintf_r+0x176>
 800b1e4:	7863      	ldrb	r3, [r4, #1]
 800b1e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b1e8:	d135      	bne.n	800b256 <_vfiprintf_r+0x1ce>
 800b1ea:	9b03      	ldr	r3, [sp, #12]
 800b1ec:	1d1a      	adds	r2, r3, #4
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	9203      	str	r2, [sp, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	bfb8      	it	lt
 800b1f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1fa:	3402      	adds	r4, #2
 800b1fc:	9305      	str	r3, [sp, #20]
 800b1fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2e4 <_vfiprintf_r+0x25c>
 800b202:	7821      	ldrb	r1, [r4, #0]
 800b204:	2203      	movs	r2, #3
 800b206:	4650      	mov	r0, sl
 800b208:	f7f4 fff2 	bl	80001f0 <memchr>
 800b20c:	b140      	cbz	r0, 800b220 <_vfiprintf_r+0x198>
 800b20e:	2340      	movs	r3, #64	; 0x40
 800b210:	eba0 000a 	sub.w	r0, r0, sl
 800b214:	fa03 f000 	lsl.w	r0, r3, r0
 800b218:	9b04      	ldr	r3, [sp, #16]
 800b21a:	4303      	orrs	r3, r0
 800b21c:	3401      	adds	r4, #1
 800b21e:	9304      	str	r3, [sp, #16]
 800b220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b224:	482c      	ldr	r0, [pc, #176]	; (800b2d8 <_vfiprintf_r+0x250>)
 800b226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b22a:	2206      	movs	r2, #6
 800b22c:	f7f4 ffe0 	bl	80001f0 <memchr>
 800b230:	2800      	cmp	r0, #0
 800b232:	d03f      	beq.n	800b2b4 <_vfiprintf_r+0x22c>
 800b234:	4b29      	ldr	r3, [pc, #164]	; (800b2dc <_vfiprintf_r+0x254>)
 800b236:	bb1b      	cbnz	r3, 800b280 <_vfiprintf_r+0x1f8>
 800b238:	9b03      	ldr	r3, [sp, #12]
 800b23a:	3307      	adds	r3, #7
 800b23c:	f023 0307 	bic.w	r3, r3, #7
 800b240:	3308      	adds	r3, #8
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b246:	443b      	add	r3, r7
 800b248:	9309      	str	r3, [sp, #36]	; 0x24
 800b24a:	e767      	b.n	800b11c <_vfiprintf_r+0x94>
 800b24c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b250:	460c      	mov	r4, r1
 800b252:	2001      	movs	r0, #1
 800b254:	e7a5      	b.n	800b1a2 <_vfiprintf_r+0x11a>
 800b256:	2300      	movs	r3, #0
 800b258:	3401      	adds	r4, #1
 800b25a:	9305      	str	r3, [sp, #20]
 800b25c:	4619      	mov	r1, r3
 800b25e:	f04f 0c0a 	mov.w	ip, #10
 800b262:	4620      	mov	r0, r4
 800b264:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b268:	3a30      	subs	r2, #48	; 0x30
 800b26a:	2a09      	cmp	r2, #9
 800b26c:	d903      	bls.n	800b276 <_vfiprintf_r+0x1ee>
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d0c5      	beq.n	800b1fe <_vfiprintf_r+0x176>
 800b272:	9105      	str	r1, [sp, #20]
 800b274:	e7c3      	b.n	800b1fe <_vfiprintf_r+0x176>
 800b276:	fb0c 2101 	mla	r1, ip, r1, r2
 800b27a:	4604      	mov	r4, r0
 800b27c:	2301      	movs	r3, #1
 800b27e:	e7f0      	b.n	800b262 <_vfiprintf_r+0x1da>
 800b280:	ab03      	add	r3, sp, #12
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	462a      	mov	r2, r5
 800b286:	4b16      	ldr	r3, [pc, #88]	; (800b2e0 <_vfiprintf_r+0x258>)
 800b288:	a904      	add	r1, sp, #16
 800b28a:	4630      	mov	r0, r6
 800b28c:	f7fd fca6 	bl	8008bdc <_printf_float>
 800b290:	4607      	mov	r7, r0
 800b292:	1c78      	adds	r0, r7, #1
 800b294:	d1d6      	bne.n	800b244 <_vfiprintf_r+0x1bc>
 800b296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b298:	07d9      	lsls	r1, r3, #31
 800b29a:	d405      	bmi.n	800b2a8 <_vfiprintf_r+0x220>
 800b29c:	89ab      	ldrh	r3, [r5, #12]
 800b29e:	059a      	lsls	r2, r3, #22
 800b2a0:	d402      	bmi.n	800b2a8 <_vfiprintf_r+0x220>
 800b2a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2a4:	f000 faaf 	bl	800b806 <__retarget_lock_release_recursive>
 800b2a8:	89ab      	ldrh	r3, [r5, #12]
 800b2aa:	065b      	lsls	r3, r3, #25
 800b2ac:	f53f af12 	bmi.w	800b0d4 <_vfiprintf_r+0x4c>
 800b2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2b2:	e711      	b.n	800b0d8 <_vfiprintf_r+0x50>
 800b2b4:	ab03      	add	r3, sp, #12
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	462a      	mov	r2, r5
 800b2ba:	4b09      	ldr	r3, [pc, #36]	; (800b2e0 <_vfiprintf_r+0x258>)
 800b2bc:	a904      	add	r1, sp, #16
 800b2be:	4630      	mov	r0, r6
 800b2c0:	f7fd ff30 	bl	8009124 <_printf_i>
 800b2c4:	e7e4      	b.n	800b290 <_vfiprintf_r+0x208>
 800b2c6:	bf00      	nop
 800b2c8:	0800c6c4 	.word	0x0800c6c4
 800b2cc:	0800c6e4 	.word	0x0800c6e4
 800b2d0:	0800c6a4 	.word	0x0800c6a4
 800b2d4:	0800c54c 	.word	0x0800c54c
 800b2d8:	0800c556 	.word	0x0800c556
 800b2dc:	08008bdd 	.word	0x08008bdd
 800b2e0:	0800b063 	.word	0x0800b063
 800b2e4:	0800c552 	.word	0x0800c552

0800b2e8 <__swbuf_r>:
 800b2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ea:	460e      	mov	r6, r1
 800b2ec:	4614      	mov	r4, r2
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	b118      	cbz	r0, 800b2fa <__swbuf_r+0x12>
 800b2f2:	6983      	ldr	r3, [r0, #24]
 800b2f4:	b90b      	cbnz	r3, 800b2fa <__swbuf_r+0x12>
 800b2f6:	f000 f9e7 	bl	800b6c8 <__sinit>
 800b2fa:	4b21      	ldr	r3, [pc, #132]	; (800b380 <__swbuf_r+0x98>)
 800b2fc:	429c      	cmp	r4, r3
 800b2fe:	d12b      	bne.n	800b358 <__swbuf_r+0x70>
 800b300:	686c      	ldr	r4, [r5, #4]
 800b302:	69a3      	ldr	r3, [r4, #24]
 800b304:	60a3      	str	r3, [r4, #8]
 800b306:	89a3      	ldrh	r3, [r4, #12]
 800b308:	071a      	lsls	r2, r3, #28
 800b30a:	d52f      	bpl.n	800b36c <__swbuf_r+0x84>
 800b30c:	6923      	ldr	r3, [r4, #16]
 800b30e:	b36b      	cbz	r3, 800b36c <__swbuf_r+0x84>
 800b310:	6923      	ldr	r3, [r4, #16]
 800b312:	6820      	ldr	r0, [r4, #0]
 800b314:	1ac0      	subs	r0, r0, r3
 800b316:	6963      	ldr	r3, [r4, #20]
 800b318:	b2f6      	uxtb	r6, r6
 800b31a:	4283      	cmp	r3, r0
 800b31c:	4637      	mov	r7, r6
 800b31e:	dc04      	bgt.n	800b32a <__swbuf_r+0x42>
 800b320:	4621      	mov	r1, r4
 800b322:	4628      	mov	r0, r5
 800b324:	f000 f93c 	bl	800b5a0 <_fflush_r>
 800b328:	bb30      	cbnz	r0, 800b378 <__swbuf_r+0x90>
 800b32a:	68a3      	ldr	r3, [r4, #8]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	60a3      	str	r3, [r4, #8]
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	1c5a      	adds	r2, r3, #1
 800b334:	6022      	str	r2, [r4, #0]
 800b336:	701e      	strb	r6, [r3, #0]
 800b338:	6963      	ldr	r3, [r4, #20]
 800b33a:	3001      	adds	r0, #1
 800b33c:	4283      	cmp	r3, r0
 800b33e:	d004      	beq.n	800b34a <__swbuf_r+0x62>
 800b340:	89a3      	ldrh	r3, [r4, #12]
 800b342:	07db      	lsls	r3, r3, #31
 800b344:	d506      	bpl.n	800b354 <__swbuf_r+0x6c>
 800b346:	2e0a      	cmp	r6, #10
 800b348:	d104      	bne.n	800b354 <__swbuf_r+0x6c>
 800b34a:	4621      	mov	r1, r4
 800b34c:	4628      	mov	r0, r5
 800b34e:	f000 f927 	bl	800b5a0 <_fflush_r>
 800b352:	b988      	cbnz	r0, 800b378 <__swbuf_r+0x90>
 800b354:	4638      	mov	r0, r7
 800b356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b358:	4b0a      	ldr	r3, [pc, #40]	; (800b384 <__swbuf_r+0x9c>)
 800b35a:	429c      	cmp	r4, r3
 800b35c:	d101      	bne.n	800b362 <__swbuf_r+0x7a>
 800b35e:	68ac      	ldr	r4, [r5, #8]
 800b360:	e7cf      	b.n	800b302 <__swbuf_r+0x1a>
 800b362:	4b09      	ldr	r3, [pc, #36]	; (800b388 <__swbuf_r+0xa0>)
 800b364:	429c      	cmp	r4, r3
 800b366:	bf08      	it	eq
 800b368:	68ec      	ldreq	r4, [r5, #12]
 800b36a:	e7ca      	b.n	800b302 <__swbuf_r+0x1a>
 800b36c:	4621      	mov	r1, r4
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 f81a 	bl	800b3a8 <__swsetup_r>
 800b374:	2800      	cmp	r0, #0
 800b376:	d0cb      	beq.n	800b310 <__swbuf_r+0x28>
 800b378:	f04f 37ff 	mov.w	r7, #4294967295
 800b37c:	e7ea      	b.n	800b354 <__swbuf_r+0x6c>
 800b37e:	bf00      	nop
 800b380:	0800c6c4 	.word	0x0800c6c4
 800b384:	0800c6e4 	.word	0x0800c6e4
 800b388:	0800c6a4 	.word	0x0800c6a4

0800b38c <__ascii_wctomb>:
 800b38c:	b149      	cbz	r1, 800b3a2 <__ascii_wctomb+0x16>
 800b38e:	2aff      	cmp	r2, #255	; 0xff
 800b390:	bf85      	ittet	hi
 800b392:	238a      	movhi	r3, #138	; 0x8a
 800b394:	6003      	strhi	r3, [r0, #0]
 800b396:	700a      	strbls	r2, [r1, #0]
 800b398:	f04f 30ff 	movhi.w	r0, #4294967295
 800b39c:	bf98      	it	ls
 800b39e:	2001      	movls	r0, #1
 800b3a0:	4770      	bx	lr
 800b3a2:	4608      	mov	r0, r1
 800b3a4:	4770      	bx	lr
	...

0800b3a8 <__swsetup_r>:
 800b3a8:	4b32      	ldr	r3, [pc, #200]	; (800b474 <__swsetup_r+0xcc>)
 800b3aa:	b570      	push	{r4, r5, r6, lr}
 800b3ac:	681d      	ldr	r5, [r3, #0]
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	b125      	cbz	r5, 800b3be <__swsetup_r+0x16>
 800b3b4:	69ab      	ldr	r3, [r5, #24]
 800b3b6:	b913      	cbnz	r3, 800b3be <__swsetup_r+0x16>
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	f000 f985 	bl	800b6c8 <__sinit>
 800b3be:	4b2e      	ldr	r3, [pc, #184]	; (800b478 <__swsetup_r+0xd0>)
 800b3c0:	429c      	cmp	r4, r3
 800b3c2:	d10f      	bne.n	800b3e4 <__swsetup_r+0x3c>
 800b3c4:	686c      	ldr	r4, [r5, #4]
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3cc:	0719      	lsls	r1, r3, #28
 800b3ce:	d42c      	bmi.n	800b42a <__swsetup_r+0x82>
 800b3d0:	06dd      	lsls	r5, r3, #27
 800b3d2:	d411      	bmi.n	800b3f8 <__swsetup_r+0x50>
 800b3d4:	2309      	movs	r3, #9
 800b3d6:	6033      	str	r3, [r6, #0]
 800b3d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3dc:	81a3      	strh	r3, [r4, #12]
 800b3de:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e2:	e03e      	b.n	800b462 <__swsetup_r+0xba>
 800b3e4:	4b25      	ldr	r3, [pc, #148]	; (800b47c <__swsetup_r+0xd4>)
 800b3e6:	429c      	cmp	r4, r3
 800b3e8:	d101      	bne.n	800b3ee <__swsetup_r+0x46>
 800b3ea:	68ac      	ldr	r4, [r5, #8]
 800b3ec:	e7eb      	b.n	800b3c6 <__swsetup_r+0x1e>
 800b3ee:	4b24      	ldr	r3, [pc, #144]	; (800b480 <__swsetup_r+0xd8>)
 800b3f0:	429c      	cmp	r4, r3
 800b3f2:	bf08      	it	eq
 800b3f4:	68ec      	ldreq	r4, [r5, #12]
 800b3f6:	e7e6      	b.n	800b3c6 <__swsetup_r+0x1e>
 800b3f8:	0758      	lsls	r0, r3, #29
 800b3fa:	d512      	bpl.n	800b422 <__swsetup_r+0x7a>
 800b3fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3fe:	b141      	cbz	r1, 800b412 <__swsetup_r+0x6a>
 800b400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b404:	4299      	cmp	r1, r3
 800b406:	d002      	beq.n	800b40e <__swsetup_r+0x66>
 800b408:	4630      	mov	r0, r6
 800b40a:	f7ff fb6f 	bl	800aaec <_free_r>
 800b40e:	2300      	movs	r3, #0
 800b410:	6363      	str	r3, [r4, #52]	; 0x34
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b418:	81a3      	strh	r3, [r4, #12]
 800b41a:	2300      	movs	r3, #0
 800b41c:	6063      	str	r3, [r4, #4]
 800b41e:	6923      	ldr	r3, [r4, #16]
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	89a3      	ldrh	r3, [r4, #12]
 800b424:	f043 0308 	orr.w	r3, r3, #8
 800b428:	81a3      	strh	r3, [r4, #12]
 800b42a:	6923      	ldr	r3, [r4, #16]
 800b42c:	b94b      	cbnz	r3, 800b442 <__swsetup_r+0x9a>
 800b42e:	89a3      	ldrh	r3, [r4, #12]
 800b430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b438:	d003      	beq.n	800b442 <__swsetup_r+0x9a>
 800b43a:	4621      	mov	r1, r4
 800b43c:	4630      	mov	r0, r6
 800b43e:	f000 fa07 	bl	800b850 <__smakebuf_r>
 800b442:	89a0      	ldrh	r0, [r4, #12]
 800b444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b448:	f010 0301 	ands.w	r3, r0, #1
 800b44c:	d00a      	beq.n	800b464 <__swsetup_r+0xbc>
 800b44e:	2300      	movs	r3, #0
 800b450:	60a3      	str	r3, [r4, #8]
 800b452:	6963      	ldr	r3, [r4, #20]
 800b454:	425b      	negs	r3, r3
 800b456:	61a3      	str	r3, [r4, #24]
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	b943      	cbnz	r3, 800b46e <__swsetup_r+0xc6>
 800b45c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b460:	d1ba      	bne.n	800b3d8 <__swsetup_r+0x30>
 800b462:	bd70      	pop	{r4, r5, r6, pc}
 800b464:	0781      	lsls	r1, r0, #30
 800b466:	bf58      	it	pl
 800b468:	6963      	ldrpl	r3, [r4, #20]
 800b46a:	60a3      	str	r3, [r4, #8]
 800b46c:	e7f4      	b.n	800b458 <__swsetup_r+0xb0>
 800b46e:	2000      	movs	r0, #0
 800b470:	e7f7      	b.n	800b462 <__swsetup_r+0xba>
 800b472:	bf00      	nop
 800b474:	20000180 	.word	0x20000180
 800b478:	0800c6c4 	.word	0x0800c6c4
 800b47c:	0800c6e4 	.word	0x0800c6e4
 800b480:	0800c6a4 	.word	0x0800c6a4

0800b484 <abort>:
 800b484:	b508      	push	{r3, lr}
 800b486:	2006      	movs	r0, #6
 800b488:	f000 fa52 	bl	800b930 <raise>
 800b48c:	2001      	movs	r0, #1
 800b48e:	f7f7 f985 	bl	800279c <_exit>
	...

0800b494 <__sflush_r>:
 800b494:	898a      	ldrh	r2, [r1, #12]
 800b496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49a:	4605      	mov	r5, r0
 800b49c:	0710      	lsls	r0, r2, #28
 800b49e:	460c      	mov	r4, r1
 800b4a0:	d458      	bmi.n	800b554 <__sflush_r+0xc0>
 800b4a2:	684b      	ldr	r3, [r1, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	dc05      	bgt.n	800b4b4 <__sflush_r+0x20>
 800b4a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	dc02      	bgt.n	800b4b4 <__sflush_r+0x20>
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4b6:	2e00      	cmp	r6, #0
 800b4b8:	d0f9      	beq.n	800b4ae <__sflush_r+0x1a>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4c0:	682f      	ldr	r7, [r5, #0]
 800b4c2:	602b      	str	r3, [r5, #0]
 800b4c4:	d032      	beq.n	800b52c <__sflush_r+0x98>
 800b4c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4c8:	89a3      	ldrh	r3, [r4, #12]
 800b4ca:	075a      	lsls	r2, r3, #29
 800b4cc:	d505      	bpl.n	800b4da <__sflush_r+0x46>
 800b4ce:	6863      	ldr	r3, [r4, #4]
 800b4d0:	1ac0      	subs	r0, r0, r3
 800b4d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4d4:	b10b      	cbz	r3, 800b4da <__sflush_r+0x46>
 800b4d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4d8:	1ac0      	subs	r0, r0, r3
 800b4da:	2300      	movs	r3, #0
 800b4dc:	4602      	mov	r2, r0
 800b4de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4e0:	6a21      	ldr	r1, [r4, #32]
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	47b0      	blx	r6
 800b4e6:	1c43      	adds	r3, r0, #1
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	d106      	bne.n	800b4fa <__sflush_r+0x66>
 800b4ec:	6829      	ldr	r1, [r5, #0]
 800b4ee:	291d      	cmp	r1, #29
 800b4f0:	d82c      	bhi.n	800b54c <__sflush_r+0xb8>
 800b4f2:	4a2a      	ldr	r2, [pc, #168]	; (800b59c <__sflush_r+0x108>)
 800b4f4:	40ca      	lsrs	r2, r1
 800b4f6:	07d6      	lsls	r6, r2, #31
 800b4f8:	d528      	bpl.n	800b54c <__sflush_r+0xb8>
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	6062      	str	r2, [r4, #4]
 800b4fe:	04d9      	lsls	r1, r3, #19
 800b500:	6922      	ldr	r2, [r4, #16]
 800b502:	6022      	str	r2, [r4, #0]
 800b504:	d504      	bpl.n	800b510 <__sflush_r+0x7c>
 800b506:	1c42      	adds	r2, r0, #1
 800b508:	d101      	bne.n	800b50e <__sflush_r+0x7a>
 800b50a:	682b      	ldr	r3, [r5, #0]
 800b50c:	b903      	cbnz	r3, 800b510 <__sflush_r+0x7c>
 800b50e:	6560      	str	r0, [r4, #84]	; 0x54
 800b510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b512:	602f      	str	r7, [r5, #0]
 800b514:	2900      	cmp	r1, #0
 800b516:	d0ca      	beq.n	800b4ae <__sflush_r+0x1a>
 800b518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b51c:	4299      	cmp	r1, r3
 800b51e:	d002      	beq.n	800b526 <__sflush_r+0x92>
 800b520:	4628      	mov	r0, r5
 800b522:	f7ff fae3 	bl	800aaec <_free_r>
 800b526:	2000      	movs	r0, #0
 800b528:	6360      	str	r0, [r4, #52]	; 0x34
 800b52a:	e7c1      	b.n	800b4b0 <__sflush_r+0x1c>
 800b52c:	6a21      	ldr	r1, [r4, #32]
 800b52e:	2301      	movs	r3, #1
 800b530:	4628      	mov	r0, r5
 800b532:	47b0      	blx	r6
 800b534:	1c41      	adds	r1, r0, #1
 800b536:	d1c7      	bne.n	800b4c8 <__sflush_r+0x34>
 800b538:	682b      	ldr	r3, [r5, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0c4      	beq.n	800b4c8 <__sflush_r+0x34>
 800b53e:	2b1d      	cmp	r3, #29
 800b540:	d001      	beq.n	800b546 <__sflush_r+0xb2>
 800b542:	2b16      	cmp	r3, #22
 800b544:	d101      	bne.n	800b54a <__sflush_r+0xb6>
 800b546:	602f      	str	r7, [r5, #0]
 800b548:	e7b1      	b.n	800b4ae <__sflush_r+0x1a>
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	e7ad      	b.n	800b4b0 <__sflush_r+0x1c>
 800b554:	690f      	ldr	r7, [r1, #16]
 800b556:	2f00      	cmp	r7, #0
 800b558:	d0a9      	beq.n	800b4ae <__sflush_r+0x1a>
 800b55a:	0793      	lsls	r3, r2, #30
 800b55c:	680e      	ldr	r6, [r1, #0]
 800b55e:	bf08      	it	eq
 800b560:	694b      	ldreq	r3, [r1, #20]
 800b562:	600f      	str	r7, [r1, #0]
 800b564:	bf18      	it	ne
 800b566:	2300      	movne	r3, #0
 800b568:	eba6 0807 	sub.w	r8, r6, r7
 800b56c:	608b      	str	r3, [r1, #8]
 800b56e:	f1b8 0f00 	cmp.w	r8, #0
 800b572:	dd9c      	ble.n	800b4ae <__sflush_r+0x1a>
 800b574:	6a21      	ldr	r1, [r4, #32]
 800b576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b578:	4643      	mov	r3, r8
 800b57a:	463a      	mov	r2, r7
 800b57c:	4628      	mov	r0, r5
 800b57e:	47b0      	blx	r6
 800b580:	2800      	cmp	r0, #0
 800b582:	dc06      	bgt.n	800b592 <__sflush_r+0xfe>
 800b584:	89a3      	ldrh	r3, [r4, #12]
 800b586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b58a:	81a3      	strh	r3, [r4, #12]
 800b58c:	f04f 30ff 	mov.w	r0, #4294967295
 800b590:	e78e      	b.n	800b4b0 <__sflush_r+0x1c>
 800b592:	4407      	add	r7, r0
 800b594:	eba8 0800 	sub.w	r8, r8, r0
 800b598:	e7e9      	b.n	800b56e <__sflush_r+0xda>
 800b59a:	bf00      	nop
 800b59c:	20400001 	.word	0x20400001

0800b5a0 <_fflush_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	690b      	ldr	r3, [r1, #16]
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	b913      	cbnz	r3, 800b5b0 <_fflush_r+0x10>
 800b5aa:	2500      	movs	r5, #0
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	b118      	cbz	r0, 800b5ba <_fflush_r+0x1a>
 800b5b2:	6983      	ldr	r3, [r0, #24]
 800b5b4:	b90b      	cbnz	r3, 800b5ba <_fflush_r+0x1a>
 800b5b6:	f000 f887 	bl	800b6c8 <__sinit>
 800b5ba:	4b14      	ldr	r3, [pc, #80]	; (800b60c <_fflush_r+0x6c>)
 800b5bc:	429c      	cmp	r4, r3
 800b5be:	d11b      	bne.n	800b5f8 <_fflush_r+0x58>
 800b5c0:	686c      	ldr	r4, [r5, #4]
 800b5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d0ef      	beq.n	800b5aa <_fflush_r+0xa>
 800b5ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5cc:	07d0      	lsls	r0, r2, #31
 800b5ce:	d404      	bmi.n	800b5da <_fflush_r+0x3a>
 800b5d0:	0599      	lsls	r1, r3, #22
 800b5d2:	d402      	bmi.n	800b5da <_fflush_r+0x3a>
 800b5d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5d6:	f000 f915 	bl	800b804 <__retarget_lock_acquire_recursive>
 800b5da:	4628      	mov	r0, r5
 800b5dc:	4621      	mov	r1, r4
 800b5de:	f7ff ff59 	bl	800b494 <__sflush_r>
 800b5e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5e4:	07da      	lsls	r2, r3, #31
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	d4e0      	bmi.n	800b5ac <_fflush_r+0xc>
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	059b      	lsls	r3, r3, #22
 800b5ee:	d4dd      	bmi.n	800b5ac <_fflush_r+0xc>
 800b5f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5f2:	f000 f908 	bl	800b806 <__retarget_lock_release_recursive>
 800b5f6:	e7d9      	b.n	800b5ac <_fflush_r+0xc>
 800b5f8:	4b05      	ldr	r3, [pc, #20]	; (800b610 <_fflush_r+0x70>)
 800b5fa:	429c      	cmp	r4, r3
 800b5fc:	d101      	bne.n	800b602 <_fflush_r+0x62>
 800b5fe:	68ac      	ldr	r4, [r5, #8]
 800b600:	e7df      	b.n	800b5c2 <_fflush_r+0x22>
 800b602:	4b04      	ldr	r3, [pc, #16]	; (800b614 <_fflush_r+0x74>)
 800b604:	429c      	cmp	r4, r3
 800b606:	bf08      	it	eq
 800b608:	68ec      	ldreq	r4, [r5, #12]
 800b60a:	e7da      	b.n	800b5c2 <_fflush_r+0x22>
 800b60c:	0800c6c4 	.word	0x0800c6c4
 800b610:	0800c6e4 	.word	0x0800c6e4
 800b614:	0800c6a4 	.word	0x0800c6a4

0800b618 <std>:
 800b618:	2300      	movs	r3, #0
 800b61a:	b510      	push	{r4, lr}
 800b61c:	4604      	mov	r4, r0
 800b61e:	e9c0 3300 	strd	r3, r3, [r0]
 800b622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b626:	6083      	str	r3, [r0, #8]
 800b628:	8181      	strh	r1, [r0, #12]
 800b62a:	6643      	str	r3, [r0, #100]	; 0x64
 800b62c:	81c2      	strh	r2, [r0, #14]
 800b62e:	6183      	str	r3, [r0, #24]
 800b630:	4619      	mov	r1, r3
 800b632:	2208      	movs	r2, #8
 800b634:	305c      	adds	r0, #92	; 0x5c
 800b636:	f7fd fa29 	bl	8008a8c <memset>
 800b63a:	4b05      	ldr	r3, [pc, #20]	; (800b650 <std+0x38>)
 800b63c:	6263      	str	r3, [r4, #36]	; 0x24
 800b63e:	4b05      	ldr	r3, [pc, #20]	; (800b654 <std+0x3c>)
 800b640:	62a3      	str	r3, [r4, #40]	; 0x28
 800b642:	4b05      	ldr	r3, [pc, #20]	; (800b658 <std+0x40>)
 800b644:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b646:	4b05      	ldr	r3, [pc, #20]	; (800b65c <std+0x44>)
 800b648:	6224      	str	r4, [r4, #32]
 800b64a:	6323      	str	r3, [r4, #48]	; 0x30
 800b64c:	bd10      	pop	{r4, pc}
 800b64e:	bf00      	nop
 800b650:	0800b969 	.word	0x0800b969
 800b654:	0800b98b 	.word	0x0800b98b
 800b658:	0800b9c3 	.word	0x0800b9c3
 800b65c:	0800b9e7 	.word	0x0800b9e7

0800b660 <_cleanup_r>:
 800b660:	4901      	ldr	r1, [pc, #4]	; (800b668 <_cleanup_r+0x8>)
 800b662:	f000 b8af 	b.w	800b7c4 <_fwalk_reent>
 800b666:	bf00      	nop
 800b668:	0800b5a1 	.word	0x0800b5a1

0800b66c <__sfmoreglue>:
 800b66c:	b570      	push	{r4, r5, r6, lr}
 800b66e:	1e4a      	subs	r2, r1, #1
 800b670:	2568      	movs	r5, #104	; 0x68
 800b672:	4355      	muls	r5, r2
 800b674:	460e      	mov	r6, r1
 800b676:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b67a:	f7ff fa87 	bl	800ab8c <_malloc_r>
 800b67e:	4604      	mov	r4, r0
 800b680:	b140      	cbz	r0, 800b694 <__sfmoreglue+0x28>
 800b682:	2100      	movs	r1, #0
 800b684:	e9c0 1600 	strd	r1, r6, [r0]
 800b688:	300c      	adds	r0, #12
 800b68a:	60a0      	str	r0, [r4, #8]
 800b68c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b690:	f7fd f9fc 	bl	8008a8c <memset>
 800b694:	4620      	mov	r0, r4
 800b696:	bd70      	pop	{r4, r5, r6, pc}

0800b698 <__sfp_lock_acquire>:
 800b698:	4801      	ldr	r0, [pc, #4]	; (800b6a0 <__sfp_lock_acquire+0x8>)
 800b69a:	f000 b8b3 	b.w	800b804 <__retarget_lock_acquire_recursive>
 800b69e:	bf00      	nop
 800b6a0:	20001edc 	.word	0x20001edc

0800b6a4 <__sfp_lock_release>:
 800b6a4:	4801      	ldr	r0, [pc, #4]	; (800b6ac <__sfp_lock_release+0x8>)
 800b6a6:	f000 b8ae 	b.w	800b806 <__retarget_lock_release_recursive>
 800b6aa:	bf00      	nop
 800b6ac:	20001edc 	.word	0x20001edc

0800b6b0 <__sinit_lock_acquire>:
 800b6b0:	4801      	ldr	r0, [pc, #4]	; (800b6b8 <__sinit_lock_acquire+0x8>)
 800b6b2:	f000 b8a7 	b.w	800b804 <__retarget_lock_acquire_recursive>
 800b6b6:	bf00      	nop
 800b6b8:	20001ed7 	.word	0x20001ed7

0800b6bc <__sinit_lock_release>:
 800b6bc:	4801      	ldr	r0, [pc, #4]	; (800b6c4 <__sinit_lock_release+0x8>)
 800b6be:	f000 b8a2 	b.w	800b806 <__retarget_lock_release_recursive>
 800b6c2:	bf00      	nop
 800b6c4:	20001ed7 	.word	0x20001ed7

0800b6c8 <__sinit>:
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	f7ff fff0 	bl	800b6b0 <__sinit_lock_acquire>
 800b6d0:	69a3      	ldr	r3, [r4, #24]
 800b6d2:	b11b      	cbz	r3, 800b6dc <__sinit+0x14>
 800b6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6d8:	f7ff bff0 	b.w	800b6bc <__sinit_lock_release>
 800b6dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6e0:	6523      	str	r3, [r4, #80]	; 0x50
 800b6e2:	4b13      	ldr	r3, [pc, #76]	; (800b730 <__sinit+0x68>)
 800b6e4:	4a13      	ldr	r2, [pc, #76]	; (800b734 <__sinit+0x6c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6ea:	42a3      	cmp	r3, r4
 800b6ec:	bf04      	itt	eq
 800b6ee:	2301      	moveq	r3, #1
 800b6f0:	61a3      	streq	r3, [r4, #24]
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f000 f820 	bl	800b738 <__sfp>
 800b6f8:	6060      	str	r0, [r4, #4]
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f000 f81c 	bl	800b738 <__sfp>
 800b700:	60a0      	str	r0, [r4, #8]
 800b702:	4620      	mov	r0, r4
 800b704:	f000 f818 	bl	800b738 <__sfp>
 800b708:	2200      	movs	r2, #0
 800b70a:	60e0      	str	r0, [r4, #12]
 800b70c:	2104      	movs	r1, #4
 800b70e:	6860      	ldr	r0, [r4, #4]
 800b710:	f7ff ff82 	bl	800b618 <std>
 800b714:	68a0      	ldr	r0, [r4, #8]
 800b716:	2201      	movs	r2, #1
 800b718:	2109      	movs	r1, #9
 800b71a:	f7ff ff7d 	bl	800b618 <std>
 800b71e:	68e0      	ldr	r0, [r4, #12]
 800b720:	2202      	movs	r2, #2
 800b722:	2112      	movs	r1, #18
 800b724:	f7ff ff78 	bl	800b618 <std>
 800b728:	2301      	movs	r3, #1
 800b72a:	61a3      	str	r3, [r4, #24]
 800b72c:	e7d2      	b.n	800b6d4 <__sinit+0xc>
 800b72e:	bf00      	nop
 800b730:	0800c324 	.word	0x0800c324
 800b734:	0800b661 	.word	0x0800b661

0800b738 <__sfp>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	4607      	mov	r7, r0
 800b73c:	f7ff ffac 	bl	800b698 <__sfp_lock_acquire>
 800b740:	4b1e      	ldr	r3, [pc, #120]	; (800b7bc <__sfp+0x84>)
 800b742:	681e      	ldr	r6, [r3, #0]
 800b744:	69b3      	ldr	r3, [r6, #24]
 800b746:	b913      	cbnz	r3, 800b74e <__sfp+0x16>
 800b748:	4630      	mov	r0, r6
 800b74a:	f7ff ffbd 	bl	800b6c8 <__sinit>
 800b74e:	3648      	adds	r6, #72	; 0x48
 800b750:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b754:	3b01      	subs	r3, #1
 800b756:	d503      	bpl.n	800b760 <__sfp+0x28>
 800b758:	6833      	ldr	r3, [r6, #0]
 800b75a:	b30b      	cbz	r3, 800b7a0 <__sfp+0x68>
 800b75c:	6836      	ldr	r6, [r6, #0]
 800b75e:	e7f7      	b.n	800b750 <__sfp+0x18>
 800b760:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b764:	b9d5      	cbnz	r5, 800b79c <__sfp+0x64>
 800b766:	4b16      	ldr	r3, [pc, #88]	; (800b7c0 <__sfp+0x88>)
 800b768:	60e3      	str	r3, [r4, #12]
 800b76a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b76e:	6665      	str	r5, [r4, #100]	; 0x64
 800b770:	f000 f847 	bl	800b802 <__retarget_lock_init_recursive>
 800b774:	f7ff ff96 	bl	800b6a4 <__sfp_lock_release>
 800b778:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b77c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b780:	6025      	str	r5, [r4, #0]
 800b782:	61a5      	str	r5, [r4, #24]
 800b784:	2208      	movs	r2, #8
 800b786:	4629      	mov	r1, r5
 800b788:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b78c:	f7fd f97e 	bl	8008a8c <memset>
 800b790:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b794:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b798:	4620      	mov	r0, r4
 800b79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b79c:	3468      	adds	r4, #104	; 0x68
 800b79e:	e7d9      	b.n	800b754 <__sfp+0x1c>
 800b7a0:	2104      	movs	r1, #4
 800b7a2:	4638      	mov	r0, r7
 800b7a4:	f7ff ff62 	bl	800b66c <__sfmoreglue>
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	6030      	str	r0, [r6, #0]
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d1d5      	bne.n	800b75c <__sfp+0x24>
 800b7b0:	f7ff ff78 	bl	800b6a4 <__sfp_lock_release>
 800b7b4:	230c      	movs	r3, #12
 800b7b6:	603b      	str	r3, [r7, #0]
 800b7b8:	e7ee      	b.n	800b798 <__sfp+0x60>
 800b7ba:	bf00      	nop
 800b7bc:	0800c324 	.word	0x0800c324
 800b7c0:	ffff0001 	.word	0xffff0001

0800b7c4 <_fwalk_reent>:
 800b7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7c8:	4606      	mov	r6, r0
 800b7ca:	4688      	mov	r8, r1
 800b7cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7d0:	2700      	movs	r7, #0
 800b7d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7d6:	f1b9 0901 	subs.w	r9, r9, #1
 800b7da:	d505      	bpl.n	800b7e8 <_fwalk_reent+0x24>
 800b7dc:	6824      	ldr	r4, [r4, #0]
 800b7de:	2c00      	cmp	r4, #0
 800b7e0:	d1f7      	bne.n	800b7d2 <_fwalk_reent+0xe>
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7e8:	89ab      	ldrh	r3, [r5, #12]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d907      	bls.n	800b7fe <_fwalk_reent+0x3a>
 800b7ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	d003      	beq.n	800b7fe <_fwalk_reent+0x3a>
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	47c0      	blx	r8
 800b7fc:	4307      	orrs	r7, r0
 800b7fe:	3568      	adds	r5, #104	; 0x68
 800b800:	e7e9      	b.n	800b7d6 <_fwalk_reent+0x12>

0800b802 <__retarget_lock_init_recursive>:
 800b802:	4770      	bx	lr

0800b804 <__retarget_lock_acquire_recursive>:
 800b804:	4770      	bx	lr

0800b806 <__retarget_lock_release_recursive>:
 800b806:	4770      	bx	lr

0800b808 <__swhatbuf_r>:
 800b808:	b570      	push	{r4, r5, r6, lr}
 800b80a:	460e      	mov	r6, r1
 800b80c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b810:	2900      	cmp	r1, #0
 800b812:	b096      	sub	sp, #88	; 0x58
 800b814:	4614      	mov	r4, r2
 800b816:	461d      	mov	r5, r3
 800b818:	da07      	bge.n	800b82a <__swhatbuf_r+0x22>
 800b81a:	2300      	movs	r3, #0
 800b81c:	602b      	str	r3, [r5, #0]
 800b81e:	89b3      	ldrh	r3, [r6, #12]
 800b820:	061a      	lsls	r2, r3, #24
 800b822:	d410      	bmi.n	800b846 <__swhatbuf_r+0x3e>
 800b824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b828:	e00e      	b.n	800b848 <__swhatbuf_r+0x40>
 800b82a:	466a      	mov	r2, sp
 800b82c:	f000 f902 	bl	800ba34 <_fstat_r>
 800b830:	2800      	cmp	r0, #0
 800b832:	dbf2      	blt.n	800b81a <__swhatbuf_r+0x12>
 800b834:	9a01      	ldr	r2, [sp, #4]
 800b836:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b83a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b83e:	425a      	negs	r2, r3
 800b840:	415a      	adcs	r2, r3
 800b842:	602a      	str	r2, [r5, #0]
 800b844:	e7ee      	b.n	800b824 <__swhatbuf_r+0x1c>
 800b846:	2340      	movs	r3, #64	; 0x40
 800b848:	2000      	movs	r0, #0
 800b84a:	6023      	str	r3, [r4, #0]
 800b84c:	b016      	add	sp, #88	; 0x58
 800b84e:	bd70      	pop	{r4, r5, r6, pc}

0800b850 <__smakebuf_r>:
 800b850:	898b      	ldrh	r3, [r1, #12]
 800b852:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b854:	079d      	lsls	r5, r3, #30
 800b856:	4606      	mov	r6, r0
 800b858:	460c      	mov	r4, r1
 800b85a:	d507      	bpl.n	800b86c <__smakebuf_r+0x1c>
 800b85c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	6123      	str	r3, [r4, #16]
 800b864:	2301      	movs	r3, #1
 800b866:	6163      	str	r3, [r4, #20]
 800b868:	b002      	add	sp, #8
 800b86a:	bd70      	pop	{r4, r5, r6, pc}
 800b86c:	ab01      	add	r3, sp, #4
 800b86e:	466a      	mov	r2, sp
 800b870:	f7ff ffca 	bl	800b808 <__swhatbuf_r>
 800b874:	9900      	ldr	r1, [sp, #0]
 800b876:	4605      	mov	r5, r0
 800b878:	4630      	mov	r0, r6
 800b87a:	f7ff f987 	bl	800ab8c <_malloc_r>
 800b87e:	b948      	cbnz	r0, 800b894 <__smakebuf_r+0x44>
 800b880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b884:	059a      	lsls	r2, r3, #22
 800b886:	d4ef      	bmi.n	800b868 <__smakebuf_r+0x18>
 800b888:	f023 0303 	bic.w	r3, r3, #3
 800b88c:	f043 0302 	orr.w	r3, r3, #2
 800b890:	81a3      	strh	r3, [r4, #12]
 800b892:	e7e3      	b.n	800b85c <__smakebuf_r+0xc>
 800b894:	4b0d      	ldr	r3, [pc, #52]	; (800b8cc <__smakebuf_r+0x7c>)
 800b896:	62b3      	str	r3, [r6, #40]	; 0x28
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	6020      	str	r0, [r4, #0]
 800b89c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8a0:	81a3      	strh	r3, [r4, #12]
 800b8a2:	9b00      	ldr	r3, [sp, #0]
 800b8a4:	6163      	str	r3, [r4, #20]
 800b8a6:	9b01      	ldr	r3, [sp, #4]
 800b8a8:	6120      	str	r0, [r4, #16]
 800b8aa:	b15b      	cbz	r3, 800b8c4 <__smakebuf_r+0x74>
 800b8ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	f000 f8d1 	bl	800ba58 <_isatty_r>
 800b8b6:	b128      	cbz	r0, 800b8c4 <__smakebuf_r+0x74>
 800b8b8:	89a3      	ldrh	r3, [r4, #12]
 800b8ba:	f023 0303 	bic.w	r3, r3, #3
 800b8be:	f043 0301 	orr.w	r3, r3, #1
 800b8c2:	81a3      	strh	r3, [r4, #12]
 800b8c4:	89a0      	ldrh	r0, [r4, #12]
 800b8c6:	4305      	orrs	r5, r0
 800b8c8:	81a5      	strh	r5, [r4, #12]
 800b8ca:	e7cd      	b.n	800b868 <__smakebuf_r+0x18>
 800b8cc:	0800b661 	.word	0x0800b661

0800b8d0 <_malloc_usable_size_r>:
 800b8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8d4:	1f18      	subs	r0, r3, #4
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	bfbc      	itt	lt
 800b8da:	580b      	ldrlt	r3, [r1, r0]
 800b8dc:	18c0      	addlt	r0, r0, r3
 800b8de:	4770      	bx	lr

0800b8e0 <_raise_r>:
 800b8e0:	291f      	cmp	r1, #31
 800b8e2:	b538      	push	{r3, r4, r5, lr}
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	460d      	mov	r5, r1
 800b8e8:	d904      	bls.n	800b8f4 <_raise_r+0x14>
 800b8ea:	2316      	movs	r3, #22
 800b8ec:	6003      	str	r3, [r0, #0]
 800b8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
 800b8f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b8f6:	b112      	cbz	r2, 800b8fe <_raise_r+0x1e>
 800b8f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8fc:	b94b      	cbnz	r3, 800b912 <_raise_r+0x32>
 800b8fe:	4620      	mov	r0, r4
 800b900:	f000 f830 	bl	800b964 <_getpid_r>
 800b904:	462a      	mov	r2, r5
 800b906:	4601      	mov	r1, r0
 800b908:	4620      	mov	r0, r4
 800b90a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b90e:	f000 b817 	b.w	800b940 <_kill_r>
 800b912:	2b01      	cmp	r3, #1
 800b914:	d00a      	beq.n	800b92c <_raise_r+0x4c>
 800b916:	1c59      	adds	r1, r3, #1
 800b918:	d103      	bne.n	800b922 <_raise_r+0x42>
 800b91a:	2316      	movs	r3, #22
 800b91c:	6003      	str	r3, [r0, #0]
 800b91e:	2001      	movs	r0, #1
 800b920:	e7e7      	b.n	800b8f2 <_raise_r+0x12>
 800b922:	2400      	movs	r4, #0
 800b924:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b928:	4628      	mov	r0, r5
 800b92a:	4798      	blx	r3
 800b92c:	2000      	movs	r0, #0
 800b92e:	e7e0      	b.n	800b8f2 <_raise_r+0x12>

0800b930 <raise>:
 800b930:	4b02      	ldr	r3, [pc, #8]	; (800b93c <raise+0xc>)
 800b932:	4601      	mov	r1, r0
 800b934:	6818      	ldr	r0, [r3, #0]
 800b936:	f7ff bfd3 	b.w	800b8e0 <_raise_r>
 800b93a:	bf00      	nop
 800b93c:	20000180 	.word	0x20000180

0800b940 <_kill_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4d07      	ldr	r5, [pc, #28]	; (800b960 <_kill_r+0x20>)
 800b944:	2300      	movs	r3, #0
 800b946:	4604      	mov	r4, r0
 800b948:	4608      	mov	r0, r1
 800b94a:	4611      	mov	r1, r2
 800b94c:	602b      	str	r3, [r5, #0]
 800b94e:	f7f6 ff15 	bl	800277c <_kill>
 800b952:	1c43      	adds	r3, r0, #1
 800b954:	d102      	bne.n	800b95c <_kill_r+0x1c>
 800b956:	682b      	ldr	r3, [r5, #0]
 800b958:	b103      	cbz	r3, 800b95c <_kill_r+0x1c>
 800b95a:	6023      	str	r3, [r4, #0]
 800b95c:	bd38      	pop	{r3, r4, r5, pc}
 800b95e:	bf00      	nop
 800b960:	20001ed0 	.word	0x20001ed0

0800b964 <_getpid_r>:
 800b964:	f7f6 bf02 	b.w	800276c <_getpid>

0800b968 <__sread>:
 800b968:	b510      	push	{r4, lr}
 800b96a:	460c      	mov	r4, r1
 800b96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b970:	f000 f894 	bl	800ba9c <_read_r>
 800b974:	2800      	cmp	r0, #0
 800b976:	bfab      	itete	ge
 800b978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b97a:	89a3      	ldrhlt	r3, [r4, #12]
 800b97c:	181b      	addge	r3, r3, r0
 800b97e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b982:	bfac      	ite	ge
 800b984:	6563      	strge	r3, [r4, #84]	; 0x54
 800b986:	81a3      	strhlt	r3, [r4, #12]
 800b988:	bd10      	pop	{r4, pc}

0800b98a <__swrite>:
 800b98a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b98e:	461f      	mov	r7, r3
 800b990:	898b      	ldrh	r3, [r1, #12]
 800b992:	05db      	lsls	r3, r3, #23
 800b994:	4605      	mov	r5, r0
 800b996:	460c      	mov	r4, r1
 800b998:	4616      	mov	r6, r2
 800b99a:	d505      	bpl.n	800b9a8 <__swrite+0x1e>
 800b99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f000 f868 	bl	800ba78 <_lseek_r>
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9b2:	81a3      	strh	r3, [r4, #12]
 800b9b4:	4632      	mov	r2, r6
 800b9b6:	463b      	mov	r3, r7
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9be:	f000 b817 	b.w	800b9f0 <_write_r>

0800b9c2 <__sseek>:
 800b9c2:	b510      	push	{r4, lr}
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ca:	f000 f855 	bl	800ba78 <_lseek_r>
 800b9ce:	1c43      	adds	r3, r0, #1
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	bf15      	itete	ne
 800b9d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9de:	81a3      	strheq	r3, [r4, #12]
 800b9e0:	bf18      	it	ne
 800b9e2:	81a3      	strhne	r3, [r4, #12]
 800b9e4:	bd10      	pop	{r4, pc}

0800b9e6 <__sclose>:
 800b9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ea:	f000 b813 	b.w	800ba14 <_close_r>
	...

0800b9f0 <_write_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4d07      	ldr	r5, [pc, #28]	; (800ba10 <_write_r+0x20>)
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	4608      	mov	r0, r1
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	602a      	str	r2, [r5, #0]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f7f6 fef3 	bl	80027ea <_write>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d102      	bne.n	800ba0e <_write_r+0x1e>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	b103      	cbz	r3, 800ba0e <_write_r+0x1e>
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	20001ed0 	.word	0x20001ed0

0800ba14 <_close_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d06      	ldr	r5, [pc, #24]	; (800ba30 <_close_r+0x1c>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	602b      	str	r3, [r5, #0]
 800ba20:	f7f6 feff 	bl	8002822 <_close>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d102      	bne.n	800ba2e <_close_r+0x1a>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	b103      	cbz	r3, 800ba2e <_close_r+0x1a>
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	20001ed0 	.word	0x20001ed0

0800ba34 <_fstat_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4d07      	ldr	r5, [pc, #28]	; (800ba54 <_fstat_r+0x20>)
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	4611      	mov	r1, r2
 800ba40:	602b      	str	r3, [r5, #0]
 800ba42:	f7f6 fefa 	bl	800283a <_fstat>
 800ba46:	1c43      	adds	r3, r0, #1
 800ba48:	d102      	bne.n	800ba50 <_fstat_r+0x1c>
 800ba4a:	682b      	ldr	r3, [r5, #0]
 800ba4c:	b103      	cbz	r3, 800ba50 <_fstat_r+0x1c>
 800ba4e:	6023      	str	r3, [r4, #0]
 800ba50:	bd38      	pop	{r3, r4, r5, pc}
 800ba52:	bf00      	nop
 800ba54:	20001ed0 	.word	0x20001ed0

0800ba58 <_isatty_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d06      	ldr	r5, [pc, #24]	; (800ba74 <_isatty_r+0x1c>)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	602b      	str	r3, [r5, #0]
 800ba64:	f7f6 fef9 	bl	800285a <_isatty>
 800ba68:	1c43      	adds	r3, r0, #1
 800ba6a:	d102      	bne.n	800ba72 <_isatty_r+0x1a>
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	b103      	cbz	r3, 800ba72 <_isatty_r+0x1a>
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	20001ed0 	.word	0x20001ed0

0800ba78 <_lseek_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4d07      	ldr	r5, [pc, #28]	; (800ba98 <_lseek_r+0x20>)
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	4608      	mov	r0, r1
 800ba80:	4611      	mov	r1, r2
 800ba82:	2200      	movs	r2, #0
 800ba84:	602a      	str	r2, [r5, #0]
 800ba86:	461a      	mov	r2, r3
 800ba88:	f7f6 fef2 	bl	8002870 <_lseek>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d102      	bne.n	800ba96 <_lseek_r+0x1e>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	b103      	cbz	r3, 800ba96 <_lseek_r+0x1e>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
 800ba98:	20001ed0 	.word	0x20001ed0

0800ba9c <_read_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4d07      	ldr	r5, [pc, #28]	; (800babc <_read_r+0x20>)
 800baa0:	4604      	mov	r4, r0
 800baa2:	4608      	mov	r0, r1
 800baa4:	4611      	mov	r1, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	f7f6 fe80 	bl	80027b0 <_read>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_read_r+0x1e>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_read_r+0x1e>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20001ed0 	.word	0x20001ed0

0800bac0 <atan2>:
 800bac0:	f000 b802 	b.w	800bac8 <__ieee754_atan2>
 800bac4:	0000      	movs	r0, r0
	...

0800bac8 <__ieee754_atan2>:
 800bac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bacc:	ec57 6b11 	vmov	r6, r7, d1
 800bad0:	4273      	negs	r3, r6
 800bad2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bc58 <__ieee754_atan2+0x190>
 800bad6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bada:	4333      	orrs	r3, r6
 800badc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bae0:	4573      	cmp	r3, lr
 800bae2:	ec51 0b10 	vmov	r0, r1, d0
 800bae6:	ee11 8a10 	vmov	r8, s2
 800baea:	d80a      	bhi.n	800bb02 <__ieee754_atan2+0x3a>
 800baec:	4244      	negs	r4, r0
 800baee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800baf2:	4304      	orrs	r4, r0
 800baf4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800baf8:	4574      	cmp	r4, lr
 800bafa:	ee10 9a10 	vmov	r9, s0
 800bafe:	468c      	mov	ip, r1
 800bb00:	d907      	bls.n	800bb12 <__ieee754_atan2+0x4a>
 800bb02:	4632      	mov	r2, r6
 800bb04:	463b      	mov	r3, r7
 800bb06:	f7f4 fbc9 	bl	800029c <__adddf3>
 800bb0a:	ec41 0b10 	vmov	d0, r0, r1
 800bb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb12:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bb16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb1a:	4334      	orrs	r4, r6
 800bb1c:	d103      	bne.n	800bb26 <__ieee754_atan2+0x5e>
 800bb1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb22:	f000 b89d 	b.w	800bc60 <atan>
 800bb26:	17bc      	asrs	r4, r7, #30
 800bb28:	f004 0402 	and.w	r4, r4, #2
 800bb2c:	ea53 0909 	orrs.w	r9, r3, r9
 800bb30:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bb34:	d107      	bne.n	800bb46 <__ieee754_atan2+0x7e>
 800bb36:	2c02      	cmp	r4, #2
 800bb38:	d060      	beq.n	800bbfc <__ieee754_atan2+0x134>
 800bb3a:	2c03      	cmp	r4, #3
 800bb3c:	d1e5      	bne.n	800bb0a <__ieee754_atan2+0x42>
 800bb3e:	a142      	add	r1, pc, #264	; (adr r1, 800bc48 <__ieee754_atan2+0x180>)
 800bb40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb44:	e7e1      	b.n	800bb0a <__ieee754_atan2+0x42>
 800bb46:	ea52 0808 	orrs.w	r8, r2, r8
 800bb4a:	d106      	bne.n	800bb5a <__ieee754_atan2+0x92>
 800bb4c:	f1bc 0f00 	cmp.w	ip, #0
 800bb50:	da5f      	bge.n	800bc12 <__ieee754_atan2+0x14a>
 800bb52:	a13f      	add	r1, pc, #252	; (adr r1, 800bc50 <__ieee754_atan2+0x188>)
 800bb54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb58:	e7d7      	b.n	800bb0a <__ieee754_atan2+0x42>
 800bb5a:	4572      	cmp	r2, lr
 800bb5c:	d10f      	bne.n	800bb7e <__ieee754_atan2+0xb6>
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb64:	d107      	bne.n	800bb76 <__ieee754_atan2+0xae>
 800bb66:	2c02      	cmp	r4, #2
 800bb68:	d84c      	bhi.n	800bc04 <__ieee754_atan2+0x13c>
 800bb6a:	4b35      	ldr	r3, [pc, #212]	; (800bc40 <__ieee754_atan2+0x178>)
 800bb6c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bb70:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bb74:	e7c9      	b.n	800bb0a <__ieee754_atan2+0x42>
 800bb76:	2c02      	cmp	r4, #2
 800bb78:	d848      	bhi.n	800bc0c <__ieee754_atan2+0x144>
 800bb7a:	4b32      	ldr	r3, [pc, #200]	; (800bc44 <__ieee754_atan2+0x17c>)
 800bb7c:	e7f6      	b.n	800bb6c <__ieee754_atan2+0xa4>
 800bb7e:	4573      	cmp	r3, lr
 800bb80:	d0e4      	beq.n	800bb4c <__ieee754_atan2+0x84>
 800bb82:	1a9b      	subs	r3, r3, r2
 800bb84:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bb88:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bb8c:	da1e      	bge.n	800bbcc <__ieee754_atan2+0x104>
 800bb8e:	2f00      	cmp	r7, #0
 800bb90:	da01      	bge.n	800bb96 <__ieee754_atan2+0xce>
 800bb92:	323c      	adds	r2, #60	; 0x3c
 800bb94:	db1e      	blt.n	800bbd4 <__ieee754_atan2+0x10c>
 800bb96:	4632      	mov	r2, r6
 800bb98:	463b      	mov	r3, r7
 800bb9a:	f7f4 fe5f 	bl	800085c <__aeabi_ddiv>
 800bb9e:	ec41 0b10 	vmov	d0, r0, r1
 800bba2:	f000 f9fd 	bl	800bfa0 <fabs>
 800bba6:	f000 f85b 	bl	800bc60 <atan>
 800bbaa:	ec51 0b10 	vmov	r0, r1, d0
 800bbae:	2c01      	cmp	r4, #1
 800bbb0:	d013      	beq.n	800bbda <__ieee754_atan2+0x112>
 800bbb2:	2c02      	cmp	r4, #2
 800bbb4:	d015      	beq.n	800bbe2 <__ieee754_atan2+0x11a>
 800bbb6:	2c00      	cmp	r4, #0
 800bbb8:	d0a7      	beq.n	800bb0a <__ieee754_atan2+0x42>
 800bbba:	a319      	add	r3, pc, #100	; (adr r3, 800bc20 <__ieee754_atan2+0x158>)
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	f7f4 fb6a 	bl	8000298 <__aeabi_dsub>
 800bbc4:	a318      	add	r3, pc, #96	; (adr r3, 800bc28 <__ieee754_atan2+0x160>)
 800bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbca:	e014      	b.n	800bbf6 <__ieee754_atan2+0x12e>
 800bbcc:	a118      	add	r1, pc, #96	; (adr r1, 800bc30 <__ieee754_atan2+0x168>)
 800bbce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbd2:	e7ec      	b.n	800bbae <__ieee754_atan2+0xe6>
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	e7e9      	b.n	800bbae <__ieee754_atan2+0xe6>
 800bbda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbde:	4619      	mov	r1, r3
 800bbe0:	e793      	b.n	800bb0a <__ieee754_atan2+0x42>
 800bbe2:	a30f      	add	r3, pc, #60	; (adr r3, 800bc20 <__ieee754_atan2+0x158>)
 800bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe8:	f7f4 fb56 	bl	8000298 <__aeabi_dsub>
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	a10d      	add	r1, pc, #52	; (adr r1, 800bc28 <__ieee754_atan2+0x160>)
 800bbf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbf6:	f7f4 fb4f 	bl	8000298 <__aeabi_dsub>
 800bbfa:	e786      	b.n	800bb0a <__ieee754_atan2+0x42>
 800bbfc:	a10a      	add	r1, pc, #40	; (adr r1, 800bc28 <__ieee754_atan2+0x160>)
 800bbfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc02:	e782      	b.n	800bb0a <__ieee754_atan2+0x42>
 800bc04:	a10c      	add	r1, pc, #48	; (adr r1, 800bc38 <__ieee754_atan2+0x170>)
 800bc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc0a:	e77e      	b.n	800bb0a <__ieee754_atan2+0x42>
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	2100      	movs	r1, #0
 800bc10:	e77b      	b.n	800bb0a <__ieee754_atan2+0x42>
 800bc12:	a107      	add	r1, pc, #28	; (adr r1, 800bc30 <__ieee754_atan2+0x168>)
 800bc14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc18:	e777      	b.n	800bb0a <__ieee754_atan2+0x42>
 800bc1a:	bf00      	nop
 800bc1c:	f3af 8000 	nop.w
 800bc20:	33145c07 	.word	0x33145c07
 800bc24:	3ca1a626 	.word	0x3ca1a626
 800bc28:	54442d18 	.word	0x54442d18
 800bc2c:	400921fb 	.word	0x400921fb
 800bc30:	54442d18 	.word	0x54442d18
 800bc34:	3ff921fb 	.word	0x3ff921fb
 800bc38:	54442d18 	.word	0x54442d18
 800bc3c:	3fe921fb 	.word	0x3fe921fb
 800bc40:	0800c708 	.word	0x0800c708
 800bc44:	0800c720 	.word	0x0800c720
 800bc48:	54442d18 	.word	0x54442d18
 800bc4c:	c00921fb 	.word	0xc00921fb
 800bc50:	54442d18 	.word	0x54442d18
 800bc54:	bff921fb 	.word	0xbff921fb
 800bc58:	7ff00000 	.word	0x7ff00000
 800bc5c:	00000000 	.word	0x00000000

0800bc60 <atan>:
 800bc60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	ec55 4b10 	vmov	r4, r5, d0
 800bc68:	4bc3      	ldr	r3, [pc, #780]	; (800bf78 <atan+0x318>)
 800bc6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc6e:	429e      	cmp	r6, r3
 800bc70:	46ab      	mov	fp, r5
 800bc72:	dd18      	ble.n	800bca6 <atan+0x46>
 800bc74:	4bc1      	ldr	r3, [pc, #772]	; (800bf7c <atan+0x31c>)
 800bc76:	429e      	cmp	r6, r3
 800bc78:	dc01      	bgt.n	800bc7e <atan+0x1e>
 800bc7a:	d109      	bne.n	800bc90 <atan+0x30>
 800bc7c:	b144      	cbz	r4, 800bc90 <atan+0x30>
 800bc7e:	4622      	mov	r2, r4
 800bc80:	462b      	mov	r3, r5
 800bc82:	4620      	mov	r0, r4
 800bc84:	4629      	mov	r1, r5
 800bc86:	f7f4 fb09 	bl	800029c <__adddf3>
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	460d      	mov	r5, r1
 800bc8e:	e006      	b.n	800bc9e <atan+0x3e>
 800bc90:	f1bb 0f00 	cmp.w	fp, #0
 800bc94:	f300 8131 	bgt.w	800befa <atan+0x29a>
 800bc98:	a59b      	add	r5, pc, #620	; (adr r5, 800bf08 <atan+0x2a8>)
 800bc9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc9e:	ec45 4b10 	vmov	d0, r4, r5
 800bca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca6:	4bb6      	ldr	r3, [pc, #728]	; (800bf80 <atan+0x320>)
 800bca8:	429e      	cmp	r6, r3
 800bcaa:	dc14      	bgt.n	800bcd6 <atan+0x76>
 800bcac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bcb0:	429e      	cmp	r6, r3
 800bcb2:	dc0d      	bgt.n	800bcd0 <atan+0x70>
 800bcb4:	a396      	add	r3, pc, #600	; (adr r3, 800bf10 <atan+0x2b0>)
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	ee10 0a10 	vmov	r0, s0
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	f7f4 faec 	bl	800029c <__adddf3>
 800bcc4:	4baf      	ldr	r3, [pc, #700]	; (800bf84 <atan+0x324>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f7f4 ff2e 	bl	8000b28 <__aeabi_dcmpgt>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d1e6      	bne.n	800bc9e <atan+0x3e>
 800bcd0:	f04f 3aff 	mov.w	sl, #4294967295
 800bcd4:	e02b      	b.n	800bd2e <atan+0xce>
 800bcd6:	f000 f963 	bl	800bfa0 <fabs>
 800bcda:	4bab      	ldr	r3, [pc, #684]	; (800bf88 <atan+0x328>)
 800bcdc:	429e      	cmp	r6, r3
 800bcde:	ec55 4b10 	vmov	r4, r5, d0
 800bce2:	f300 80bf 	bgt.w	800be64 <atan+0x204>
 800bce6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bcea:	429e      	cmp	r6, r3
 800bcec:	f300 80a0 	bgt.w	800be30 <atan+0x1d0>
 800bcf0:	ee10 2a10 	vmov	r2, s0
 800bcf4:	ee10 0a10 	vmov	r0, s0
 800bcf8:	462b      	mov	r3, r5
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	f7f4 face 	bl	800029c <__adddf3>
 800bd00:	4ba0      	ldr	r3, [pc, #640]	; (800bf84 <atan+0x324>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	f7f4 fac8 	bl	8000298 <__aeabi_dsub>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	460f      	mov	r7, r1
 800bd0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd12:	4620      	mov	r0, r4
 800bd14:	4629      	mov	r1, r5
 800bd16:	f7f4 fac1 	bl	800029c <__adddf3>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	4630      	mov	r0, r6
 800bd20:	4639      	mov	r1, r7
 800bd22:	f7f4 fd9b 	bl	800085c <__aeabi_ddiv>
 800bd26:	f04f 0a00 	mov.w	sl, #0
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	460d      	mov	r5, r1
 800bd2e:	4622      	mov	r2, r4
 800bd30:	462b      	mov	r3, r5
 800bd32:	4620      	mov	r0, r4
 800bd34:	4629      	mov	r1, r5
 800bd36:	f7f4 fc67 	bl	8000608 <__aeabi_dmul>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	4680      	mov	r8, r0
 800bd40:	4689      	mov	r9, r1
 800bd42:	f7f4 fc61 	bl	8000608 <__aeabi_dmul>
 800bd46:	a374      	add	r3, pc, #464	; (adr r3, 800bf18 <atan+0x2b8>)
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	460f      	mov	r7, r1
 800bd50:	f7f4 fc5a 	bl	8000608 <__aeabi_dmul>
 800bd54:	a372      	add	r3, pc, #456	; (adr r3, 800bf20 <atan+0x2c0>)
 800bd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5a:	f7f4 fa9f 	bl	800029c <__adddf3>
 800bd5e:	4632      	mov	r2, r6
 800bd60:	463b      	mov	r3, r7
 800bd62:	f7f4 fc51 	bl	8000608 <__aeabi_dmul>
 800bd66:	a370      	add	r3, pc, #448	; (adr r3, 800bf28 <atan+0x2c8>)
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	f7f4 fa96 	bl	800029c <__adddf3>
 800bd70:	4632      	mov	r2, r6
 800bd72:	463b      	mov	r3, r7
 800bd74:	f7f4 fc48 	bl	8000608 <__aeabi_dmul>
 800bd78:	a36d      	add	r3, pc, #436	; (adr r3, 800bf30 <atan+0x2d0>)
 800bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7e:	f7f4 fa8d 	bl	800029c <__adddf3>
 800bd82:	4632      	mov	r2, r6
 800bd84:	463b      	mov	r3, r7
 800bd86:	f7f4 fc3f 	bl	8000608 <__aeabi_dmul>
 800bd8a:	a36b      	add	r3, pc, #428	; (adr r3, 800bf38 <atan+0x2d8>)
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	f7f4 fa84 	bl	800029c <__adddf3>
 800bd94:	4632      	mov	r2, r6
 800bd96:	463b      	mov	r3, r7
 800bd98:	f7f4 fc36 	bl	8000608 <__aeabi_dmul>
 800bd9c:	a368      	add	r3, pc, #416	; (adr r3, 800bf40 <atan+0x2e0>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	f7f4 fa7b 	bl	800029c <__adddf3>
 800bda6:	4642      	mov	r2, r8
 800bda8:	464b      	mov	r3, r9
 800bdaa:	f7f4 fc2d 	bl	8000608 <__aeabi_dmul>
 800bdae:	a366      	add	r3, pc, #408	; (adr r3, 800bf48 <atan+0x2e8>)
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	4680      	mov	r8, r0
 800bdb6:	4689      	mov	r9, r1
 800bdb8:	4630      	mov	r0, r6
 800bdba:	4639      	mov	r1, r7
 800bdbc:	f7f4 fc24 	bl	8000608 <__aeabi_dmul>
 800bdc0:	a363      	add	r3, pc, #396	; (adr r3, 800bf50 <atan+0x2f0>)
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f7f4 fa67 	bl	8000298 <__aeabi_dsub>
 800bdca:	4632      	mov	r2, r6
 800bdcc:	463b      	mov	r3, r7
 800bdce:	f7f4 fc1b 	bl	8000608 <__aeabi_dmul>
 800bdd2:	a361      	add	r3, pc, #388	; (adr r3, 800bf58 <atan+0x2f8>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fa5e 	bl	8000298 <__aeabi_dsub>
 800bddc:	4632      	mov	r2, r6
 800bdde:	463b      	mov	r3, r7
 800bde0:	f7f4 fc12 	bl	8000608 <__aeabi_dmul>
 800bde4:	a35e      	add	r3, pc, #376	; (adr r3, 800bf60 <atan+0x300>)
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	f7f4 fa55 	bl	8000298 <__aeabi_dsub>
 800bdee:	4632      	mov	r2, r6
 800bdf0:	463b      	mov	r3, r7
 800bdf2:	f7f4 fc09 	bl	8000608 <__aeabi_dmul>
 800bdf6:	a35c      	add	r3, pc, #368	; (adr r3, 800bf68 <atan+0x308>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f7f4 fa4c 	bl	8000298 <__aeabi_dsub>
 800be00:	4632      	mov	r2, r6
 800be02:	463b      	mov	r3, r7
 800be04:	f7f4 fc00 	bl	8000608 <__aeabi_dmul>
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4640      	mov	r0, r8
 800be0e:	4649      	mov	r1, r9
 800be10:	f7f4 fa44 	bl	800029c <__adddf3>
 800be14:	4622      	mov	r2, r4
 800be16:	462b      	mov	r3, r5
 800be18:	f7f4 fbf6 	bl	8000608 <__aeabi_dmul>
 800be1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	d14b      	bne.n	800bebe <atan+0x25e>
 800be26:	4620      	mov	r0, r4
 800be28:	4629      	mov	r1, r5
 800be2a:	f7f4 fa35 	bl	8000298 <__aeabi_dsub>
 800be2e:	e72c      	b.n	800bc8a <atan+0x2a>
 800be30:	ee10 0a10 	vmov	r0, s0
 800be34:	4b53      	ldr	r3, [pc, #332]	; (800bf84 <atan+0x324>)
 800be36:	2200      	movs	r2, #0
 800be38:	4629      	mov	r1, r5
 800be3a:	f7f4 fa2d 	bl	8000298 <__aeabi_dsub>
 800be3e:	4b51      	ldr	r3, [pc, #324]	; (800bf84 <atan+0x324>)
 800be40:	4606      	mov	r6, r0
 800be42:	460f      	mov	r7, r1
 800be44:	2200      	movs	r2, #0
 800be46:	4620      	mov	r0, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	f7f4 fa27 	bl	800029c <__adddf3>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	4630      	mov	r0, r6
 800be54:	4639      	mov	r1, r7
 800be56:	f7f4 fd01 	bl	800085c <__aeabi_ddiv>
 800be5a:	f04f 0a01 	mov.w	sl, #1
 800be5e:	4604      	mov	r4, r0
 800be60:	460d      	mov	r5, r1
 800be62:	e764      	b.n	800bd2e <atan+0xce>
 800be64:	4b49      	ldr	r3, [pc, #292]	; (800bf8c <atan+0x32c>)
 800be66:	429e      	cmp	r6, r3
 800be68:	da1d      	bge.n	800bea6 <atan+0x246>
 800be6a:	ee10 0a10 	vmov	r0, s0
 800be6e:	4b48      	ldr	r3, [pc, #288]	; (800bf90 <atan+0x330>)
 800be70:	2200      	movs	r2, #0
 800be72:	4629      	mov	r1, r5
 800be74:	f7f4 fa10 	bl	8000298 <__aeabi_dsub>
 800be78:	4b45      	ldr	r3, [pc, #276]	; (800bf90 <atan+0x330>)
 800be7a:	4606      	mov	r6, r0
 800be7c:	460f      	mov	r7, r1
 800be7e:	2200      	movs	r2, #0
 800be80:	4620      	mov	r0, r4
 800be82:	4629      	mov	r1, r5
 800be84:	f7f4 fbc0 	bl	8000608 <__aeabi_dmul>
 800be88:	4b3e      	ldr	r3, [pc, #248]	; (800bf84 <atan+0x324>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	f7f4 fa06 	bl	800029c <__adddf3>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	4630      	mov	r0, r6
 800be96:	4639      	mov	r1, r7
 800be98:	f7f4 fce0 	bl	800085c <__aeabi_ddiv>
 800be9c:	f04f 0a02 	mov.w	sl, #2
 800bea0:	4604      	mov	r4, r0
 800bea2:	460d      	mov	r5, r1
 800bea4:	e743      	b.n	800bd2e <atan+0xce>
 800bea6:	462b      	mov	r3, r5
 800bea8:	ee10 2a10 	vmov	r2, s0
 800beac:	4939      	ldr	r1, [pc, #228]	; (800bf94 <atan+0x334>)
 800beae:	2000      	movs	r0, #0
 800beb0:	f7f4 fcd4 	bl	800085c <__aeabi_ddiv>
 800beb4:	f04f 0a03 	mov.w	sl, #3
 800beb8:	4604      	mov	r4, r0
 800beba:	460d      	mov	r5, r1
 800bebc:	e737      	b.n	800bd2e <atan+0xce>
 800bebe:	4b36      	ldr	r3, [pc, #216]	; (800bf98 <atan+0x338>)
 800bec0:	4e36      	ldr	r6, [pc, #216]	; (800bf9c <atan+0x33c>)
 800bec2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bec6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800beca:	e9da 2300 	ldrd	r2, r3, [sl]
 800bece:	f7f4 f9e3 	bl	8000298 <__aeabi_dsub>
 800bed2:	4622      	mov	r2, r4
 800bed4:	462b      	mov	r3, r5
 800bed6:	f7f4 f9df 	bl	8000298 <__aeabi_dsub>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bee2:	f7f4 f9d9 	bl	8000298 <__aeabi_dsub>
 800bee6:	f1bb 0f00 	cmp.w	fp, #0
 800beea:	4604      	mov	r4, r0
 800beec:	460d      	mov	r5, r1
 800beee:	f6bf aed6 	bge.w	800bc9e <atan+0x3e>
 800bef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bef6:	461d      	mov	r5, r3
 800bef8:	e6d1      	b.n	800bc9e <atan+0x3e>
 800befa:	a51d      	add	r5, pc, #116	; (adr r5, 800bf70 <atan+0x310>)
 800befc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf00:	e6cd      	b.n	800bc9e <atan+0x3e>
 800bf02:	bf00      	nop
 800bf04:	f3af 8000 	nop.w
 800bf08:	54442d18 	.word	0x54442d18
 800bf0c:	bff921fb 	.word	0xbff921fb
 800bf10:	8800759c 	.word	0x8800759c
 800bf14:	7e37e43c 	.word	0x7e37e43c
 800bf18:	e322da11 	.word	0xe322da11
 800bf1c:	3f90ad3a 	.word	0x3f90ad3a
 800bf20:	24760deb 	.word	0x24760deb
 800bf24:	3fa97b4b 	.word	0x3fa97b4b
 800bf28:	a0d03d51 	.word	0xa0d03d51
 800bf2c:	3fb10d66 	.word	0x3fb10d66
 800bf30:	c54c206e 	.word	0xc54c206e
 800bf34:	3fb745cd 	.word	0x3fb745cd
 800bf38:	920083ff 	.word	0x920083ff
 800bf3c:	3fc24924 	.word	0x3fc24924
 800bf40:	5555550d 	.word	0x5555550d
 800bf44:	3fd55555 	.word	0x3fd55555
 800bf48:	2c6a6c2f 	.word	0x2c6a6c2f
 800bf4c:	bfa2b444 	.word	0xbfa2b444
 800bf50:	52defd9a 	.word	0x52defd9a
 800bf54:	3fadde2d 	.word	0x3fadde2d
 800bf58:	af749a6d 	.word	0xaf749a6d
 800bf5c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bf60:	fe231671 	.word	0xfe231671
 800bf64:	3fbc71c6 	.word	0x3fbc71c6
 800bf68:	9998ebc4 	.word	0x9998ebc4
 800bf6c:	3fc99999 	.word	0x3fc99999
 800bf70:	54442d18 	.word	0x54442d18
 800bf74:	3ff921fb 	.word	0x3ff921fb
 800bf78:	440fffff 	.word	0x440fffff
 800bf7c:	7ff00000 	.word	0x7ff00000
 800bf80:	3fdbffff 	.word	0x3fdbffff
 800bf84:	3ff00000 	.word	0x3ff00000
 800bf88:	3ff2ffff 	.word	0x3ff2ffff
 800bf8c:	40038000 	.word	0x40038000
 800bf90:	3ff80000 	.word	0x3ff80000
 800bf94:	bff00000 	.word	0xbff00000
 800bf98:	0800c758 	.word	0x0800c758
 800bf9c:	0800c738 	.word	0x0800c738

0800bfa0 <fabs>:
 800bfa0:	ec51 0b10 	vmov	r0, r1, d0
 800bfa4:	ee10 2a10 	vmov	r2, s0
 800bfa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfac:	ec43 2b10 	vmov	d0, r2, r3
 800bfb0:	4770      	bx	lr
	...

0800bfb4 <_init>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	bf00      	nop
 800bfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfba:	bc08      	pop	{r3}
 800bfbc:	469e      	mov	lr, r3
 800bfbe:	4770      	bx	lr

0800bfc0 <_fini>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr
