
scanline-fill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  080073a0  080073a0  000173a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b3c  08007b3c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b44  08007b44  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  200001dc  08007d28  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08007d28  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf3e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c0  00000000  00000000  0002c14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002e510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002ed88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001742d  00000000  00000000  0002f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b06a  00000000  00000000  000468ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000878a9  00000000  00000000  00051957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9200  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b4  00000000  00000000  000d9254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007384 	.word	0x08007384

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007384 	.word	0x08007384

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <Artist_ClearCanvas>:
#include "constants.h"

#include "cycle_counter.h"

void Artist_ClearCanvas(Canvas *canvas, const color_t color)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
	for(size_t iRow = 0; iRow < canvas->numRows; ++iRow)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	e01a      	b.n	8000ef8 <Artist_ClearCanvas+0x48>
	{
		for(size_t iCol = 0; iCol < canvas->numCols; ++iCol)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	e00f      	b.n	8000ee8 <Artist_ClearCanvas+0x38>
		{
			canvas->data[iRow * canvas->numCols + iCol] = color;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	68f9      	ldr	r1, [r7, #12]
 8000ed2:	fb01 f103 	mul.w	r1, r1, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	440b      	add	r3, r1
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	801a      	strh	r2, [r3, #0]
		for(size_t iCol = 0; iCol < canvas->numCols; ++iCol)
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3ea      	bcc.n	8000ec8 <Artist_ClearCanvas+0x18>
	for(size_t iRow = 0; iRow < canvas->numRows; ++iRow)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3df      	bcc.n	8000ec2 <Artist_ClearCanvas+0x12>
		}
	}
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <Artist_DrawText>:

void Artist_DrawText(Canvas *canvas, const char *txt, const Point pos, const color_t color)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	e881 000c 	stmia.w	r1, {r2, r3}
	Point currentPos = pos;
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	463a      	mov	r2, r7
 8000f26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f2a:	e883 0003 	stmia.w	r3, {r0, r1}
	for (const char *c = txt; *c != '\0'; ++c)
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e041      	b.n	8000fb8 <Artist_DrawText+0xa8>
	{
		// get character bytes from font array and write in data array
		for(uint8_t x = 0; x < FONT_WIDTH; ++x)
 8000f34:	2300      	movs	r3, #0
 8000f36:	76fb      	strb	r3, [r7, #27]
 8000f38:	e038      	b.n	8000fac <Artist_DrawText+0x9c>
		{
			currentPos.y = pos.y;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	617b      	str	r3, [r7, #20]
			uint8_t fontCol = font6x8[(*c - 32)*FONT_WIDTH + x];
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	f1a3 0220 	sub.w	r2, r3, #32
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	461a      	mov	r2, r3
 8000f50:	7efb      	ldrb	r3, [r7, #27]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a1e      	ldr	r2, [pc, #120]	; (8000fd0 <Artist_DrawText+0xc0>)
 8000f56:	5cd3      	ldrb	r3, [r2, r3]
 8000f58:	767b      	strb	r3, [r7, #25]
			for(uint8_t y = 0; y < FONT_HEIGHT; ++y)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	76bb      	strb	r3, [r7, #26]
 8000f5e:	e01c      	b.n	8000f9a <Artist_DrawText+0x8a>
			{
				if(fontCol & (1 << y))
 8000f60:	7e7a      	ldrb	r2, [r7, #25]
 8000f62:	7ebb      	ldrb	r3, [r7, #26]
 8000f64:	fa42 f303 	asr.w	r3, r2, r3
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00e      	beq.n	8000f8e <Artist_DrawText+0x7e>
				{
					canvas->data[currentPos.x + currentPos.y * canvas->numCols] = color;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4619      	mov	r1, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	fb03 f300 	mul.w	r3, r3, r0
 8000f84:	440b      	add	r3, r1
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f8c:	801a      	strh	r2, [r3, #0]
				}
				currentPos.y += 1;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
			for(uint8_t y = 0; y < FONT_HEIGHT; ++y)
 8000f94:	7ebb      	ldrb	r3, [r7, #26]
 8000f96:	3301      	adds	r3, #1
 8000f98:	76bb      	strb	r3, [r7, #26]
 8000f9a:	7ebb      	ldrb	r3, [r7, #26]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	d9df      	bls.n	8000f60 <Artist_DrawText+0x50>
			}
			currentPos.x += 1;
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
		for(uint8_t x = 0; x < FONT_WIDTH; ++x)
 8000fa6:	7efb      	ldrb	r3, [r7, #27]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	76fb      	strb	r3, [r7, #27]
 8000fac:	7efb      	ldrb	r3, [r7, #27]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d9c3      	bls.n	8000f3a <Artist_DrawText+0x2a>
	for (const char *c = txt; *c != '\0'; ++c)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1b9      	bne.n	8000f34 <Artist_DrawText+0x24>
		}
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	080074cc 	.word	0x080074cc

08000fd4 <Artist_FillPolygon>:

void Artist_FillPolygon(Canvas *canvas, Point *points, const size_t numPoints, const color_t color, uint32_t *benchmarkTimes)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	f5ad 5dc3 	sub.w	sp, sp, #6240	; 0x1860
 8000fda:	b081      	sub	sp, #4
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	f107 0418 	add.w	r4, r7, #24
 8000fe2:	3c0c      	subs	r4, #12
 8000fe4:	6020      	str	r0, [r4, #0]
 8000fe6:	f107 0018 	add.w	r0, r7, #24
 8000fea:	3810      	subs	r0, #16
 8000fec:	6001      	str	r1, [r0, #0]
 8000fee:	f107 0118 	add.w	r1, r7, #24
 8000ff2:	3914      	subs	r1, #20
 8000ff4:	600a      	str	r2, [r1, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	3b16      	subs	r3, #22
 8000ffe:	801a      	strh	r2, [r3, #0]
	//1. Sort points anti-clockwise
	uint32_t start_time = CycleCounter_GetValue();
 8001000:	f000 f9aa 	bl	8001358 <CycleCounter_GetValue>
 8001004:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001008:	6018      	str	r0, [r3, #0]

	Point_SortAntiClockwise(points, numPoints);
 800100a:	f107 0218 	add.w	r2, r7, #24
 800100e:	3a14      	subs	r2, #20
 8001010:	f107 0318 	add.w	r3, r7, #24
 8001014:	3b10      	subs	r3, #16
 8001016:	6811      	ldr	r1, [r2, #0]
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	f001 f9cd 	bl	80023b8 <Point_SortAntiClockwise>

	uint32_t end_time = CycleCounter_GetValue();
 800101e:	f000 f99b 	bl	8001358 <CycleCounter_GetValue>
 8001022:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8001026:	f103 031c 	add.w	r3, r3, #28
 800102a:	6018      	str	r0, [r3, #0]
	benchmarkTimes[BENCHMARK_SORT_POINTS] = end_time - start_time;
 800102c:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8001030:	f103 031c 	add.w	r3, r3, #28
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	1ad2      	subs	r2, r2, r3
 800103e:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 8001042:	f103 0308 	add.w	r3, r3, #8
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	601a      	str	r2, [r3, #0]

	//2. Find ymin and ymax for the polygon
	int32_t ymin = points[0].y, ymax = points[1].y;
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	3b10      	subs	r3, #16
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8001058:	f102 0214 	add.w	r2, r2, #20
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	f107 0318 	add.w	r3, r7, #24
 8001062:	3b10      	subs	r3, #16
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3308      	adds	r3, #8
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 800106e:	f102 0210 	add.w	r2, r2, #16
 8001072:	6013      	str	r3, [r2, #0]
	for(const Point *p = points + 1; p != (points + numPoints); ++p)
 8001074:	f107 0318 	add.w	r3, r7, #24
 8001078:	3b10      	subs	r3, #16
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3308      	adds	r3, #8
 800107e:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8001082:	f102 020c 	add.w	r2, r2, #12
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e03a      	b.n	8001100 <Artist_FillPolygon+0x12c>
	{
		if(p->y < ymin) ymin = p->y;
 800108a:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 800108e:	f103 030c 	add.w	r3, r3, #12
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 800109a:	f102 0214 	add.w	r2, r2, #20
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dd0a      	ble.n	80010ba <Artist_FillPolygon+0xe6>
 80010a4:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80010a8:	f103 030c 	add.w	r3, r3, #12
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80010b4:	f102 0214 	add.w	r2, r2, #20
 80010b8:	6013      	str	r3, [r2, #0]
		if(p->y > ymax) ymax = p->y;
 80010ba:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80010be:	f103 030c 	add.w	r3, r3, #12
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80010ca:	f102 0210 	add.w	r2, r2, #16
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	da0a      	bge.n	80010ea <Artist_FillPolygon+0x116>
 80010d4:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80010d8:	f103 030c 	add.w	r3, r3, #12
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80010e4:	f102 0210 	add.w	r2, r2, #16
 80010e8:	6013      	str	r3, [r2, #0]
	for(const Point *p = points + 1; p != (points + numPoints); ++p)
 80010ea:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80010ee:	f103 030c 	add.w	r3, r3, #12
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3308      	adds	r3, #8
 80010f6:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80010fa:	f102 020c 	add.w	r2, r2, #12
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	f107 0318 	add.w	r3, r7, #24
 8001104:	3b14      	subs	r3, #20
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	00da      	lsls	r2, r3, #3
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	3b10      	subs	r3, #16
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8001118:	f102 020c 	add.w	r2, r2, #12
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d1b3      	bne.n	800108a <Artist_FillPolygon+0xb6>
	}
	// Create required lists
	Edge table[SCANLINE_FILL_TABLE_SIZE] = {};
 8001122:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001126:	3b1c      	subs	r3, #28
 8001128:	4618      	mov	r0, r3
 800112a:	f44f 53af 	mov.w	r3, #5600	; 0x15e0
 800112e:	461a      	mov	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	f002 ff91 	bl	8004058 <memset>
	Edge edges[SCANLINE_FILL_EDGES_MAX_NUM] = {};
 8001136:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800113a:	3b0c      	subs	r3, #12
 800113c:	4618      	mov	r0, r3
 800113e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001142:	461a      	mov	r2, r3
 8001144:	2100      	movs	r1, #0
 8001146:	f002 ff87 	bl	8004058 <memset>
	Edge active = {}; // head of list of active edges
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	3b08      	subs	r3, #8
 8001150:	461a      	mov	r2, r3
 8001152:	2300      	movs	r3, #0
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	6053      	str	r3, [r2, #4]
 8001158:	6093      	str	r3, [r2, #8]
 800115a:	60d3      	str	r3, [r2, #12]
 800115c:	6113      	str	r3, [r2, #16]
 800115e:	6153      	str	r3, [r2, #20]
 8001160:	6193      	str	r3, [r2, #24]
	//3. Build edge table
	start_time = CycleCounter_GetValue();
 8001162:	f000 f8f9 	bl	8001358 <CycleCounter_GetValue>
 8001166:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 800116a:	6018      	str	r0, [r3, #0]

	ScanlineFill_BuildEdgeTable(table, SCANLINE_FILL_TABLE_SIZE, edges, SCANLINE_FILL_EDGES_MAX_NUM, points, numPoints);
 800116c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001170:	3a0c      	subs	r2, #12
 8001172:	f507 701e 	add.w	r0, r7, #632	; 0x278
 8001176:	381c      	subs	r0, #28
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	3b14      	subs	r3, #20
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	3b10      	subs	r3, #16
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2314      	movs	r3, #20
 800118e:	21c8      	movs	r1, #200	; 0xc8
 8001190:	f001 f9be 	bl	8002510 <ScanlineFill_BuildEdgeTable>

	end_time = CycleCounter_GetValue();
 8001194:	f000 f8e0 	bl	8001358 <CycleCounter_GetValue>
 8001198:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800119c:	f103 031c 	add.w	r3, r3, #28
 80011a0:	6018      	str	r0, [r3, #0]
	benchmarkTimes[BENCHMARK_BUILD_TABLE] = end_time - start_time;
 80011a2:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80011a6:	f103 0308 	add.w	r3, r3, #8
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3304      	adds	r3, #4
 80011ae:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80011b2:	f102 021c 	add.w	r2, r2, #28
 80011b6:	6811      	ldr	r1, [r2, #0]
 80011b8:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80011bc:	6812      	ldr	r2, [r2, #0]
 80011be:	1a8a      	subs	r2, r1, r2
 80011c0:	601a      	str	r2, [r3, #0]

	//4. Iterate through each scanline, applying scanline fill
	start_time = CycleCounter_GetValue();
 80011c2:	f000 f8c9 	bl	8001358 <CycleCounter_GetValue>
 80011c6:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80011ca:	6018      	str	r0, [r3, #0]

	for(int32_t yScanline = ymin; yScanline <= ymax; ++yScanline)
 80011cc:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80011d0:	f103 0314 	add.w	r3, r3, #20
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80011da:	f102 0208 	add.w	r2, r2, #8
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	e04a      	b.n	8001278 <Artist_FillPolygon+0x2a4>
	{
		//4.1. Build list of active edges
		ScanlineFill_BuildActiveEdgeList(table, SCANLINE_FILL_TABLE_SIZE, &active, yScanline);
 80011e2:	f107 0218 	add.w	r2, r7, #24
 80011e6:	3a08      	subs	r2, #8
 80011e8:	f507 701e 	add.w	r0, r7, #632	; 0x278
 80011ec:	381c      	subs	r0, #28
 80011ee:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80011f2:	f103 0308 	add.w	r3, r3, #8
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	21c8      	movs	r1, #200	; 0xc8
 80011fa:	f001 f9f9 	bl	80025f0 <ScanlineFill_BuildActiveEdgeList>
		if(active.next)
 80011fe:	f107 0318 	add.w	r3, r7, #24
 8001202:	3b08      	subs	r3, #8
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d02b      	beq.n	8001262 <Artist_FillPolygon+0x28e>
		{
			//4.2. Fill the pixels inside the polygon on the given scanline
			ScanlineFill_FillScanline(&active, yScanline, canvas->data, canvas->numCols, canvas->numRows, color);
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	3b0c      	subs	r3, #12
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6819      	ldr	r1, [r3, #0]
 8001214:	f107 0318 	add.w	r3, r7, #24
 8001218:	3b0c      	subs	r3, #12
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689c      	ldr	r4, [r3, #8]
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	3b0c      	subs	r3, #12
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	f107 0018 	add.w	r0, r7, #24
 800122c:	3808      	subs	r0, #8
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	3b16      	subs	r3, #22
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	9200      	str	r2, [sp, #0]
 800123a:	4623      	mov	r3, r4
 800123c:	460a      	mov	r2, r1
 800123e:	f507 51c2 	add.w	r1, r7, #6208	; 0x1840
 8001242:	f101 0108 	add.w	r1, r1, #8
 8001246:	6809      	ldr	r1, [r1, #0]
 8001248:	f001 fa4a 	bl	80026e0 <ScanlineFill_FillScanline>
			//4.3. Update active edges list
			ScanlineFill_UpdateActiveEdgeList(&active, yScanline);
 800124c:	f107 0318 	add.w	r3, r7, #24
 8001250:	3b08      	subs	r3, #8
 8001252:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8001256:	f102 0208 	add.w	r2, r2, #8
 800125a:	6811      	ldr	r1, [r2, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f001 f9ea 	bl	8002636 <ScanlineFill_UpdateActiveEdgeList>
	for(int32_t yScanline = ymin; yScanline <= ymax; ++yScanline)
 8001262:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001266:	f103 0308 	add.w	r3, r3, #8
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8001272:	f102 0208 	add.w	r2, r2, #8
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 800127c:	f103 0308 	add.w	r3, r3, #8
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001286:	f103 0310 	add.w	r3, r3, #16
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	dda8      	ble.n	80011e2 <Artist_FillPolygon+0x20e>
		}
	}

	end_time = CycleCounter_GetValue();
 8001290:	f000 f862 	bl	8001358 <CycleCounter_GetValue>
 8001294:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8001298:	f103 031c 	add.w	r3, r3, #28
 800129c:	6018      	str	r0, [r3, #0]
	benchmarkTimes[BENCHMARK_PROCESS_SCANLINES] = end_time - start_time;
 800129e:	f507 53c3 	add.w	r3, r7, #6240	; 0x1860
 80012a2:	f103 0308 	add.w	r3, r3, #8
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3308      	adds	r3, #8
 80012aa:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80012ae:	f102 021c 	add.w	r2, r2, #28
 80012b2:	6811      	ldr	r1, [r2, #0]
 80012b4:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	1a8a      	subs	r2, r1, r2
 80012bc:	601a      	str	r2, [r3, #0]

	//5. Color polygon points
	for(const Point *p = points; p != (points + numPoints); ++p)
 80012be:	f107 0318 	add.w	r3, r7, #24
 80012c2:	3b10      	subs	r3, #16
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80012ca:	f102 0204 	add.w	r2, r2, #4
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e029      	b.n	8001326 <Artist_FillPolygon+0x352>
	{
		canvas->data[p->y * canvas->numCols + p->x] = YELLOW;
 80012d2:	f107 0318 	add.w	r3, r7, #24
 80012d6:	3b0c      	subs	r3, #12
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80012e0:	f103 0304 	add.w	r3, r3, #4
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	3b0c      	subs	r3, #12
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	fb03 f301 	mul.w	r3, r3, r1
 80012f8:	f507 51c2 	add.w	r1, r7, #6208	; 0x1840
 80012fc:	f101 0104 	add.w	r1, r1, #4
 8001300:	6809      	ldr	r1, [r1, #0]
 8001302:	6809      	ldr	r1, [r1, #0]
 8001304:	440b      	add	r3, r1
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800130e:	801a      	strh	r2, [r3, #0]
	for(const Point *p = points; p != (points + numPoints); ++p)
 8001310:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8001314:	f103 0304 	add.w	r3, r3, #4
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3308      	adds	r3, #8
 800131c:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8001320:	f102 0204 	add.w	r2, r2, #4
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	f107 0318 	add.w	r3, r7, #24
 800132a:	3b14      	subs	r3, #20
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	00da      	lsls	r2, r3, #3
 8001330:	f107 0318 	add.w	r3, r7, #24
 8001334:	3b10      	subs	r3, #16
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4413      	add	r3, r2
 800133a:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 800133e:	f102 0204 	add.w	r2, r2, #4
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d1c4      	bne.n	80012d2 <Artist_FillPolygon+0x2fe>
	}
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	f507 57c2 	add.w	r7, r7, #6208	; 0x1840
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
	...

08001358 <CycleCounter_GetValue>:
/**
 * @brief Get the current cycle counter value
 * @retval current cycle counter value
 */
inline uint32_t CycleCounter_GetValue(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	return DWT->CYCCNT;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <CycleCounter_GetValue+0x14>)
 800135e:	685b      	ldr	r3, [r3, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e0001000 	.word	0xe0001000

08001370 <CycleCounter_Init>:
 */

#include "cycle_counter.h"

void CycleCounter_Init(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <CycleCounter_Init+0x38>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <CycleCounter_Init+0x38>)
 800137a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800137e:	60d3      	str	r3, [r2, #12]
	ITM->LAR = 0xc5acce55;
 8001380:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001384:	4a09      	ldr	r2, [pc, #36]	; (80013ac <CycleCounter_Init+0x3c>)
 8001386:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	DWT->CYCCNT = 0;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <CycleCounter_Init+0x40>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <CycleCounter_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <CycleCounter_Init+0x40>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000edf0 	.word	0xe000edf0
 80013ac:	c5acce55 	.word	0xc5acce55
 80013b0:	e0001000 	.word	0xe0001000

080013b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <MX_GPIO_Init+0x124>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a41      	ldr	r2, [pc, #260]	; (80014d8 <MX_GPIO_Init+0x124>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <MX_GPIO_Init+0x124>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <MX_GPIO_Init+0x124>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a3a      	ldr	r2, [pc, #232]	; (80014d8 <MX_GPIO_Init+0x124>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <MX_GPIO_Init+0x124>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <MX_GPIO_Init+0x124>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <MX_GPIO_Init+0x124>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <MX_GPIO_Init+0x124>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <MX_GPIO_Init+0x124>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a2c      	ldr	r2, [pc, #176]	; (80014d8 <MX_GPIO_Init+0x124>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <MX_GPIO_Init+0x124>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	4826      	ldr	r0, [pc, #152]	; (80014dc <MX_GPIO_Init+0x128>)
 8001442:	f001 fef9 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2110      	movs	r1, #16
 800144a:	4825      	ldr	r0, [pc, #148]	; (80014e0 <MX_GPIO_Init+0x12c>)
 800144c:	f001 fef4 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BACKLIGHT_Pin|LCD_DC_Pin|LCD_RESET_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001456:	4823      	ldr	r0, [pc, #140]	; (80014e4 <MX_GPIO_Init+0x130>)
 8001458:	f001 feee 	bl	8003238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 800145c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4819      	ldr	r0, [pc, #100]	; (80014dc <MX_GPIO_Init+0x128>)
 8001476:	f001 fd5b 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800147a:	2310      	movs	r3, #16
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4813      	ldr	r0, [pc, #76]	; (80014e0 <MX_GPIO_Init+0x12c>)
 8001492:	f001 fd4d 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_GPIO_Init+0x130>)
 80014ae:	f001 fd3f 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RESET_Pin;
 80014b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_GPIO_Init+0x130>)
 80014cc:	f001 fd30 	bl	8002f30 <HAL_GPIO_Init>

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020800 	.word	0x40020800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020400 	.word	0x40020400

080014e8 <LCD_StartCom>:

// Private functions declarations

// helper functions
static inline void LCD_StartCom(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	// set CS low
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2110      	movs	r1, #16
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <LCD_StartCom+0x14>)
 80014f2:	f001 fea1 	bl	8003238 <HAL_GPIO_WritePin>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40020000 	.word	0x40020000

08001500 <LCD_StopCom>:

static inline void LCD_StopCom(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	// set CS high
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	2110      	movs	r1, #16
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <LCD_StopCom+0x14>)
 800150a:	f001 fe95 	bl	8003238 <HAL_GPIO_WritePin>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40020000 	.word	0x40020000

08001518 <LCD_SetDataWrite>:

static inline void LCD_SetDataWrite(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	// set DC pin high (data)
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001522:	4802      	ldr	r0, [pc, #8]	; (800152c <LCD_SetDataWrite+0x14>)
 8001524:	f001 fe88 	bl	8003238 <HAL_GPIO_WritePin>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40020400 	.word	0x40020400

08001530 <LCD_SetCmdWrite>:

static inline void LCD_SetCmdWrite(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	// set DC pin low (command)
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153a:	4802      	ldr	r0, [pc, #8]	; (8001544 <LCD_SetCmdWrite+0x14>)
 800153c:	f001 fe7c 	bl	8003238 <HAL_GPIO_WritePin>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40020400 	.word	0x40020400

08001548 <LCD_Reset>:
 */
static void LCD_PrepareGRAMWrite(void);

// Private functions definitions
void LCD_Reset(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	// set reset pin low
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001552:	4808      	ldr	r0, [pc, #32]	; (8001574 <LCD_Reset+0x2c>)
 8001554:	f001 fe70 	bl	8003238 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001558:	2064      	movs	r0, #100	; 0x64
 800155a:	f001 fbdf 	bl	8002d1c <HAL_Delay>
	// set reset pin high
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <LCD_Reset+0x2c>)
 8001566:	f001 fe67 	bl	8003238 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800156a:	2032      	movs	r0, #50	; 0x32
 800156c:	f001 fbd6 	bl	8002d1c <HAL_Delay>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40020400 	.word	0x40020400

08001578 <LCD_WriteCmd>:

void LCD_WriteCmd(uint8_t cmd)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	LCD_StartCom();
 8001582:	f7ff ffb1 	bl	80014e8 <LCD_StartCom>
	LCD_SetCmdWrite();
 8001586:	f7ff ffd3 	bl	8001530 <LCD_SetCmdWrite>
	// send command via SPI
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800158a:	1df9      	adds	r1, r7, #7
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	2201      	movs	r2, #1
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <LCD_WriteCmd+0x2c>)
 8001594:	f002 fb21 	bl	8003bda <HAL_SPI_Transmit>
	LCD_StopCom();
 8001598:	f7ff ffb2 	bl	8001500 <LCD_StopCom>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000204 	.word	0x20000204

080015a8 <LCD_WriteData8>:

void LCD_WriteData8(uint8_t data)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	LCD_StartCom();
 80015b2:	f7ff ff99 	bl	80014e8 <LCD_StartCom>
	LCD_SetDataWrite();
 80015b6:	f7ff ffaf 	bl	8001518 <LCD_SetDataWrite>
	// send data via SPI
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80015ba:	1df9      	adds	r1, r7, #7
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
 80015c0:	2201      	movs	r2, #1
 80015c2:	4804      	ldr	r0, [pc, #16]	; (80015d4 <LCD_WriteData8+0x2c>)
 80015c4:	f002 fb09 	bl	8003bda <HAL_SPI_Transmit>
	LCD_StopCom();
 80015c8:	f7ff ff9a 	bl	8001500 <LCD_StopCom>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000204 	.word	0x20000204

080015d8 <LCD_WriteDataColor>:

void LCD_WriteDataColor(const color_t color)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
	// send red data
	LCD_WriteData8(((color >> 8) & 0xF8) | 0x8);
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	f023 030f 	bic.w	r3, r3, #15
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ffd5 	bl	80015a8 <LCD_WriteData8>
	// send green data
	LCD_WriteData8((color >> 3) & 0xFC);
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	08db      	lsrs	r3, r3, #3
 8001602:	b29b      	uxth	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f023 0303 	bic.w	r3, r3, #3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ffcb 	bl	80015a8 <LCD_WriteData8>
	// send blue data
	LCD_WriteData8((color << 3) | 0x8);
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	b25b      	sxtb	r3, r3
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	b25b      	sxtb	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ffc1 	bl	80015a8 <LCD_WriteData8>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <LCD_PrepareGRAMWrite>:

void LCD_PrepareGRAMWrite(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
	LCD_WriteCmd(0x2C);
 8001632:	202c      	movs	r0, #44	; 0x2c
 8001634:	f7ff ffa0 	bl	8001578 <LCD_WriteCmd>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <LCD_Init>:

// Public function definitions
void LCD_Init(Lcd *lcd)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	// reset the LCD
 	LCD_Reset();
 8001644:	f7ff ff80 	bl	8001548 <LCD_Reset>

 	// send initialization sequence
	LCD_WriteCmd(0XF7);
 8001648:	20f7      	movs	r0, #247	; 0xf7
 800164a:	f7ff ff95 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0xA9);
 800164e:	20a9      	movs	r0, #169	; 0xa9
 8001650:	f7ff ffaa 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x51);
 8001654:	2051      	movs	r0, #81	; 0x51
 8001656:	f7ff ffa7 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x2C);
 800165a:	202c      	movs	r0, #44	; 0x2c
 800165c:	f7ff ffa4 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x82);
 8001660:	2082      	movs	r0, #130	; 0x82
 8001662:	f7ff ffa1 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0xC0);
 8001666:	20c0      	movs	r0, #192	; 0xc0
 8001668:	f7ff ff86 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0x11);
 800166c:	2011      	movs	r0, #17
 800166e:	f7ff ff9b 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x09);
 8001672:	2009      	movs	r0, #9
 8001674:	f7ff ff98 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0xC1);
 8001678:	20c1      	movs	r0, #193	; 0xc1
 800167a:	f7ff ff7d 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0x41);
 800167e:	2041      	movs	r0, #65	; 0x41
 8001680:	f7ff ff92 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0XC5);
 8001684:	20c5      	movs	r0, #197	; 0xc5
 8001686:	f7ff ff77 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff ff8c 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 8001690:	200a      	movs	r0, #10
 8001692:	f7ff ff89 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x80);
 8001696:	2080      	movs	r0, #128	; 0x80
 8001698:	f7ff ff86 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0xB1);
 800169c:	20b1      	movs	r0, #177	; 0xb1
 800169e:	f7ff ff6b 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0xB0);
 80016a2:	20b0      	movs	r0, #176	; 0xb0
 80016a4:	f7ff ff80 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x11);
 80016a8:	2011      	movs	r0, #17
 80016aa:	f7ff ff7d 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0xB4);
 80016ae:	20b4      	movs	r0, #180	; 0xb4
 80016b0:	f7ff ff62 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0x02);
 80016b4:	2002      	movs	r0, #2
 80016b6:	f7ff ff77 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0xB6);
 80016ba:	20b6      	movs	r0, #182	; 0xb6
 80016bc:	f7ff ff5c 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0x02);
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7ff ff71 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x42);
 80016c6:	2042      	movs	r0, #66	; 0x42
 80016c8:	f7ff ff6e 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0xB7);
 80016cc:	20b7      	movs	r0, #183	; 0xb7
 80016ce:	f7ff ff53 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0xc6);
 80016d2:	20c6      	movs	r0, #198	; 0xc6
 80016d4:	f7ff ff68 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0xBE);
 80016d8:	20be      	movs	r0, #190	; 0xbe
 80016da:	f7ff ff4d 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff ff62 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x04);
 80016e4:	2004      	movs	r0, #4
 80016e6:	f7ff ff5f 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0xE9);
 80016ea:	20e9      	movs	r0, #233	; 0xe9
 80016ec:	f7ff ff44 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff ff59 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0x36);
 80016f6:	2036      	movs	r0, #54	; 0x36
 80016f8:	f7ff ff3e 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8((1<<3)|(0<<7)|(1<<6)|(1<<5));
 80016fc:	2068      	movs	r0, #104	; 0x68
 80016fe:	f7ff ff53 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0x3A);
 8001702:	203a      	movs	r0, #58	; 0x3a
 8001704:	f7ff ff38 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0x66);
 8001708:	2066      	movs	r0, #102	; 0x66
 800170a:	f7ff ff4d 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0xE0);
 800170e:	20e0      	movs	r0, #224	; 0xe0
 8001710:	f7ff ff32 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff ff47 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x07);
 800171a:	2007      	movs	r0, #7
 800171c:	f7ff ff44 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x10);
 8001720:	2010      	movs	r0, #16
 8001722:	f7ff ff41 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x09);
 8001726:	2009      	movs	r0, #9
 8001728:	f7ff ff3e 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x17);
 800172c:	2017      	movs	r0, #23
 800172e:	f7ff ff3b 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x0B);
 8001732:	200b      	movs	r0, #11
 8001734:	f7ff ff38 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x41);
 8001738:	2041      	movs	r0, #65	; 0x41
 800173a:	f7ff ff35 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x89);
 800173e:	2089      	movs	r0, #137	; 0x89
 8001740:	f7ff ff32 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x4B);
 8001744:	204b      	movs	r0, #75	; 0x4b
 8001746:	f7ff ff2f 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 800174a:	200a      	movs	r0, #10
 800174c:	f7ff ff2c 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x0C);
 8001750:	200c      	movs	r0, #12
 8001752:	f7ff ff29 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x0E);
 8001756:	200e      	movs	r0, #14
 8001758:	f7ff ff26 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x18);
 800175c:	2018      	movs	r0, #24
 800175e:	f7ff ff23 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x1B);
 8001762:	201b      	movs	r0, #27
 8001764:	f7ff ff20 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x0F);
 8001768:	200f      	movs	r0, #15
 800176a:	f7ff ff1d 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0XE1);
 800176e:	20e1      	movs	r0, #225	; 0xe1
 8001770:	f7ff ff02 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 8001774:	2000      	movs	r0, #0
 8001776:	f7ff ff17 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x17);
 800177a:	2017      	movs	r0, #23
 800177c:	f7ff ff14 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x1A);
 8001780:	201a      	movs	r0, #26
 8001782:	f7ff ff11 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x04);
 8001786:	2004      	movs	r0, #4
 8001788:	f7ff ff0e 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x0E);
 800178c:	200e      	movs	r0, #14
 800178e:	f7ff ff0b 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x06);
 8001792:	2006      	movs	r0, #6
 8001794:	f7ff ff08 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x2F);
 8001798:	202f      	movs	r0, #47	; 0x2f
 800179a:	f7ff ff05 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x45);
 800179e:	2045      	movs	r0, #69	; 0x45
 80017a0:	f7ff ff02 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x43);
 80017a4:	2043      	movs	r0, #67	; 0x43
 80017a6:	f7ff feff 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x02);
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7ff fefc 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f7ff fef9 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x09);
 80017b6:	2009      	movs	r0, #9
 80017b8:	f7ff fef6 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x32);
 80017bc:	2032      	movs	r0, #50	; 0x32
 80017be:	f7ff fef3 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x36);
 80017c2:	2036      	movs	r0, #54	; 0x36
 80017c4:	f7ff fef0 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(0x0F);
 80017c8:	200f      	movs	r0, #15
 80017ca:	f7ff feed 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteCmd(0x11);
 80017ce:	2011      	movs	r0, #17
 80017d0:	f7ff fed2 	bl	8001578 <LCD_WriteCmd>
	HAL_Delay(120);
 80017d4:	2078      	movs	r0, #120	; 0x78
 80017d6:	f001 faa1 	bl	8002d1c <HAL_Delay>
	LCD_WriteCmd(0x29);
 80017da:	2029      	movs	r0, #41	; 0x29
 80017dc:	f7ff fecc 	bl	8001578 <LCD_WriteCmd>

  	// set orientation
	LCD_SetOrientation(lcd, 0);
 80017e0:	2100      	movs	r1, #0
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f864 	bl	80018b0 <LCD_SetOrientation>

	// turn on backlight
	HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_Port, LCD_BACKLIGHT_Pin, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <LCD_Init+0x1d4>)
 80017ee:	f001 fd23 	bl	8003238 <HAL_GPIO_WritePin>

	// clear display with black color
	LCD_Clear(lcd, BLACK);
 80017f2:	2100      	movs	r1, #0
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f8ad 	bl	8001954 <LCD_Clear>

	// set cursor to (x, y)
	lcd->cursor.x = lcd->cursor.y = 0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	601a      	str	r2, [r3, #0]
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40020400 	.word	0x40020400

08001814 <LCD_SetArea>:
{
	LCD_SetArea(lcd, p, p);
}

void LCD_SetArea(Lcd *lcd, const Point *startPoint, const Point *endPoint)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
	LCD_WriteCmd(0x2A);
 8001820:	202a      	movs	r0, #42	; 0x2a
 8001822:	f7ff fea9 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(startPoint->x >> 8);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	121b      	asrs	r3, r3, #8
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff feba 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(startPoint->x & 0x00FF);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff feb4 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(endPoint->x >> 8);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	121b      	asrs	r3, r3, #8
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fead 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(endPoint->x & 0x00FF);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fea7 	bl	80015a8 <LCD_WriteData8>

	LCD_WriteCmd(0x2B);
 800185a:	202b      	movs	r0, #43	; 0x2b
 800185c:	f7ff fe8c 	bl	8001578 <LCD_WriteCmd>
	LCD_WriteData8(startPoint->y >> 8);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	121b      	asrs	r3, r3, #8
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fe9d 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(startPoint->y & 0x00FF);
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fe97 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(endPoint->y >> 8);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	121b      	asrs	r3, r3, #8
 8001880:	b2db      	uxtb	r3, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fe90 	bl	80015a8 <LCD_WriteData8>
	LCD_WriteData8(endPoint->y & 0x00FF);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe8a 	bl	80015a8 <LCD_WriteData8>

	lcd->cursor.x = startPoint->x;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	601a      	str	r2, [r3, #0]
	lcd->cursor.y = startPoint->y;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	605a      	str	r2, [r3, #4]

	LCD_PrepareGRAMWrite();
 80018a4:	f7ff fec3 	bl	800162e <LCD_PrepareGRAMWrite>
}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <LCD_SetOrientation>:

void LCD_SetOrientation(Lcd *lcd, const uint8_t rotation)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
	uint8_t memAccReg = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]
	switch(rotation){
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d836      	bhi.n	8001934 <LCD_SetOrientation+0x84>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <LCD_SetOrientation+0x1c>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	080018dd 	.word	0x080018dd
 80018d0:	080018f3 	.word	0x080018f3
 80018d4:	08001909 	.word	0x08001909
 80018d8:	0800191f 	.word	0x0800191f
		case 0:
			lcd->width = LCD_WIDTH;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018e2:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_HEIGHT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018ea:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (0 << 6) | (0 << 7);
 80018ec:	2308      	movs	r3, #8
 80018ee:	73fb      	strb	r3, [r7, #15]
		break;
 80018f0:	e021      	b.n	8001936 <LCD_SetOrientation+0x86>
		case 1:
			lcd->width = LCD_HEIGHT;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018f8:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_WIDTH;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001900:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (0 << 7) | (1 << 6) | (1 << 5);
 8001902:	2368      	movs	r3, #104	; 0x68
 8001904:	73fb      	strb	r3, [r7, #15]
		break;
 8001906:	e016      	b.n	8001936 <LCD_SetOrientation+0x86>
		case 2:
			lcd->width = LCD_WIDTH;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800190e:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_HEIGHT;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001916:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (1 << 6) | (1 << 7);
 8001918:	23c8      	movs	r3, #200	; 0xc8
 800191a:	73fb      	strb	r3, [r7, #15]
		break;
 800191c:	e00b      	b.n	8001936 <LCD_SetOrientation+0x86>
		case 3:
			lcd->width = LCD_HEIGHT;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001924:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_WIDTH;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800192c:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (1 << 7) | (1 << 5);
 800192e:	23a8      	movs	r3, #168	; 0xa8
 8001930:	73fb      	strb	r3, [r7, #15]
		break;
 8001932:	e000      	b.n	8001936 <LCD_SetOrientation+0x86>
		default:
		break;
 8001934:	bf00      	nop
	}
	if(memAccReg != 0)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <LCD_SetOrientation+0x9a>
	{
		LCD_WriteCmd(0x36);
 800193c:	2036      	movs	r0, #54	; 0x36
 800193e:	f7ff fe1b 	bl	8001578 <LCD_WriteCmd>
		LCD_WriteData8(memAccReg);
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe2f 	bl	80015a8 <LCD_WriteData8>
	}
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop

08001954 <LCD_Clear>:

void LCD_Clear(Lcd *lcd, const color_t color)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
	Point startPoint = {0, 0}, endPoint = {lcd->width - 1, lcd->height - 1};
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	891b      	ldrh	r3, [r3, #8]
 800196c:	3b01      	subs	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	895b      	ldrh	r3, [r3, #10]
 8001974:	3b01      	subs	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
	LCD_SetArea(lcd, &startPoint, &endPoint);
 8001978:	f107 020c 	add.w	r2, r7, #12
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ff46 	bl	8001814 <LCD_SetArea>

	LCD_StartCom();
 8001988:	f7ff fdae 	bl	80014e8 <LCD_StartCom>
	LCD_SetDataWrite();
 800198c:	f7ff fdc4 	bl	8001518 <LCD_SetDataWrite>

	for(uint16_t y = 0; y < lcd->height; ++y)
 8001990:	2300      	movs	r3, #0
 8001992:	83fb      	strh	r3, [r7, #30]
 8001994:	e011      	b.n	80019ba <LCD_Clear+0x66>
	{
		for(uint16_t x = 0; x < lcd->width; ++x)
 8001996:	2300      	movs	r3, #0
 8001998:	83bb      	strh	r3, [r7, #28]
 800199a:	e006      	b.n	80019aa <LCD_Clear+0x56>
		{
			LCD_WriteDataColor(color);
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fe1a 	bl	80015d8 <LCD_WriteDataColor>
		for(uint16_t x = 0; x < lcd->width; ++x)
 80019a4:	8bbb      	ldrh	r3, [r7, #28]
 80019a6:	3301      	adds	r3, #1
 80019a8:	83bb      	strh	r3, [r7, #28]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	891b      	ldrh	r3, [r3, #8]
 80019ae:	8bba      	ldrh	r2, [r7, #28]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d3f3      	bcc.n	800199c <LCD_Clear+0x48>
	for(uint16_t y = 0; y < lcd->height; ++y)
 80019b4:	8bfb      	ldrh	r3, [r7, #30]
 80019b6:	3301      	adds	r3, #1
 80019b8:	83fb      	strh	r3, [r7, #30]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	895b      	ldrh	r3, [r3, #10]
 80019be:	8bfa      	ldrh	r2, [r7, #30]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d3e8      	bcc.n	8001996 <LCD_Clear+0x42>
		}
	}

	LCD_StopCom();
 80019c4:	f7ff fd9c 	bl	8001500 <LCD_StopCom>
}
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <LCD_DrawArea>:
	LCD_SetCursor(lcd, p);
	LCD_WriteDataColor(color);
}

void LCD_DrawArea(Lcd *lcd, const color_t *data, const size_t numRows, const size_t numCols)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
	LCD_StartCom();
 80019de:	f7ff fd83 	bl	80014e8 <LCD_StartCom>
	LCD_SetDataWrite();
 80019e2:	f7ff fd99 	bl	8001518 <LCD_SetDataWrite>

	for(uint16_t y = 0; y < numRows; ++y)
 80019e6:	2300      	movs	r3, #0
 80019e8:	82fb      	strh	r3, [r7, #22]
 80019ea:	e019      	b.n	8001a20 <LCD_DrawArea+0x50>
	{
		for(uint16_t x = 0; x < numCols; ++x)
 80019ec:	2300      	movs	r3, #0
 80019ee:	82bb      	strh	r3, [r7, #20]
 80019f0:	e00f      	b.n	8001a12 <LCD_DrawArea+0x42>
		{
			LCD_WriteDataColor(data[x + y * numCols]);
 80019f2:	8aba      	ldrh	r2, [r7, #20]
 80019f4:	8afb      	ldrh	r3, [r7, #22]
 80019f6:	6839      	ldr	r1, [r7, #0]
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	4413      	add	r3, r2
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fde6 	bl	80015d8 <LCD_WriteDataColor>
		for(uint16_t x = 0; x < numCols; ++x)
 8001a0c:	8abb      	ldrh	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	82bb      	strh	r3, [r7, #20]
 8001a12:	8abb      	ldrh	r3, [r7, #20]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d8eb      	bhi.n	80019f2 <LCD_DrawArea+0x22>
	for(uint16_t y = 0; y < numRows; ++y)
 8001a1a:	8afb      	ldrh	r3, [r7, #22]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	82fb      	strh	r3, [r7, #22]
 8001a20:	8afb      	ldrh	r3, [r7, #22]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d8e1      	bhi.n	80019ec <LCD_DrawArea+0x1c>
		}
	}

	LCD_StopCom();
 8001a28:	f7ff fd6a 	bl	8001500 <LCD_StopCom>
}
 8001a2c:	bf00      	nop
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	f5ad 3da6 	sub.w	sp, sp, #84992	; 0x14c00
 8001a3a:	b0ee      	sub	sp, #440	; 0x1b8
 8001a3c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char buf[100] = {};
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001a44:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001a4e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a52:	2260      	movs	r2, #96	; 0x60
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fafe 	bl	8004058 <memset>
  Lcd lcd = {};
 8001a5c:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001a60:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
  color_t textBuf[FONT_HEIGHT][LCD_WIDTH] = {};
 8001a6c:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001a70:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001a74:	3b04      	subs	r3, #4
 8001a76:	4618      	mov	r0, r3
 8001a78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2100      	movs	r1, #0
 8001a80:	f002 faea 	bl	8004058 <memset>
  Canvas textCanvas = {
 8001a84:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001a88:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001a8c:	3b10      	subs	r3, #16
 8001a8e:	f507 329c 	add.w	r2, r7, #79872	; 0x13800
 8001a92:	f502 7298 	add.w	r2, r2, #304	; 0x130
 8001a96:	3a04      	subs	r2, #4
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001a9e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001aa2:	3b10      	subs	r3, #16
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001aac:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001ab0:	3b10      	subs	r3, #16
 8001ab2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ab6:	609a      	str	r2, [r3, #8]
		  .data = (color_t*)textBuf,
		  .numRows = FONT_HEIGHT,
		  .numCols = LCD_WIDTH
  };
  color_t polygonBuf[POLYGON_BUF_HEIGHT][POLYGON_BUF_WIDTH] = {};
 8001ab8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001abc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	4bdf      	ldr	r3, [pc, #892]	; (8001e40 <main+0x40c>)
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	f002 fac6 	bl	8004058 <memset>
  Canvas polygonCanvas = {
 8001acc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001ad0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ad4:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001ad8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001ae2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ae6:	22c8      	movs	r2, #200	; 0xc8
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001aee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001af2:	22c8      	movs	r2, #200	; 0xc8
 8001af4:	609a      	str	r2, [r3, #8]
		  .data = (color_t*)polygonBuf,
		  .numRows = POLYGON_BUF_HEIGHT,
		  .numCols = POLYGON_BUF_WIDTH
  };
  Point polygonPoints[] = {
 8001af6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001afa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001afe:	4ad1      	ldr	r2, [pc, #836]	; (8001e44 <main+0x410>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	4611      	mov	r1, r2
 8001b04:	2358      	movs	r3, #88	; 0x58
 8001b06:	461a      	mov	r2, r3
 8001b08:	f002 fa98 	bl	800403c <memcpy>
		  {120, 180},
		  {80, 120},
		  {40, 160},
		  {20, 100}
  };
  const size_t numPolygonPoints = sizeof(polygonPoints)/sizeof(polygonPoints[0]);
 8001b0c:	230b      	movs	r3, #11
 8001b0e:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001b12:	f502 72d4 	add.w	r2, r2, #424	; 0x1a8
 8001b16:	6013      	str	r3, [r2, #0]
  uint32_t benchmarkTimes[BENCHMARK_NUM_TIMES] = {};
 8001b18:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001b1c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b20:	461a      	mov	r2, r3
 8001b22:	2300      	movs	r3, #0
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	6053      	str	r3, [r2, #4]
 8001b28:	6093      	str	r3, [r2, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
  const char *benchmarkTimeStrings[BENCHMARK_NUM_TIMES] = {
 8001b2c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001b30:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b34:	4ac4      	ldr	r2, [pc, #784]	; (8001e48 <main+0x414>)
 8001b36:	461c      	mov	r4, r3
 8001b38:	4613      	mov	r3, r2
 8001b3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b40:	f001 f87a 	bl	8002c38 <HAL_Init>

  /* USER CODE BEGIN Init */
  CycleCounter_Init();
 8001b44:	f7ff fc14 	bl	8001370 <CycleCounter_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b48:	f000 faf0 	bl	800212c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4c:	f7ff fc32 	bl	80013b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b50:	f000 fea0 	bl	8002894 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&lcd);
 8001b54:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001b58:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fd6d 	bl	800163c <LCD_Init>

  // Draw header text
  strcpy(buf, "Scanline Fill Algorithm Benchmark");
 8001b62:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001b66:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001b6a:	4ab8      	ldr	r2, [pc, #736]	; (8001e4c <main+0x418>)
 8001b6c:	461c      	mov	r4, r3
 8001b6e:	4615      	mov	r5, r2
 8001b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	8023      	strh	r3, [r4, #0]
  Point bufPos = {0, 0}, screenStartPos = {0, 0}, screenEndPos = {LCD_WIDTH - 1, FONT_HEIGHT - 1};
 8001b7c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001b80:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001b8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001b98:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001ba4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001bb0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bb4:	4aa6      	ldr	r2, [pc, #664]	; (8001e50 <main+0x41c>)
 8001bb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bba:	e883 0003 	stmia.w	r3, {r0, r1}
  Artist_ClearCanvas(&textCanvas, BLACK);
 8001bbe:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001bc2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001bc6:	3b10      	subs	r3, #16
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f970 	bl	8000eb0 <Artist_ClearCanvas>
  Artist_DrawText(&textCanvas, buf, bufPos, GREEN);
 8001bd0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001bd4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bd8:	f507 31a6 	add.w	r1, r7, #84992	; 0x14c00
 8001bdc:	f501 719c 	add.w	r1, r1, #312	; 0x138
 8001be0:	f507 309c 	add.w	r0, r7, #79872	; 0x13800
 8001be4:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8001be8:	3810      	subs	r0, #16
 8001bea:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001bee:	9200      	str	r2, [sp, #0]
 8001bf0:	cb0c      	ldmia	r3, {r2, r3}
 8001bf2:	f7ff f98d 	bl	8000f10 <Artist_DrawText>
  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001bf6:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001bfa:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8001bfe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001c02:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001c06:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001c0a:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7ff fe00 	bl	8001814 <LCD_SetArea>
  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 8001c14:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001c18:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001c1c:	3b10      	subs	r3, #16
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001c24:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001c28:	3b10      	subs	r3, #16
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001c30:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001c34:	3b10      	subs	r3, #16
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001c3c:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 8001c40:	f7ff fec6 	bl	80019d0 <LCD_DrawArea>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8001c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c48:	4882      	ldr	r0, [pc, #520]	; (8001e54 <main+0x420>)
 8001c4a:	f001 fb0e 	bl	800326a <HAL_GPIO_TogglePin>

	  Artist_ClearCanvas(&polygonCanvas, BLACK);
 8001c4e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001c52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f929 	bl	8000eb0 <Artist_ClearCanvas>

	  uint32_t start_ticks = CycleCounter_GetValue();
 8001c5e:	f7ff fb7b 	bl	8001358 <CycleCounter_GetValue>
 8001c62:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001c66:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001c6a:	6018      	str	r0, [r3, #0]
	  Artist_FillPolygon(&polygonCanvas, polygonPoints, numPolygonPoints, BLUE, benchmarkTimes);
 8001c6c:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 8001c70:	f5a1 71ba 	sub.w	r1, r1, #372	; 0x174
 8001c74:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 8001c78:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8001c7c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001c80:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	231f      	movs	r3, #31
 8001c88:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001c8c:	f502 72d4 	add.w	r2, r2, #424	; 0x1a8
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	f7ff f99f 	bl	8000fd4 <Artist_FillPolygon>
	  uint32_t duration_ticks = CycleCounter_GetValue() - start_ticks;
 8001c96:	f7ff fb5f 	bl	8001358 <CycleCounter_GetValue>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001ca0:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001cac:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8001cb0:	6013      	str	r3, [r2, #0]
	  benchmarkTimes[BENCHMARK_TOTAL_TIME] = duration_ticks;
 8001cb2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001cb6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cba:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001cbe:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	60da      	str	r2, [r3, #12]
	  float execution_time = (float)(duration_ticks) / (SystemCoreClock/1000000);
 8001cc6:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001cca:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cd8:	4b5f      	ldr	r3, [pc, #380]	; (8001e58 <main+0x424>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a5f      	ldr	r2, [pc, #380]	; (8001e5c <main+0x428>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0c9b      	lsrs	r3, r3, #18
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf0:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001cf4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8001cf8:	edc3 7a00 	vstr	s15, [r3]

	  screenStartPos.x = 60; screenStartPos.y = 100;
 8001cfc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d00:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001d04:	223c      	movs	r2, #60	; 0x3c
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d0c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001d10:	2264      	movs	r2, #100	; 0x64
 8001d12:	605a      	str	r2, [r3, #4]
	  screenEndPos.x = screenStartPos.x + POLYGON_BUF_WIDTH - 1; screenEndPos.y = screenStartPos.y + POLYGON_BUF_HEIGHT - 1;
 8001d14:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d18:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f103 02c7 	add.w	r2, r3, #199	; 0xc7
 8001d22:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d30:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f103 02c7 	add.w	r2, r3, #199	; 0xc7
 8001d3a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d3e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d42:	605a      	str	r2, [r3, #4]
	  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001d44:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001d48:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8001d4c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d50:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001d54:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001d58:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7ff fd59 	bl	8001814 <LCD_SetArea>
	  LCD_DrawArea(&lcd, polygonCanvas.data, polygonCanvas.numRows, polygonCanvas.numCols);
 8001d62:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d6a:	6819      	ldr	r1, [r3, #0]
 8001d6c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001d7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001d84:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 8001d88:	f7ff fe22 	bl	80019d0 <LCD_DrawArea>

	  sprintf(buf, "Total execution ticks: %lu", duration_ticks);
 8001d8c:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001d90:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001d94:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001d98:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	4930      	ldr	r1, [pc, #192]	; (8001e60 <main+0x42c>)
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 ff55 	bl	8004c50 <siprintf>
	  bufPos.x = 0; bufPos.y = 0;
 8001da6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001daa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001db6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001dba:	2200      	movs	r2, #0
 8001dbc:	605a      	str	r2, [r3, #4]
	  screenStartPos.x = 0; screenStartPos.y = 3*LCD_HEIGHT/4;
 8001dbe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001dc2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001dce:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001dd2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001dd6:	605a      	str	r2, [r3, #4]
	  screenEndPos.x = screenStartPos.x + LCD_WIDTH - 1; screenEndPos.y = screenStartPos.y + FONT_HEIGHT - 1;
 8001dd8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001ddc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f203 123f 	addw	r2, r3, #319	; 0x13f
 8001de6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001dea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001df4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	1dda      	adds	r2, r3, #7
 8001dfc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001e00:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e04:	605a      	str	r2, [r3, #4]
	  Artist_ClearCanvas(&textCanvas, BLACK);
 8001e06:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001e0a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001e0e:	3b10      	subs	r3, #16
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f84c 	bl	8000eb0 <Artist_ClearCanvas>
	  Artist_DrawText(&textCanvas, buf, bufPos, RED);
 8001e18:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001e1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e20:	f507 31a6 	add.w	r1, r7, #84992	; 0x14c00
 8001e24:	f501 719c 	add.w	r1, r1, #312	; 0x138
 8001e28:	f507 309c 	add.w	r0, r7, #79872	; 0x13800
 8001e2c:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8001e30:	3810      	subs	r0, #16
 8001e32:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001e36:	9200      	str	r2, [sp, #0]
 8001e38:	cb0c      	ldmia	r3, {r2, r3}
 8001e3a:	f7ff f869 	bl	8000f10 <Artist_DrawText>
 8001e3e:	e011      	b.n	8001e64 <main+0x430>
 8001e40:	00013880 	.word	0x00013880
 8001e44:	0800745c 	.word	0x0800745c
 8001e48:	080074b4 	.word	0x080074b4
 8001e4c:	080073ec 	.word	0x080073ec
 8001e50:	080074c4 	.word	0x080074c4
 8001e54:	40020800 	.word	0x40020800
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	431bde83 	.word	0x431bde83
 8001e60:	08007410 	.word	0x08007410
	  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001e64:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001e68:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8001e6c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001e70:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001e74:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001e78:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7ff fcc9 	bl	8001814 <LCD_SetArea>
	  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 8001e82:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001e86:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001e8a:	3b10      	subs	r3, #16
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001e92:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001e96:	3b10      	subs	r3, #16
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001e9e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001ea2:	3b10      	subs	r3, #16
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001eaa:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 8001eae:	f7ff fd8f 	bl	80019d0 <LCD_DrawArea>

	  sprintf(buf, "Total execution time : %.3f us", execution_time);
 8001eb2:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001eb6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	f7fe fb4c 	bl	8000558 <__aeabi_f2d>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001ec8:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8001ecc:	4995      	ldr	r1, [pc, #596]	; (8002124 <main+0x6f0>)
 8001ece:	f002 febf 	bl	8004c50 <siprintf>
	  bufPos.x = 0; bufPos.y = 0;
 8001ed2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001ed6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001ee2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	605a      	str	r2, [r3, #4]
	  screenStartPos.x = 0; screenStartPos.y = 3*LCD_HEIGHT/4 + FONT_HEIGHT;
 8001eea:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001eee:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001efa:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001efe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8001f02:	605a      	str	r2, [r3, #4]
	  screenEndPos.x = screenStartPos.x + LCD_WIDTH - 1; screenEndPos.y = screenStartPos.y + FONT_HEIGHT - 1;
 8001f04:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f08:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f203 123f 	addw	r2, r3, #319	; 0x13f
 8001f12:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f16:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f20:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	1dda      	adds	r2, r3, #7
 8001f28:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f2c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f30:	605a      	str	r2, [r3, #4]
	  Artist_ClearCanvas(&textCanvas, BLACK);
 8001f32:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001f36:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001f3a:	3b10      	subs	r3, #16
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe ffb6 	bl	8000eb0 <Artist_ClearCanvas>
	  Artist_DrawText(&textCanvas, buf, bufPos, YELLOW);
 8001f44:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f48:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f4c:	f507 31a6 	add.w	r1, r7, #84992	; 0x14c00
 8001f50:	f501 719c 	add.w	r1, r1, #312	; 0x138
 8001f54:	f507 309c 	add.w	r0, r7, #79872	; 0x13800
 8001f58:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8001f5c:	3810      	subs	r0, #16
 8001f5e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001f62:	9200      	str	r2, [sp, #0]
 8001f64:	cb0c      	ldmia	r3, {r2, r3}
 8001f66:	f7fe ffd3 	bl	8000f10 <Artist_DrawText>
	  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001f6a:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001f6e:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8001f72:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001f76:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001f7a:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001f7e:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7ff fc46 	bl	8001814 <LCD_SetArea>
	  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 8001f88:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001f8c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001f90:	3b10      	subs	r3, #16
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001f98:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001f9c:	3b10      	subs	r3, #16
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001fa4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001fa8:	3b10      	subs	r3, #16
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001fb0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 8001fb4:	f7ff fd0c 	bl	80019d0 <LCD_DrawArea>

	  for(uint8_t iTime = 0; iTime < BENCHMARK_NUM_TIMES - 1; ++iTime)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001fbe:	f202 12af 	addw	r2, r2, #431	; 0x1af
 8001fc2:	7013      	strb	r3, [r2, #0]
 8001fc4:	e0a0      	b.n	8002108 <main+0x6d4>
	  {
		  sprintf(buf, "%s %lu ticks", benchmarkTimeStrings[iTime], benchmarkTimes[iTime]);
 8001fc6:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001fca:	f203 13af 	addw	r3, r3, #431	; 0x1af
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001fd4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fdc:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001fe0:	f203 13af 	addw	r3, r3, #431	; 0x1af
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001fea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff2:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001ff6:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8001ffa:	460a      	mov	r2, r1
 8001ffc:	494a      	ldr	r1, [pc, #296]	; (8002128 <main+0x6f4>)
 8001ffe:	f002 fe27 	bl	8004c50 <siprintf>
		  bufPos.x = 0; bufPos.y = 0;
 8002002:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002006:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002012:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
		  screenStartPos.x = 0; screenStartPos.y = 3*LCD_HEIGHT/4 + (iTime + 2)*FONT_HEIGHT;
 800201a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800201e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 800202a:	f203 13af 	addw	r3, r3, #431	; 0x1af
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	332f      	adds	r3, #47	; 0x2f
 8002032:	00da      	lsls	r2, r3, #3
 8002034:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002038:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800203c:	605a      	str	r2, [r3, #4]
		  screenEndPos.x = screenStartPos.x + LCD_WIDTH - 1; screenEndPos.y = screenStartPos.y + FONT_HEIGHT - 1;
 800203e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002042:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f203 123f 	addw	r2, r3, #319	; 0x13f
 800204c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002050:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800205a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	1dda      	adds	r2, r3, #7
 8002062:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002066:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800206a:	605a      	str	r2, [r3, #4]
		  Artist_ClearCanvas(&textCanvas, BLACK);
 800206c:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8002070:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002074:	3b10      	subs	r3, #16
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe ff19 	bl	8000eb0 <Artist_ClearCanvas>
		  Artist_DrawText(&textCanvas, buf, bufPos, MAGENTA);
 800207e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002082:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002086:	f507 31a6 	add.w	r1, r7, #84992	; 0x14c00
 800208a:	f501 719c 	add.w	r1, r1, #312	; 0x138
 800208e:	f507 309c 	add.w	r0, r7, #79872	; 0x13800
 8002092:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8002096:	3810      	subs	r0, #16
 8002098:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800209c:	9200      	str	r2, [sp, #0]
 800209e:	cb0c      	ldmia	r3, {r2, r3}
 80020a0:	f7fe ff36 	bl	8000f10 <Artist_DrawText>
		  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 80020a4:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80020a8:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 80020ac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80020b0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80020b4:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 80020b8:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 80020bc:	4619      	mov	r1, r3
 80020be:	f7ff fba9 	bl	8001814 <LCD_SetArea>
		  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 80020c2:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 80020c6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80020ca:	3b10      	subs	r3, #16
 80020cc:	6819      	ldr	r1, [r3, #0]
 80020ce:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 80020d2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80020d6:	3b10      	subs	r3, #16
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 80020de:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80020e2:	3b10      	subs	r3, #16
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 80020ea:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 80020ee:	f7ff fc6f 	bl	80019d0 <LCD_DrawArea>
	  for(uint8_t iTime = 0; iTime < BENCHMARK_NUM_TIMES - 1; ++iTime)
 80020f2:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 80020f6:	f203 13af 	addw	r3, r3, #431	; 0x1af
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8002102:	f202 12af 	addw	r2, r2, #431	; 0x1af
 8002106:	7013      	strb	r3, [r2, #0]
 8002108:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 800210c:	f203 13af 	addw	r3, r3, #431	; 0x1af
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b02      	cmp	r3, #2
 8002114:	f67f af57 	bls.w	8001fc6 <main+0x592>
	  }

	  HAL_Delay(1000);
 8002118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800211c:	f000 fdfe 	bl	8002d1c <HAL_Delay>
  {
 8002120:	e590      	b.n	8001c44 <main+0x210>
 8002122:	bf00      	nop
 8002124:	0800742c 	.word	0x0800742c
 8002128:	0800744c 	.word	0x0800744c

0800212c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b094      	sub	sp, #80	; 0x50
 8002130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002132:	f107 0320 	add.w	r3, r7, #32
 8002136:	2230      	movs	r2, #48	; 0x30
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f001 ff8c 	bl	8004058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <SystemClock_Config+0xc8>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4a26      	ldr	r2, [pc, #152]	; (80021f4 <SystemClock_Config+0xc8>)
 800215a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215e:	6413      	str	r3, [r2, #64]	; 0x40
 8002160:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <SystemClock_Config+0xc8>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <SystemClock_Config+0xcc>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <SystemClock_Config+0xcc>)
 8002176:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <SystemClock_Config+0xcc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002188:	2301      	movs	r3, #1
 800218a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800218c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002192:	2302      	movs	r3, #2
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002196:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800219c:	2319      	movs	r3, #25
 800219e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80021a0:	23c0      	movs	r3, #192	; 0xc0
 80021a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021a4:	2302      	movs	r3, #2
 80021a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021a8:	2304      	movs	r3, #4
 80021aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ac:	f107 0320 	add.w	r3, r7, #32
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 f875 	bl	80032a0 <HAL_RCC_OscConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021bc:	f000 f81e 	bl	80021fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c0:	230f      	movs	r3, #15
 80021c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c4:	2302      	movs	r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	2103      	movs	r1, #3
 80021dc:	4618      	mov	r0, r3
 80021de:	f001 fad7 	bl	8003790 <HAL_RCC_ClockConfig>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80021e8:	f000 f808 	bl	80021fc <Error_Handler>
  }
}
 80021ec:	bf00      	nop
 80021ee:	3750      	adds	r7, #80	; 0x50
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000

080021fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
}
 8002202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002204:	e7fe      	b.n	8002204 <Error_Handler+0x8>
	...

08002208 <PolarPointWithIndex_compare>:
	size_t index;
} PolarPointWithIndex;

// compare polar points based on angle and radius
static int PolarPointWithIndex_compare(const void *a, const void *b)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
	static const float eps = 1e-5f;
	const float angleDiff = ((PolarPointWithIndex*)a)->point.angle - ((PolarPointWithIndex*)b)->point.angle;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	ed93 7a01 	vldr	s14, [r3, #4]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	edd3 7a01 	vldr	s15, [r3, #4]
 800221e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002222:	edc7 7a03 	vstr	s15, [r7, #12]
	if (fabsf(angleDiff) < eps)
 8002226:	edd7 7a03 	vldr	s15, [r7, #12]
 800222a:	eeb0 7ae7 	vabs.f32	s14, s15
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <PolarPointWithIndex_compare+0x74>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	d50d      	bpl.n	800225a <PolarPointWithIndex_compare+0x52>
	{
		const uint32_t radiusDiff = ((PolarPointWithIndex*)a)->point.radiusSquared - ((PolarPointWithIndex*)b)->point.radiusSquared;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	60bb      	str	r3, [r7, #8]
		if (radiusDiff < 0)
		{
			return 1;
		}
		else if (radiusDiff > 0)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <PolarPointWithIndex_compare+0x4e>
		{
			return -1;
 8002250:	f04f 33ff 	mov.w	r3, #4294967295
 8002254:	e00c      	b.n	8002270 <PolarPointWithIndex_compare+0x68>
		}
		else
		{
			return 0;
 8002256:	2300      	movs	r3, #0
 8002258:	e00a      	b.n	8002270 <PolarPointWithIndex_compare+0x68>
		}
	}
	else if (angleDiff > 0)
 800225a:	edd7 7a03 	vldr	s15, [r7, #12]
 800225e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002266:	dd01      	ble.n	800226c <PolarPointWithIndex_compare+0x64>
	{
		return 1;
 8002268:	2301      	movs	r3, #1
 800226a:	e001      	b.n	8002270 <PolarPointWithIndex_compare+0x68>
	}
	else
	{
		return -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	0800770c 	.word	0x0800770c

08002280 <Point_CartesianToPolar>:
	}
	return 0.0f; // x, y = 0, 0
}

PointPolar Point_CartesianToPolar(const Point *point)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
	PointPolar polar = {};
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
	polar.radiusSquared = point->x * point->x + point->y * point->y;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	fb02 f203 	mul.w	r2, r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	6839      	ldr	r1, [r7, #0]
 80022a6:	6849      	ldr	r1, [r1, #4]
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
	polar.angle = atan2f(point->y, point->x);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	ee07 3a10 	vmov	s14, r3
 80022c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022c8:	eef0 0a47 	vmov.f32	s1, s14
 80022cc:	eeb0 0a67 	vmov.f32	s0, s15
 80022d0:	f004 feda 	bl	8007088 <atan2f>
 80022d4:	eef0 7a40 	vmov.f32	s15, s0
 80022d8:	edc7 7a03 	vstr	s15, [r7, #12]
	//polar.angle = Point_atan2(point->y, point->x);
	return polar;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	461a      	mov	r2, r3
 80022e0:	f107 0308 	add.w	r3, r7, #8
 80022e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022e8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <Point_FindMassCenter>:

Point Point_FindMassCenter(const Point *points, const size_t numPoints)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b08b      	sub	sp, #44	; 0x2c
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
	int32_t xSum = 0, ySum = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
	for(const Point *p = points; p != (points + numPoints); ++p)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	e00c      	b.n	8002328 <Point_FindMassCenter+0x34>
	{
		xSum += p->x;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	4413      	add	r3, r2
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
		ySum += p->y;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	6a3a      	ldr	r2, [r7, #32]
 800231e:	4413      	add	r3, r2
 8002320:	623b      	str	r3, [r7, #32]
	for(const Point *p = points; p != (points + numPoints); ++p)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3308      	adds	r3, #8
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	4413      	add	r3, r2
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	429a      	cmp	r2, r3
 8002334:	d1eb      	bne.n	800230e <Point_FindMassCenter+0x1a>
	}

	Point massCenter = {
			.x = xSum / numPoints,
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	fbb2 f3f3 	udiv	r3, r2, r3
	Point massCenter = {
 800233e:	617b      	str	r3, [r7, #20]
			.y = ySum / numPoints
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
	Point massCenter = {
 8002348:	61bb      	str	r3, [r7, #24]
	};

	return massCenter;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	461a      	mov	r2, r3
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002356:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	372c      	adds	r7, #44	; 0x2c
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <Point_MoveOrigin>:

void Point_MoveOrigin(Point *points, const size_t numPoints, const Point *origin)
{
 8002366:	b480      	push	{r7}
 8002368:	b087      	sub	sp, #28
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
	for(Point *p = points; p != (points + numPoints); ++p)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e010      	b.n	800239a <Point_MoveOrigin+0x34>
	{
		p->x -= origin->x;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1ad2      	subs	r2, r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	601a      	str	r2, [r3, #0]
		p->y -= origin->y;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	605a      	str	r2, [r3, #4]
	for(Point *p = points; p != (points + numPoints); ++p)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3308      	adds	r3, #8
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4413      	add	r3, r2
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d1e7      	bne.n	8002378 <Point_MoveOrigin+0x12>
	}
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <Point_SortAntiClockwise>:

void Point_SortAntiClockwise(Point *points, const size_t numPoints)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b0ed      	sub	sp, #436	; 0x1b4
 80023bc:	af00      	add	r7, sp, #0
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	6018      	str	r0, [r3, #0]
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	6019      	str	r1, [r3, #0]
	// Make a copy of the points
	Point pointsOriginal[POINT_MAX_NUM] = {};
 80023ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80023ce:	22a0      	movs	r2, #160	; 0xa0
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fe40 	bl	8004058 <memset>
	memcpy(pointsOriginal, points, numPoints*sizeof(points[0]));
 80023d8:	f107 0308 	add.w	r3, r7, #8
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	00da      	lsls	r2, r3, #3
 80023e0:	f107 030c 	add.w	r3, r7, #12
 80023e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80023e8:	6819      	ldr	r1, [r3, #0]
 80023ea:	f001 fe27 	bl	800403c <memcpy>
	// 1. Find mass center
	Point massCenter = Point_FindMassCenter(points, numPoints);
 80023ee:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80023f2:	f107 0208 	add.w	r2, r7, #8
 80023f6:	f107 030c 	add.w	r3, r7, #12
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	f7ff ff79 	bl	80022f4 <Point_FindMassCenter>
	// 2. Shift points origin to mass center
	Point_MoveOrigin(points, numPoints, &massCenter);
 8002402:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8002406:	f107 0108 	add.w	r1, r7, #8
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	6809      	ldr	r1, [r1, #0]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	f7ff ffa8 	bl	8002366 <Point_MoveOrigin>
	// 3. Convert to polar coordinates
	PolarPointWithIndex polarPointsWithIndex[POINT_MAX_NUM] = {};
 8002416:	f107 0310 	add.w	r3, r7, #16
 800241a:	4618      	mov	r0, r3
 800241c:	23f0      	movs	r3, #240	; 0xf0
 800241e:	461a      	mov	r2, r3
 8002420:	2100      	movs	r1, #0
 8002422:	f001 fe19 	bl	8004058 <memset>
	for (size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800242c:	e02c      	b.n	8002488 <Point_SortAntiClockwise+0xd0>
	{
		polarPointsWithIndex[iPoint].point = Point_CartesianToPolar(points + iPoint);
 800242e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	f107 020c 	add.w	r2, r7, #12
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	18d0      	adds	r0, r2, r3
 800243c:	f107 0110 	add.w	r1, r7, #16
 8002440:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	18cc      	adds	r4, r1, r3
 800244e:	463b      	mov	r3, r7
 8002450:	4601      	mov	r1, r0
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff14 	bl	8002280 <Point_CartesianToPolar>
 8002458:	463a      	mov	r2, r7
 800245a:	4623      	mov	r3, r4
 800245c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002460:	e883 0003 	stmia.w	r3, {r0, r1}
		polarPointsWithIndex[iPoint].index = iPoint;
 8002464:	f107 0110 	add.w	r1, r7, #16
 8002468:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	3308      	adds	r3, #8
 8002478:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800247c:	601a      	str	r2, [r3, #0]
	for (size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 800247e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002482:	3301      	adds	r3, #1
 8002484:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002488:	f107 0308 	add.w	r3, r7, #8
 800248c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d3cb      	bcc.n	800242e <Point_SortAntiClockwise+0x76>
	}
	// 4. Sort points based on polar coordinates
	qsort(polarPointsWithIndex, numPoints, sizeof(PolarPointWithIndex), PolarPointWithIndex_compare);
 8002496:	f107 0108 	add.w	r1, r7, #8
 800249a:	f107 0010 	add.w	r0, r7, #16
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <Point_SortAntiClockwise+0x154>)
 80024a0:	220c      	movs	r2, #12
 80024a2:	6809      	ldr	r1, [r1, #0]
 80024a4:	f002 fa83 	bl	80049ae <qsort>
	// 5. Reorder original points based on the sorted order of polar points
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80024ae:	e01f      	b.n	80024f0 <Point_SortAntiClockwise+0x138>
	{
		points[iPoint] = pointsOriginal[polarPointsWithIndex[iPoint].index];
 80024b0:	f107 0110 	add.w	r1, r7, #16
 80024b4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3308      	adds	r3, #8
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80024ca:	00d2      	lsls	r2, r2, #3
 80024cc:	f107 010c 	add.w	r1, r7, #12
 80024d0:	6809      	ldr	r1, [r1, #0]
 80024d2:	440a      	add	r2, r1
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 80024da:	440b      	add	r3, r1
 80024dc:	3ba8      	subs	r3, #168	; 0xa8
 80024de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024e2:	e882 0003 	stmia.w	r2, {r0, r1}
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 80024e6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024ea:	3301      	adds	r3, #1
 80024ec:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d3d8      	bcc.n	80024b0 <Point_SortAntiClockwise+0xf8>
	}
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8002506:	46bd      	mov	sp, r7
 8002508:	bd90      	pop	{r4, r7, pc}
 800250a:	bf00      	nop
 800250c:	08002209 	.word	0x08002209

08002510 <ScanlineFill_BuildEdgeTable>:
 * if y-coordinates are monotonic or not
 */
static void ScanlineFill_FillEdgeData(Edge *table, const size_t maxTableSize, Edge *edge, const Point *lower, const Point *upper, int32_t yComp);

void ScanlineFill_BuildEdgeTable(Edge *table, const size_t maxTableSize, Edge *edges, const size_t maxNumEdges, const Point *points, const size_t numPoints)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b08d      	sub	sp, #52	; 0x34
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
	// Iterate through every pair of points and create edges info
	const Point *p1 = points + (numPoints - 1);  // First edge point
 800251e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002520:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002524:	3b01      	subs	r3, #1
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800252a:	4413      	add	r3, r2
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
	const Point *p2 = NULL;  // Second point
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
	int32_t yPrev = points[numPoints - 2].y;
 8002532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002534:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002538:	3b02      	subs	r3, #2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800253e:	4413      	add	r3, r2
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	623b      	str	r3, [r7, #32]
	size_t iEdge = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	e047      	b.n	80025de <ScanlineFill_BuildEdgeTable+0xce>
	{
		p2 = points + iPoint;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002554:	4413      	add	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
		// Find lower and upper points of non-horizontal edge
		if(p1->y < p2->y)
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	429a      	cmp	r2, r3
 8002562:	da1a      	bge.n	800259a <ScanlineFill_BuildEdgeTable+0x8a>
		{
			// p1 is lower, p2 is upper point, edge is going upwards
			ScanlineFill_FillEdgeData(table, maxTableSize, edges + iEdge, p1, p2, ScanlineFill_yNext(points, numPoints, iPoint));
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	461a      	mov	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	189c      	adds	r4, r3, r2
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002578:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800257a:	f000 f8e3 	bl	8002744 <ScanlineFill_yNext>
 800257e:	4603      	mov	r3, r0
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	4622      	mov	r2, r4
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f934 	bl	80027fa <ScanlineFill_FillEdgeData>
			++iEdge;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3301      	adds	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	e019      	b.n	80025ce <ScanlineFill_BuildEdgeTable+0xbe>
		}
		else if(p1->y > p2->y)
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	dd13      	ble.n	80025ce <ScanlineFill_BuildEdgeTable+0xbe>
		{
			// p2 is lower, p1 is upper point, edge is going downwards
			ScanlineFill_FillEdgeData(table, maxTableSize, edges + iEdge, p2, p1, yPrev);
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	461a      	mov	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	441a      	add	r2, r3
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f919 	bl	80027fa <ScanlineFill_FillEdgeData>
			++iEdge;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	3301      	adds	r3, #1
 80025cc:	61fb      	str	r3, [r7, #28]
		}
		yPrev = p1->y;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	623b      	str	r3, [r7, #32]
		p1 = p2;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	3301      	adds	r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d3b3      	bcc.n	800254e <ScanlineFill_BuildEdgeTable+0x3e>
	}
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	372c      	adds	r7, #44	; 0x2c
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd90      	pop	{r4, r7, pc}

080025f0 <ScanlineFill_BuildActiveEdgeList>:

void ScanlineFill_BuildActiveEdgeList(Edge *table, const size_t maxTableSize, Edge *active, int32_t yScanline)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
	Edge *scanlineEdge = table[yScanline].next, *nextScanlineEdge;
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	461a      	mov	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	617b      	str	r3, [r7, #20]
	// insert edges related to current scanline in the active edges list
	while(scanlineEdge)
 8002612:	e008      	b.n	8002626 <ScanlineFill_BuildActiveEdgeList+0x36>
	{
		nextScanlineEdge = scanlineEdge->next;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	613b      	str	r3, [r7, #16]
		ScanlineFill_InsertEdge(active, scanlineEdge);
 800261a:	6979      	ldr	r1, [r7, #20]
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f8c3 	bl	80027a8 <ScanlineFill_InsertEdge>
		scanlineEdge = nextScanlineEdge;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	617b      	str	r3, [r7, #20]
	while(scanlineEdge)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f3      	bne.n	8002614 <ScanlineFill_BuildActiveEdgeList+0x24>
	}
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <ScanlineFill_UpdateActiveEdgeList>:

void ScanlineFill_UpdateActiveEdgeList(Edge *active, int32_t yScanline)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
	//1. Update edges x-coordinates
	Edge *currentEdge = active->next, *edgeBefore = active;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	613b      	str	r3, [r7, #16]
	while(currentEdge)
 800264a:	e02e      	b.n	80026aa <ScanlineFill_UpdateActiveEdgeList+0x74>
	{
		if(yScanline >= currentEdge->yu)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	db08      	blt.n	8002668 <ScanlineFill_UpdateActiveEdgeList+0x32>
		{
			// remove completed edges
			currentEdge = currentEdge->next;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	617b      	str	r3, [r7, #20]
			edgeBefore->next = edgeBefore->next->next;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	619a      	str	r2, [r3, #24]
 8002666:	e020      	b.n	80026aa <ScanlineFill_UpdateActiveEdgeList+0x74>
		}
		else
		{
			// update edges in-progress
			currentEdge->dxCounter += currentEdge->dx;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	441a      	add	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	611a      	str	r2, [r3, #16]
			while(currentEdge->dxCounter >= currentEdge->dy)
 8002676:	e00d      	b.n	8002694 <ScanlineFill_UpdateActiveEdgeList+0x5e>
			{
				currentEdge->xl += currentEdge->xInc;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	441a      	add	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	601a      	str	r2, [r3, #0]
				currentEdge->dxCounter -= currentEdge->dy;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	1ad2      	subs	r2, r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	611a      	str	r2, [r3, #16]
			while(currentEdge->dxCounter >= currentEdge->dy)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	429a      	cmp	r2, r3
 800269e:	daeb      	bge.n	8002678 <ScanlineFill_UpdateActiveEdgeList+0x42>
			}
			edgeBefore = currentEdge;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	613b      	str	r3, [r7, #16]
			currentEdge = currentEdge->next;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	617b      	str	r3, [r7, #20]
	while(currentEdge)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1cd      	bne.n	800264c <ScanlineFill_UpdateActiveEdgeList+0x16>
		}
	}
	//2. Resort list of active edges by rebuilding it
	Edge *nextEdge;
	currentEdge = active->next;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	617b      	str	r3, [r7, #20]
	active->next = NULL;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
	while(currentEdge)
 80026bc:	e008      	b.n	80026d0 <ScanlineFill_UpdateActiveEdgeList+0x9a>
	{
		nextEdge = currentEdge->next;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	60fb      	str	r3, [r7, #12]
		ScanlineFill_InsertEdge(active, currentEdge);
 80026c4:	6979      	ldr	r1, [r7, #20]
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f86e 	bl	80027a8 <ScanlineFill_InsertEdge>
		currentEdge = nextEdge;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	617b      	str	r3, [r7, #20]
	while(currentEdge)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f3      	bne.n	80026be <ScanlineFill_UpdateActiveEdgeList+0x88>
	}
}
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <ScanlineFill_FillScanline>:

void ScanlineFill_FillScanline(Edge *active, int32_t yScanline, color_t *data, const size_t dataWidth, const size_t dataHeight, const color_t color)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
	Edge *e1, *e2;
	e1 = active->next;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	61fb      	str	r3, [r7, #28]
	while(e1)
 80026f4:	e01c      	b.n	8002730 <ScanlineFill_FillScanline+0x50>
	{
		e2 = e1->next;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	617b      	str	r3, [r7, #20]
		// fill pixels between the pair of edge points
		for(int32_t x = e1->xl; x < e2->xl; ++x)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	e00d      	b.n	8002720 <ScanlineFill_FillScanline+0x40>
		{
			data[dataWidth * yScanline + x] = color;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	fb02 f203 	mul.w	r2, r2, r3
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002718:	801a      	strh	r2, [r3, #0]
		for(int32_t x = e1->xl; x < e2->xl; ++x)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3301      	adds	r3, #1
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	429a      	cmp	r2, r3
 8002728:	dbec      	blt.n	8002704 <ScanlineFill_FillScanline+0x24>
		}
		e1 = e2->next;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	61fb      	str	r3, [r7, #28]
	while(e1)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1df      	bne.n	80026f6 <ScanlineFill_FillScanline+0x16>
	}
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	3724      	adds	r7, #36	; 0x24
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <ScanlineFill_yNext>:

int32_t ScanlineFill_yNext(const Point *points, const size_t numPoints, const size_t iCurrentPoint)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
	size_t iNextPoint = (iCurrentPoint + 1) % numPoints;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3301      	adds	r3, #1
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	fbb3 f2f2 	udiv	r2, r3, r2
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	fb01 f202 	mul.w	r2, r1, r2
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	617b      	str	r3, [r7, #20]
	while (points[iNextPoint].y == points[iCurrentPoint].y)
 8002764:	e009      	b.n	800277a <ScanlineFill_yNext+0x36>
	{
		iNextPoint = (iNextPoint + 1) % numPoints;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	fb01 f202 	mul.w	r2, r1, r2
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	617b      	str	r3, [r7, #20]
	while (points[iNextPoint].y == points[iCurrentPoint].y)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4413      	add	r3, r2
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	68f9      	ldr	r1, [r7, #12]
 800278a:	440b      	add	r3, r1
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	429a      	cmp	r2, r3
 8002790:	d0e9      	beq.n	8002766 <ScanlineFill_yNext+0x22>
	}
	return points[iNextPoint].y;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4413      	add	r3, r2
 800279a:	685b      	ldr	r3, [r3, #4]
}
 800279c:	4618      	mov	r0, r3
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <ScanlineFill_InsertEdge>:

void ScanlineFill_InsertEdge(Edge *list, Edge *edge)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
	Edge *currentEdge = list->next, *edgeBefore = list;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	60bb      	str	r3, [r7, #8]
	while(currentEdge)
 80027bc:	e00d      	b.n	80027da <ScanlineFill_InsertEdge+0x32>
	{
		if(edge->xl < currentEdge->xl)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	da02      	bge.n	80027d0 <ScanlineFill_InsertEdge+0x28>
		{
			currentEdge = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	e004      	b.n	80027da <ScanlineFill_InsertEdge+0x32>
		}
		else
		{
			edgeBefore = currentEdge;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	60bb      	str	r3, [r7, #8]
			currentEdge = currentEdge->next;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	60fb      	str	r3, [r7, #12]
	while(currentEdge)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ee      	bne.n	80027be <ScanlineFill_InsertEdge+0x16>
		}
	}
	// insert the new edge in the linked list
	edge->next = edgeBefore->next;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	619a      	str	r2, [r3, #24]
	edgeBefore->next = edge;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	619a      	str	r2, [r3, #24]
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <ScanlineFill_FillEdgeData>:

void ScanlineFill_FillEdgeData(Edge *table, const size_t maxTableSize, Edge *edge, const Point *lower, const Point *upper, int32_t yComp)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
	// Fill edge info
	edge->xl = lower->x;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	601a      	str	r2, [r3, #0]
	edge->yu = (upper->y < yComp) ? upper->y - 1 : upper->y;  // adjust if edge is monotonically increasing or decreasing
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	429a      	cmp	r2, r3
 8002818:	dd03      	ble.n	8002822 <ScanlineFill_FillEdgeData+0x28>
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	e001      	b.n	8002826 <ScanlineFill_FillEdgeData+0x2c>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6053      	str	r3, [r2, #4]
	edge->dx = (upper->x - lower->x);
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1ad2      	subs	r2, r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	609a      	str	r2, [r3, #8]
	edge->dy = (upper->y - lower->y);
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	1ad2      	subs	r2, r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	60da      	str	r2, [r3, #12]
	if(edge->dx < 0)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	da09      	bge.n	8002862 <ScanlineFill_FillEdgeData+0x68>
	{
		edge->dx = -edge->dx;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	425a      	negs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]
		edge->xInc = -1;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f04f 32ff 	mov.w	r2, #4294967295
 800285e:	615a      	str	r2, [r3, #20]
 8002860:	e002      	b.n	8002868 <ScanlineFill_FillEdgeData+0x6e>
	}
	else
	{
		edge->xInc = 1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	615a      	str	r2, [r3, #20]
	}
	edge->dxCounter = 0;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
	// Insert edge in edge table
	ScanlineFill_InsertEdge(table + lower->y, edge);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	461a      	mov	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff8f 	bl	80027a8 <ScanlineFill_InsertEdge>
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002898:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <MX_SPI1_Init+0x64>)
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <MX_SPI1_Init+0x68>)
 800289c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028a6:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028c8:	2208      	movs	r2, #8
 80028ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028e0:	220a      	movs	r2, #10
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <MX_SPI1_Init+0x64>)
 80028e6:	f001 f8ef 	bl	8003ac8 <HAL_SPI_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028f0:	f7ff fc84 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000204 	.word	0x20000204
 80028fc:	40013000 	.word	0x40013000

08002900 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_SPI_MspInit+0x84>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d12b      	bne.n	800297a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_SPI_MspInit+0x88>)
 800292c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002930:	6453      	str	r3, [r2, #68]	; 0x44
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800295a:	23e0      	movs	r3, #224	; 0xe0
 800295c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800296a:	2305      	movs	r3, #5
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4619      	mov	r1, r3
 8002974:	4805      	ldr	r0, [pc, #20]	; (800298c <HAL_SPI_MspInit+0x8c>)
 8002976:	f000 fadb 	bl	8002f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40013000 	.word	0x40013000
 8002988:	40023800 	.word	0x40023800
 800298c:	40020000 	.word	0x40020000

08002990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_MspInit+0x4c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <HAL_MspInit+0x4c>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_MspInit+0x4c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_MspInit+0x4c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a08      	ldr	r2, [pc, #32]	; (80029dc <HAL_MspInit+0x4c>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_MspInit+0x4c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e4:	e7fe      	b.n	80029e4 <NMI_Handler+0x4>

080029e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ea:	e7fe      	b.n	80029ea <HardFault_Handler+0x4>

080029ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <MemManage_Handler+0x4>

080029f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f6:	e7fe      	b.n	80029f6 <BusFault_Handler+0x4>

080029f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <UsageFault_Handler+0x4>

080029fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a2c:	f000 f956 	bl	8002cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
	return 1;
 8002a38:	2301      	movs	r3, #1
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <_kill>:

int _kill(int pid, int sig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a4e:	f001 facb 	bl	8003fe8 <__errno>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2216      	movs	r2, #22
 8002a56:	601a      	str	r2, [r3, #0]
	return -1;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_exit>:

void _exit (int status)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ffe7 	bl	8002a44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a76:	e7fe      	b.n	8002a76 <_exit+0x12>

08002a78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	e00a      	b.n	8002aa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a8a:	f3af 8000 	nop.w
 8002a8e:	4601      	mov	r1, r0
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	60ba      	str	r2, [r7, #8]
 8002a96:	b2ca      	uxtb	r2, r1
 8002a98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	dbf0      	blt.n	8002a8a <_read+0x12>
	}

return len;
 8002aa8:	687b      	ldr	r3, [r7, #4]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e009      	b.n	8002ad8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	60ba      	str	r2, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	dbf1      	blt.n	8002ac4 <_write+0x12>
	}
	return len;
 8002ae0:	687b      	ldr	r3, [r7, #4]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_close>:

int _close(int file)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
	return -1;
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b12:	605a      	str	r2, [r3, #4]
	return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <_isatty>:

int _isatty(int file)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
	return 1;
 8002b2a:	2301      	movs	r3, #1
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
	return 0;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <_sbrk+0x5c>)
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <_sbrk+0x60>)
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d102      	bne.n	8002b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <_sbrk+0x64>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <_sbrk+0x68>)
 8002b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d207      	bcs.n	8002b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b84:	f001 fa30 	bl	8003fe8 <__errno>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b92:	e009      	b.n	8002ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <_sbrk+0x64>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <_sbrk+0x64>)
 8002ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20020000 	.word	0x20020000
 8002bb4:	00000400 	.word	0x00000400
 8002bb8:	200001f8 	.word	0x200001f8
 8002bbc:	20000270 	.word	0x20000270

08002bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <SystemInit+0x20>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <SystemInit+0x20>)
 8002bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002be8:	480d      	ldr	r0, [pc, #52]	; (8002c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bea:	490e      	ldr	r1, [pc, #56]	; (8002c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bec:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf0:	e002      	b.n	8002bf8 <LoopCopyDataInit>

08002bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf6:	3304      	adds	r3, #4

08002bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bfc:	d3f9      	bcc.n	8002bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	; (8002c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c00:	4c0b      	ldr	r4, [pc, #44]	; (8002c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c04:	e001      	b.n	8002c0a <LoopFillZerobss>

08002c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c08:	3204      	adds	r2, #4

08002c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c0c:	d3fb      	bcc.n	8002c06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c0e:	f7ff ffd7 	bl	8002bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c12:	f001 f9ef 	bl	8003ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c16:	f7fe ff0d 	bl	8001a34 <main>
  bx  lr    
 8002c1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c24:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002c28:	08007b4c 	.word	0x08007b4c
  ldr r2, =_sbss
 8002c2c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002c30:	20000270 	.word	0x20000270

08002c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c34:	e7fe      	b.n	8002c34 <ADC_IRQHandler>
	...

08002c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <HAL_Init+0x40>)
 8002c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_Init+0x40>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_Init+0x40>)
 8002c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <HAL_Init+0x40>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <HAL_Init+0x40>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c60:	2003      	movs	r0, #3
 8002c62:	f000 f931 	bl	8002ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c66:	200f      	movs	r0, #15
 8002c68:	f000 f808 	bl	8002c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c6c:	f7ff fe90 	bl	8002990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023c00 	.word	0x40023c00

08002c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_InitTick+0x54>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_InitTick+0x58>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f93b 	bl	8002f16 <HAL_SYSTICK_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00e      	b.n	8002cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d80a      	bhi.n	8002cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	f000 f911 	bl	8002ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cbc:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <HAL_InitTick+0x5c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000008 	.word	0x20000008
 8002cd8:	20000004 	.word	0x20000004

08002cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_IncTick+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_IncTick+0x24>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_IncTick+0x24>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000008 	.word	0x20000008
 8002d00:	2000025c 	.word	0x2000025c

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	2000025c 	.word	0x2000025c

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff ffee 	bl	8002d04 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d005      	beq.n	8002d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_Delay+0x44>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d42:	bf00      	nop
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f7      	bhi.n	8002d44 <HAL_Delay+0x28>
  {
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000008 	.word	0x20000008

08002d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0307 	and.w	r3, r3, #7
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	6039      	str	r1, [r7, #0]
 8002dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	db0a      	blt.n	8002df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	490c      	ldr	r1, [pc, #48]	; (8002e14 <__NVIC_SetPriority+0x4c>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	440b      	add	r3, r1
 8002dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df0:	e00a      	b.n	8002e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	4908      	ldr	r1, [pc, #32]	; (8002e18 <__NVIC_SetPriority+0x50>)
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	3b04      	subs	r3, #4
 8002e00:	0112      	lsls	r2, r2, #4
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	440b      	add	r3, r1
 8002e06:	761a      	strb	r2, [r3, #24]
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000e100 	.word	0xe000e100
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b089      	sub	sp, #36	; 0x24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f1c3 0307 	rsb	r3, r3, #7
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	bf28      	it	cs
 8002e3a:	2304      	movcs	r3, #4
 8002e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3304      	adds	r3, #4
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d902      	bls.n	8002e4c <NVIC_EncodePriority+0x30>
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3b03      	subs	r3, #3
 8002e4a:	e000      	b.n	8002e4e <NVIC_EncodePriority+0x32>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	401a      	ands	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e64:	f04f 31ff 	mov.w	r1, #4294967295
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	43d9      	mvns	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	4313      	orrs	r3, r2
         );
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3724      	adds	r7, #36	; 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e94:	d301      	bcc.n	8002e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00f      	b.n	8002eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <SysTick_Config+0x40>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	f7ff ff8e 	bl	8002dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <SysTick_Config+0x40>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <SysTick_Config+0x40>)
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	e000e010 	.word	0xe000e010

08002ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff47 	bl	8002d64 <__NVIC_SetPriorityGrouping>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef0:	f7ff ff5c 	bl	8002dac <__NVIC_GetPriorityGrouping>
 8002ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7ff ff8e 	bl	8002e1c <NVIC_EncodePriority>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff5d 	bl	8002dc8 <__NVIC_SetPriority>
}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ffb0 	bl	8002e84 <SysTick_Config>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	e159      	b.n	8003200 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f040 8148 	bne.w	80031fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d005      	beq.n	8002f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d130      	bne.n	8002fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb8:	2201      	movs	r2, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 0201 	and.w	r2, r3, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d017      	beq.n	8003020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d123      	bne.n	8003074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80a2 	beq.w	80031fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b57      	ldr	r3, [pc, #348]	; (8003218 <HAL_GPIO_Init+0x2e8>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	4a56      	ldr	r2, [pc, #344]	; (8003218 <HAL_GPIO_Init+0x2e8>)
 80030c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c4:	6453      	str	r3, [r2, #68]	; 0x44
 80030c6:	4b54      	ldr	r3, [pc, #336]	; (8003218 <HAL_GPIO_Init+0x2e8>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030d2:	4a52      	ldr	r2, [pc, #328]	; (800321c <HAL_GPIO_Init+0x2ec>)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	3302      	adds	r3, #2
 80030da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	220f      	movs	r2, #15
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a49      	ldr	r2, [pc, #292]	; (8003220 <HAL_GPIO_Init+0x2f0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d019      	beq.n	8003132 <HAL_GPIO_Init+0x202>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a48      	ldr	r2, [pc, #288]	; (8003224 <HAL_GPIO_Init+0x2f4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <HAL_GPIO_Init+0x1fe>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a47      	ldr	r2, [pc, #284]	; (8003228 <HAL_GPIO_Init+0x2f8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00d      	beq.n	800312a <HAL_GPIO_Init+0x1fa>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a46      	ldr	r2, [pc, #280]	; (800322c <HAL_GPIO_Init+0x2fc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <HAL_GPIO_Init+0x1f6>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a45      	ldr	r2, [pc, #276]	; (8003230 <HAL_GPIO_Init+0x300>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_GPIO_Init+0x1f2>
 800311e:	2304      	movs	r3, #4
 8003120:	e008      	b.n	8003134 <HAL_GPIO_Init+0x204>
 8003122:	2307      	movs	r3, #7
 8003124:	e006      	b.n	8003134 <HAL_GPIO_Init+0x204>
 8003126:	2303      	movs	r3, #3
 8003128:	e004      	b.n	8003134 <HAL_GPIO_Init+0x204>
 800312a:	2302      	movs	r3, #2
 800312c:	e002      	b.n	8003134 <HAL_GPIO_Init+0x204>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <HAL_GPIO_Init+0x204>
 8003132:	2300      	movs	r3, #0
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	f002 0203 	and.w	r2, r2, #3
 800313a:	0092      	lsls	r2, r2, #2
 800313c:	4093      	lsls	r3, r2
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003144:	4935      	ldr	r1, [pc, #212]	; (800321c <HAL_GPIO_Init+0x2ec>)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	3302      	adds	r3, #2
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003152:	4b38      	ldr	r3, [pc, #224]	; (8003234 <HAL_GPIO_Init+0x304>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003176:	4a2f      	ldr	r2, [pc, #188]	; (8003234 <HAL_GPIO_Init+0x304>)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800317c:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <HAL_GPIO_Init+0x304>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031a0:	4a24      	ldr	r2, [pc, #144]	; (8003234 <HAL_GPIO_Init+0x304>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031a6:	4b23      	ldr	r3, [pc, #140]	; (8003234 <HAL_GPIO_Init+0x304>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ca:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <HAL_GPIO_Init+0x304>)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d0:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_GPIO_Init+0x304>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f4:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <HAL_GPIO_Init+0x304>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3301      	adds	r3, #1
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	f67f aea2 	bls.w	8002f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	40013800 	.word	0x40013800
 8003220:	40020000 	.word	0x40020000
 8003224:	40020400 	.word	0x40020400
 8003228:	40020800 	.word	0x40020800
 800322c:	40020c00 	.word	0x40020c00
 8003230:	40021000 	.word	0x40021000
 8003234:	40013c00 	.word	0x40013c00

08003238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
 8003244:	4613      	mov	r3, r2
 8003246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003248:	787b      	ldrb	r3, [r7, #1]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003254:	e003      	b.n	800325e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003256:	887b      	ldrh	r3, [r7, #2]
 8003258:	041a      	lsls	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	619a      	str	r2, [r3, #24]
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800327c:	887a      	ldrh	r2, [r7, #2]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4013      	ands	r3, r2
 8003282:	041a      	lsls	r2, r3, #16
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	43d9      	mvns	r1, r3
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	400b      	ands	r3, r1
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	619a      	str	r2, [r3, #24]
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e264      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d075      	beq.n	80033aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032be:	4ba3      	ldr	r3, [pc, #652]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d00c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ca:	4ba0      	ldr	r3, [pc, #640]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d112      	bne.n	80032fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b9d      	ldr	r3, [pc, #628]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e2:	d10b      	bne.n	80032fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	4b99      	ldr	r3, [pc, #612]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d05b      	beq.n	80033a8 <HAL_RCC_OscConfig+0x108>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d157      	bne.n	80033a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e23f      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x74>
 8003306:	4b91      	ldr	r3, [pc, #580]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a90      	ldr	r2, [pc, #576]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xb0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x98>
 800331e:	4b8b      	ldr	r3, [pc, #556]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a8a      	ldr	r2, [pc, #552]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b88      	ldr	r3, [pc, #544]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a87      	ldr	r2, [pc, #540]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xb0>
 8003338:	4b84      	ldr	r3, [pc, #528]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a83      	ldr	r2, [pc, #524]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b81      	ldr	r3, [pc, #516]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a80      	ldr	r2, [pc, #512]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7ff fcd4 	bl	8002d04 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003360:	f7ff fcd0 	bl	8002d04 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e204      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b76      	ldr	r3, [pc, #472]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xc0>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7ff fcc0 	bl	8002d04 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003388:	f7ff fcbc 	bl	8002d04 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1f0      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	4b6c      	ldr	r3, [pc, #432]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0xe8>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b6:	4b65      	ldr	r3, [pc, #404]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c2:	4b62      	ldr	r3, [pc, #392]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d11c      	bne.n	8003408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ce:	4b5f      	ldr	r3, [pc, #380]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	4b5c      	ldr	r3, [pc, #368]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x152>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1c4      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b56      	ldr	r3, [pc, #344]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4952      	ldr	r1, [pc, #328]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	e03a      	b.n	800347e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b4f      	ldr	r3, [pc, #316]	; (8003550 <HAL_RCC_OscConfig+0x2b0>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7ff fc75 	bl	8002d04 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341e:	f7ff fc71 	bl	8002d04 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1a5      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	4b46      	ldr	r3, [pc, #280]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b43      	ldr	r3, [pc, #268]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4940      	ldr	r1, [pc, #256]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003452:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <HAL_RCC_OscConfig+0x2b0>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7ff fc54 	bl	8002d04 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003460:	f7ff fc50 	bl	8002d04 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e184      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	4b36      	ldr	r3, [pc, #216]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d030      	beq.n	80034ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003492:	4b30      	ldr	r3, [pc, #192]	; (8003554 <HAL_RCC_OscConfig+0x2b4>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7ff fc34 	bl	8002d04 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a0:	f7ff fc30 	bl	8002d04 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e164      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x200>
 80034be:	e015      	b.n	80034ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c0:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCC_OscConfig+0x2b4>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c6:	f7ff fc1d 	bl	8002d04 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ce:	f7ff fc19 	bl	8002d04 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e14d      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f0      	bne.n	80034ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a0 	beq.w	800363a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fe:	4b13      	ldr	r3, [pc, #76]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a0e      	ldr	r2, [pc, #56]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_RCC_OscConfig+0x2ac>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_OscConfig+0x2b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d121      	bne.n	800357a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_RCC_OscConfig+0x2b8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a07      	ldr	r2, [pc, #28]	; (8003558 <HAL_RCC_OscConfig+0x2b8>)
 800353c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003542:	f7ff fbdf 	bl	8002d04 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	e011      	b.n	800356e <HAL_RCC_OscConfig+0x2ce>
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800
 8003550:	42470000 	.word	0x42470000
 8003554:	42470e80 	.word	0x42470e80
 8003558:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355c:	f7ff fbd2 	bl	8002d04 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e106      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b85      	ldr	r3, [pc, #532]	; (8003784 <HAL_RCC_OscConfig+0x4e4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d106      	bne.n	8003590 <HAL_RCC_OscConfig+0x2f0>
 8003582:	4b81      	ldr	r3, [pc, #516]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	4a80      	ldr	r2, [pc, #512]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6713      	str	r3, [r2, #112]	; 0x70
 800358e:	e01c      	b.n	80035ca <HAL_RCC_OscConfig+0x32a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b05      	cmp	r3, #5
 8003596:	d10c      	bne.n	80035b2 <HAL_RCC_OscConfig+0x312>
 8003598:	4b7b      	ldr	r3, [pc, #492]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a7a      	ldr	r2, [pc, #488]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	4b78      	ldr	r3, [pc, #480]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a77      	ldr	r2, [pc, #476]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
 80035b0:	e00b      	b.n	80035ca <HAL_RCC_OscConfig+0x32a>
 80035b2:	4b75      	ldr	r3, [pc, #468]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a74      	ldr	r2, [pc, #464]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70
 80035be:	4b72      	ldr	r3, [pc, #456]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	4a71      	ldr	r2, [pc, #452]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 80035c4:	f023 0304 	bic.w	r3, r3, #4
 80035c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d015      	beq.n	80035fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d2:	f7ff fb97 	bl	8002d04 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7ff fb93 	bl	8002d04 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e0c5      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f0:	4b65      	ldr	r3, [pc, #404]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0ee      	beq.n	80035da <HAL_RCC_OscConfig+0x33a>
 80035fc:	e014      	b.n	8003628 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7ff fb81 	bl	8002d04 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7ff fb7d 	bl	8002d04 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e0af      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361c:	4b5a      	ldr	r3, [pc, #360]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ee      	bne.n	8003606 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362e:	4b56      	ldr	r3, [pc, #344]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4a55      	ldr	r2, [pc, #340]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 8003634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003638:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 809b 	beq.w	800377a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d05c      	beq.n	800370a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d141      	bne.n	80036dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003658:	4b4c      	ldr	r3, [pc, #304]	; (800378c <HAL_RCC_OscConfig+0x4ec>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7ff fb51 	bl	8002d04 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003666:	f7ff fb4d 	bl	8002d04 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e081      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003678:	4b43      	ldr	r3, [pc, #268]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	019b      	lsls	r3, r3, #6
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	3b01      	subs	r3, #1
 800369e:	041b      	lsls	r3, r3, #16
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	061b      	lsls	r3, r3, #24
 80036a8:	4937      	ldr	r1, [pc, #220]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_RCC_OscConfig+0x4ec>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7ff fb26 	bl	8002d04 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036bc:	f7ff fb22 	bl	8002d04 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e056      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x41c>
 80036da:	e04e      	b.n	800377a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036dc:	4b2b      	ldr	r3, [pc, #172]	; (800378c <HAL_RCC_OscConfig+0x4ec>)
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e2:	f7ff fb0f 	bl	8002d04 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ea:	f7ff fb0b 	bl	8002d04 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e03f      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fc:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <HAL_RCC_OscConfig+0x44a>
 8003708:	e037      	b.n	800377a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e032      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003716:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <HAL_RCC_OscConfig+0x4e8>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d028      	beq.n	8003776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d121      	bne.n	8003776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d11a      	bne.n	8003776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003746:	4013      	ands	r3, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800374c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800374e:	4293      	cmp	r3, r2
 8003750:	d111      	bne.n	8003776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	3b01      	subs	r3, #1
 8003760:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d107      	bne.n	8003776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40007000 	.word	0x40007000
 8003788:	40023800 	.word	0x40023800
 800378c:	42470060 	.word	0x42470060

08003790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0cc      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d90c      	bls.n	80037cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b65      	ldr	r3, [pc, #404]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d044      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d119      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d003      	beq.n	800384e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384a:	2b03      	cmp	r3, #3
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	4b3f      	ldr	r3, [pc, #252]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e06f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e067      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386e:	4b37      	ldr	r3, [pc, #220]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4934      	ldr	r1, [pc, #208]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	4313      	orrs	r3, r2
 800387e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003880:	f7ff fa40 	bl	8002d04 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	e00a      	b.n	800389e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003888:	f7ff fa3c 	bl	8002d04 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e04f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 020c 	and.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1eb      	bne.n	8003888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d20c      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b22      	ldr	r3, [pc, #136]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f821 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff f9a0 	bl	8002c7c <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40023c00 	.word	0x40023c00
 800394c:	40023800 	.word	0x40023800
 8003950:	08007710 	.word	0x08007710
 8003954:	20000000 	.word	0x20000000
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	b5b0      	push	{r4, r5, r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003962:	2100      	movs	r1, #0
 8003964:	6079      	str	r1, [r7, #4]
 8003966:	2100      	movs	r1, #0
 8003968:	60f9      	str	r1, [r7, #12]
 800396a:	2100      	movs	r1, #0
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800396e:	2100      	movs	r1, #0
 8003970:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003972:	4952      	ldr	r1, [pc, #328]	; (8003abc <HAL_RCC_GetSysClockFreq+0x160>)
 8003974:	6889      	ldr	r1, [r1, #8]
 8003976:	f001 010c 	and.w	r1, r1, #12
 800397a:	2908      	cmp	r1, #8
 800397c:	d00d      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x3e>
 800397e:	2908      	cmp	r1, #8
 8003980:	f200 8094 	bhi.w	8003aac <HAL_RCC_GetSysClockFreq+0x150>
 8003984:	2900      	cmp	r1, #0
 8003986:	d002      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x32>
 8003988:	2904      	cmp	r1, #4
 800398a:	d003      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x38>
 800398c:	e08e      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800398e:	4b4c      	ldr	r3, [pc, #304]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003990:	60bb      	str	r3, [r7, #8]
       break;
 8003992:	e08e      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003994:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003996:	60bb      	str	r3, [r7, #8]
      break;
 8003998:	e08b      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800399a:	4948      	ldr	r1, [pc, #288]	; (8003abc <HAL_RCC_GetSysClockFreq+0x160>)
 800399c:	6849      	ldr	r1, [r1, #4]
 800399e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80039a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a4:	4945      	ldr	r1, [pc, #276]	; (8003abc <HAL_RCC_GetSysClockFreq+0x160>)
 80039a6:	6849      	ldr	r1, [r1, #4]
 80039a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80039ac:	2900      	cmp	r1, #0
 80039ae:	d024      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b0:	4942      	ldr	r1, [pc, #264]	; (8003abc <HAL_RCC_GetSysClockFreq+0x160>)
 80039b2:	6849      	ldr	r1, [r1, #4]
 80039b4:	0989      	lsrs	r1, r1, #6
 80039b6:	4608      	mov	r0, r1
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80039c0:	f04f 0500 	mov.w	r5, #0
 80039c4:	ea00 0204 	and.w	r2, r0, r4
 80039c8:	ea01 0305 	and.w	r3, r1, r5
 80039cc:	493d      	ldr	r1, [pc, #244]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x168>)
 80039ce:	fb01 f003 	mul.w	r0, r1, r3
 80039d2:	2100      	movs	r1, #0
 80039d4:	fb01 f102 	mul.w	r1, r1, r2
 80039d8:	1844      	adds	r4, r0, r1
 80039da:	493a      	ldr	r1, [pc, #232]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x168>)
 80039dc:	fba2 0101 	umull	r0, r1, r2, r1
 80039e0:	1863      	adds	r3, r4, r1
 80039e2:	4619      	mov	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	f7fd f8e4 	bl	8000bb8 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4613      	mov	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e04a      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fa:	4b30      	ldr	r3, [pc, #192]	; (8003abc <HAL_RCC_GetSysClockFreq+0x160>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	099b      	lsrs	r3, r3, #6
 8003a00:	461a      	mov	r2, r3
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a0a:	f04f 0100 	mov.w	r1, #0
 8003a0e:	ea02 0400 	and.w	r4, r2, r0
 8003a12:	ea03 0501 	and.w	r5, r3, r1
 8003a16:	4620      	mov	r0, r4
 8003a18:	4629      	mov	r1, r5
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	014b      	lsls	r3, r1, #5
 8003a24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a28:	0142      	lsls	r2, r0, #5
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	1b00      	subs	r0, r0, r4
 8003a30:	eb61 0105 	sbc.w	r1, r1, r5
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	018b      	lsls	r3, r1, #6
 8003a3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a42:	0182      	lsls	r2, r0, #6
 8003a44:	1a12      	subs	r2, r2, r0
 8003a46:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4a:	f04f 0000 	mov.w	r0, #0
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	00d9      	lsls	r1, r3, #3
 8003a54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a58:	00d0      	lsls	r0, r2, #3
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	1912      	adds	r2, r2, r4
 8003a60:	eb45 0303 	adc.w	r3, r5, r3
 8003a64:	f04f 0000 	mov.w	r0, #0
 8003a68:	f04f 0100 	mov.w	r1, #0
 8003a6c:	0299      	lsls	r1, r3, #10
 8003a6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a72:	0290      	lsls	r0, r2, #10
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	f7fd f898 	bl	8000bb8 <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <HAL_RCC_GetSysClockFreq+0x160>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	60bb      	str	r3, [r7, #8]
      break;
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003aae:	60bb      	str	r3, [r7, #8]
      break;
 8003ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bdb0      	pop	{r4, r5, r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	00f42400 	.word	0x00f42400
 8003ac4:	017d7840 	.word	0x017d7840

08003ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e07b      	b.n	8003bd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aea:	d009      	beq.n	8003b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	61da      	str	r2, [r3, #28]
 8003af2:	e005      	b.n	8003b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fe fef0 	bl	8002900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	ea42 0103 	orr.w	r1, r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 0104 	and.w	r1, r3, #4
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f003 0210 	and.w	r2, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b088      	sub	sp, #32
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_SPI_Transmit+0x22>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e126      	b.n	8003e4a <HAL_SPI_Transmit+0x270>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c04:	f7ff f87e 	bl	8002d04 <HAL_GetTick>
 8003c08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d002      	beq.n	8003c20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c1e:	e10b      	b.n	8003e38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_SPI_Transmit+0x52>
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c30:	e102      	b.n	8003e38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2203      	movs	r2, #3
 8003c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c78:	d10f      	bne.n	8003c9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d007      	beq.n	8003cb8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc0:	d14b      	bne.n	8003d5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_Transmit+0xf6>
 8003cca:	8afb      	ldrh	r3, [r7, #22]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d13e      	bne.n	8003d4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	1c9a      	adds	r2, r3, #2
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cf4:	e02b      	b.n	8003d4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d112      	bne.n	8003d2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d28:	e011      	b.n	8003d4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d2a:	f7fe ffeb 	bl	8002d04 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d803      	bhi.n	8003d42 <HAL_SPI_Transmit+0x168>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d102      	bne.n	8003d48 <HAL_SPI_Transmit+0x16e>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d4c:	e074      	b.n	8003e38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1ce      	bne.n	8003cf6 <HAL_SPI_Transmit+0x11c>
 8003d58:	e04c      	b.n	8003df4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_Transmit+0x18e>
 8003d62:	8afb      	ldrh	r3, [r7, #22]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d140      	bne.n	8003dea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	7812      	ldrb	r2, [r2, #0]
 8003d74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d8e:	e02c      	b.n	8003dea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d113      	bne.n	8003dc6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	7812      	ldrb	r2, [r2, #0]
 8003daa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dc4:	e011      	b.n	8003dea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc6:	f7fe ff9d 	bl	8002d04 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d803      	bhi.n	8003dde <HAL_SPI_Transmit+0x204>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d102      	bne.n	8003de4 <HAL_SPI_Transmit+0x20a>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003de8:	e026      	b.n	8003e38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1cd      	bne.n	8003d90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	6839      	ldr	r1, [r7, #0]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f8b3 	bl	8003f64 <SPI_EndRxTxTransaction>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	77fb      	strb	r3, [r7, #31]
 8003e34:	e000      	b.n	8003e38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e64:	f7fe ff4e 	bl	8002d04 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	4413      	add	r3, r2
 8003e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e74:	f7fe ff46 	bl	8002d04 <HAL_GetTick>
 8003e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e7a:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	015b      	lsls	r3, r3, #5
 8003e80:	0d1b      	lsrs	r3, r3, #20
 8003e82:	69fa      	ldr	r2, [r7, #28]
 8003e84:	fb02 f303 	mul.w	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e8a:	e054      	b.n	8003f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d050      	beq.n	8003f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e94:	f7fe ff36 	bl	8002d04 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d902      	bls.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d13d      	bne.n	8003f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ec2:	d111      	bne.n	8003ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ecc:	d004      	beq.n	8003ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed6:	d107      	bne.n	8003ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef0:	d10f      	bne.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e017      	b.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	bf0c      	ite	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	2300      	movne	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d19b      	bne.n	8003e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3720      	adds	r7, #32
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000000 	.word	0x20000000

08003f64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f70:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <SPI_EndRxTxTransaction+0x7c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <SPI_EndRxTxTransaction+0x80>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0d5b      	lsrs	r3, r3, #21
 8003f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8e:	d112      	bne.n	8003fb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2200      	movs	r2, #0
 8003f98:	2180      	movs	r1, #128	; 0x80
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff ff5a 	bl	8003e54 <SPI_WaitFlagStateUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e00f      	b.n	8003fd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d0f2      	beq.n	8003fb6 <SPI_EndRxTxTransaction+0x52>
 8003fd0:	e000      	b.n	8003fd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003fd2:	bf00      	nop
  }

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	165e9f81 	.word	0x165e9f81

08003fe8 <__errno>:
 8003fe8:	4b01      	ldr	r3, [pc, #4]	; (8003ff0 <__errno+0x8>)
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	2000000c 	.word	0x2000000c

08003ff4 <__libc_init_array>:
 8003ff4:	b570      	push	{r4, r5, r6, lr}
 8003ff6:	4d0d      	ldr	r5, [pc, #52]	; (800402c <__libc_init_array+0x38>)
 8003ff8:	4c0d      	ldr	r4, [pc, #52]	; (8004030 <__libc_init_array+0x3c>)
 8003ffa:	1b64      	subs	r4, r4, r5
 8003ffc:	10a4      	asrs	r4, r4, #2
 8003ffe:	2600      	movs	r6, #0
 8004000:	42a6      	cmp	r6, r4
 8004002:	d109      	bne.n	8004018 <__libc_init_array+0x24>
 8004004:	4d0b      	ldr	r5, [pc, #44]	; (8004034 <__libc_init_array+0x40>)
 8004006:	4c0c      	ldr	r4, [pc, #48]	; (8004038 <__libc_init_array+0x44>)
 8004008:	f003 f9bc 	bl	8007384 <_init>
 800400c:	1b64      	subs	r4, r4, r5
 800400e:	10a4      	asrs	r4, r4, #2
 8004010:	2600      	movs	r6, #0
 8004012:	42a6      	cmp	r6, r4
 8004014:	d105      	bne.n	8004022 <__libc_init_array+0x2e>
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	f855 3b04 	ldr.w	r3, [r5], #4
 800401c:	4798      	blx	r3
 800401e:	3601      	adds	r6, #1
 8004020:	e7ee      	b.n	8004000 <__libc_init_array+0xc>
 8004022:	f855 3b04 	ldr.w	r3, [r5], #4
 8004026:	4798      	blx	r3
 8004028:	3601      	adds	r6, #1
 800402a:	e7f2      	b.n	8004012 <__libc_init_array+0x1e>
 800402c:	08007b44 	.word	0x08007b44
 8004030:	08007b44 	.word	0x08007b44
 8004034:	08007b44 	.word	0x08007b44
 8004038:	08007b48 	.word	0x08007b48

0800403c <memcpy>:
 800403c:	440a      	add	r2, r1
 800403e:	4291      	cmp	r1, r2
 8004040:	f100 33ff 	add.w	r3, r0, #4294967295
 8004044:	d100      	bne.n	8004048 <memcpy+0xc>
 8004046:	4770      	bx	lr
 8004048:	b510      	push	{r4, lr}
 800404a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800404e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004052:	4291      	cmp	r1, r2
 8004054:	d1f9      	bne.n	800404a <memcpy+0xe>
 8004056:	bd10      	pop	{r4, pc}

08004058 <memset>:
 8004058:	4402      	add	r2, r0
 800405a:	4603      	mov	r3, r0
 800405c:	4293      	cmp	r3, r2
 800405e:	d100      	bne.n	8004062 <memset+0xa>
 8004060:	4770      	bx	lr
 8004062:	f803 1b01 	strb.w	r1, [r3], #1
 8004066:	e7f9      	b.n	800405c <memset+0x4>

08004068 <__cvt>:
 8004068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800406c:	ec55 4b10 	vmov	r4, r5, d0
 8004070:	2d00      	cmp	r5, #0
 8004072:	460e      	mov	r6, r1
 8004074:	4619      	mov	r1, r3
 8004076:	462b      	mov	r3, r5
 8004078:	bfbb      	ittet	lt
 800407a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800407e:	461d      	movlt	r5, r3
 8004080:	2300      	movge	r3, #0
 8004082:	232d      	movlt	r3, #45	; 0x2d
 8004084:	700b      	strb	r3, [r1, #0]
 8004086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004088:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800408c:	4691      	mov	r9, r2
 800408e:	f023 0820 	bic.w	r8, r3, #32
 8004092:	bfbc      	itt	lt
 8004094:	4622      	movlt	r2, r4
 8004096:	4614      	movlt	r4, r2
 8004098:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800409c:	d005      	beq.n	80040aa <__cvt+0x42>
 800409e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040a2:	d100      	bne.n	80040a6 <__cvt+0x3e>
 80040a4:	3601      	adds	r6, #1
 80040a6:	2102      	movs	r1, #2
 80040a8:	e000      	b.n	80040ac <__cvt+0x44>
 80040aa:	2103      	movs	r1, #3
 80040ac:	ab03      	add	r3, sp, #12
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	ab02      	add	r3, sp, #8
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	ec45 4b10 	vmov	d0, r4, r5
 80040b8:	4653      	mov	r3, sl
 80040ba:	4632      	mov	r2, r6
 80040bc:	f000 fe74 	bl	8004da8 <_dtoa_r>
 80040c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040c4:	4607      	mov	r7, r0
 80040c6:	d102      	bne.n	80040ce <__cvt+0x66>
 80040c8:	f019 0f01 	tst.w	r9, #1
 80040cc:	d022      	beq.n	8004114 <__cvt+0xac>
 80040ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040d2:	eb07 0906 	add.w	r9, r7, r6
 80040d6:	d110      	bne.n	80040fa <__cvt+0x92>
 80040d8:	783b      	ldrb	r3, [r7, #0]
 80040da:	2b30      	cmp	r3, #48	; 0x30
 80040dc:	d10a      	bne.n	80040f4 <__cvt+0x8c>
 80040de:	2200      	movs	r2, #0
 80040e0:	2300      	movs	r3, #0
 80040e2:	4620      	mov	r0, r4
 80040e4:	4629      	mov	r1, r5
 80040e6:	f7fc fcf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80040ea:	b918      	cbnz	r0, 80040f4 <__cvt+0x8c>
 80040ec:	f1c6 0601 	rsb	r6, r6, #1
 80040f0:	f8ca 6000 	str.w	r6, [sl]
 80040f4:	f8da 3000 	ldr.w	r3, [sl]
 80040f8:	4499      	add	r9, r3
 80040fa:	2200      	movs	r2, #0
 80040fc:	2300      	movs	r3, #0
 80040fe:	4620      	mov	r0, r4
 8004100:	4629      	mov	r1, r5
 8004102:	f7fc fce9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004106:	b108      	cbz	r0, 800410c <__cvt+0xa4>
 8004108:	f8cd 900c 	str.w	r9, [sp, #12]
 800410c:	2230      	movs	r2, #48	; 0x30
 800410e:	9b03      	ldr	r3, [sp, #12]
 8004110:	454b      	cmp	r3, r9
 8004112:	d307      	bcc.n	8004124 <__cvt+0xbc>
 8004114:	9b03      	ldr	r3, [sp, #12]
 8004116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004118:	1bdb      	subs	r3, r3, r7
 800411a:	4638      	mov	r0, r7
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	b004      	add	sp, #16
 8004120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004124:	1c59      	adds	r1, r3, #1
 8004126:	9103      	str	r1, [sp, #12]
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e7f0      	b.n	800410e <__cvt+0xa6>

0800412c <__exponent>:
 800412c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800412e:	4603      	mov	r3, r0
 8004130:	2900      	cmp	r1, #0
 8004132:	bfb8      	it	lt
 8004134:	4249      	neglt	r1, r1
 8004136:	f803 2b02 	strb.w	r2, [r3], #2
 800413a:	bfb4      	ite	lt
 800413c:	222d      	movlt	r2, #45	; 0x2d
 800413e:	222b      	movge	r2, #43	; 0x2b
 8004140:	2909      	cmp	r1, #9
 8004142:	7042      	strb	r2, [r0, #1]
 8004144:	dd2a      	ble.n	800419c <__exponent+0x70>
 8004146:	f10d 0407 	add.w	r4, sp, #7
 800414a:	46a4      	mov	ip, r4
 800414c:	270a      	movs	r7, #10
 800414e:	46a6      	mov	lr, r4
 8004150:	460a      	mov	r2, r1
 8004152:	fb91 f6f7 	sdiv	r6, r1, r7
 8004156:	fb07 1516 	mls	r5, r7, r6, r1
 800415a:	3530      	adds	r5, #48	; 0x30
 800415c:	2a63      	cmp	r2, #99	; 0x63
 800415e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004162:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004166:	4631      	mov	r1, r6
 8004168:	dcf1      	bgt.n	800414e <__exponent+0x22>
 800416a:	3130      	adds	r1, #48	; 0x30
 800416c:	f1ae 0502 	sub.w	r5, lr, #2
 8004170:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004174:	1c44      	adds	r4, r0, #1
 8004176:	4629      	mov	r1, r5
 8004178:	4561      	cmp	r1, ip
 800417a:	d30a      	bcc.n	8004192 <__exponent+0x66>
 800417c:	f10d 0209 	add.w	r2, sp, #9
 8004180:	eba2 020e 	sub.w	r2, r2, lr
 8004184:	4565      	cmp	r5, ip
 8004186:	bf88      	it	hi
 8004188:	2200      	movhi	r2, #0
 800418a:	4413      	add	r3, r2
 800418c:	1a18      	subs	r0, r3, r0
 800418e:	b003      	add	sp, #12
 8004190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004196:	f804 2f01 	strb.w	r2, [r4, #1]!
 800419a:	e7ed      	b.n	8004178 <__exponent+0x4c>
 800419c:	2330      	movs	r3, #48	; 0x30
 800419e:	3130      	adds	r1, #48	; 0x30
 80041a0:	7083      	strb	r3, [r0, #2]
 80041a2:	70c1      	strb	r1, [r0, #3]
 80041a4:	1d03      	adds	r3, r0, #4
 80041a6:	e7f1      	b.n	800418c <__exponent+0x60>

080041a8 <_printf_float>:
 80041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ac:	ed2d 8b02 	vpush	{d8}
 80041b0:	b08d      	sub	sp, #52	; 0x34
 80041b2:	460c      	mov	r4, r1
 80041b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80041b8:	4616      	mov	r6, r2
 80041ba:	461f      	mov	r7, r3
 80041bc:	4605      	mov	r5, r0
 80041be:	f001 fbdf 	bl	8005980 <_localeconv_r>
 80041c2:	f8d0 a000 	ldr.w	sl, [r0]
 80041c6:	4650      	mov	r0, sl
 80041c8:	f7fc f80a 	bl	80001e0 <strlen>
 80041cc:	2300      	movs	r3, #0
 80041ce:	930a      	str	r3, [sp, #40]	; 0x28
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	9305      	str	r3, [sp, #20]
 80041d4:	f8d8 3000 	ldr.w	r3, [r8]
 80041d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80041dc:	3307      	adds	r3, #7
 80041de:	f023 0307 	bic.w	r3, r3, #7
 80041e2:	f103 0208 	add.w	r2, r3, #8
 80041e6:	f8c8 2000 	str.w	r2, [r8]
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80041f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80041fa:	9307      	str	r3, [sp, #28]
 80041fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004200:	ee08 0a10 	vmov	s16, r0
 8004204:	4b9f      	ldr	r3, [pc, #636]	; (8004484 <_printf_float+0x2dc>)
 8004206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800420a:	f04f 32ff 	mov.w	r2, #4294967295
 800420e:	f7fc fc95 	bl	8000b3c <__aeabi_dcmpun>
 8004212:	bb88      	cbnz	r0, 8004278 <_printf_float+0xd0>
 8004214:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004218:	4b9a      	ldr	r3, [pc, #616]	; (8004484 <_printf_float+0x2dc>)
 800421a:	f04f 32ff 	mov.w	r2, #4294967295
 800421e:	f7fc fc6f 	bl	8000b00 <__aeabi_dcmple>
 8004222:	bb48      	cbnz	r0, 8004278 <_printf_float+0xd0>
 8004224:	2200      	movs	r2, #0
 8004226:	2300      	movs	r3, #0
 8004228:	4640      	mov	r0, r8
 800422a:	4649      	mov	r1, r9
 800422c:	f7fc fc5e 	bl	8000aec <__aeabi_dcmplt>
 8004230:	b110      	cbz	r0, 8004238 <_printf_float+0x90>
 8004232:	232d      	movs	r3, #45	; 0x2d
 8004234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004238:	4b93      	ldr	r3, [pc, #588]	; (8004488 <_printf_float+0x2e0>)
 800423a:	4894      	ldr	r0, [pc, #592]	; (800448c <_printf_float+0x2e4>)
 800423c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004240:	bf94      	ite	ls
 8004242:	4698      	movls	r8, r3
 8004244:	4680      	movhi	r8, r0
 8004246:	2303      	movs	r3, #3
 8004248:	6123      	str	r3, [r4, #16]
 800424a:	9b05      	ldr	r3, [sp, #20]
 800424c:	f023 0204 	bic.w	r2, r3, #4
 8004250:	6022      	str	r2, [r4, #0]
 8004252:	f04f 0900 	mov.w	r9, #0
 8004256:	9700      	str	r7, [sp, #0]
 8004258:	4633      	mov	r3, r6
 800425a:	aa0b      	add	r2, sp, #44	; 0x2c
 800425c:	4621      	mov	r1, r4
 800425e:	4628      	mov	r0, r5
 8004260:	f000 f9d8 	bl	8004614 <_printf_common>
 8004264:	3001      	adds	r0, #1
 8004266:	f040 8090 	bne.w	800438a <_printf_float+0x1e2>
 800426a:	f04f 30ff 	mov.w	r0, #4294967295
 800426e:	b00d      	add	sp, #52	; 0x34
 8004270:	ecbd 8b02 	vpop	{d8}
 8004274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004278:	4642      	mov	r2, r8
 800427a:	464b      	mov	r3, r9
 800427c:	4640      	mov	r0, r8
 800427e:	4649      	mov	r1, r9
 8004280:	f7fc fc5c 	bl	8000b3c <__aeabi_dcmpun>
 8004284:	b140      	cbz	r0, 8004298 <_printf_float+0xf0>
 8004286:	464b      	mov	r3, r9
 8004288:	2b00      	cmp	r3, #0
 800428a:	bfbc      	itt	lt
 800428c:	232d      	movlt	r3, #45	; 0x2d
 800428e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004292:	487f      	ldr	r0, [pc, #508]	; (8004490 <_printf_float+0x2e8>)
 8004294:	4b7f      	ldr	r3, [pc, #508]	; (8004494 <_printf_float+0x2ec>)
 8004296:	e7d1      	b.n	800423c <_printf_float+0x94>
 8004298:	6863      	ldr	r3, [r4, #4]
 800429a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800429e:	9206      	str	r2, [sp, #24]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	d13f      	bne.n	8004324 <_printf_float+0x17c>
 80042a4:	2306      	movs	r3, #6
 80042a6:	6063      	str	r3, [r4, #4]
 80042a8:	9b05      	ldr	r3, [sp, #20]
 80042aa:	6861      	ldr	r1, [r4, #4]
 80042ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80042b0:	2300      	movs	r3, #0
 80042b2:	9303      	str	r3, [sp, #12]
 80042b4:	ab0a      	add	r3, sp, #40	; 0x28
 80042b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80042ba:	ab09      	add	r3, sp, #36	; 0x24
 80042bc:	ec49 8b10 	vmov	d0, r8, r9
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	6022      	str	r2, [r4, #0]
 80042c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042c8:	4628      	mov	r0, r5
 80042ca:	f7ff fecd 	bl	8004068 <__cvt>
 80042ce:	9b06      	ldr	r3, [sp, #24]
 80042d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042d2:	2b47      	cmp	r3, #71	; 0x47
 80042d4:	4680      	mov	r8, r0
 80042d6:	d108      	bne.n	80042ea <_printf_float+0x142>
 80042d8:	1cc8      	adds	r0, r1, #3
 80042da:	db02      	blt.n	80042e2 <_printf_float+0x13a>
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	4299      	cmp	r1, r3
 80042e0:	dd41      	ble.n	8004366 <_printf_float+0x1be>
 80042e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80042e6:	fa5f fb8b 	uxtb.w	fp, fp
 80042ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042ee:	d820      	bhi.n	8004332 <_printf_float+0x18a>
 80042f0:	3901      	subs	r1, #1
 80042f2:	465a      	mov	r2, fp
 80042f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042f8:	9109      	str	r1, [sp, #36]	; 0x24
 80042fa:	f7ff ff17 	bl	800412c <__exponent>
 80042fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004300:	1813      	adds	r3, r2, r0
 8004302:	2a01      	cmp	r2, #1
 8004304:	4681      	mov	r9, r0
 8004306:	6123      	str	r3, [r4, #16]
 8004308:	dc02      	bgt.n	8004310 <_printf_float+0x168>
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	07d2      	lsls	r2, r2, #31
 800430e:	d501      	bpl.n	8004314 <_printf_float+0x16c>
 8004310:	3301      	adds	r3, #1
 8004312:	6123      	str	r3, [r4, #16]
 8004314:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004318:	2b00      	cmp	r3, #0
 800431a:	d09c      	beq.n	8004256 <_printf_float+0xae>
 800431c:	232d      	movs	r3, #45	; 0x2d
 800431e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004322:	e798      	b.n	8004256 <_printf_float+0xae>
 8004324:	9a06      	ldr	r2, [sp, #24]
 8004326:	2a47      	cmp	r2, #71	; 0x47
 8004328:	d1be      	bne.n	80042a8 <_printf_float+0x100>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1bc      	bne.n	80042a8 <_printf_float+0x100>
 800432e:	2301      	movs	r3, #1
 8004330:	e7b9      	b.n	80042a6 <_printf_float+0xfe>
 8004332:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004336:	d118      	bne.n	800436a <_printf_float+0x1c2>
 8004338:	2900      	cmp	r1, #0
 800433a:	6863      	ldr	r3, [r4, #4]
 800433c:	dd0b      	ble.n	8004356 <_printf_float+0x1ae>
 800433e:	6121      	str	r1, [r4, #16]
 8004340:	b913      	cbnz	r3, 8004348 <_printf_float+0x1a0>
 8004342:	6822      	ldr	r2, [r4, #0]
 8004344:	07d0      	lsls	r0, r2, #31
 8004346:	d502      	bpl.n	800434e <_printf_float+0x1a6>
 8004348:	3301      	adds	r3, #1
 800434a:	440b      	add	r3, r1
 800434c:	6123      	str	r3, [r4, #16]
 800434e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004350:	f04f 0900 	mov.w	r9, #0
 8004354:	e7de      	b.n	8004314 <_printf_float+0x16c>
 8004356:	b913      	cbnz	r3, 800435e <_printf_float+0x1b6>
 8004358:	6822      	ldr	r2, [r4, #0]
 800435a:	07d2      	lsls	r2, r2, #31
 800435c:	d501      	bpl.n	8004362 <_printf_float+0x1ba>
 800435e:	3302      	adds	r3, #2
 8004360:	e7f4      	b.n	800434c <_printf_float+0x1a4>
 8004362:	2301      	movs	r3, #1
 8004364:	e7f2      	b.n	800434c <_printf_float+0x1a4>
 8004366:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800436a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800436c:	4299      	cmp	r1, r3
 800436e:	db05      	blt.n	800437c <_printf_float+0x1d4>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	6121      	str	r1, [r4, #16]
 8004374:	07d8      	lsls	r0, r3, #31
 8004376:	d5ea      	bpl.n	800434e <_printf_float+0x1a6>
 8004378:	1c4b      	adds	r3, r1, #1
 800437a:	e7e7      	b.n	800434c <_printf_float+0x1a4>
 800437c:	2900      	cmp	r1, #0
 800437e:	bfd4      	ite	le
 8004380:	f1c1 0202 	rsble	r2, r1, #2
 8004384:	2201      	movgt	r2, #1
 8004386:	4413      	add	r3, r2
 8004388:	e7e0      	b.n	800434c <_printf_float+0x1a4>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	055a      	lsls	r2, r3, #21
 800438e:	d407      	bmi.n	80043a0 <_printf_float+0x1f8>
 8004390:	6923      	ldr	r3, [r4, #16]
 8004392:	4642      	mov	r2, r8
 8004394:	4631      	mov	r1, r6
 8004396:	4628      	mov	r0, r5
 8004398:	47b8      	blx	r7
 800439a:	3001      	adds	r0, #1
 800439c:	d12c      	bne.n	80043f8 <_printf_float+0x250>
 800439e:	e764      	b.n	800426a <_printf_float+0xc2>
 80043a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043a4:	f240 80e0 	bls.w	8004568 <_printf_float+0x3c0>
 80043a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043ac:	2200      	movs	r2, #0
 80043ae:	2300      	movs	r3, #0
 80043b0:	f7fc fb92 	bl	8000ad8 <__aeabi_dcmpeq>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d034      	beq.n	8004422 <_printf_float+0x27a>
 80043b8:	4a37      	ldr	r2, [pc, #220]	; (8004498 <_printf_float+0x2f0>)
 80043ba:	2301      	movs	r3, #1
 80043bc:	4631      	mov	r1, r6
 80043be:	4628      	mov	r0, r5
 80043c0:	47b8      	blx	r7
 80043c2:	3001      	adds	r0, #1
 80043c4:	f43f af51 	beq.w	800426a <_printf_float+0xc2>
 80043c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043cc:	429a      	cmp	r2, r3
 80043ce:	db02      	blt.n	80043d6 <_printf_float+0x22e>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	07d8      	lsls	r0, r3, #31
 80043d4:	d510      	bpl.n	80043f8 <_printf_float+0x250>
 80043d6:	ee18 3a10 	vmov	r3, s16
 80043da:	4652      	mov	r2, sl
 80043dc:	4631      	mov	r1, r6
 80043de:	4628      	mov	r0, r5
 80043e0:	47b8      	blx	r7
 80043e2:	3001      	adds	r0, #1
 80043e4:	f43f af41 	beq.w	800426a <_printf_float+0xc2>
 80043e8:	f04f 0800 	mov.w	r8, #0
 80043ec:	f104 091a 	add.w	r9, r4, #26
 80043f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	4543      	cmp	r3, r8
 80043f6:	dc09      	bgt.n	800440c <_printf_float+0x264>
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	079b      	lsls	r3, r3, #30
 80043fc:	f100 8105 	bmi.w	800460a <_printf_float+0x462>
 8004400:	68e0      	ldr	r0, [r4, #12]
 8004402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004404:	4298      	cmp	r0, r3
 8004406:	bfb8      	it	lt
 8004408:	4618      	movlt	r0, r3
 800440a:	e730      	b.n	800426e <_printf_float+0xc6>
 800440c:	2301      	movs	r3, #1
 800440e:	464a      	mov	r2, r9
 8004410:	4631      	mov	r1, r6
 8004412:	4628      	mov	r0, r5
 8004414:	47b8      	blx	r7
 8004416:	3001      	adds	r0, #1
 8004418:	f43f af27 	beq.w	800426a <_printf_float+0xc2>
 800441c:	f108 0801 	add.w	r8, r8, #1
 8004420:	e7e6      	b.n	80043f0 <_printf_float+0x248>
 8004422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	dc39      	bgt.n	800449c <_printf_float+0x2f4>
 8004428:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <_printf_float+0x2f0>)
 800442a:	2301      	movs	r3, #1
 800442c:	4631      	mov	r1, r6
 800442e:	4628      	mov	r0, r5
 8004430:	47b8      	blx	r7
 8004432:	3001      	adds	r0, #1
 8004434:	f43f af19 	beq.w	800426a <_printf_float+0xc2>
 8004438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800443c:	4313      	orrs	r3, r2
 800443e:	d102      	bne.n	8004446 <_printf_float+0x29e>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	07d9      	lsls	r1, r3, #31
 8004444:	d5d8      	bpl.n	80043f8 <_printf_float+0x250>
 8004446:	ee18 3a10 	vmov	r3, s16
 800444a:	4652      	mov	r2, sl
 800444c:	4631      	mov	r1, r6
 800444e:	4628      	mov	r0, r5
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	f43f af09 	beq.w	800426a <_printf_float+0xc2>
 8004458:	f04f 0900 	mov.w	r9, #0
 800445c:	f104 0a1a 	add.w	sl, r4, #26
 8004460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004462:	425b      	negs	r3, r3
 8004464:	454b      	cmp	r3, r9
 8004466:	dc01      	bgt.n	800446c <_printf_float+0x2c4>
 8004468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800446a:	e792      	b.n	8004392 <_printf_float+0x1ea>
 800446c:	2301      	movs	r3, #1
 800446e:	4652      	mov	r2, sl
 8004470:	4631      	mov	r1, r6
 8004472:	4628      	mov	r0, r5
 8004474:	47b8      	blx	r7
 8004476:	3001      	adds	r0, #1
 8004478:	f43f aef7 	beq.w	800426a <_printf_float+0xc2>
 800447c:	f109 0901 	add.w	r9, r9, #1
 8004480:	e7ee      	b.n	8004460 <_printf_float+0x2b8>
 8004482:	bf00      	nop
 8004484:	7fefffff 	.word	0x7fefffff
 8004488:	08007724 	.word	0x08007724
 800448c:	08007728 	.word	0x08007728
 8004490:	08007730 	.word	0x08007730
 8004494:	0800772c 	.word	0x0800772c
 8004498:	08007734 	.word	0x08007734
 800449c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800449e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044a0:	429a      	cmp	r2, r3
 80044a2:	bfa8      	it	ge
 80044a4:	461a      	movge	r2, r3
 80044a6:	2a00      	cmp	r2, #0
 80044a8:	4691      	mov	r9, r2
 80044aa:	dc37      	bgt.n	800451c <_printf_float+0x374>
 80044ac:	f04f 0b00 	mov.w	fp, #0
 80044b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044b4:	f104 021a 	add.w	r2, r4, #26
 80044b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044ba:	9305      	str	r3, [sp, #20]
 80044bc:	eba3 0309 	sub.w	r3, r3, r9
 80044c0:	455b      	cmp	r3, fp
 80044c2:	dc33      	bgt.n	800452c <_printf_float+0x384>
 80044c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044c8:	429a      	cmp	r2, r3
 80044ca:	db3b      	blt.n	8004544 <_printf_float+0x39c>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	07da      	lsls	r2, r3, #31
 80044d0:	d438      	bmi.n	8004544 <_printf_float+0x39c>
 80044d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044d4:	9b05      	ldr	r3, [sp, #20]
 80044d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	eba2 0901 	sub.w	r9, r2, r1
 80044de:	4599      	cmp	r9, r3
 80044e0:	bfa8      	it	ge
 80044e2:	4699      	movge	r9, r3
 80044e4:	f1b9 0f00 	cmp.w	r9, #0
 80044e8:	dc35      	bgt.n	8004556 <_printf_float+0x3ae>
 80044ea:	f04f 0800 	mov.w	r8, #0
 80044ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044f2:	f104 0a1a 	add.w	sl, r4, #26
 80044f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	eba3 0309 	sub.w	r3, r3, r9
 8004500:	4543      	cmp	r3, r8
 8004502:	f77f af79 	ble.w	80043f8 <_printf_float+0x250>
 8004506:	2301      	movs	r3, #1
 8004508:	4652      	mov	r2, sl
 800450a:	4631      	mov	r1, r6
 800450c:	4628      	mov	r0, r5
 800450e:	47b8      	blx	r7
 8004510:	3001      	adds	r0, #1
 8004512:	f43f aeaa 	beq.w	800426a <_printf_float+0xc2>
 8004516:	f108 0801 	add.w	r8, r8, #1
 800451a:	e7ec      	b.n	80044f6 <_printf_float+0x34e>
 800451c:	4613      	mov	r3, r2
 800451e:	4631      	mov	r1, r6
 8004520:	4642      	mov	r2, r8
 8004522:	4628      	mov	r0, r5
 8004524:	47b8      	blx	r7
 8004526:	3001      	adds	r0, #1
 8004528:	d1c0      	bne.n	80044ac <_printf_float+0x304>
 800452a:	e69e      	b.n	800426a <_printf_float+0xc2>
 800452c:	2301      	movs	r3, #1
 800452e:	4631      	mov	r1, r6
 8004530:	4628      	mov	r0, r5
 8004532:	9205      	str	r2, [sp, #20]
 8004534:	47b8      	blx	r7
 8004536:	3001      	adds	r0, #1
 8004538:	f43f ae97 	beq.w	800426a <_printf_float+0xc2>
 800453c:	9a05      	ldr	r2, [sp, #20]
 800453e:	f10b 0b01 	add.w	fp, fp, #1
 8004542:	e7b9      	b.n	80044b8 <_printf_float+0x310>
 8004544:	ee18 3a10 	vmov	r3, s16
 8004548:	4652      	mov	r2, sl
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	d1be      	bne.n	80044d2 <_printf_float+0x32a>
 8004554:	e689      	b.n	800426a <_printf_float+0xc2>
 8004556:	9a05      	ldr	r2, [sp, #20]
 8004558:	464b      	mov	r3, r9
 800455a:	4442      	add	r2, r8
 800455c:	4631      	mov	r1, r6
 800455e:	4628      	mov	r0, r5
 8004560:	47b8      	blx	r7
 8004562:	3001      	adds	r0, #1
 8004564:	d1c1      	bne.n	80044ea <_printf_float+0x342>
 8004566:	e680      	b.n	800426a <_printf_float+0xc2>
 8004568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800456a:	2a01      	cmp	r2, #1
 800456c:	dc01      	bgt.n	8004572 <_printf_float+0x3ca>
 800456e:	07db      	lsls	r3, r3, #31
 8004570:	d538      	bpl.n	80045e4 <_printf_float+0x43c>
 8004572:	2301      	movs	r3, #1
 8004574:	4642      	mov	r2, r8
 8004576:	4631      	mov	r1, r6
 8004578:	4628      	mov	r0, r5
 800457a:	47b8      	blx	r7
 800457c:	3001      	adds	r0, #1
 800457e:	f43f ae74 	beq.w	800426a <_printf_float+0xc2>
 8004582:	ee18 3a10 	vmov	r3, s16
 8004586:	4652      	mov	r2, sl
 8004588:	4631      	mov	r1, r6
 800458a:	4628      	mov	r0, r5
 800458c:	47b8      	blx	r7
 800458e:	3001      	adds	r0, #1
 8004590:	f43f ae6b 	beq.w	800426a <_printf_float+0xc2>
 8004594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004598:	2200      	movs	r2, #0
 800459a:	2300      	movs	r3, #0
 800459c:	f7fc fa9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80045a0:	b9d8      	cbnz	r0, 80045da <_printf_float+0x432>
 80045a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a4:	f108 0201 	add.w	r2, r8, #1
 80045a8:	3b01      	subs	r3, #1
 80045aa:	4631      	mov	r1, r6
 80045ac:	4628      	mov	r0, r5
 80045ae:	47b8      	blx	r7
 80045b0:	3001      	adds	r0, #1
 80045b2:	d10e      	bne.n	80045d2 <_printf_float+0x42a>
 80045b4:	e659      	b.n	800426a <_printf_float+0xc2>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4652      	mov	r2, sl
 80045ba:	4631      	mov	r1, r6
 80045bc:	4628      	mov	r0, r5
 80045be:	47b8      	blx	r7
 80045c0:	3001      	adds	r0, #1
 80045c2:	f43f ae52 	beq.w	800426a <_printf_float+0xc2>
 80045c6:	f108 0801 	add.w	r8, r8, #1
 80045ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045cc:	3b01      	subs	r3, #1
 80045ce:	4543      	cmp	r3, r8
 80045d0:	dcf1      	bgt.n	80045b6 <_printf_float+0x40e>
 80045d2:	464b      	mov	r3, r9
 80045d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045d8:	e6dc      	b.n	8004394 <_printf_float+0x1ec>
 80045da:	f04f 0800 	mov.w	r8, #0
 80045de:	f104 0a1a 	add.w	sl, r4, #26
 80045e2:	e7f2      	b.n	80045ca <_printf_float+0x422>
 80045e4:	2301      	movs	r3, #1
 80045e6:	4642      	mov	r2, r8
 80045e8:	e7df      	b.n	80045aa <_printf_float+0x402>
 80045ea:	2301      	movs	r3, #1
 80045ec:	464a      	mov	r2, r9
 80045ee:	4631      	mov	r1, r6
 80045f0:	4628      	mov	r0, r5
 80045f2:	47b8      	blx	r7
 80045f4:	3001      	adds	r0, #1
 80045f6:	f43f ae38 	beq.w	800426a <_printf_float+0xc2>
 80045fa:	f108 0801 	add.w	r8, r8, #1
 80045fe:	68e3      	ldr	r3, [r4, #12]
 8004600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004602:	1a5b      	subs	r3, r3, r1
 8004604:	4543      	cmp	r3, r8
 8004606:	dcf0      	bgt.n	80045ea <_printf_float+0x442>
 8004608:	e6fa      	b.n	8004400 <_printf_float+0x258>
 800460a:	f04f 0800 	mov.w	r8, #0
 800460e:	f104 0919 	add.w	r9, r4, #25
 8004612:	e7f4      	b.n	80045fe <_printf_float+0x456>

08004614 <_printf_common>:
 8004614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004618:	4616      	mov	r6, r2
 800461a:	4699      	mov	r9, r3
 800461c:	688a      	ldr	r2, [r1, #8]
 800461e:	690b      	ldr	r3, [r1, #16]
 8004620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004624:	4293      	cmp	r3, r2
 8004626:	bfb8      	it	lt
 8004628:	4613      	movlt	r3, r2
 800462a:	6033      	str	r3, [r6, #0]
 800462c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004630:	4607      	mov	r7, r0
 8004632:	460c      	mov	r4, r1
 8004634:	b10a      	cbz	r2, 800463a <_printf_common+0x26>
 8004636:	3301      	adds	r3, #1
 8004638:	6033      	str	r3, [r6, #0]
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	0699      	lsls	r1, r3, #26
 800463e:	bf42      	ittt	mi
 8004640:	6833      	ldrmi	r3, [r6, #0]
 8004642:	3302      	addmi	r3, #2
 8004644:	6033      	strmi	r3, [r6, #0]
 8004646:	6825      	ldr	r5, [r4, #0]
 8004648:	f015 0506 	ands.w	r5, r5, #6
 800464c:	d106      	bne.n	800465c <_printf_common+0x48>
 800464e:	f104 0a19 	add.w	sl, r4, #25
 8004652:	68e3      	ldr	r3, [r4, #12]
 8004654:	6832      	ldr	r2, [r6, #0]
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	42ab      	cmp	r3, r5
 800465a:	dc26      	bgt.n	80046aa <_printf_common+0x96>
 800465c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004660:	1e13      	subs	r3, r2, #0
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	bf18      	it	ne
 8004666:	2301      	movne	r3, #1
 8004668:	0692      	lsls	r2, r2, #26
 800466a:	d42b      	bmi.n	80046c4 <_printf_common+0xb0>
 800466c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004670:	4649      	mov	r1, r9
 8004672:	4638      	mov	r0, r7
 8004674:	47c0      	blx	r8
 8004676:	3001      	adds	r0, #1
 8004678:	d01e      	beq.n	80046b8 <_printf_common+0xa4>
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	68e5      	ldr	r5, [r4, #12]
 800467e:	6832      	ldr	r2, [r6, #0]
 8004680:	f003 0306 	and.w	r3, r3, #6
 8004684:	2b04      	cmp	r3, #4
 8004686:	bf08      	it	eq
 8004688:	1aad      	subeq	r5, r5, r2
 800468a:	68a3      	ldr	r3, [r4, #8]
 800468c:	6922      	ldr	r2, [r4, #16]
 800468e:	bf0c      	ite	eq
 8004690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004694:	2500      	movne	r5, #0
 8004696:	4293      	cmp	r3, r2
 8004698:	bfc4      	itt	gt
 800469a:	1a9b      	subgt	r3, r3, r2
 800469c:	18ed      	addgt	r5, r5, r3
 800469e:	2600      	movs	r6, #0
 80046a0:	341a      	adds	r4, #26
 80046a2:	42b5      	cmp	r5, r6
 80046a4:	d11a      	bne.n	80046dc <_printf_common+0xc8>
 80046a6:	2000      	movs	r0, #0
 80046a8:	e008      	b.n	80046bc <_printf_common+0xa8>
 80046aa:	2301      	movs	r3, #1
 80046ac:	4652      	mov	r2, sl
 80046ae:	4649      	mov	r1, r9
 80046b0:	4638      	mov	r0, r7
 80046b2:	47c0      	blx	r8
 80046b4:	3001      	adds	r0, #1
 80046b6:	d103      	bne.n	80046c0 <_printf_common+0xac>
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295
 80046bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c0:	3501      	adds	r5, #1
 80046c2:	e7c6      	b.n	8004652 <_printf_common+0x3e>
 80046c4:	18e1      	adds	r1, r4, r3
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	2030      	movs	r0, #48	; 0x30
 80046ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ce:	4422      	add	r2, r4
 80046d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046d8:	3302      	adds	r3, #2
 80046da:	e7c7      	b.n	800466c <_printf_common+0x58>
 80046dc:	2301      	movs	r3, #1
 80046de:	4622      	mov	r2, r4
 80046e0:	4649      	mov	r1, r9
 80046e2:	4638      	mov	r0, r7
 80046e4:	47c0      	blx	r8
 80046e6:	3001      	adds	r0, #1
 80046e8:	d0e6      	beq.n	80046b8 <_printf_common+0xa4>
 80046ea:	3601      	adds	r6, #1
 80046ec:	e7d9      	b.n	80046a2 <_printf_common+0x8e>
	...

080046f0 <_printf_i>:
 80046f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f4:	460c      	mov	r4, r1
 80046f6:	4691      	mov	r9, r2
 80046f8:	7e27      	ldrb	r7, [r4, #24]
 80046fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046fc:	2f78      	cmp	r7, #120	; 0x78
 80046fe:	4680      	mov	r8, r0
 8004700:	469a      	mov	sl, r3
 8004702:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004706:	d807      	bhi.n	8004718 <_printf_i+0x28>
 8004708:	2f62      	cmp	r7, #98	; 0x62
 800470a:	d80a      	bhi.n	8004722 <_printf_i+0x32>
 800470c:	2f00      	cmp	r7, #0
 800470e:	f000 80d8 	beq.w	80048c2 <_printf_i+0x1d2>
 8004712:	2f58      	cmp	r7, #88	; 0x58
 8004714:	f000 80a3 	beq.w	800485e <_printf_i+0x16e>
 8004718:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800471c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004720:	e03a      	b.n	8004798 <_printf_i+0xa8>
 8004722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004726:	2b15      	cmp	r3, #21
 8004728:	d8f6      	bhi.n	8004718 <_printf_i+0x28>
 800472a:	a001      	add	r0, pc, #4	; (adr r0, 8004730 <_printf_i+0x40>)
 800472c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004730:	08004789 	.word	0x08004789
 8004734:	0800479d 	.word	0x0800479d
 8004738:	08004719 	.word	0x08004719
 800473c:	08004719 	.word	0x08004719
 8004740:	08004719 	.word	0x08004719
 8004744:	08004719 	.word	0x08004719
 8004748:	0800479d 	.word	0x0800479d
 800474c:	08004719 	.word	0x08004719
 8004750:	08004719 	.word	0x08004719
 8004754:	08004719 	.word	0x08004719
 8004758:	08004719 	.word	0x08004719
 800475c:	080048a9 	.word	0x080048a9
 8004760:	080047cd 	.word	0x080047cd
 8004764:	0800488b 	.word	0x0800488b
 8004768:	08004719 	.word	0x08004719
 800476c:	08004719 	.word	0x08004719
 8004770:	080048cb 	.word	0x080048cb
 8004774:	08004719 	.word	0x08004719
 8004778:	080047cd 	.word	0x080047cd
 800477c:	08004719 	.word	0x08004719
 8004780:	08004719 	.word	0x08004719
 8004784:	08004893 	.word	0x08004893
 8004788:	680b      	ldr	r3, [r1, #0]
 800478a:	1d1a      	adds	r2, r3, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	600a      	str	r2, [r1, #0]
 8004790:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004798:	2301      	movs	r3, #1
 800479a:	e0a3      	b.n	80048e4 <_printf_i+0x1f4>
 800479c:	6825      	ldr	r5, [r4, #0]
 800479e:	6808      	ldr	r0, [r1, #0]
 80047a0:	062e      	lsls	r6, r5, #24
 80047a2:	f100 0304 	add.w	r3, r0, #4
 80047a6:	d50a      	bpl.n	80047be <_printf_i+0xce>
 80047a8:	6805      	ldr	r5, [r0, #0]
 80047aa:	600b      	str	r3, [r1, #0]
 80047ac:	2d00      	cmp	r5, #0
 80047ae:	da03      	bge.n	80047b8 <_printf_i+0xc8>
 80047b0:	232d      	movs	r3, #45	; 0x2d
 80047b2:	426d      	negs	r5, r5
 80047b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b8:	485e      	ldr	r0, [pc, #376]	; (8004934 <_printf_i+0x244>)
 80047ba:	230a      	movs	r3, #10
 80047bc:	e019      	b.n	80047f2 <_printf_i+0x102>
 80047be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047c2:	6805      	ldr	r5, [r0, #0]
 80047c4:	600b      	str	r3, [r1, #0]
 80047c6:	bf18      	it	ne
 80047c8:	b22d      	sxthne	r5, r5
 80047ca:	e7ef      	b.n	80047ac <_printf_i+0xbc>
 80047cc:	680b      	ldr	r3, [r1, #0]
 80047ce:	6825      	ldr	r5, [r4, #0]
 80047d0:	1d18      	adds	r0, r3, #4
 80047d2:	6008      	str	r0, [r1, #0]
 80047d4:	0628      	lsls	r0, r5, #24
 80047d6:	d501      	bpl.n	80047dc <_printf_i+0xec>
 80047d8:	681d      	ldr	r5, [r3, #0]
 80047da:	e002      	b.n	80047e2 <_printf_i+0xf2>
 80047dc:	0669      	lsls	r1, r5, #25
 80047de:	d5fb      	bpl.n	80047d8 <_printf_i+0xe8>
 80047e0:	881d      	ldrh	r5, [r3, #0]
 80047e2:	4854      	ldr	r0, [pc, #336]	; (8004934 <_printf_i+0x244>)
 80047e4:	2f6f      	cmp	r7, #111	; 0x6f
 80047e6:	bf0c      	ite	eq
 80047e8:	2308      	moveq	r3, #8
 80047ea:	230a      	movne	r3, #10
 80047ec:	2100      	movs	r1, #0
 80047ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047f2:	6866      	ldr	r6, [r4, #4]
 80047f4:	60a6      	str	r6, [r4, #8]
 80047f6:	2e00      	cmp	r6, #0
 80047f8:	bfa2      	ittt	ge
 80047fa:	6821      	ldrge	r1, [r4, #0]
 80047fc:	f021 0104 	bicge.w	r1, r1, #4
 8004800:	6021      	strge	r1, [r4, #0]
 8004802:	b90d      	cbnz	r5, 8004808 <_printf_i+0x118>
 8004804:	2e00      	cmp	r6, #0
 8004806:	d04d      	beq.n	80048a4 <_printf_i+0x1b4>
 8004808:	4616      	mov	r6, r2
 800480a:	fbb5 f1f3 	udiv	r1, r5, r3
 800480e:	fb03 5711 	mls	r7, r3, r1, r5
 8004812:	5dc7      	ldrb	r7, [r0, r7]
 8004814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004818:	462f      	mov	r7, r5
 800481a:	42bb      	cmp	r3, r7
 800481c:	460d      	mov	r5, r1
 800481e:	d9f4      	bls.n	800480a <_printf_i+0x11a>
 8004820:	2b08      	cmp	r3, #8
 8004822:	d10b      	bne.n	800483c <_printf_i+0x14c>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	07df      	lsls	r7, r3, #31
 8004828:	d508      	bpl.n	800483c <_printf_i+0x14c>
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	6861      	ldr	r1, [r4, #4]
 800482e:	4299      	cmp	r1, r3
 8004830:	bfde      	ittt	le
 8004832:	2330      	movle	r3, #48	; 0x30
 8004834:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004838:	f106 36ff 	addle.w	r6, r6, #4294967295
 800483c:	1b92      	subs	r2, r2, r6
 800483e:	6122      	str	r2, [r4, #16]
 8004840:	f8cd a000 	str.w	sl, [sp]
 8004844:	464b      	mov	r3, r9
 8004846:	aa03      	add	r2, sp, #12
 8004848:	4621      	mov	r1, r4
 800484a:	4640      	mov	r0, r8
 800484c:	f7ff fee2 	bl	8004614 <_printf_common>
 8004850:	3001      	adds	r0, #1
 8004852:	d14c      	bne.n	80048ee <_printf_i+0x1fe>
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	b004      	add	sp, #16
 800485a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485e:	4835      	ldr	r0, [pc, #212]	; (8004934 <_printf_i+0x244>)
 8004860:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	680e      	ldr	r6, [r1, #0]
 8004868:	061f      	lsls	r7, r3, #24
 800486a:	f856 5b04 	ldr.w	r5, [r6], #4
 800486e:	600e      	str	r6, [r1, #0]
 8004870:	d514      	bpl.n	800489c <_printf_i+0x1ac>
 8004872:	07d9      	lsls	r1, r3, #31
 8004874:	bf44      	itt	mi
 8004876:	f043 0320 	orrmi.w	r3, r3, #32
 800487a:	6023      	strmi	r3, [r4, #0]
 800487c:	b91d      	cbnz	r5, 8004886 <_printf_i+0x196>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	f023 0320 	bic.w	r3, r3, #32
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	2310      	movs	r3, #16
 8004888:	e7b0      	b.n	80047ec <_printf_i+0xfc>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	f043 0320 	orr.w	r3, r3, #32
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	2378      	movs	r3, #120	; 0x78
 8004894:	4828      	ldr	r0, [pc, #160]	; (8004938 <_printf_i+0x248>)
 8004896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800489a:	e7e3      	b.n	8004864 <_printf_i+0x174>
 800489c:	065e      	lsls	r6, r3, #25
 800489e:	bf48      	it	mi
 80048a0:	b2ad      	uxthmi	r5, r5
 80048a2:	e7e6      	b.n	8004872 <_printf_i+0x182>
 80048a4:	4616      	mov	r6, r2
 80048a6:	e7bb      	b.n	8004820 <_printf_i+0x130>
 80048a8:	680b      	ldr	r3, [r1, #0]
 80048aa:	6826      	ldr	r6, [r4, #0]
 80048ac:	6960      	ldr	r0, [r4, #20]
 80048ae:	1d1d      	adds	r5, r3, #4
 80048b0:	600d      	str	r5, [r1, #0]
 80048b2:	0635      	lsls	r5, r6, #24
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	d501      	bpl.n	80048bc <_printf_i+0x1cc>
 80048b8:	6018      	str	r0, [r3, #0]
 80048ba:	e002      	b.n	80048c2 <_printf_i+0x1d2>
 80048bc:	0671      	lsls	r1, r6, #25
 80048be:	d5fb      	bpl.n	80048b8 <_printf_i+0x1c8>
 80048c0:	8018      	strh	r0, [r3, #0]
 80048c2:	2300      	movs	r3, #0
 80048c4:	6123      	str	r3, [r4, #16]
 80048c6:	4616      	mov	r6, r2
 80048c8:	e7ba      	b.n	8004840 <_printf_i+0x150>
 80048ca:	680b      	ldr	r3, [r1, #0]
 80048cc:	1d1a      	adds	r2, r3, #4
 80048ce:	600a      	str	r2, [r1, #0]
 80048d0:	681e      	ldr	r6, [r3, #0]
 80048d2:	6862      	ldr	r2, [r4, #4]
 80048d4:	2100      	movs	r1, #0
 80048d6:	4630      	mov	r0, r6
 80048d8:	f7fb fc8a 	bl	80001f0 <memchr>
 80048dc:	b108      	cbz	r0, 80048e2 <_printf_i+0x1f2>
 80048de:	1b80      	subs	r0, r0, r6
 80048e0:	6060      	str	r0, [r4, #4]
 80048e2:	6863      	ldr	r3, [r4, #4]
 80048e4:	6123      	str	r3, [r4, #16]
 80048e6:	2300      	movs	r3, #0
 80048e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ec:	e7a8      	b.n	8004840 <_printf_i+0x150>
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	4632      	mov	r2, r6
 80048f2:	4649      	mov	r1, r9
 80048f4:	4640      	mov	r0, r8
 80048f6:	47d0      	blx	sl
 80048f8:	3001      	adds	r0, #1
 80048fa:	d0ab      	beq.n	8004854 <_printf_i+0x164>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	079b      	lsls	r3, r3, #30
 8004900:	d413      	bmi.n	800492a <_printf_i+0x23a>
 8004902:	68e0      	ldr	r0, [r4, #12]
 8004904:	9b03      	ldr	r3, [sp, #12]
 8004906:	4298      	cmp	r0, r3
 8004908:	bfb8      	it	lt
 800490a:	4618      	movlt	r0, r3
 800490c:	e7a4      	b.n	8004858 <_printf_i+0x168>
 800490e:	2301      	movs	r3, #1
 8004910:	4632      	mov	r2, r6
 8004912:	4649      	mov	r1, r9
 8004914:	4640      	mov	r0, r8
 8004916:	47d0      	blx	sl
 8004918:	3001      	adds	r0, #1
 800491a:	d09b      	beq.n	8004854 <_printf_i+0x164>
 800491c:	3501      	adds	r5, #1
 800491e:	68e3      	ldr	r3, [r4, #12]
 8004920:	9903      	ldr	r1, [sp, #12]
 8004922:	1a5b      	subs	r3, r3, r1
 8004924:	42ab      	cmp	r3, r5
 8004926:	dcf2      	bgt.n	800490e <_printf_i+0x21e>
 8004928:	e7eb      	b.n	8004902 <_printf_i+0x212>
 800492a:	2500      	movs	r5, #0
 800492c:	f104 0619 	add.w	r6, r4, #25
 8004930:	e7f5      	b.n	800491e <_printf_i+0x22e>
 8004932:	bf00      	nop
 8004934:	08007736 	.word	0x08007736
 8004938:	08007747 	.word	0x08007747

0800493c <swapfunc>:
 800493c:	2b02      	cmp	r3, #2
 800493e:	b510      	push	{r4, lr}
 8004940:	d00a      	beq.n	8004958 <swapfunc+0x1c>
 8004942:	0892      	lsrs	r2, r2, #2
 8004944:	3a01      	subs	r2, #1
 8004946:	6803      	ldr	r3, [r0, #0]
 8004948:	680c      	ldr	r4, [r1, #0]
 800494a:	f840 4b04 	str.w	r4, [r0], #4
 800494e:	2a00      	cmp	r2, #0
 8004950:	f841 3b04 	str.w	r3, [r1], #4
 8004954:	dcf6      	bgt.n	8004944 <swapfunc+0x8>
 8004956:	bd10      	pop	{r4, pc}
 8004958:	4402      	add	r2, r0
 800495a:	780c      	ldrb	r4, [r1, #0]
 800495c:	7803      	ldrb	r3, [r0, #0]
 800495e:	f800 4b01 	strb.w	r4, [r0], #1
 8004962:	f801 3b01 	strb.w	r3, [r1], #1
 8004966:	1a13      	subs	r3, r2, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	dcf6      	bgt.n	800495a <swapfunc+0x1e>
 800496c:	e7f3      	b.n	8004956 <swapfunc+0x1a>

0800496e <med3.isra.0>:
 800496e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004970:	460f      	mov	r7, r1
 8004972:	4614      	mov	r4, r2
 8004974:	4606      	mov	r6, r0
 8004976:	461d      	mov	r5, r3
 8004978:	4798      	blx	r3
 800497a:	2800      	cmp	r0, #0
 800497c:	4621      	mov	r1, r4
 800497e:	4638      	mov	r0, r7
 8004980:	da0c      	bge.n	800499c <med3.isra.0+0x2e>
 8004982:	47a8      	blx	r5
 8004984:	2800      	cmp	r0, #0
 8004986:	da02      	bge.n	800498e <med3.isra.0+0x20>
 8004988:	463c      	mov	r4, r7
 800498a:	4620      	mov	r0, r4
 800498c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800498e:	4621      	mov	r1, r4
 8004990:	4630      	mov	r0, r6
 8004992:	47a8      	blx	r5
 8004994:	2800      	cmp	r0, #0
 8004996:	dbf8      	blt.n	800498a <med3.isra.0+0x1c>
 8004998:	4634      	mov	r4, r6
 800499a:	e7f6      	b.n	800498a <med3.isra.0+0x1c>
 800499c:	47a8      	blx	r5
 800499e:	2800      	cmp	r0, #0
 80049a0:	dcf2      	bgt.n	8004988 <med3.isra.0+0x1a>
 80049a2:	4621      	mov	r1, r4
 80049a4:	4630      	mov	r0, r6
 80049a6:	47a8      	blx	r5
 80049a8:	2800      	cmp	r0, #0
 80049aa:	daee      	bge.n	800498a <med3.isra.0+0x1c>
 80049ac:	e7f4      	b.n	8004998 <med3.isra.0+0x2a>

080049ae <qsort>:
 80049ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b2:	469a      	mov	sl, r3
 80049b4:	ea40 0302 	orr.w	r3, r0, r2
 80049b8:	079b      	lsls	r3, r3, #30
 80049ba:	b097      	sub	sp, #92	; 0x5c
 80049bc:	4606      	mov	r6, r0
 80049be:	4614      	mov	r4, r2
 80049c0:	d11a      	bne.n	80049f8 <qsort+0x4a>
 80049c2:	f1b2 0804 	subs.w	r8, r2, #4
 80049c6:	bf18      	it	ne
 80049c8:	f04f 0801 	movne.w	r8, #1
 80049cc:	2300      	movs	r3, #0
 80049ce:	9302      	str	r3, [sp, #8]
 80049d0:	1933      	adds	r3, r6, r4
 80049d2:	fb04 f701 	mul.w	r7, r4, r1
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	2906      	cmp	r1, #6
 80049da:	eb06 0307 	add.w	r3, r6, r7
 80049de:	9303      	str	r3, [sp, #12]
 80049e0:	d82a      	bhi.n	8004a38 <qsort+0x8a>
 80049e2:	9b01      	ldr	r3, [sp, #4]
 80049e4:	9a03      	ldr	r2, [sp, #12]
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d310      	bcc.n	8004a0c <qsort+0x5e>
 80049ea:	9b02      	ldr	r3, [sp, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 811f 	bne.w	8004c30 <qsort+0x282>
 80049f2:	b017      	add	sp, #92	; 0x5c
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f8:	f04f 0802 	mov.w	r8, #2
 80049fc:	e7e6      	b.n	80049cc <qsort+0x1e>
 80049fe:	4643      	mov	r3, r8
 8004a00:	4622      	mov	r2, r4
 8004a02:	4639      	mov	r1, r7
 8004a04:	4628      	mov	r0, r5
 8004a06:	f7ff ff99 	bl	800493c <swapfunc>
 8004a0a:	e00e      	b.n	8004a2a <qsort+0x7c>
 8004a0c:	9d01      	ldr	r5, [sp, #4]
 8004a0e:	e00d      	b.n	8004a2c <qsort+0x7e>
 8004a10:	1b2f      	subs	r7, r5, r4
 8004a12:	4629      	mov	r1, r5
 8004a14:	4638      	mov	r0, r7
 8004a16:	47d0      	blx	sl
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	dd09      	ble.n	8004a30 <qsort+0x82>
 8004a1c:	f1b8 0f00 	cmp.w	r8, #0
 8004a20:	d1ed      	bne.n	80049fe <qsort+0x50>
 8004a22:	682b      	ldr	r3, [r5, #0]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	602a      	str	r2, [r5, #0]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	463d      	mov	r5, r7
 8004a2c:	42ae      	cmp	r6, r5
 8004a2e:	d3ef      	bcc.n	8004a10 <qsort+0x62>
 8004a30:	9b01      	ldr	r3, [sp, #4]
 8004a32:	4423      	add	r3, r4
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	e7d4      	b.n	80049e2 <qsort+0x34>
 8004a38:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8004a3c:	1b3f      	subs	r7, r7, r4
 8004a3e:	2907      	cmp	r1, #7
 8004a40:	fb04 6909 	mla	r9, r4, r9, r6
 8004a44:	4437      	add	r7, r6
 8004a46:	d022      	beq.n	8004a8e <qsort+0xe0>
 8004a48:	2928      	cmp	r1, #40	; 0x28
 8004a4a:	d945      	bls.n	8004ad8 <qsort+0x12a>
 8004a4c:	08c9      	lsrs	r1, r1, #3
 8004a4e:	fb04 f501 	mul.w	r5, r4, r1
 8004a52:	4653      	mov	r3, sl
 8004a54:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8004a58:	1971      	adds	r1, r6, r5
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7ff ff87 	bl	800496e <med3.isra.0>
 8004a60:	4649      	mov	r1, r9
 8004a62:	eb09 0205 	add.w	r2, r9, r5
 8004a66:	4653      	mov	r3, sl
 8004a68:	4683      	mov	fp, r0
 8004a6a:	1b48      	subs	r0, r1, r5
 8004a6c:	f7ff ff7f 	bl	800496e <med3.isra.0>
 8004a70:	463a      	mov	r2, r7
 8004a72:	4681      	mov	r9, r0
 8004a74:	4653      	mov	r3, sl
 8004a76:	1b79      	subs	r1, r7, r5
 8004a78:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8004a7c:	f7ff ff77 	bl	800496e <med3.isra.0>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4649      	mov	r1, r9
 8004a84:	4653      	mov	r3, sl
 8004a86:	4658      	mov	r0, fp
 8004a88:	f7ff ff71 	bl	800496e <med3.isra.0>
 8004a8c:	4681      	mov	r9, r0
 8004a8e:	f1b8 0f00 	cmp.w	r8, #0
 8004a92:	d124      	bne.n	8004ade <qsort+0x130>
 8004a94:	6833      	ldr	r3, [r6, #0]
 8004a96:	f8d9 2000 	ldr.w	r2, [r9]
 8004a9a:	6032      	str	r2, [r6, #0]
 8004a9c:	f8c9 3000 	str.w	r3, [r9]
 8004aa0:	eb06 0b04 	add.w	fp, r6, r4
 8004aa4:	46b9      	mov	r9, r7
 8004aa6:	465d      	mov	r5, fp
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	45bb      	cmp	fp, r7
 8004aac:	d835      	bhi.n	8004b1a <qsort+0x16c>
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4658      	mov	r0, fp
 8004ab2:	9304      	str	r3, [sp, #16]
 8004ab4:	47d0      	blx	sl
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	9b04      	ldr	r3, [sp, #16]
 8004aba:	dc3e      	bgt.n	8004b3a <qsort+0x18c>
 8004abc:	d10a      	bne.n	8004ad4 <qsort+0x126>
 8004abe:	f1b8 0f00 	cmp.w	r8, #0
 8004ac2:	d113      	bne.n	8004aec <qsort+0x13e>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	f8db 2000 	ldr.w	r2, [fp]
 8004aca:	602a      	str	r2, [r5, #0]
 8004acc:	f8cb 3000 	str.w	r3, [fp]
 8004ad0:	4425      	add	r5, r4
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	44a3      	add	fp, r4
 8004ad6:	e7e8      	b.n	8004aaa <qsort+0xfc>
 8004ad8:	463a      	mov	r2, r7
 8004ada:	46b3      	mov	fp, r6
 8004adc:	e7d1      	b.n	8004a82 <qsort+0xd4>
 8004ade:	4643      	mov	r3, r8
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f7ff ff29 	bl	800493c <swapfunc>
 8004aea:	e7d9      	b.n	8004aa0 <qsort+0xf2>
 8004aec:	4643      	mov	r3, r8
 8004aee:	4622      	mov	r2, r4
 8004af0:	4659      	mov	r1, fp
 8004af2:	4628      	mov	r0, r5
 8004af4:	f7ff ff22 	bl	800493c <swapfunc>
 8004af8:	e7ea      	b.n	8004ad0 <qsort+0x122>
 8004afa:	d10b      	bne.n	8004b14 <qsort+0x166>
 8004afc:	f1b8 0f00 	cmp.w	r8, #0
 8004b00:	d114      	bne.n	8004b2c <qsort+0x17e>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f8d9 2000 	ldr.w	r2, [r9]
 8004b08:	603a      	str	r2, [r7, #0]
 8004b0a:	f8c9 3000 	str.w	r3, [r9]
 8004b0e:	eba9 0904 	sub.w	r9, r9, r4
 8004b12:	2301      	movs	r3, #1
 8004b14:	9f04      	ldr	r7, [sp, #16]
 8004b16:	45bb      	cmp	fp, r7
 8004b18:	d90f      	bls.n	8004b3a <qsort+0x18c>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d143      	bne.n	8004ba6 <qsort+0x1f8>
 8004b1e:	9b01      	ldr	r3, [sp, #4]
 8004b20:	9a03      	ldr	r2, [sp, #12]
 8004b22:	4293      	cmp	r3, r2
 8004b24:	f4bf af61 	bcs.w	80049ea <qsort+0x3c>
 8004b28:	9d01      	ldr	r5, [sp, #4]
 8004b2a:	e036      	b.n	8004b9a <qsort+0x1ec>
 8004b2c:	4643      	mov	r3, r8
 8004b2e:	4622      	mov	r2, r4
 8004b30:	4649      	mov	r1, r9
 8004b32:	4638      	mov	r0, r7
 8004b34:	f7ff ff02 	bl	800493c <swapfunc>
 8004b38:	e7e9      	b.n	8004b0e <qsort+0x160>
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	9305      	str	r3, [sp, #20]
 8004b40:	47d0      	blx	sl
 8004b42:	1b3b      	subs	r3, r7, r4
 8004b44:	2800      	cmp	r0, #0
 8004b46:	9304      	str	r3, [sp, #16]
 8004b48:	9b05      	ldr	r3, [sp, #20]
 8004b4a:	dad6      	bge.n	8004afa <qsort+0x14c>
 8004b4c:	f1b8 0f00 	cmp.w	r8, #0
 8004b50:	d006      	beq.n	8004b60 <qsort+0x1b2>
 8004b52:	4643      	mov	r3, r8
 8004b54:	4622      	mov	r2, r4
 8004b56:	4639      	mov	r1, r7
 8004b58:	4658      	mov	r0, fp
 8004b5a:	f7ff feef 	bl	800493c <swapfunc>
 8004b5e:	e005      	b.n	8004b6c <qsort+0x1be>
 8004b60:	f8db 3000 	ldr.w	r3, [fp]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	f8cb 2000 	str.w	r2, [fp]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	9f04      	ldr	r7, [sp, #16]
 8004b6e:	e7b0      	b.n	8004ad2 <qsort+0x124>
 8004b70:	4643      	mov	r3, r8
 8004b72:	4622      	mov	r2, r4
 8004b74:	4639      	mov	r1, r7
 8004b76:	4628      	mov	r0, r5
 8004b78:	f7ff fee0 	bl	800493c <swapfunc>
 8004b7c:	e00c      	b.n	8004b98 <qsort+0x1ea>
 8004b7e:	1b2f      	subs	r7, r5, r4
 8004b80:	4629      	mov	r1, r5
 8004b82:	4638      	mov	r0, r7
 8004b84:	47d0      	blx	sl
 8004b86:	2800      	cmp	r0, #0
 8004b88:	dd09      	ble.n	8004b9e <qsort+0x1f0>
 8004b8a:	f1b8 0f00 	cmp.w	r8, #0
 8004b8e:	d1ef      	bne.n	8004b70 <qsort+0x1c2>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	602a      	str	r2, [r5, #0]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	463d      	mov	r5, r7
 8004b9a:	42ae      	cmp	r6, r5
 8004b9c:	d3ef      	bcc.n	8004b7e <qsort+0x1d0>
 8004b9e:	9b01      	ldr	r3, [sp, #4]
 8004ba0:	4423      	add	r3, r4
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	e7bb      	b.n	8004b1e <qsort+0x170>
 8004ba6:	ebab 0305 	sub.w	r3, fp, r5
 8004baa:	1baa      	subs	r2, r5, r6
 8004bac:	429a      	cmp	r2, r3
 8004bae:	bfa8      	it	ge
 8004bb0:	461a      	movge	r2, r3
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	b12a      	cbz	r2, 8004bc2 <qsort+0x214>
 8004bb6:	4643      	mov	r3, r8
 8004bb8:	ebab 0102 	sub.w	r1, fp, r2
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f7ff febd 	bl	800493c <swapfunc>
 8004bc2:	9b03      	ldr	r3, [sp, #12]
 8004bc4:	eba3 0209 	sub.w	r2, r3, r9
 8004bc8:	eba9 0707 	sub.w	r7, r9, r7
 8004bcc:	1b12      	subs	r2, r2, r4
 8004bce:	42ba      	cmp	r2, r7
 8004bd0:	bf28      	it	cs
 8004bd2:	463a      	movcs	r2, r7
 8004bd4:	b12a      	cbz	r2, 8004be2 <qsort+0x234>
 8004bd6:	9903      	ldr	r1, [sp, #12]
 8004bd8:	4643      	mov	r3, r8
 8004bda:	1a89      	subs	r1, r1, r2
 8004bdc:	4658      	mov	r0, fp
 8004bde:	f7ff fead 	bl	800493c <swapfunc>
 8004be2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004be6:	9b03      	ldr	r3, [sp, #12]
 8004be8:	454f      	cmp	r7, r9
 8004bea:	eba3 0007 	sub.w	r0, r3, r7
 8004bee:	d904      	bls.n	8004bfa <qsort+0x24c>
 8004bf0:	4633      	mov	r3, r6
 8004bf2:	46b9      	mov	r9, r7
 8004bf4:	9f01      	ldr	r7, [sp, #4]
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	42a7      	cmp	r7, r4
 8004bfc:	d921      	bls.n	8004c42 <qsort+0x294>
 8004bfe:	fbb7 f1f4 	udiv	r1, r7, r4
 8004c02:	9b02      	ldr	r3, [sp, #8]
 8004c04:	2b07      	cmp	r3, #7
 8004c06:	d80d      	bhi.n	8004c24 <qsort+0x276>
 8004c08:	fbb9 f7f4 	udiv	r7, r9, r4
 8004c0c:	aa16      	add	r2, sp, #88	; 0x58
 8004c0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c12:	f843 6c40 	str.w	r6, [r3, #-64]
 8004c16:	f843 7c3c 	str.w	r7, [r3, #-60]
 8004c1a:	9b02      	ldr	r3, [sp, #8]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	9302      	str	r3, [sp, #8]
 8004c20:	4606      	mov	r6, r0
 8004c22:	e6d5      	b.n	80049d0 <qsort+0x22>
 8004c24:	4653      	mov	r3, sl
 8004c26:	4622      	mov	r2, r4
 8004c28:	f7ff fec1 	bl	80049ae <qsort>
 8004c2c:	45a1      	cmp	r9, r4
 8004c2e:	d80b      	bhi.n	8004c48 <qsort+0x29a>
 8004c30:	9b02      	ldr	r3, [sp, #8]
 8004c32:	aa16      	add	r2, sp, #88	; 0x58
 8004c34:	3b01      	subs	r3, #1
 8004c36:	9302      	str	r3, [sp, #8]
 8004c38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c3c:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8004c40:	e7ee      	b.n	8004c20 <qsort+0x272>
 8004c42:	45a1      	cmp	r9, r4
 8004c44:	f67f aed1 	bls.w	80049ea <qsort+0x3c>
 8004c48:	fbb9 f1f4 	udiv	r1, r9, r4
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	e7e7      	b.n	8004c20 <qsort+0x272>

08004c50 <siprintf>:
 8004c50:	b40e      	push	{r1, r2, r3}
 8004c52:	b500      	push	{lr}
 8004c54:	b09c      	sub	sp, #112	; 0x70
 8004c56:	ab1d      	add	r3, sp, #116	; 0x74
 8004c58:	9002      	str	r0, [sp, #8]
 8004c5a:	9006      	str	r0, [sp, #24]
 8004c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c60:	4809      	ldr	r0, [pc, #36]	; (8004c88 <siprintf+0x38>)
 8004c62:	9107      	str	r1, [sp, #28]
 8004c64:	9104      	str	r1, [sp, #16]
 8004c66:	4909      	ldr	r1, [pc, #36]	; (8004c8c <siprintf+0x3c>)
 8004c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c6c:	9105      	str	r1, [sp, #20]
 8004c6e:	6800      	ldr	r0, [r0, #0]
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	a902      	add	r1, sp, #8
 8004c74:	f001 fb24 	bl	80062c0 <_svfiprintf_r>
 8004c78:	9b02      	ldr	r3, [sp, #8]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	b01c      	add	sp, #112	; 0x70
 8004c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c84:	b003      	add	sp, #12
 8004c86:	4770      	bx	lr
 8004c88:	2000000c 	.word	0x2000000c
 8004c8c:	ffff0208 	.word	0xffff0208

08004c90 <quorem>:
 8004c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c94:	6903      	ldr	r3, [r0, #16]
 8004c96:	690c      	ldr	r4, [r1, #16]
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	4607      	mov	r7, r0
 8004c9c:	f2c0 8081 	blt.w	8004da2 <quorem+0x112>
 8004ca0:	3c01      	subs	r4, #1
 8004ca2:	f101 0814 	add.w	r8, r1, #20
 8004ca6:	f100 0514 	add.w	r5, r0, #20
 8004caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004cc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004cc8:	d331      	bcc.n	8004d2e <quorem+0x9e>
 8004cca:	f04f 0e00 	mov.w	lr, #0
 8004cce:	4640      	mov	r0, r8
 8004cd0:	46ac      	mov	ip, r5
 8004cd2:	46f2      	mov	sl, lr
 8004cd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004cd8:	b293      	uxth	r3, r2
 8004cda:	fb06 e303 	mla	r3, r6, r3, lr
 8004cde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	ebaa 0303 	sub.w	r3, sl, r3
 8004ce8:	0c12      	lsrs	r2, r2, #16
 8004cea:	f8dc a000 	ldr.w	sl, [ip]
 8004cee:	fb06 e202 	mla	r2, r6, r2, lr
 8004cf2:	fa13 f38a 	uxtah	r3, r3, sl
 8004cf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004cfa:	fa1f fa82 	uxth.w	sl, r2
 8004cfe:	f8dc 2000 	ldr.w	r2, [ip]
 8004d02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004d06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d10:	4581      	cmp	r9, r0
 8004d12:	f84c 3b04 	str.w	r3, [ip], #4
 8004d16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d1a:	d2db      	bcs.n	8004cd4 <quorem+0x44>
 8004d1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d20:	b92b      	cbnz	r3, 8004d2e <quorem+0x9e>
 8004d22:	9b01      	ldr	r3, [sp, #4]
 8004d24:	3b04      	subs	r3, #4
 8004d26:	429d      	cmp	r5, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	d32e      	bcc.n	8004d8a <quorem+0xfa>
 8004d2c:	613c      	str	r4, [r7, #16]
 8004d2e:	4638      	mov	r0, r7
 8004d30:	f001 f8b0 	bl	8005e94 <__mcmp>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	db24      	blt.n	8004d82 <quorem+0xf2>
 8004d38:	3601      	adds	r6, #1
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f04f 0c00 	mov.w	ip, #0
 8004d40:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d44:	f8d0 e000 	ldr.w	lr, [r0]
 8004d48:	b293      	uxth	r3, r2
 8004d4a:	ebac 0303 	sub.w	r3, ip, r3
 8004d4e:	0c12      	lsrs	r2, r2, #16
 8004d50:	fa13 f38e 	uxtah	r3, r3, lr
 8004d54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d62:	45c1      	cmp	r9, r8
 8004d64:	f840 3b04 	str.w	r3, [r0], #4
 8004d68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d6c:	d2e8      	bcs.n	8004d40 <quorem+0xb0>
 8004d6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d76:	b922      	cbnz	r2, 8004d82 <quorem+0xf2>
 8004d78:	3b04      	subs	r3, #4
 8004d7a:	429d      	cmp	r5, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	d30a      	bcc.n	8004d96 <quorem+0x106>
 8004d80:	613c      	str	r4, [r7, #16]
 8004d82:	4630      	mov	r0, r6
 8004d84:	b003      	add	sp, #12
 8004d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	3b04      	subs	r3, #4
 8004d8e:	2a00      	cmp	r2, #0
 8004d90:	d1cc      	bne.n	8004d2c <quorem+0x9c>
 8004d92:	3c01      	subs	r4, #1
 8004d94:	e7c7      	b.n	8004d26 <quorem+0x96>
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	3b04      	subs	r3, #4
 8004d9a:	2a00      	cmp	r2, #0
 8004d9c:	d1f0      	bne.n	8004d80 <quorem+0xf0>
 8004d9e:	3c01      	subs	r4, #1
 8004da0:	e7eb      	b.n	8004d7a <quorem+0xea>
 8004da2:	2000      	movs	r0, #0
 8004da4:	e7ee      	b.n	8004d84 <quorem+0xf4>
	...

08004da8 <_dtoa_r>:
 8004da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dac:	ed2d 8b02 	vpush	{d8}
 8004db0:	ec57 6b10 	vmov	r6, r7, d0
 8004db4:	b095      	sub	sp, #84	; 0x54
 8004db6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004db8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004dbc:	9105      	str	r1, [sp, #20]
 8004dbe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8004dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dc8:	b975      	cbnz	r5, 8004de8 <_dtoa_r+0x40>
 8004dca:	2010      	movs	r0, #16
 8004dcc:	f000 fddc 	bl	8005988 <malloc>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6260      	str	r0, [r4, #36]	; 0x24
 8004dd4:	b920      	cbnz	r0, 8004de0 <_dtoa_r+0x38>
 8004dd6:	4bb2      	ldr	r3, [pc, #712]	; (80050a0 <_dtoa_r+0x2f8>)
 8004dd8:	21ea      	movs	r1, #234	; 0xea
 8004dda:	48b2      	ldr	r0, [pc, #712]	; (80050a4 <_dtoa_r+0x2fc>)
 8004ddc:	f001 fb80 	bl	80064e0 <__assert_func>
 8004de0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004de4:	6005      	str	r5, [r0, #0]
 8004de6:	60c5      	str	r5, [r0, #12]
 8004de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dea:	6819      	ldr	r1, [r3, #0]
 8004dec:	b151      	cbz	r1, 8004e04 <_dtoa_r+0x5c>
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	604a      	str	r2, [r1, #4]
 8004df2:	2301      	movs	r3, #1
 8004df4:	4093      	lsls	r3, r2
 8004df6:	608b      	str	r3, [r1, #8]
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f000 fe0d 	bl	8005a18 <_Bfree>
 8004dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	1e3b      	subs	r3, r7, #0
 8004e06:	bfb9      	ittee	lt
 8004e08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e0c:	9303      	strlt	r3, [sp, #12]
 8004e0e:	2300      	movge	r3, #0
 8004e10:	f8c8 3000 	strge.w	r3, [r8]
 8004e14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004e18:	4ba3      	ldr	r3, [pc, #652]	; (80050a8 <_dtoa_r+0x300>)
 8004e1a:	bfbc      	itt	lt
 8004e1c:	2201      	movlt	r2, #1
 8004e1e:	f8c8 2000 	strlt.w	r2, [r8]
 8004e22:	ea33 0309 	bics.w	r3, r3, r9
 8004e26:	d11b      	bne.n	8004e60 <_dtoa_r+0xb8>
 8004e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e34:	4333      	orrs	r3, r6
 8004e36:	f000 857a 	beq.w	800592e <_dtoa_r+0xb86>
 8004e3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e3c:	b963      	cbnz	r3, 8004e58 <_dtoa_r+0xb0>
 8004e3e:	4b9b      	ldr	r3, [pc, #620]	; (80050ac <_dtoa_r+0x304>)
 8004e40:	e024      	b.n	8004e8c <_dtoa_r+0xe4>
 8004e42:	4b9b      	ldr	r3, [pc, #620]	; (80050b0 <_dtoa_r+0x308>)
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	9800      	ldr	r0, [sp, #0]
 8004e4e:	b015      	add	sp, #84	; 0x54
 8004e50:	ecbd 8b02 	vpop	{d8}
 8004e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e58:	4b94      	ldr	r3, [pc, #592]	; (80050ac <_dtoa_r+0x304>)
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	3303      	adds	r3, #3
 8004e5e:	e7f3      	b.n	8004e48 <_dtoa_r+0xa0>
 8004e60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e64:	2200      	movs	r2, #0
 8004e66:	ec51 0b17 	vmov	r0, r1, d7
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004e70:	f7fb fe32 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e74:	4680      	mov	r8, r0
 8004e76:	b158      	cbz	r0, 8004e90 <_dtoa_r+0xe8>
 8004e78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8551 	beq.w	8005928 <_dtoa_r+0xb80>
 8004e86:	488b      	ldr	r0, [pc, #556]	; (80050b4 <_dtoa_r+0x30c>)
 8004e88:	6018      	str	r0, [r3, #0]
 8004e8a:	1e43      	subs	r3, r0, #1
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	e7dd      	b.n	8004e4c <_dtoa_r+0xa4>
 8004e90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004e94:	aa12      	add	r2, sp, #72	; 0x48
 8004e96:	a913      	add	r1, sp, #76	; 0x4c
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f001 f89f 	bl	8005fdc <__d2b>
 8004e9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004ea2:	4683      	mov	fp, r0
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	d07c      	beq.n	8004fa2 <_dtoa_r+0x1fa>
 8004ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eaa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eb2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004eb6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004eba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004ebe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004ec2:	4b7d      	ldr	r3, [pc, #500]	; (80050b8 <_dtoa_r+0x310>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	4639      	mov	r1, r7
 8004eca:	f7fb f9e5 	bl	8000298 <__aeabi_dsub>
 8004ece:	a36e      	add	r3, pc, #440	; (adr r3, 8005088 <_dtoa_r+0x2e0>)
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f7fb fb98 	bl	8000608 <__aeabi_dmul>
 8004ed8:	a36d      	add	r3, pc, #436	; (adr r3, 8005090 <_dtoa_r+0x2e8>)
 8004eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ede:	f7fb f9dd 	bl	800029c <__adddf3>
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	460f      	mov	r7, r1
 8004ee8:	f7fb fb24 	bl	8000534 <__aeabi_i2d>
 8004eec:	a36a      	add	r3, pc, #424	; (adr r3, 8005098 <_dtoa_r+0x2f0>)
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f7fb fb89 	bl	8000608 <__aeabi_dmul>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4630      	mov	r0, r6
 8004efc:	4639      	mov	r1, r7
 8004efe:	f7fb f9cd 	bl	800029c <__adddf3>
 8004f02:	4606      	mov	r6, r0
 8004f04:	460f      	mov	r7, r1
 8004f06:	f7fb fe2f 	bl	8000b68 <__aeabi_d2iz>
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	4682      	mov	sl, r0
 8004f0e:	2300      	movs	r3, #0
 8004f10:	4630      	mov	r0, r6
 8004f12:	4639      	mov	r1, r7
 8004f14:	f7fb fdea 	bl	8000aec <__aeabi_dcmplt>
 8004f18:	b148      	cbz	r0, 8004f2e <_dtoa_r+0x186>
 8004f1a:	4650      	mov	r0, sl
 8004f1c:	f7fb fb0a 	bl	8000534 <__aeabi_i2d>
 8004f20:	4632      	mov	r2, r6
 8004f22:	463b      	mov	r3, r7
 8004f24:	f7fb fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f28:	b908      	cbnz	r0, 8004f2e <_dtoa_r+0x186>
 8004f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f2e:	f1ba 0f16 	cmp.w	sl, #22
 8004f32:	d854      	bhi.n	8004fde <_dtoa_r+0x236>
 8004f34:	4b61      	ldr	r3, [pc, #388]	; (80050bc <_dtoa_r+0x314>)
 8004f36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f42:	f7fb fdd3 	bl	8000aec <__aeabi_dcmplt>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d04b      	beq.n	8004fe2 <_dtoa_r+0x23a>
 8004f4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f4e:	2300      	movs	r3, #0
 8004f50:	930e      	str	r3, [sp, #56]	; 0x38
 8004f52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f54:	1b5d      	subs	r5, r3, r5
 8004f56:	1e6b      	subs	r3, r5, #1
 8004f58:	9304      	str	r3, [sp, #16]
 8004f5a:	bf43      	ittte	mi
 8004f5c:	2300      	movmi	r3, #0
 8004f5e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004f62:	9304      	strmi	r3, [sp, #16]
 8004f64:	f04f 0800 	movpl.w	r8, #0
 8004f68:	f1ba 0f00 	cmp.w	sl, #0
 8004f6c:	db3b      	blt.n	8004fe6 <_dtoa_r+0x23e>
 8004f6e:	9b04      	ldr	r3, [sp, #16]
 8004f70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004f74:	4453      	add	r3, sl
 8004f76:	9304      	str	r3, [sp, #16]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9306      	str	r3, [sp, #24]
 8004f7c:	9b05      	ldr	r3, [sp, #20]
 8004f7e:	2b09      	cmp	r3, #9
 8004f80:	d869      	bhi.n	8005056 <_dtoa_r+0x2ae>
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	bfc4      	itt	gt
 8004f86:	3b04      	subgt	r3, #4
 8004f88:	9305      	strgt	r3, [sp, #20]
 8004f8a:	9b05      	ldr	r3, [sp, #20]
 8004f8c:	f1a3 0302 	sub.w	r3, r3, #2
 8004f90:	bfcc      	ite	gt
 8004f92:	2500      	movgt	r5, #0
 8004f94:	2501      	movle	r5, #1
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d869      	bhi.n	800506e <_dtoa_r+0x2c6>
 8004f9a:	e8df f003 	tbb	[pc, r3]
 8004f9e:	4e2c      	.short	0x4e2c
 8004fa0:	5a4c      	.short	0x5a4c
 8004fa2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004fa6:	441d      	add	r5, r3
 8004fa8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	bfc1      	itttt	gt
 8004fb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004fb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004fb8:	fa09 f303 	lslgt.w	r3, r9, r3
 8004fbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004fc0:	bfda      	itte	le
 8004fc2:	f1c3 0320 	rsble	r3, r3, #32
 8004fc6:	fa06 f003 	lslle.w	r0, r6, r3
 8004fca:	4318      	orrgt	r0, r3
 8004fcc:	f7fb faa2 	bl	8000514 <__aeabi_ui2d>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004fd8:	3d01      	subs	r5, #1
 8004fda:	9310      	str	r3, [sp, #64]	; 0x40
 8004fdc:	e771      	b.n	8004ec2 <_dtoa_r+0x11a>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e7b6      	b.n	8004f50 <_dtoa_r+0x1a8>
 8004fe2:	900e      	str	r0, [sp, #56]	; 0x38
 8004fe4:	e7b5      	b.n	8004f52 <_dtoa_r+0x1aa>
 8004fe6:	f1ca 0300 	rsb	r3, sl, #0
 8004fea:	9306      	str	r3, [sp, #24]
 8004fec:	2300      	movs	r3, #0
 8004fee:	eba8 080a 	sub.w	r8, r8, sl
 8004ff2:	930d      	str	r3, [sp, #52]	; 0x34
 8004ff4:	e7c2      	b.n	8004f7c <_dtoa_r+0x1d4>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9308      	str	r3, [sp, #32]
 8004ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	dc39      	bgt.n	8005074 <_dtoa_r+0x2cc>
 8005000:	f04f 0901 	mov.w	r9, #1
 8005004:	f8cd 9004 	str.w	r9, [sp, #4]
 8005008:	464b      	mov	r3, r9
 800500a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800500e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005010:	2200      	movs	r2, #0
 8005012:	6042      	str	r2, [r0, #4]
 8005014:	2204      	movs	r2, #4
 8005016:	f102 0614 	add.w	r6, r2, #20
 800501a:	429e      	cmp	r6, r3
 800501c:	6841      	ldr	r1, [r0, #4]
 800501e:	d92f      	bls.n	8005080 <_dtoa_r+0x2d8>
 8005020:	4620      	mov	r0, r4
 8005022:	f000 fcb9 	bl	8005998 <_Balloc>
 8005026:	9000      	str	r0, [sp, #0]
 8005028:	2800      	cmp	r0, #0
 800502a:	d14b      	bne.n	80050c4 <_dtoa_r+0x31c>
 800502c:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <_dtoa_r+0x318>)
 800502e:	4602      	mov	r2, r0
 8005030:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005034:	e6d1      	b.n	8004dda <_dtoa_r+0x32>
 8005036:	2301      	movs	r3, #1
 8005038:	e7de      	b.n	8004ff8 <_dtoa_r+0x250>
 800503a:	2300      	movs	r3, #0
 800503c:	9308      	str	r3, [sp, #32]
 800503e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005040:	eb0a 0903 	add.w	r9, sl, r3
 8005044:	f109 0301 	add.w	r3, r9, #1
 8005048:	2b01      	cmp	r3, #1
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	bfb8      	it	lt
 800504e:	2301      	movlt	r3, #1
 8005050:	e7dd      	b.n	800500e <_dtoa_r+0x266>
 8005052:	2301      	movs	r3, #1
 8005054:	e7f2      	b.n	800503c <_dtoa_r+0x294>
 8005056:	2501      	movs	r5, #1
 8005058:	2300      	movs	r3, #0
 800505a:	9305      	str	r3, [sp, #20]
 800505c:	9508      	str	r5, [sp, #32]
 800505e:	f04f 39ff 	mov.w	r9, #4294967295
 8005062:	2200      	movs	r2, #0
 8005064:	f8cd 9004 	str.w	r9, [sp, #4]
 8005068:	2312      	movs	r3, #18
 800506a:	9209      	str	r2, [sp, #36]	; 0x24
 800506c:	e7cf      	b.n	800500e <_dtoa_r+0x266>
 800506e:	2301      	movs	r3, #1
 8005070:	9308      	str	r3, [sp, #32]
 8005072:	e7f4      	b.n	800505e <_dtoa_r+0x2b6>
 8005074:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005078:	f8cd 9004 	str.w	r9, [sp, #4]
 800507c:	464b      	mov	r3, r9
 800507e:	e7c6      	b.n	800500e <_dtoa_r+0x266>
 8005080:	3101      	adds	r1, #1
 8005082:	6041      	str	r1, [r0, #4]
 8005084:	0052      	lsls	r2, r2, #1
 8005086:	e7c6      	b.n	8005016 <_dtoa_r+0x26e>
 8005088:	636f4361 	.word	0x636f4361
 800508c:	3fd287a7 	.word	0x3fd287a7
 8005090:	8b60c8b3 	.word	0x8b60c8b3
 8005094:	3fc68a28 	.word	0x3fc68a28
 8005098:	509f79fb 	.word	0x509f79fb
 800509c:	3fd34413 	.word	0x3fd34413
 80050a0:	08007765 	.word	0x08007765
 80050a4:	0800777c 	.word	0x0800777c
 80050a8:	7ff00000 	.word	0x7ff00000
 80050ac:	08007761 	.word	0x08007761
 80050b0:	08007758 	.word	0x08007758
 80050b4:	08007735 	.word	0x08007735
 80050b8:	3ff80000 	.word	0x3ff80000
 80050bc:	08007878 	.word	0x08007878
 80050c0:	080077db 	.word	0x080077db
 80050c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050c6:	9a00      	ldr	r2, [sp, #0]
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	9b01      	ldr	r3, [sp, #4]
 80050cc:	2b0e      	cmp	r3, #14
 80050ce:	f200 80ad 	bhi.w	800522c <_dtoa_r+0x484>
 80050d2:	2d00      	cmp	r5, #0
 80050d4:	f000 80aa 	beq.w	800522c <_dtoa_r+0x484>
 80050d8:	f1ba 0f00 	cmp.w	sl, #0
 80050dc:	dd36      	ble.n	800514c <_dtoa_r+0x3a4>
 80050de:	4ac3      	ldr	r2, [pc, #780]	; (80053ec <_dtoa_r+0x644>)
 80050e0:	f00a 030f 	and.w	r3, sl, #15
 80050e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050e8:	ed93 7b00 	vldr	d7, [r3]
 80050ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80050f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80050f4:	eeb0 8a47 	vmov.f32	s16, s14
 80050f8:	eef0 8a67 	vmov.f32	s17, s15
 80050fc:	d016      	beq.n	800512c <_dtoa_r+0x384>
 80050fe:	4bbc      	ldr	r3, [pc, #752]	; (80053f0 <_dtoa_r+0x648>)
 8005100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005108:	f7fb fba8 	bl	800085c <__aeabi_ddiv>
 800510c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005110:	f007 070f 	and.w	r7, r7, #15
 8005114:	2503      	movs	r5, #3
 8005116:	4eb6      	ldr	r6, [pc, #728]	; (80053f0 <_dtoa_r+0x648>)
 8005118:	b957      	cbnz	r7, 8005130 <_dtoa_r+0x388>
 800511a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800511e:	ec53 2b18 	vmov	r2, r3, d8
 8005122:	f7fb fb9b 	bl	800085c <__aeabi_ddiv>
 8005126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800512a:	e029      	b.n	8005180 <_dtoa_r+0x3d8>
 800512c:	2502      	movs	r5, #2
 800512e:	e7f2      	b.n	8005116 <_dtoa_r+0x36e>
 8005130:	07f9      	lsls	r1, r7, #31
 8005132:	d508      	bpl.n	8005146 <_dtoa_r+0x39e>
 8005134:	ec51 0b18 	vmov	r0, r1, d8
 8005138:	e9d6 2300 	ldrd	r2, r3, [r6]
 800513c:	f7fb fa64 	bl	8000608 <__aeabi_dmul>
 8005140:	ec41 0b18 	vmov	d8, r0, r1
 8005144:	3501      	adds	r5, #1
 8005146:	107f      	asrs	r7, r7, #1
 8005148:	3608      	adds	r6, #8
 800514a:	e7e5      	b.n	8005118 <_dtoa_r+0x370>
 800514c:	f000 80a6 	beq.w	800529c <_dtoa_r+0x4f4>
 8005150:	f1ca 0600 	rsb	r6, sl, #0
 8005154:	4ba5      	ldr	r3, [pc, #660]	; (80053ec <_dtoa_r+0x644>)
 8005156:	4fa6      	ldr	r7, [pc, #664]	; (80053f0 <_dtoa_r+0x648>)
 8005158:	f006 020f 	and.w	r2, r6, #15
 800515c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005168:	f7fb fa4e 	bl	8000608 <__aeabi_dmul>
 800516c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005170:	1136      	asrs	r6, r6, #4
 8005172:	2300      	movs	r3, #0
 8005174:	2502      	movs	r5, #2
 8005176:	2e00      	cmp	r6, #0
 8005178:	f040 8085 	bne.w	8005286 <_dtoa_r+0x4de>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1d2      	bne.n	8005126 <_dtoa_r+0x37e>
 8005180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 808c 	beq.w	80052a0 <_dtoa_r+0x4f8>
 8005188:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800518c:	4b99      	ldr	r3, [pc, #612]	; (80053f4 <_dtoa_r+0x64c>)
 800518e:	2200      	movs	r2, #0
 8005190:	4630      	mov	r0, r6
 8005192:	4639      	mov	r1, r7
 8005194:	f7fb fcaa 	bl	8000aec <__aeabi_dcmplt>
 8005198:	2800      	cmp	r0, #0
 800519a:	f000 8081 	beq.w	80052a0 <_dtoa_r+0x4f8>
 800519e:	9b01      	ldr	r3, [sp, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d07d      	beq.n	80052a0 <_dtoa_r+0x4f8>
 80051a4:	f1b9 0f00 	cmp.w	r9, #0
 80051a8:	dd3c      	ble.n	8005224 <_dtoa_r+0x47c>
 80051aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80051ae:	9307      	str	r3, [sp, #28]
 80051b0:	2200      	movs	r2, #0
 80051b2:	4b91      	ldr	r3, [pc, #580]	; (80053f8 <_dtoa_r+0x650>)
 80051b4:	4630      	mov	r0, r6
 80051b6:	4639      	mov	r1, r7
 80051b8:	f7fb fa26 	bl	8000608 <__aeabi_dmul>
 80051bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c0:	3501      	adds	r5, #1
 80051c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80051c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051ca:	4628      	mov	r0, r5
 80051cc:	f7fb f9b2 	bl	8000534 <__aeabi_i2d>
 80051d0:	4632      	mov	r2, r6
 80051d2:	463b      	mov	r3, r7
 80051d4:	f7fb fa18 	bl	8000608 <__aeabi_dmul>
 80051d8:	4b88      	ldr	r3, [pc, #544]	; (80053fc <_dtoa_r+0x654>)
 80051da:	2200      	movs	r2, #0
 80051dc:	f7fb f85e 	bl	800029c <__adddf3>
 80051e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80051e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051e8:	9303      	str	r3, [sp, #12]
 80051ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d15c      	bne.n	80052aa <_dtoa_r+0x502>
 80051f0:	4b83      	ldr	r3, [pc, #524]	; (8005400 <_dtoa_r+0x658>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	4630      	mov	r0, r6
 80051f6:	4639      	mov	r1, r7
 80051f8:	f7fb f84e 	bl	8000298 <__aeabi_dsub>
 80051fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005200:	4606      	mov	r6, r0
 8005202:	460f      	mov	r7, r1
 8005204:	f7fb fc90 	bl	8000b28 <__aeabi_dcmpgt>
 8005208:	2800      	cmp	r0, #0
 800520a:	f040 8296 	bne.w	800573a <_dtoa_r+0x992>
 800520e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005212:	4630      	mov	r0, r6
 8005214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005218:	4639      	mov	r1, r7
 800521a:	f7fb fc67 	bl	8000aec <__aeabi_dcmplt>
 800521e:	2800      	cmp	r0, #0
 8005220:	f040 8288 	bne.w	8005734 <_dtoa_r+0x98c>
 8005224:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005228:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800522c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800522e:	2b00      	cmp	r3, #0
 8005230:	f2c0 8158 	blt.w	80054e4 <_dtoa_r+0x73c>
 8005234:	f1ba 0f0e 	cmp.w	sl, #14
 8005238:	f300 8154 	bgt.w	80054e4 <_dtoa_r+0x73c>
 800523c:	4b6b      	ldr	r3, [pc, #428]	; (80053ec <_dtoa_r+0x644>)
 800523e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005242:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005248:	2b00      	cmp	r3, #0
 800524a:	f280 80e3 	bge.w	8005414 <_dtoa_r+0x66c>
 800524e:	9b01      	ldr	r3, [sp, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f300 80df 	bgt.w	8005414 <_dtoa_r+0x66c>
 8005256:	f040 826d 	bne.w	8005734 <_dtoa_r+0x98c>
 800525a:	4b69      	ldr	r3, [pc, #420]	; (8005400 <_dtoa_r+0x658>)
 800525c:	2200      	movs	r2, #0
 800525e:	4640      	mov	r0, r8
 8005260:	4649      	mov	r1, r9
 8005262:	f7fb f9d1 	bl	8000608 <__aeabi_dmul>
 8005266:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800526a:	f7fb fc53 	bl	8000b14 <__aeabi_dcmpge>
 800526e:	9e01      	ldr	r6, [sp, #4]
 8005270:	4637      	mov	r7, r6
 8005272:	2800      	cmp	r0, #0
 8005274:	f040 8243 	bne.w	80056fe <_dtoa_r+0x956>
 8005278:	9d00      	ldr	r5, [sp, #0]
 800527a:	2331      	movs	r3, #49	; 0x31
 800527c:	f805 3b01 	strb.w	r3, [r5], #1
 8005280:	f10a 0a01 	add.w	sl, sl, #1
 8005284:	e23f      	b.n	8005706 <_dtoa_r+0x95e>
 8005286:	07f2      	lsls	r2, r6, #31
 8005288:	d505      	bpl.n	8005296 <_dtoa_r+0x4ee>
 800528a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800528e:	f7fb f9bb 	bl	8000608 <__aeabi_dmul>
 8005292:	3501      	adds	r5, #1
 8005294:	2301      	movs	r3, #1
 8005296:	1076      	asrs	r6, r6, #1
 8005298:	3708      	adds	r7, #8
 800529a:	e76c      	b.n	8005176 <_dtoa_r+0x3ce>
 800529c:	2502      	movs	r5, #2
 800529e:	e76f      	b.n	8005180 <_dtoa_r+0x3d8>
 80052a0:	9b01      	ldr	r3, [sp, #4]
 80052a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80052a6:	930c      	str	r3, [sp, #48]	; 0x30
 80052a8:	e78d      	b.n	80051c6 <_dtoa_r+0x41e>
 80052aa:	9900      	ldr	r1, [sp, #0]
 80052ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80052ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052b0:	4b4e      	ldr	r3, [pc, #312]	; (80053ec <_dtoa_r+0x644>)
 80052b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80052b6:	4401      	add	r1, r0
 80052b8:	9102      	str	r1, [sp, #8]
 80052ba:	9908      	ldr	r1, [sp, #32]
 80052bc:	eeb0 8a47 	vmov.f32	s16, s14
 80052c0:	eef0 8a67 	vmov.f32	s17, s15
 80052c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052cc:	2900      	cmp	r1, #0
 80052ce:	d045      	beq.n	800535c <_dtoa_r+0x5b4>
 80052d0:	494c      	ldr	r1, [pc, #304]	; (8005404 <_dtoa_r+0x65c>)
 80052d2:	2000      	movs	r0, #0
 80052d4:	f7fb fac2 	bl	800085c <__aeabi_ddiv>
 80052d8:	ec53 2b18 	vmov	r2, r3, d8
 80052dc:	f7fa ffdc 	bl	8000298 <__aeabi_dsub>
 80052e0:	9d00      	ldr	r5, [sp, #0]
 80052e2:	ec41 0b18 	vmov	d8, r0, r1
 80052e6:	4639      	mov	r1, r7
 80052e8:	4630      	mov	r0, r6
 80052ea:	f7fb fc3d 	bl	8000b68 <__aeabi_d2iz>
 80052ee:	900c      	str	r0, [sp, #48]	; 0x30
 80052f0:	f7fb f920 	bl	8000534 <__aeabi_i2d>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4630      	mov	r0, r6
 80052fa:	4639      	mov	r1, r7
 80052fc:	f7fa ffcc 	bl	8000298 <__aeabi_dsub>
 8005300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005302:	3330      	adds	r3, #48	; 0x30
 8005304:	f805 3b01 	strb.w	r3, [r5], #1
 8005308:	ec53 2b18 	vmov	r2, r3, d8
 800530c:	4606      	mov	r6, r0
 800530e:	460f      	mov	r7, r1
 8005310:	f7fb fbec 	bl	8000aec <__aeabi_dcmplt>
 8005314:	2800      	cmp	r0, #0
 8005316:	d165      	bne.n	80053e4 <_dtoa_r+0x63c>
 8005318:	4632      	mov	r2, r6
 800531a:	463b      	mov	r3, r7
 800531c:	4935      	ldr	r1, [pc, #212]	; (80053f4 <_dtoa_r+0x64c>)
 800531e:	2000      	movs	r0, #0
 8005320:	f7fa ffba 	bl	8000298 <__aeabi_dsub>
 8005324:	ec53 2b18 	vmov	r2, r3, d8
 8005328:	f7fb fbe0 	bl	8000aec <__aeabi_dcmplt>
 800532c:	2800      	cmp	r0, #0
 800532e:	f040 80b9 	bne.w	80054a4 <_dtoa_r+0x6fc>
 8005332:	9b02      	ldr	r3, [sp, #8]
 8005334:	429d      	cmp	r5, r3
 8005336:	f43f af75 	beq.w	8005224 <_dtoa_r+0x47c>
 800533a:	4b2f      	ldr	r3, [pc, #188]	; (80053f8 <_dtoa_r+0x650>)
 800533c:	ec51 0b18 	vmov	r0, r1, d8
 8005340:	2200      	movs	r2, #0
 8005342:	f7fb f961 	bl	8000608 <__aeabi_dmul>
 8005346:	4b2c      	ldr	r3, [pc, #176]	; (80053f8 <_dtoa_r+0x650>)
 8005348:	ec41 0b18 	vmov	d8, r0, r1
 800534c:	2200      	movs	r2, #0
 800534e:	4630      	mov	r0, r6
 8005350:	4639      	mov	r1, r7
 8005352:	f7fb f959 	bl	8000608 <__aeabi_dmul>
 8005356:	4606      	mov	r6, r0
 8005358:	460f      	mov	r7, r1
 800535a:	e7c4      	b.n	80052e6 <_dtoa_r+0x53e>
 800535c:	ec51 0b17 	vmov	r0, r1, d7
 8005360:	f7fb f952 	bl	8000608 <__aeabi_dmul>
 8005364:	9b02      	ldr	r3, [sp, #8]
 8005366:	9d00      	ldr	r5, [sp, #0]
 8005368:	930c      	str	r3, [sp, #48]	; 0x30
 800536a:	ec41 0b18 	vmov	d8, r0, r1
 800536e:	4639      	mov	r1, r7
 8005370:	4630      	mov	r0, r6
 8005372:	f7fb fbf9 	bl	8000b68 <__aeabi_d2iz>
 8005376:	9011      	str	r0, [sp, #68]	; 0x44
 8005378:	f7fb f8dc 	bl	8000534 <__aeabi_i2d>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4630      	mov	r0, r6
 8005382:	4639      	mov	r1, r7
 8005384:	f7fa ff88 	bl	8000298 <__aeabi_dsub>
 8005388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800538a:	3330      	adds	r3, #48	; 0x30
 800538c:	f805 3b01 	strb.w	r3, [r5], #1
 8005390:	9b02      	ldr	r3, [sp, #8]
 8005392:	429d      	cmp	r5, r3
 8005394:	4606      	mov	r6, r0
 8005396:	460f      	mov	r7, r1
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	d134      	bne.n	8005408 <_dtoa_r+0x660>
 800539e:	4b19      	ldr	r3, [pc, #100]	; (8005404 <_dtoa_r+0x65c>)
 80053a0:	ec51 0b18 	vmov	r0, r1, d8
 80053a4:	f7fa ff7a 	bl	800029c <__adddf3>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4630      	mov	r0, r6
 80053ae:	4639      	mov	r1, r7
 80053b0:	f7fb fbba 	bl	8000b28 <__aeabi_dcmpgt>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d175      	bne.n	80054a4 <_dtoa_r+0x6fc>
 80053b8:	ec53 2b18 	vmov	r2, r3, d8
 80053bc:	4911      	ldr	r1, [pc, #68]	; (8005404 <_dtoa_r+0x65c>)
 80053be:	2000      	movs	r0, #0
 80053c0:	f7fa ff6a 	bl	8000298 <__aeabi_dsub>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4630      	mov	r0, r6
 80053ca:	4639      	mov	r1, r7
 80053cc:	f7fb fb8e 	bl	8000aec <__aeabi_dcmplt>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	f43f af27 	beq.w	8005224 <_dtoa_r+0x47c>
 80053d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053d8:	1e6b      	subs	r3, r5, #1
 80053da:	930c      	str	r3, [sp, #48]	; 0x30
 80053dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053e0:	2b30      	cmp	r3, #48	; 0x30
 80053e2:	d0f8      	beq.n	80053d6 <_dtoa_r+0x62e>
 80053e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80053e8:	e04a      	b.n	8005480 <_dtoa_r+0x6d8>
 80053ea:	bf00      	nop
 80053ec:	08007878 	.word	0x08007878
 80053f0:	08007850 	.word	0x08007850
 80053f4:	3ff00000 	.word	0x3ff00000
 80053f8:	40240000 	.word	0x40240000
 80053fc:	401c0000 	.word	0x401c0000
 8005400:	40140000 	.word	0x40140000
 8005404:	3fe00000 	.word	0x3fe00000
 8005408:	4baf      	ldr	r3, [pc, #700]	; (80056c8 <_dtoa_r+0x920>)
 800540a:	f7fb f8fd 	bl	8000608 <__aeabi_dmul>
 800540e:	4606      	mov	r6, r0
 8005410:	460f      	mov	r7, r1
 8005412:	e7ac      	b.n	800536e <_dtoa_r+0x5c6>
 8005414:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005418:	9d00      	ldr	r5, [sp, #0]
 800541a:	4642      	mov	r2, r8
 800541c:	464b      	mov	r3, r9
 800541e:	4630      	mov	r0, r6
 8005420:	4639      	mov	r1, r7
 8005422:	f7fb fa1b 	bl	800085c <__aeabi_ddiv>
 8005426:	f7fb fb9f 	bl	8000b68 <__aeabi_d2iz>
 800542a:	9002      	str	r0, [sp, #8]
 800542c:	f7fb f882 	bl	8000534 <__aeabi_i2d>
 8005430:	4642      	mov	r2, r8
 8005432:	464b      	mov	r3, r9
 8005434:	f7fb f8e8 	bl	8000608 <__aeabi_dmul>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4630      	mov	r0, r6
 800543e:	4639      	mov	r1, r7
 8005440:	f7fa ff2a 	bl	8000298 <__aeabi_dsub>
 8005444:	9e02      	ldr	r6, [sp, #8]
 8005446:	9f01      	ldr	r7, [sp, #4]
 8005448:	3630      	adds	r6, #48	; 0x30
 800544a:	f805 6b01 	strb.w	r6, [r5], #1
 800544e:	9e00      	ldr	r6, [sp, #0]
 8005450:	1bae      	subs	r6, r5, r6
 8005452:	42b7      	cmp	r7, r6
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	d137      	bne.n	80054ca <_dtoa_r+0x722>
 800545a:	f7fa ff1f 	bl	800029c <__adddf3>
 800545e:	4642      	mov	r2, r8
 8005460:	464b      	mov	r3, r9
 8005462:	4606      	mov	r6, r0
 8005464:	460f      	mov	r7, r1
 8005466:	f7fb fb5f 	bl	8000b28 <__aeabi_dcmpgt>
 800546a:	b9c8      	cbnz	r0, 80054a0 <_dtoa_r+0x6f8>
 800546c:	4642      	mov	r2, r8
 800546e:	464b      	mov	r3, r9
 8005470:	4630      	mov	r0, r6
 8005472:	4639      	mov	r1, r7
 8005474:	f7fb fb30 	bl	8000ad8 <__aeabi_dcmpeq>
 8005478:	b110      	cbz	r0, 8005480 <_dtoa_r+0x6d8>
 800547a:	9b02      	ldr	r3, [sp, #8]
 800547c:	07d9      	lsls	r1, r3, #31
 800547e:	d40f      	bmi.n	80054a0 <_dtoa_r+0x6f8>
 8005480:	4620      	mov	r0, r4
 8005482:	4659      	mov	r1, fp
 8005484:	f000 fac8 	bl	8005a18 <_Bfree>
 8005488:	2300      	movs	r3, #0
 800548a:	702b      	strb	r3, [r5, #0]
 800548c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800548e:	f10a 0001 	add.w	r0, sl, #1
 8005492:	6018      	str	r0, [r3, #0]
 8005494:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005496:	2b00      	cmp	r3, #0
 8005498:	f43f acd8 	beq.w	8004e4c <_dtoa_r+0xa4>
 800549c:	601d      	str	r5, [r3, #0]
 800549e:	e4d5      	b.n	8004e4c <_dtoa_r+0xa4>
 80054a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80054a4:	462b      	mov	r3, r5
 80054a6:	461d      	mov	r5, r3
 80054a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054ac:	2a39      	cmp	r2, #57	; 0x39
 80054ae:	d108      	bne.n	80054c2 <_dtoa_r+0x71a>
 80054b0:	9a00      	ldr	r2, [sp, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d1f7      	bne.n	80054a6 <_dtoa_r+0x6fe>
 80054b6:	9a07      	ldr	r2, [sp, #28]
 80054b8:	9900      	ldr	r1, [sp, #0]
 80054ba:	3201      	adds	r2, #1
 80054bc:	9207      	str	r2, [sp, #28]
 80054be:	2230      	movs	r2, #48	; 0x30
 80054c0:	700a      	strb	r2, [r1, #0]
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	3201      	adds	r2, #1
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	e78c      	b.n	80053e4 <_dtoa_r+0x63c>
 80054ca:	4b7f      	ldr	r3, [pc, #508]	; (80056c8 <_dtoa_r+0x920>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	f7fb f89b 	bl	8000608 <__aeabi_dmul>
 80054d2:	2200      	movs	r2, #0
 80054d4:	2300      	movs	r3, #0
 80054d6:	4606      	mov	r6, r0
 80054d8:	460f      	mov	r7, r1
 80054da:	f7fb fafd 	bl	8000ad8 <__aeabi_dcmpeq>
 80054de:	2800      	cmp	r0, #0
 80054e0:	d09b      	beq.n	800541a <_dtoa_r+0x672>
 80054e2:	e7cd      	b.n	8005480 <_dtoa_r+0x6d8>
 80054e4:	9a08      	ldr	r2, [sp, #32]
 80054e6:	2a00      	cmp	r2, #0
 80054e8:	f000 80c4 	beq.w	8005674 <_dtoa_r+0x8cc>
 80054ec:	9a05      	ldr	r2, [sp, #20]
 80054ee:	2a01      	cmp	r2, #1
 80054f0:	f300 80a8 	bgt.w	8005644 <_dtoa_r+0x89c>
 80054f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	f000 80a0 	beq.w	800563c <_dtoa_r+0x894>
 80054fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005500:	9e06      	ldr	r6, [sp, #24]
 8005502:	4645      	mov	r5, r8
 8005504:	9a04      	ldr	r2, [sp, #16]
 8005506:	2101      	movs	r1, #1
 8005508:	441a      	add	r2, r3
 800550a:	4620      	mov	r0, r4
 800550c:	4498      	add	r8, r3
 800550e:	9204      	str	r2, [sp, #16]
 8005510:	f000 fb3e 	bl	8005b90 <__i2b>
 8005514:	4607      	mov	r7, r0
 8005516:	2d00      	cmp	r5, #0
 8005518:	dd0b      	ble.n	8005532 <_dtoa_r+0x78a>
 800551a:	9b04      	ldr	r3, [sp, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	dd08      	ble.n	8005532 <_dtoa_r+0x78a>
 8005520:	42ab      	cmp	r3, r5
 8005522:	9a04      	ldr	r2, [sp, #16]
 8005524:	bfa8      	it	ge
 8005526:	462b      	movge	r3, r5
 8005528:	eba8 0803 	sub.w	r8, r8, r3
 800552c:	1aed      	subs	r5, r5, r3
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	9304      	str	r3, [sp, #16]
 8005532:	9b06      	ldr	r3, [sp, #24]
 8005534:	b1fb      	cbz	r3, 8005576 <_dtoa_r+0x7ce>
 8005536:	9b08      	ldr	r3, [sp, #32]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 809f 	beq.w	800567c <_dtoa_r+0x8d4>
 800553e:	2e00      	cmp	r6, #0
 8005540:	dd11      	ble.n	8005566 <_dtoa_r+0x7be>
 8005542:	4639      	mov	r1, r7
 8005544:	4632      	mov	r2, r6
 8005546:	4620      	mov	r0, r4
 8005548:	f000 fbde 	bl	8005d08 <__pow5mult>
 800554c:	465a      	mov	r2, fp
 800554e:	4601      	mov	r1, r0
 8005550:	4607      	mov	r7, r0
 8005552:	4620      	mov	r0, r4
 8005554:	f000 fb32 	bl	8005bbc <__multiply>
 8005558:	4659      	mov	r1, fp
 800555a:	9007      	str	r0, [sp, #28]
 800555c:	4620      	mov	r0, r4
 800555e:	f000 fa5b 	bl	8005a18 <_Bfree>
 8005562:	9b07      	ldr	r3, [sp, #28]
 8005564:	469b      	mov	fp, r3
 8005566:	9b06      	ldr	r3, [sp, #24]
 8005568:	1b9a      	subs	r2, r3, r6
 800556a:	d004      	beq.n	8005576 <_dtoa_r+0x7ce>
 800556c:	4659      	mov	r1, fp
 800556e:	4620      	mov	r0, r4
 8005570:	f000 fbca 	bl	8005d08 <__pow5mult>
 8005574:	4683      	mov	fp, r0
 8005576:	2101      	movs	r1, #1
 8005578:	4620      	mov	r0, r4
 800557a:	f000 fb09 	bl	8005b90 <__i2b>
 800557e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005580:	2b00      	cmp	r3, #0
 8005582:	4606      	mov	r6, r0
 8005584:	dd7c      	ble.n	8005680 <_dtoa_r+0x8d8>
 8005586:	461a      	mov	r2, r3
 8005588:	4601      	mov	r1, r0
 800558a:	4620      	mov	r0, r4
 800558c:	f000 fbbc 	bl	8005d08 <__pow5mult>
 8005590:	9b05      	ldr	r3, [sp, #20]
 8005592:	2b01      	cmp	r3, #1
 8005594:	4606      	mov	r6, r0
 8005596:	dd76      	ble.n	8005686 <_dtoa_r+0x8de>
 8005598:	2300      	movs	r3, #0
 800559a:	9306      	str	r3, [sp, #24]
 800559c:	6933      	ldr	r3, [r6, #16]
 800559e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80055a2:	6918      	ldr	r0, [r3, #16]
 80055a4:	f000 faa4 	bl	8005af0 <__hi0bits>
 80055a8:	f1c0 0020 	rsb	r0, r0, #32
 80055ac:	9b04      	ldr	r3, [sp, #16]
 80055ae:	4418      	add	r0, r3
 80055b0:	f010 001f 	ands.w	r0, r0, #31
 80055b4:	f000 8086 	beq.w	80056c4 <_dtoa_r+0x91c>
 80055b8:	f1c0 0320 	rsb	r3, r0, #32
 80055bc:	2b04      	cmp	r3, #4
 80055be:	dd7f      	ble.n	80056c0 <_dtoa_r+0x918>
 80055c0:	f1c0 001c 	rsb	r0, r0, #28
 80055c4:	9b04      	ldr	r3, [sp, #16]
 80055c6:	4403      	add	r3, r0
 80055c8:	4480      	add	r8, r0
 80055ca:	4405      	add	r5, r0
 80055cc:	9304      	str	r3, [sp, #16]
 80055ce:	f1b8 0f00 	cmp.w	r8, #0
 80055d2:	dd05      	ble.n	80055e0 <_dtoa_r+0x838>
 80055d4:	4659      	mov	r1, fp
 80055d6:	4642      	mov	r2, r8
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fbef 	bl	8005dbc <__lshift>
 80055de:	4683      	mov	fp, r0
 80055e0:	9b04      	ldr	r3, [sp, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	dd05      	ble.n	80055f2 <_dtoa_r+0x84a>
 80055e6:	4631      	mov	r1, r6
 80055e8:	461a      	mov	r2, r3
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 fbe6 	bl	8005dbc <__lshift>
 80055f0:	4606      	mov	r6, r0
 80055f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d069      	beq.n	80056cc <_dtoa_r+0x924>
 80055f8:	4631      	mov	r1, r6
 80055fa:	4658      	mov	r0, fp
 80055fc:	f000 fc4a 	bl	8005e94 <__mcmp>
 8005600:	2800      	cmp	r0, #0
 8005602:	da63      	bge.n	80056cc <_dtoa_r+0x924>
 8005604:	2300      	movs	r3, #0
 8005606:	4659      	mov	r1, fp
 8005608:	220a      	movs	r2, #10
 800560a:	4620      	mov	r0, r4
 800560c:	f000 fa26 	bl	8005a5c <__multadd>
 8005610:	9b08      	ldr	r3, [sp, #32]
 8005612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005616:	4683      	mov	fp, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 818f 	beq.w	800593c <_dtoa_r+0xb94>
 800561e:	4639      	mov	r1, r7
 8005620:	2300      	movs	r3, #0
 8005622:	220a      	movs	r2, #10
 8005624:	4620      	mov	r0, r4
 8005626:	f000 fa19 	bl	8005a5c <__multadd>
 800562a:	f1b9 0f00 	cmp.w	r9, #0
 800562e:	4607      	mov	r7, r0
 8005630:	f300 808e 	bgt.w	8005750 <_dtoa_r+0x9a8>
 8005634:	9b05      	ldr	r3, [sp, #20]
 8005636:	2b02      	cmp	r3, #2
 8005638:	dc50      	bgt.n	80056dc <_dtoa_r+0x934>
 800563a:	e089      	b.n	8005750 <_dtoa_r+0x9a8>
 800563c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800563e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005642:	e75d      	b.n	8005500 <_dtoa_r+0x758>
 8005644:	9b01      	ldr	r3, [sp, #4]
 8005646:	1e5e      	subs	r6, r3, #1
 8005648:	9b06      	ldr	r3, [sp, #24]
 800564a:	42b3      	cmp	r3, r6
 800564c:	bfbf      	itttt	lt
 800564e:	9b06      	ldrlt	r3, [sp, #24]
 8005650:	9606      	strlt	r6, [sp, #24]
 8005652:	1af2      	sublt	r2, r6, r3
 8005654:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005656:	bfb6      	itet	lt
 8005658:	189b      	addlt	r3, r3, r2
 800565a:	1b9e      	subge	r6, r3, r6
 800565c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800565e:	9b01      	ldr	r3, [sp, #4]
 8005660:	bfb8      	it	lt
 8005662:	2600      	movlt	r6, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	bfb5      	itete	lt
 8005668:	eba8 0503 	sublt.w	r5, r8, r3
 800566c:	9b01      	ldrge	r3, [sp, #4]
 800566e:	2300      	movlt	r3, #0
 8005670:	4645      	movge	r5, r8
 8005672:	e747      	b.n	8005504 <_dtoa_r+0x75c>
 8005674:	9e06      	ldr	r6, [sp, #24]
 8005676:	9f08      	ldr	r7, [sp, #32]
 8005678:	4645      	mov	r5, r8
 800567a:	e74c      	b.n	8005516 <_dtoa_r+0x76e>
 800567c:	9a06      	ldr	r2, [sp, #24]
 800567e:	e775      	b.n	800556c <_dtoa_r+0x7c4>
 8005680:	9b05      	ldr	r3, [sp, #20]
 8005682:	2b01      	cmp	r3, #1
 8005684:	dc18      	bgt.n	80056b8 <_dtoa_r+0x910>
 8005686:	9b02      	ldr	r3, [sp, #8]
 8005688:	b9b3      	cbnz	r3, 80056b8 <_dtoa_r+0x910>
 800568a:	9b03      	ldr	r3, [sp, #12]
 800568c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005690:	b9a3      	cbnz	r3, 80056bc <_dtoa_r+0x914>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005698:	0d1b      	lsrs	r3, r3, #20
 800569a:	051b      	lsls	r3, r3, #20
 800569c:	b12b      	cbz	r3, 80056aa <_dtoa_r+0x902>
 800569e:	9b04      	ldr	r3, [sp, #16]
 80056a0:	3301      	adds	r3, #1
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	f108 0801 	add.w	r8, r8, #1
 80056a8:	2301      	movs	r3, #1
 80056aa:	9306      	str	r3, [sp, #24]
 80056ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f47f af74 	bne.w	800559c <_dtoa_r+0x7f4>
 80056b4:	2001      	movs	r0, #1
 80056b6:	e779      	b.n	80055ac <_dtoa_r+0x804>
 80056b8:	2300      	movs	r3, #0
 80056ba:	e7f6      	b.n	80056aa <_dtoa_r+0x902>
 80056bc:	9b02      	ldr	r3, [sp, #8]
 80056be:	e7f4      	b.n	80056aa <_dtoa_r+0x902>
 80056c0:	d085      	beq.n	80055ce <_dtoa_r+0x826>
 80056c2:	4618      	mov	r0, r3
 80056c4:	301c      	adds	r0, #28
 80056c6:	e77d      	b.n	80055c4 <_dtoa_r+0x81c>
 80056c8:	40240000 	.word	0x40240000
 80056cc:	9b01      	ldr	r3, [sp, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	dc38      	bgt.n	8005744 <_dtoa_r+0x99c>
 80056d2:	9b05      	ldr	r3, [sp, #20]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	dd35      	ble.n	8005744 <_dtoa_r+0x99c>
 80056d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80056dc:	f1b9 0f00 	cmp.w	r9, #0
 80056e0:	d10d      	bne.n	80056fe <_dtoa_r+0x956>
 80056e2:	4631      	mov	r1, r6
 80056e4:	464b      	mov	r3, r9
 80056e6:	2205      	movs	r2, #5
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 f9b7 	bl	8005a5c <__multadd>
 80056ee:	4601      	mov	r1, r0
 80056f0:	4606      	mov	r6, r0
 80056f2:	4658      	mov	r0, fp
 80056f4:	f000 fbce 	bl	8005e94 <__mcmp>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	f73f adbd 	bgt.w	8005278 <_dtoa_r+0x4d0>
 80056fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005700:	9d00      	ldr	r5, [sp, #0]
 8005702:	ea6f 0a03 	mvn.w	sl, r3
 8005706:	f04f 0800 	mov.w	r8, #0
 800570a:	4631      	mov	r1, r6
 800570c:	4620      	mov	r0, r4
 800570e:	f000 f983 	bl	8005a18 <_Bfree>
 8005712:	2f00      	cmp	r7, #0
 8005714:	f43f aeb4 	beq.w	8005480 <_dtoa_r+0x6d8>
 8005718:	f1b8 0f00 	cmp.w	r8, #0
 800571c:	d005      	beq.n	800572a <_dtoa_r+0x982>
 800571e:	45b8      	cmp	r8, r7
 8005720:	d003      	beq.n	800572a <_dtoa_r+0x982>
 8005722:	4641      	mov	r1, r8
 8005724:	4620      	mov	r0, r4
 8005726:	f000 f977 	bl	8005a18 <_Bfree>
 800572a:	4639      	mov	r1, r7
 800572c:	4620      	mov	r0, r4
 800572e:	f000 f973 	bl	8005a18 <_Bfree>
 8005732:	e6a5      	b.n	8005480 <_dtoa_r+0x6d8>
 8005734:	2600      	movs	r6, #0
 8005736:	4637      	mov	r7, r6
 8005738:	e7e1      	b.n	80056fe <_dtoa_r+0x956>
 800573a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800573c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005740:	4637      	mov	r7, r6
 8005742:	e599      	b.n	8005278 <_dtoa_r+0x4d0>
 8005744:	9b08      	ldr	r3, [sp, #32]
 8005746:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80fd 	beq.w	800594a <_dtoa_r+0xba2>
 8005750:	2d00      	cmp	r5, #0
 8005752:	dd05      	ble.n	8005760 <_dtoa_r+0x9b8>
 8005754:	4639      	mov	r1, r7
 8005756:	462a      	mov	r2, r5
 8005758:	4620      	mov	r0, r4
 800575a:	f000 fb2f 	bl	8005dbc <__lshift>
 800575e:	4607      	mov	r7, r0
 8005760:	9b06      	ldr	r3, [sp, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d05c      	beq.n	8005820 <_dtoa_r+0xa78>
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4620      	mov	r0, r4
 800576a:	f000 f915 	bl	8005998 <_Balloc>
 800576e:	4605      	mov	r5, r0
 8005770:	b928      	cbnz	r0, 800577e <_dtoa_r+0x9d6>
 8005772:	4b80      	ldr	r3, [pc, #512]	; (8005974 <_dtoa_r+0xbcc>)
 8005774:	4602      	mov	r2, r0
 8005776:	f240 21ea 	movw	r1, #746	; 0x2ea
 800577a:	f7ff bb2e 	b.w	8004dda <_dtoa_r+0x32>
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	3202      	adds	r2, #2
 8005782:	0092      	lsls	r2, r2, #2
 8005784:	f107 010c 	add.w	r1, r7, #12
 8005788:	300c      	adds	r0, #12
 800578a:	f7fe fc57 	bl	800403c <memcpy>
 800578e:	2201      	movs	r2, #1
 8005790:	4629      	mov	r1, r5
 8005792:	4620      	mov	r0, r4
 8005794:	f000 fb12 	bl	8005dbc <__lshift>
 8005798:	9b00      	ldr	r3, [sp, #0]
 800579a:	3301      	adds	r3, #1
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	9b00      	ldr	r3, [sp, #0]
 80057a0:	444b      	add	r3, r9
 80057a2:	9307      	str	r3, [sp, #28]
 80057a4:	9b02      	ldr	r3, [sp, #8]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	46b8      	mov	r8, r7
 80057ac:	9306      	str	r3, [sp, #24]
 80057ae:	4607      	mov	r7, r0
 80057b0:	9b01      	ldr	r3, [sp, #4]
 80057b2:	4631      	mov	r1, r6
 80057b4:	3b01      	subs	r3, #1
 80057b6:	4658      	mov	r0, fp
 80057b8:	9302      	str	r3, [sp, #8]
 80057ba:	f7ff fa69 	bl	8004c90 <quorem>
 80057be:	4603      	mov	r3, r0
 80057c0:	3330      	adds	r3, #48	; 0x30
 80057c2:	9004      	str	r0, [sp, #16]
 80057c4:	4641      	mov	r1, r8
 80057c6:	4658      	mov	r0, fp
 80057c8:	9308      	str	r3, [sp, #32]
 80057ca:	f000 fb63 	bl	8005e94 <__mcmp>
 80057ce:	463a      	mov	r2, r7
 80057d0:	4681      	mov	r9, r0
 80057d2:	4631      	mov	r1, r6
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 fb79 	bl	8005ecc <__mdiff>
 80057da:	68c2      	ldr	r2, [r0, #12]
 80057dc:	9b08      	ldr	r3, [sp, #32]
 80057de:	4605      	mov	r5, r0
 80057e0:	bb02      	cbnz	r2, 8005824 <_dtoa_r+0xa7c>
 80057e2:	4601      	mov	r1, r0
 80057e4:	4658      	mov	r0, fp
 80057e6:	f000 fb55 	bl	8005e94 <__mcmp>
 80057ea:	9b08      	ldr	r3, [sp, #32]
 80057ec:	4602      	mov	r2, r0
 80057ee:	4629      	mov	r1, r5
 80057f0:	4620      	mov	r0, r4
 80057f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80057f6:	f000 f90f 	bl	8005a18 <_Bfree>
 80057fa:	9b05      	ldr	r3, [sp, #20]
 80057fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057fe:	9d01      	ldr	r5, [sp, #4]
 8005800:	ea43 0102 	orr.w	r1, r3, r2
 8005804:	9b06      	ldr	r3, [sp, #24]
 8005806:	430b      	orrs	r3, r1
 8005808:	9b08      	ldr	r3, [sp, #32]
 800580a:	d10d      	bne.n	8005828 <_dtoa_r+0xa80>
 800580c:	2b39      	cmp	r3, #57	; 0x39
 800580e:	d029      	beq.n	8005864 <_dtoa_r+0xabc>
 8005810:	f1b9 0f00 	cmp.w	r9, #0
 8005814:	dd01      	ble.n	800581a <_dtoa_r+0xa72>
 8005816:	9b04      	ldr	r3, [sp, #16]
 8005818:	3331      	adds	r3, #49	; 0x31
 800581a:	9a02      	ldr	r2, [sp, #8]
 800581c:	7013      	strb	r3, [r2, #0]
 800581e:	e774      	b.n	800570a <_dtoa_r+0x962>
 8005820:	4638      	mov	r0, r7
 8005822:	e7b9      	b.n	8005798 <_dtoa_r+0x9f0>
 8005824:	2201      	movs	r2, #1
 8005826:	e7e2      	b.n	80057ee <_dtoa_r+0xa46>
 8005828:	f1b9 0f00 	cmp.w	r9, #0
 800582c:	db06      	blt.n	800583c <_dtoa_r+0xa94>
 800582e:	9905      	ldr	r1, [sp, #20]
 8005830:	ea41 0909 	orr.w	r9, r1, r9
 8005834:	9906      	ldr	r1, [sp, #24]
 8005836:	ea59 0101 	orrs.w	r1, r9, r1
 800583a:	d120      	bne.n	800587e <_dtoa_r+0xad6>
 800583c:	2a00      	cmp	r2, #0
 800583e:	ddec      	ble.n	800581a <_dtoa_r+0xa72>
 8005840:	4659      	mov	r1, fp
 8005842:	2201      	movs	r2, #1
 8005844:	4620      	mov	r0, r4
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	f000 fab8 	bl	8005dbc <__lshift>
 800584c:	4631      	mov	r1, r6
 800584e:	4683      	mov	fp, r0
 8005850:	f000 fb20 	bl	8005e94 <__mcmp>
 8005854:	2800      	cmp	r0, #0
 8005856:	9b01      	ldr	r3, [sp, #4]
 8005858:	dc02      	bgt.n	8005860 <_dtoa_r+0xab8>
 800585a:	d1de      	bne.n	800581a <_dtoa_r+0xa72>
 800585c:	07da      	lsls	r2, r3, #31
 800585e:	d5dc      	bpl.n	800581a <_dtoa_r+0xa72>
 8005860:	2b39      	cmp	r3, #57	; 0x39
 8005862:	d1d8      	bne.n	8005816 <_dtoa_r+0xa6e>
 8005864:	9a02      	ldr	r2, [sp, #8]
 8005866:	2339      	movs	r3, #57	; 0x39
 8005868:	7013      	strb	r3, [r2, #0]
 800586a:	462b      	mov	r3, r5
 800586c:	461d      	mov	r5, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005874:	2a39      	cmp	r2, #57	; 0x39
 8005876:	d050      	beq.n	800591a <_dtoa_r+0xb72>
 8005878:	3201      	adds	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	e745      	b.n	800570a <_dtoa_r+0x962>
 800587e:	2a00      	cmp	r2, #0
 8005880:	dd03      	ble.n	800588a <_dtoa_r+0xae2>
 8005882:	2b39      	cmp	r3, #57	; 0x39
 8005884:	d0ee      	beq.n	8005864 <_dtoa_r+0xabc>
 8005886:	3301      	adds	r3, #1
 8005888:	e7c7      	b.n	800581a <_dtoa_r+0xa72>
 800588a:	9a01      	ldr	r2, [sp, #4]
 800588c:	9907      	ldr	r1, [sp, #28]
 800588e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005892:	428a      	cmp	r2, r1
 8005894:	d02a      	beq.n	80058ec <_dtoa_r+0xb44>
 8005896:	4659      	mov	r1, fp
 8005898:	2300      	movs	r3, #0
 800589a:	220a      	movs	r2, #10
 800589c:	4620      	mov	r0, r4
 800589e:	f000 f8dd 	bl	8005a5c <__multadd>
 80058a2:	45b8      	cmp	r8, r7
 80058a4:	4683      	mov	fp, r0
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	f04f 020a 	mov.w	r2, #10
 80058ae:	4641      	mov	r1, r8
 80058b0:	4620      	mov	r0, r4
 80058b2:	d107      	bne.n	80058c4 <_dtoa_r+0xb1c>
 80058b4:	f000 f8d2 	bl	8005a5c <__multadd>
 80058b8:	4680      	mov	r8, r0
 80058ba:	4607      	mov	r7, r0
 80058bc:	9b01      	ldr	r3, [sp, #4]
 80058be:	3301      	adds	r3, #1
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	e775      	b.n	80057b0 <_dtoa_r+0xa08>
 80058c4:	f000 f8ca 	bl	8005a5c <__multadd>
 80058c8:	4639      	mov	r1, r7
 80058ca:	4680      	mov	r8, r0
 80058cc:	2300      	movs	r3, #0
 80058ce:	220a      	movs	r2, #10
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 f8c3 	bl	8005a5c <__multadd>
 80058d6:	4607      	mov	r7, r0
 80058d8:	e7f0      	b.n	80058bc <_dtoa_r+0xb14>
 80058da:	f1b9 0f00 	cmp.w	r9, #0
 80058de:	9a00      	ldr	r2, [sp, #0]
 80058e0:	bfcc      	ite	gt
 80058e2:	464d      	movgt	r5, r9
 80058e4:	2501      	movle	r5, #1
 80058e6:	4415      	add	r5, r2
 80058e8:	f04f 0800 	mov.w	r8, #0
 80058ec:	4659      	mov	r1, fp
 80058ee:	2201      	movs	r2, #1
 80058f0:	4620      	mov	r0, r4
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	f000 fa62 	bl	8005dbc <__lshift>
 80058f8:	4631      	mov	r1, r6
 80058fa:	4683      	mov	fp, r0
 80058fc:	f000 faca 	bl	8005e94 <__mcmp>
 8005900:	2800      	cmp	r0, #0
 8005902:	dcb2      	bgt.n	800586a <_dtoa_r+0xac2>
 8005904:	d102      	bne.n	800590c <_dtoa_r+0xb64>
 8005906:	9b01      	ldr	r3, [sp, #4]
 8005908:	07db      	lsls	r3, r3, #31
 800590a:	d4ae      	bmi.n	800586a <_dtoa_r+0xac2>
 800590c:	462b      	mov	r3, r5
 800590e:	461d      	mov	r5, r3
 8005910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005914:	2a30      	cmp	r2, #48	; 0x30
 8005916:	d0fa      	beq.n	800590e <_dtoa_r+0xb66>
 8005918:	e6f7      	b.n	800570a <_dtoa_r+0x962>
 800591a:	9a00      	ldr	r2, [sp, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d1a5      	bne.n	800586c <_dtoa_r+0xac4>
 8005920:	f10a 0a01 	add.w	sl, sl, #1
 8005924:	2331      	movs	r3, #49	; 0x31
 8005926:	e779      	b.n	800581c <_dtoa_r+0xa74>
 8005928:	4b13      	ldr	r3, [pc, #76]	; (8005978 <_dtoa_r+0xbd0>)
 800592a:	f7ff baaf 	b.w	8004e8c <_dtoa_r+0xe4>
 800592e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005930:	2b00      	cmp	r3, #0
 8005932:	f47f aa86 	bne.w	8004e42 <_dtoa_r+0x9a>
 8005936:	4b11      	ldr	r3, [pc, #68]	; (800597c <_dtoa_r+0xbd4>)
 8005938:	f7ff baa8 	b.w	8004e8c <_dtoa_r+0xe4>
 800593c:	f1b9 0f00 	cmp.w	r9, #0
 8005940:	dc03      	bgt.n	800594a <_dtoa_r+0xba2>
 8005942:	9b05      	ldr	r3, [sp, #20]
 8005944:	2b02      	cmp	r3, #2
 8005946:	f73f aec9 	bgt.w	80056dc <_dtoa_r+0x934>
 800594a:	9d00      	ldr	r5, [sp, #0]
 800594c:	4631      	mov	r1, r6
 800594e:	4658      	mov	r0, fp
 8005950:	f7ff f99e 	bl	8004c90 <quorem>
 8005954:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005958:	f805 3b01 	strb.w	r3, [r5], #1
 800595c:	9a00      	ldr	r2, [sp, #0]
 800595e:	1aaa      	subs	r2, r5, r2
 8005960:	4591      	cmp	r9, r2
 8005962:	ddba      	ble.n	80058da <_dtoa_r+0xb32>
 8005964:	4659      	mov	r1, fp
 8005966:	2300      	movs	r3, #0
 8005968:	220a      	movs	r2, #10
 800596a:	4620      	mov	r0, r4
 800596c:	f000 f876 	bl	8005a5c <__multadd>
 8005970:	4683      	mov	fp, r0
 8005972:	e7eb      	b.n	800594c <_dtoa_r+0xba4>
 8005974:	080077db 	.word	0x080077db
 8005978:	08007734 	.word	0x08007734
 800597c:	08007758 	.word	0x08007758

08005980 <_localeconv_r>:
 8005980:	4800      	ldr	r0, [pc, #0]	; (8005984 <_localeconv_r+0x4>)
 8005982:	4770      	bx	lr
 8005984:	20000160 	.word	0x20000160

08005988 <malloc>:
 8005988:	4b02      	ldr	r3, [pc, #8]	; (8005994 <malloc+0xc>)
 800598a:	4601      	mov	r1, r0
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	f000 bbe1 	b.w	8006154 <_malloc_r>
 8005992:	bf00      	nop
 8005994:	2000000c 	.word	0x2000000c

08005998 <_Balloc>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800599c:	4604      	mov	r4, r0
 800599e:	460d      	mov	r5, r1
 80059a0:	b976      	cbnz	r6, 80059c0 <_Balloc+0x28>
 80059a2:	2010      	movs	r0, #16
 80059a4:	f7ff fff0 	bl	8005988 <malloc>
 80059a8:	4602      	mov	r2, r0
 80059aa:	6260      	str	r0, [r4, #36]	; 0x24
 80059ac:	b920      	cbnz	r0, 80059b8 <_Balloc+0x20>
 80059ae:	4b18      	ldr	r3, [pc, #96]	; (8005a10 <_Balloc+0x78>)
 80059b0:	4818      	ldr	r0, [pc, #96]	; (8005a14 <_Balloc+0x7c>)
 80059b2:	2166      	movs	r1, #102	; 0x66
 80059b4:	f000 fd94 	bl	80064e0 <__assert_func>
 80059b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059bc:	6006      	str	r6, [r0, #0]
 80059be:	60c6      	str	r6, [r0, #12]
 80059c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059c2:	68f3      	ldr	r3, [r6, #12]
 80059c4:	b183      	cbz	r3, 80059e8 <_Balloc+0x50>
 80059c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059ce:	b9b8      	cbnz	r0, 8005a00 <_Balloc+0x68>
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f605 	lsl.w	r6, r1, r5
 80059d6:	1d72      	adds	r2, r6, #5
 80059d8:	0092      	lsls	r2, r2, #2
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 fb5a 	bl	8006094 <_calloc_r>
 80059e0:	b160      	cbz	r0, 80059fc <_Balloc+0x64>
 80059e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059e6:	e00e      	b.n	8005a06 <_Balloc+0x6e>
 80059e8:	2221      	movs	r2, #33	; 0x21
 80059ea:	2104      	movs	r1, #4
 80059ec:	4620      	mov	r0, r4
 80059ee:	f000 fb51 	bl	8006094 <_calloc_r>
 80059f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059f4:	60f0      	str	r0, [r6, #12]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e4      	bne.n	80059c6 <_Balloc+0x2e>
 80059fc:	2000      	movs	r0, #0
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	6802      	ldr	r2, [r0, #0]
 8005a02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a06:	2300      	movs	r3, #0
 8005a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a0c:	e7f7      	b.n	80059fe <_Balloc+0x66>
 8005a0e:	bf00      	nop
 8005a10:	08007765 	.word	0x08007765
 8005a14:	080077ec 	.word	0x080077ec

08005a18 <_Bfree>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	b976      	cbnz	r6, 8005a40 <_Bfree+0x28>
 8005a22:	2010      	movs	r0, #16
 8005a24:	f7ff ffb0 	bl	8005988 <malloc>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6268      	str	r0, [r5, #36]	; 0x24
 8005a2c:	b920      	cbnz	r0, 8005a38 <_Bfree+0x20>
 8005a2e:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <_Bfree+0x3c>)
 8005a30:	4809      	ldr	r0, [pc, #36]	; (8005a58 <_Bfree+0x40>)
 8005a32:	218a      	movs	r1, #138	; 0x8a
 8005a34:	f000 fd54 	bl	80064e0 <__assert_func>
 8005a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a3c:	6006      	str	r6, [r0, #0]
 8005a3e:	60c6      	str	r6, [r0, #12]
 8005a40:	b13c      	cbz	r4, 8005a52 <_Bfree+0x3a>
 8005a42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a44:	6862      	ldr	r2, [r4, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a4c:	6021      	str	r1, [r4, #0]
 8005a4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	08007765 	.word	0x08007765
 8005a58:	080077ec 	.word	0x080077ec

08005a5c <__multadd>:
 8005a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a60:	690e      	ldr	r6, [r1, #16]
 8005a62:	4607      	mov	r7, r0
 8005a64:	4698      	mov	r8, r3
 8005a66:	460c      	mov	r4, r1
 8005a68:	f101 0014 	add.w	r0, r1, #20
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	6805      	ldr	r5, [r0, #0]
 8005a70:	b2a9      	uxth	r1, r5
 8005a72:	fb02 8101 	mla	r1, r2, r1, r8
 8005a76:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005a7a:	0c2d      	lsrs	r5, r5, #16
 8005a7c:	fb02 c505 	mla	r5, r2, r5, ip
 8005a80:	b289      	uxth	r1, r1
 8005a82:	3301      	adds	r3, #1
 8005a84:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005a88:	429e      	cmp	r6, r3
 8005a8a:	f840 1b04 	str.w	r1, [r0], #4
 8005a8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005a92:	dcec      	bgt.n	8005a6e <__multadd+0x12>
 8005a94:	f1b8 0f00 	cmp.w	r8, #0
 8005a98:	d022      	beq.n	8005ae0 <__multadd+0x84>
 8005a9a:	68a3      	ldr	r3, [r4, #8]
 8005a9c:	42b3      	cmp	r3, r6
 8005a9e:	dc19      	bgt.n	8005ad4 <__multadd+0x78>
 8005aa0:	6861      	ldr	r1, [r4, #4]
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	3101      	adds	r1, #1
 8005aa6:	f7ff ff77 	bl	8005998 <_Balloc>
 8005aaa:	4605      	mov	r5, r0
 8005aac:	b928      	cbnz	r0, 8005aba <__multadd+0x5e>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <__multadd+0x8c>)
 8005ab2:	480e      	ldr	r0, [pc, #56]	; (8005aec <__multadd+0x90>)
 8005ab4:	21b5      	movs	r1, #181	; 0xb5
 8005ab6:	f000 fd13 	bl	80064e0 <__assert_func>
 8005aba:	6922      	ldr	r2, [r4, #16]
 8005abc:	3202      	adds	r2, #2
 8005abe:	f104 010c 	add.w	r1, r4, #12
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	300c      	adds	r0, #12
 8005ac6:	f7fe fab9 	bl	800403c <memcpy>
 8005aca:	4621      	mov	r1, r4
 8005acc:	4638      	mov	r0, r7
 8005ace:	f7ff ffa3 	bl	8005a18 <_Bfree>
 8005ad2:	462c      	mov	r4, r5
 8005ad4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005ad8:	3601      	adds	r6, #1
 8005ada:	f8c3 8014 	str.w	r8, [r3, #20]
 8005ade:	6126      	str	r6, [r4, #16]
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae6:	bf00      	nop
 8005ae8:	080077db 	.word	0x080077db
 8005aec:	080077ec 	.word	0x080077ec

08005af0 <__hi0bits>:
 8005af0:	0c03      	lsrs	r3, r0, #16
 8005af2:	041b      	lsls	r3, r3, #16
 8005af4:	b9d3      	cbnz	r3, 8005b2c <__hi0bits+0x3c>
 8005af6:	0400      	lsls	r0, r0, #16
 8005af8:	2310      	movs	r3, #16
 8005afa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005afe:	bf04      	itt	eq
 8005b00:	0200      	lsleq	r0, r0, #8
 8005b02:	3308      	addeq	r3, #8
 8005b04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b08:	bf04      	itt	eq
 8005b0a:	0100      	lsleq	r0, r0, #4
 8005b0c:	3304      	addeq	r3, #4
 8005b0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b12:	bf04      	itt	eq
 8005b14:	0080      	lsleq	r0, r0, #2
 8005b16:	3302      	addeq	r3, #2
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	db05      	blt.n	8005b28 <__hi0bits+0x38>
 8005b1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005b20:	f103 0301 	add.w	r3, r3, #1
 8005b24:	bf08      	it	eq
 8005b26:	2320      	moveq	r3, #32
 8005b28:	4618      	mov	r0, r3
 8005b2a:	4770      	bx	lr
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e7e4      	b.n	8005afa <__hi0bits+0xa>

08005b30 <__lo0bits>:
 8005b30:	6803      	ldr	r3, [r0, #0]
 8005b32:	f013 0207 	ands.w	r2, r3, #7
 8005b36:	4601      	mov	r1, r0
 8005b38:	d00b      	beq.n	8005b52 <__lo0bits+0x22>
 8005b3a:	07da      	lsls	r2, r3, #31
 8005b3c:	d424      	bmi.n	8005b88 <__lo0bits+0x58>
 8005b3e:	0798      	lsls	r0, r3, #30
 8005b40:	bf49      	itett	mi
 8005b42:	085b      	lsrmi	r3, r3, #1
 8005b44:	089b      	lsrpl	r3, r3, #2
 8005b46:	2001      	movmi	r0, #1
 8005b48:	600b      	strmi	r3, [r1, #0]
 8005b4a:	bf5c      	itt	pl
 8005b4c:	600b      	strpl	r3, [r1, #0]
 8005b4e:	2002      	movpl	r0, #2
 8005b50:	4770      	bx	lr
 8005b52:	b298      	uxth	r0, r3
 8005b54:	b9b0      	cbnz	r0, 8005b84 <__lo0bits+0x54>
 8005b56:	0c1b      	lsrs	r3, r3, #16
 8005b58:	2010      	movs	r0, #16
 8005b5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b5e:	bf04      	itt	eq
 8005b60:	0a1b      	lsreq	r3, r3, #8
 8005b62:	3008      	addeq	r0, #8
 8005b64:	071a      	lsls	r2, r3, #28
 8005b66:	bf04      	itt	eq
 8005b68:	091b      	lsreq	r3, r3, #4
 8005b6a:	3004      	addeq	r0, #4
 8005b6c:	079a      	lsls	r2, r3, #30
 8005b6e:	bf04      	itt	eq
 8005b70:	089b      	lsreq	r3, r3, #2
 8005b72:	3002      	addeq	r0, #2
 8005b74:	07da      	lsls	r2, r3, #31
 8005b76:	d403      	bmi.n	8005b80 <__lo0bits+0x50>
 8005b78:	085b      	lsrs	r3, r3, #1
 8005b7a:	f100 0001 	add.w	r0, r0, #1
 8005b7e:	d005      	beq.n	8005b8c <__lo0bits+0x5c>
 8005b80:	600b      	str	r3, [r1, #0]
 8005b82:	4770      	bx	lr
 8005b84:	4610      	mov	r0, r2
 8005b86:	e7e8      	b.n	8005b5a <__lo0bits+0x2a>
 8005b88:	2000      	movs	r0, #0
 8005b8a:	4770      	bx	lr
 8005b8c:	2020      	movs	r0, #32
 8005b8e:	4770      	bx	lr

08005b90 <__i2b>:
 8005b90:	b510      	push	{r4, lr}
 8005b92:	460c      	mov	r4, r1
 8005b94:	2101      	movs	r1, #1
 8005b96:	f7ff feff 	bl	8005998 <_Balloc>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	b928      	cbnz	r0, 8005baa <__i2b+0x1a>
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <__i2b+0x24>)
 8005ba0:	4805      	ldr	r0, [pc, #20]	; (8005bb8 <__i2b+0x28>)
 8005ba2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ba6:	f000 fc9b 	bl	80064e0 <__assert_func>
 8005baa:	2301      	movs	r3, #1
 8005bac:	6144      	str	r4, [r0, #20]
 8005bae:	6103      	str	r3, [r0, #16]
 8005bb0:	bd10      	pop	{r4, pc}
 8005bb2:	bf00      	nop
 8005bb4:	080077db 	.word	0x080077db
 8005bb8:	080077ec 	.word	0x080077ec

08005bbc <__multiply>:
 8005bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	690a      	ldr	r2, [r1, #16]
 8005bc4:	6923      	ldr	r3, [r4, #16]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	bfb8      	it	lt
 8005bca:	460b      	movlt	r3, r1
 8005bcc:	460d      	mov	r5, r1
 8005bce:	bfbc      	itt	lt
 8005bd0:	4625      	movlt	r5, r4
 8005bd2:	461c      	movlt	r4, r3
 8005bd4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005bd8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005bdc:	68ab      	ldr	r3, [r5, #8]
 8005bde:	6869      	ldr	r1, [r5, #4]
 8005be0:	eb0a 0709 	add.w	r7, sl, r9
 8005be4:	42bb      	cmp	r3, r7
 8005be6:	b085      	sub	sp, #20
 8005be8:	bfb8      	it	lt
 8005bea:	3101      	addlt	r1, #1
 8005bec:	f7ff fed4 	bl	8005998 <_Balloc>
 8005bf0:	b930      	cbnz	r0, 8005c00 <__multiply+0x44>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	4b42      	ldr	r3, [pc, #264]	; (8005d00 <__multiply+0x144>)
 8005bf6:	4843      	ldr	r0, [pc, #268]	; (8005d04 <__multiply+0x148>)
 8005bf8:	f240 115d 	movw	r1, #349	; 0x15d
 8005bfc:	f000 fc70 	bl	80064e0 <__assert_func>
 8005c00:	f100 0614 	add.w	r6, r0, #20
 8005c04:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005c08:	4633      	mov	r3, r6
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	4543      	cmp	r3, r8
 8005c0e:	d31e      	bcc.n	8005c4e <__multiply+0x92>
 8005c10:	f105 0c14 	add.w	ip, r5, #20
 8005c14:	f104 0314 	add.w	r3, r4, #20
 8005c18:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005c1c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005c20:	9202      	str	r2, [sp, #8]
 8005c22:	ebac 0205 	sub.w	r2, ip, r5
 8005c26:	3a15      	subs	r2, #21
 8005c28:	f022 0203 	bic.w	r2, r2, #3
 8005c2c:	3204      	adds	r2, #4
 8005c2e:	f105 0115 	add.w	r1, r5, #21
 8005c32:	458c      	cmp	ip, r1
 8005c34:	bf38      	it	cc
 8005c36:	2204      	movcc	r2, #4
 8005c38:	9201      	str	r2, [sp, #4]
 8005c3a:	9a02      	ldr	r2, [sp, #8]
 8005c3c:	9303      	str	r3, [sp, #12]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d808      	bhi.n	8005c54 <__multiply+0x98>
 8005c42:	2f00      	cmp	r7, #0
 8005c44:	dc55      	bgt.n	8005cf2 <__multiply+0x136>
 8005c46:	6107      	str	r7, [r0, #16]
 8005c48:	b005      	add	sp, #20
 8005c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4e:	f843 2b04 	str.w	r2, [r3], #4
 8005c52:	e7db      	b.n	8005c0c <__multiply+0x50>
 8005c54:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c58:	f1ba 0f00 	cmp.w	sl, #0
 8005c5c:	d020      	beq.n	8005ca0 <__multiply+0xe4>
 8005c5e:	f105 0e14 	add.w	lr, r5, #20
 8005c62:	46b1      	mov	r9, r6
 8005c64:	2200      	movs	r2, #0
 8005c66:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005c6a:	f8d9 b000 	ldr.w	fp, [r9]
 8005c6e:	b2a1      	uxth	r1, r4
 8005c70:	fa1f fb8b 	uxth.w	fp, fp
 8005c74:	fb0a b101 	mla	r1, sl, r1, fp
 8005c78:	4411      	add	r1, r2
 8005c7a:	f8d9 2000 	ldr.w	r2, [r9]
 8005c7e:	0c24      	lsrs	r4, r4, #16
 8005c80:	0c12      	lsrs	r2, r2, #16
 8005c82:	fb0a 2404 	mla	r4, sl, r4, r2
 8005c86:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005c8a:	b289      	uxth	r1, r1
 8005c8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c90:	45f4      	cmp	ip, lr
 8005c92:	f849 1b04 	str.w	r1, [r9], #4
 8005c96:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005c9a:	d8e4      	bhi.n	8005c66 <__multiply+0xaa>
 8005c9c:	9901      	ldr	r1, [sp, #4]
 8005c9e:	5072      	str	r2, [r6, r1]
 8005ca0:	9a03      	ldr	r2, [sp, #12]
 8005ca2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	f1b9 0f00 	cmp.w	r9, #0
 8005cac:	d01f      	beq.n	8005cee <__multiply+0x132>
 8005cae:	6834      	ldr	r4, [r6, #0]
 8005cb0:	f105 0114 	add.w	r1, r5, #20
 8005cb4:	46b6      	mov	lr, r6
 8005cb6:	f04f 0a00 	mov.w	sl, #0
 8005cba:	880a      	ldrh	r2, [r1, #0]
 8005cbc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005cc0:	fb09 b202 	mla	r2, r9, r2, fp
 8005cc4:	4492      	add	sl, r2
 8005cc6:	b2a4      	uxth	r4, r4
 8005cc8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005ccc:	f84e 4b04 	str.w	r4, [lr], #4
 8005cd0:	f851 4b04 	ldr.w	r4, [r1], #4
 8005cd4:	f8be 2000 	ldrh.w	r2, [lr]
 8005cd8:	0c24      	lsrs	r4, r4, #16
 8005cda:	fb09 2404 	mla	r4, r9, r4, r2
 8005cde:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005ce2:	458c      	cmp	ip, r1
 8005ce4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005ce8:	d8e7      	bhi.n	8005cba <__multiply+0xfe>
 8005cea:	9a01      	ldr	r2, [sp, #4]
 8005cec:	50b4      	str	r4, [r6, r2]
 8005cee:	3604      	adds	r6, #4
 8005cf0:	e7a3      	b.n	8005c3a <__multiply+0x7e>
 8005cf2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1a5      	bne.n	8005c46 <__multiply+0x8a>
 8005cfa:	3f01      	subs	r7, #1
 8005cfc:	e7a1      	b.n	8005c42 <__multiply+0x86>
 8005cfe:	bf00      	nop
 8005d00:	080077db 	.word	0x080077db
 8005d04:	080077ec 	.word	0x080077ec

08005d08 <__pow5mult>:
 8005d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d0c:	4615      	mov	r5, r2
 8005d0e:	f012 0203 	ands.w	r2, r2, #3
 8005d12:	4606      	mov	r6, r0
 8005d14:	460f      	mov	r7, r1
 8005d16:	d007      	beq.n	8005d28 <__pow5mult+0x20>
 8005d18:	4c25      	ldr	r4, [pc, #148]	; (8005db0 <__pow5mult+0xa8>)
 8005d1a:	3a01      	subs	r2, #1
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d22:	f7ff fe9b 	bl	8005a5c <__multadd>
 8005d26:	4607      	mov	r7, r0
 8005d28:	10ad      	asrs	r5, r5, #2
 8005d2a:	d03d      	beq.n	8005da8 <__pow5mult+0xa0>
 8005d2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d2e:	b97c      	cbnz	r4, 8005d50 <__pow5mult+0x48>
 8005d30:	2010      	movs	r0, #16
 8005d32:	f7ff fe29 	bl	8005988 <malloc>
 8005d36:	4602      	mov	r2, r0
 8005d38:	6270      	str	r0, [r6, #36]	; 0x24
 8005d3a:	b928      	cbnz	r0, 8005d48 <__pow5mult+0x40>
 8005d3c:	4b1d      	ldr	r3, [pc, #116]	; (8005db4 <__pow5mult+0xac>)
 8005d3e:	481e      	ldr	r0, [pc, #120]	; (8005db8 <__pow5mult+0xb0>)
 8005d40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d44:	f000 fbcc 	bl	80064e0 <__assert_func>
 8005d48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d4c:	6004      	str	r4, [r0, #0]
 8005d4e:	60c4      	str	r4, [r0, #12]
 8005d50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d58:	b94c      	cbnz	r4, 8005d6e <__pow5mult+0x66>
 8005d5a:	f240 2171 	movw	r1, #625	; 0x271
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f7ff ff16 	bl	8005b90 <__i2b>
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	6003      	str	r3, [r0, #0]
 8005d6e:	f04f 0900 	mov.w	r9, #0
 8005d72:	07eb      	lsls	r3, r5, #31
 8005d74:	d50a      	bpl.n	8005d8c <__pow5mult+0x84>
 8005d76:	4639      	mov	r1, r7
 8005d78:	4622      	mov	r2, r4
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	f7ff ff1e 	bl	8005bbc <__multiply>
 8005d80:	4639      	mov	r1, r7
 8005d82:	4680      	mov	r8, r0
 8005d84:	4630      	mov	r0, r6
 8005d86:	f7ff fe47 	bl	8005a18 <_Bfree>
 8005d8a:	4647      	mov	r7, r8
 8005d8c:	106d      	asrs	r5, r5, #1
 8005d8e:	d00b      	beq.n	8005da8 <__pow5mult+0xa0>
 8005d90:	6820      	ldr	r0, [r4, #0]
 8005d92:	b938      	cbnz	r0, 8005da4 <__pow5mult+0x9c>
 8005d94:	4622      	mov	r2, r4
 8005d96:	4621      	mov	r1, r4
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f7ff ff0f 	bl	8005bbc <__multiply>
 8005d9e:	6020      	str	r0, [r4, #0]
 8005da0:	f8c0 9000 	str.w	r9, [r0]
 8005da4:	4604      	mov	r4, r0
 8005da6:	e7e4      	b.n	8005d72 <__pow5mult+0x6a>
 8005da8:	4638      	mov	r0, r7
 8005daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dae:	bf00      	nop
 8005db0:	08007940 	.word	0x08007940
 8005db4:	08007765 	.word	0x08007765
 8005db8:	080077ec 	.word	0x080077ec

08005dbc <__lshift>:
 8005dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	6849      	ldr	r1, [r1, #4]
 8005dc4:	6923      	ldr	r3, [r4, #16]
 8005dc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dca:	68a3      	ldr	r3, [r4, #8]
 8005dcc:	4607      	mov	r7, r0
 8005dce:	4691      	mov	r9, r2
 8005dd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005dd4:	f108 0601 	add.w	r6, r8, #1
 8005dd8:	42b3      	cmp	r3, r6
 8005dda:	db0b      	blt.n	8005df4 <__lshift+0x38>
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff fddb 	bl	8005998 <_Balloc>
 8005de2:	4605      	mov	r5, r0
 8005de4:	b948      	cbnz	r0, 8005dfa <__lshift+0x3e>
 8005de6:	4602      	mov	r2, r0
 8005de8:	4b28      	ldr	r3, [pc, #160]	; (8005e8c <__lshift+0xd0>)
 8005dea:	4829      	ldr	r0, [pc, #164]	; (8005e90 <__lshift+0xd4>)
 8005dec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005df0:	f000 fb76 	bl	80064e0 <__assert_func>
 8005df4:	3101      	adds	r1, #1
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	e7ee      	b.n	8005dd8 <__lshift+0x1c>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f100 0114 	add.w	r1, r0, #20
 8005e00:	f100 0210 	add.w	r2, r0, #16
 8005e04:	4618      	mov	r0, r3
 8005e06:	4553      	cmp	r3, sl
 8005e08:	db33      	blt.n	8005e72 <__lshift+0xb6>
 8005e0a:	6920      	ldr	r0, [r4, #16]
 8005e0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e10:	f104 0314 	add.w	r3, r4, #20
 8005e14:	f019 091f 	ands.w	r9, r9, #31
 8005e18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e20:	d02b      	beq.n	8005e7a <__lshift+0xbe>
 8005e22:	f1c9 0e20 	rsb	lr, r9, #32
 8005e26:	468a      	mov	sl, r1
 8005e28:	2200      	movs	r2, #0
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	fa00 f009 	lsl.w	r0, r0, r9
 8005e30:	4302      	orrs	r2, r0
 8005e32:	f84a 2b04 	str.w	r2, [sl], #4
 8005e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e3a:	459c      	cmp	ip, r3
 8005e3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e40:	d8f3      	bhi.n	8005e2a <__lshift+0x6e>
 8005e42:	ebac 0304 	sub.w	r3, ip, r4
 8005e46:	3b15      	subs	r3, #21
 8005e48:	f023 0303 	bic.w	r3, r3, #3
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	f104 0015 	add.w	r0, r4, #21
 8005e52:	4584      	cmp	ip, r0
 8005e54:	bf38      	it	cc
 8005e56:	2304      	movcc	r3, #4
 8005e58:	50ca      	str	r2, [r1, r3]
 8005e5a:	b10a      	cbz	r2, 8005e60 <__lshift+0xa4>
 8005e5c:	f108 0602 	add.w	r6, r8, #2
 8005e60:	3e01      	subs	r6, #1
 8005e62:	4638      	mov	r0, r7
 8005e64:	612e      	str	r6, [r5, #16]
 8005e66:	4621      	mov	r1, r4
 8005e68:	f7ff fdd6 	bl	8005a18 <_Bfree>
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e72:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e76:	3301      	adds	r3, #1
 8005e78:	e7c5      	b.n	8005e06 <__lshift+0x4a>
 8005e7a:	3904      	subs	r1, #4
 8005e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e80:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e84:	459c      	cmp	ip, r3
 8005e86:	d8f9      	bhi.n	8005e7c <__lshift+0xc0>
 8005e88:	e7ea      	b.n	8005e60 <__lshift+0xa4>
 8005e8a:	bf00      	nop
 8005e8c:	080077db 	.word	0x080077db
 8005e90:	080077ec 	.word	0x080077ec

08005e94 <__mcmp>:
 8005e94:	b530      	push	{r4, r5, lr}
 8005e96:	6902      	ldr	r2, [r0, #16]
 8005e98:	690c      	ldr	r4, [r1, #16]
 8005e9a:	1b12      	subs	r2, r2, r4
 8005e9c:	d10e      	bne.n	8005ebc <__mcmp+0x28>
 8005e9e:	f100 0314 	add.w	r3, r0, #20
 8005ea2:	3114      	adds	r1, #20
 8005ea4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005ea8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005eac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005eb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005eb4:	42a5      	cmp	r5, r4
 8005eb6:	d003      	beq.n	8005ec0 <__mcmp+0x2c>
 8005eb8:	d305      	bcc.n	8005ec6 <__mcmp+0x32>
 8005eba:	2201      	movs	r2, #1
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	bd30      	pop	{r4, r5, pc}
 8005ec0:	4283      	cmp	r3, r0
 8005ec2:	d3f3      	bcc.n	8005eac <__mcmp+0x18>
 8005ec4:	e7fa      	b.n	8005ebc <__mcmp+0x28>
 8005ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eca:	e7f7      	b.n	8005ebc <__mcmp+0x28>

08005ecc <__mdiff>:
 8005ecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	4617      	mov	r7, r2
 8005eda:	f7ff ffdb 	bl	8005e94 <__mcmp>
 8005ede:	1e05      	subs	r5, r0, #0
 8005ee0:	d110      	bne.n	8005f04 <__mdiff+0x38>
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f7ff fd57 	bl	8005998 <_Balloc>
 8005eea:	b930      	cbnz	r0, 8005efa <__mdiff+0x2e>
 8005eec:	4b39      	ldr	r3, [pc, #228]	; (8005fd4 <__mdiff+0x108>)
 8005eee:	4602      	mov	r2, r0
 8005ef0:	f240 2132 	movw	r1, #562	; 0x232
 8005ef4:	4838      	ldr	r0, [pc, #224]	; (8005fd8 <__mdiff+0x10c>)
 8005ef6:	f000 faf3 	bl	80064e0 <__assert_func>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f04:	bfa4      	itt	ge
 8005f06:	463b      	movge	r3, r7
 8005f08:	4627      	movge	r7, r4
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	bfa6      	itte	ge
 8005f10:	461c      	movge	r4, r3
 8005f12:	2500      	movge	r5, #0
 8005f14:	2501      	movlt	r5, #1
 8005f16:	f7ff fd3f 	bl	8005998 <_Balloc>
 8005f1a:	b920      	cbnz	r0, 8005f26 <__mdiff+0x5a>
 8005f1c:	4b2d      	ldr	r3, [pc, #180]	; (8005fd4 <__mdiff+0x108>)
 8005f1e:	4602      	mov	r2, r0
 8005f20:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f24:	e7e6      	b.n	8005ef4 <__mdiff+0x28>
 8005f26:	693e      	ldr	r6, [r7, #16]
 8005f28:	60c5      	str	r5, [r0, #12]
 8005f2a:	6925      	ldr	r5, [r4, #16]
 8005f2c:	f107 0114 	add.w	r1, r7, #20
 8005f30:	f104 0914 	add.w	r9, r4, #20
 8005f34:	f100 0e14 	add.w	lr, r0, #20
 8005f38:	f107 0210 	add.w	r2, r7, #16
 8005f3c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005f40:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005f44:	46f2      	mov	sl, lr
 8005f46:	2700      	movs	r7, #0
 8005f48:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005f50:	fa1f f883 	uxth.w	r8, r3
 8005f54:	fa17 f78b 	uxtah	r7, r7, fp
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	eba7 0808 	sub.w	r8, r7, r8
 8005f5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005f66:	fa1f f888 	uxth.w	r8, r8
 8005f6a:	141f      	asrs	r7, r3, #16
 8005f6c:	454d      	cmp	r5, r9
 8005f6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005f72:	f84a 3b04 	str.w	r3, [sl], #4
 8005f76:	d8e7      	bhi.n	8005f48 <__mdiff+0x7c>
 8005f78:	1b2b      	subs	r3, r5, r4
 8005f7a:	3b15      	subs	r3, #21
 8005f7c:	f023 0303 	bic.w	r3, r3, #3
 8005f80:	3304      	adds	r3, #4
 8005f82:	3415      	adds	r4, #21
 8005f84:	42a5      	cmp	r5, r4
 8005f86:	bf38      	it	cc
 8005f88:	2304      	movcc	r3, #4
 8005f8a:	4419      	add	r1, r3
 8005f8c:	4473      	add	r3, lr
 8005f8e:	469e      	mov	lr, r3
 8005f90:	460d      	mov	r5, r1
 8005f92:	4565      	cmp	r5, ip
 8005f94:	d30e      	bcc.n	8005fb4 <__mdiff+0xe8>
 8005f96:	f10c 0203 	add.w	r2, ip, #3
 8005f9a:	1a52      	subs	r2, r2, r1
 8005f9c:	f022 0203 	bic.w	r2, r2, #3
 8005fa0:	3903      	subs	r1, #3
 8005fa2:	458c      	cmp	ip, r1
 8005fa4:	bf38      	it	cc
 8005fa6:	2200      	movcc	r2, #0
 8005fa8:	441a      	add	r2, r3
 8005faa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005fae:	b17b      	cbz	r3, 8005fd0 <__mdiff+0x104>
 8005fb0:	6106      	str	r6, [r0, #16]
 8005fb2:	e7a5      	b.n	8005f00 <__mdiff+0x34>
 8005fb4:	f855 8b04 	ldr.w	r8, [r5], #4
 8005fb8:	fa17 f488 	uxtah	r4, r7, r8
 8005fbc:	1422      	asrs	r2, r4, #16
 8005fbe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005fc2:	b2a4      	uxth	r4, r4
 8005fc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005fc8:	f84e 4b04 	str.w	r4, [lr], #4
 8005fcc:	1417      	asrs	r7, r2, #16
 8005fce:	e7e0      	b.n	8005f92 <__mdiff+0xc6>
 8005fd0:	3e01      	subs	r6, #1
 8005fd2:	e7ea      	b.n	8005faa <__mdiff+0xde>
 8005fd4:	080077db 	.word	0x080077db
 8005fd8:	080077ec 	.word	0x080077ec

08005fdc <__d2b>:
 8005fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005fe0:	4689      	mov	r9, r1
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	ec57 6b10 	vmov	r6, r7, d0
 8005fe8:	4690      	mov	r8, r2
 8005fea:	f7ff fcd5 	bl	8005998 <_Balloc>
 8005fee:	4604      	mov	r4, r0
 8005ff0:	b930      	cbnz	r0, 8006000 <__d2b+0x24>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	4b25      	ldr	r3, [pc, #148]	; (800608c <__d2b+0xb0>)
 8005ff6:	4826      	ldr	r0, [pc, #152]	; (8006090 <__d2b+0xb4>)
 8005ff8:	f240 310a 	movw	r1, #778	; 0x30a
 8005ffc:	f000 fa70 	bl	80064e0 <__assert_func>
 8006000:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006004:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006008:	bb35      	cbnz	r5, 8006058 <__d2b+0x7c>
 800600a:	2e00      	cmp	r6, #0
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	d028      	beq.n	8006062 <__d2b+0x86>
 8006010:	4668      	mov	r0, sp
 8006012:	9600      	str	r6, [sp, #0]
 8006014:	f7ff fd8c 	bl	8005b30 <__lo0bits>
 8006018:	9900      	ldr	r1, [sp, #0]
 800601a:	b300      	cbz	r0, 800605e <__d2b+0x82>
 800601c:	9a01      	ldr	r2, [sp, #4]
 800601e:	f1c0 0320 	rsb	r3, r0, #32
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	430b      	orrs	r3, r1
 8006028:	40c2      	lsrs	r2, r0
 800602a:	6163      	str	r3, [r4, #20]
 800602c:	9201      	str	r2, [sp, #4]
 800602e:	9b01      	ldr	r3, [sp, #4]
 8006030:	61a3      	str	r3, [r4, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	bf14      	ite	ne
 8006036:	2202      	movne	r2, #2
 8006038:	2201      	moveq	r2, #1
 800603a:	6122      	str	r2, [r4, #16]
 800603c:	b1d5      	cbz	r5, 8006074 <__d2b+0x98>
 800603e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006042:	4405      	add	r5, r0
 8006044:	f8c9 5000 	str.w	r5, [r9]
 8006048:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800604c:	f8c8 0000 	str.w	r0, [r8]
 8006050:	4620      	mov	r0, r4
 8006052:	b003      	add	sp, #12
 8006054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800605c:	e7d5      	b.n	800600a <__d2b+0x2e>
 800605e:	6161      	str	r1, [r4, #20]
 8006060:	e7e5      	b.n	800602e <__d2b+0x52>
 8006062:	a801      	add	r0, sp, #4
 8006064:	f7ff fd64 	bl	8005b30 <__lo0bits>
 8006068:	9b01      	ldr	r3, [sp, #4]
 800606a:	6163      	str	r3, [r4, #20]
 800606c:	2201      	movs	r2, #1
 800606e:	6122      	str	r2, [r4, #16]
 8006070:	3020      	adds	r0, #32
 8006072:	e7e3      	b.n	800603c <__d2b+0x60>
 8006074:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006078:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800607c:	f8c9 0000 	str.w	r0, [r9]
 8006080:	6918      	ldr	r0, [r3, #16]
 8006082:	f7ff fd35 	bl	8005af0 <__hi0bits>
 8006086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800608a:	e7df      	b.n	800604c <__d2b+0x70>
 800608c:	080077db 	.word	0x080077db
 8006090:	080077ec 	.word	0x080077ec

08006094 <_calloc_r>:
 8006094:	b513      	push	{r0, r1, r4, lr}
 8006096:	434a      	muls	r2, r1
 8006098:	4611      	mov	r1, r2
 800609a:	9201      	str	r2, [sp, #4]
 800609c:	f000 f85a 	bl	8006154 <_malloc_r>
 80060a0:	4604      	mov	r4, r0
 80060a2:	b118      	cbz	r0, 80060ac <_calloc_r+0x18>
 80060a4:	9a01      	ldr	r2, [sp, #4]
 80060a6:	2100      	movs	r1, #0
 80060a8:	f7fd ffd6 	bl	8004058 <memset>
 80060ac:	4620      	mov	r0, r4
 80060ae:	b002      	add	sp, #8
 80060b0:	bd10      	pop	{r4, pc}
	...

080060b4 <_free_r>:
 80060b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060b6:	2900      	cmp	r1, #0
 80060b8:	d048      	beq.n	800614c <_free_r+0x98>
 80060ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060be:	9001      	str	r0, [sp, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f1a1 0404 	sub.w	r4, r1, #4
 80060c6:	bfb8      	it	lt
 80060c8:	18e4      	addlt	r4, r4, r3
 80060ca:	f000 fa65 	bl	8006598 <__malloc_lock>
 80060ce:	4a20      	ldr	r2, [pc, #128]	; (8006150 <_free_r+0x9c>)
 80060d0:	9801      	ldr	r0, [sp, #4]
 80060d2:	6813      	ldr	r3, [r2, #0]
 80060d4:	4615      	mov	r5, r2
 80060d6:	b933      	cbnz	r3, 80060e6 <_free_r+0x32>
 80060d8:	6063      	str	r3, [r4, #4]
 80060da:	6014      	str	r4, [r2, #0]
 80060dc:	b003      	add	sp, #12
 80060de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060e2:	f000 ba5f 	b.w	80065a4 <__malloc_unlock>
 80060e6:	42a3      	cmp	r3, r4
 80060e8:	d90b      	bls.n	8006102 <_free_r+0x4e>
 80060ea:	6821      	ldr	r1, [r4, #0]
 80060ec:	1862      	adds	r2, r4, r1
 80060ee:	4293      	cmp	r3, r2
 80060f0:	bf04      	itt	eq
 80060f2:	681a      	ldreq	r2, [r3, #0]
 80060f4:	685b      	ldreq	r3, [r3, #4]
 80060f6:	6063      	str	r3, [r4, #4]
 80060f8:	bf04      	itt	eq
 80060fa:	1852      	addeq	r2, r2, r1
 80060fc:	6022      	streq	r2, [r4, #0]
 80060fe:	602c      	str	r4, [r5, #0]
 8006100:	e7ec      	b.n	80060dc <_free_r+0x28>
 8006102:	461a      	mov	r2, r3
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	b10b      	cbz	r3, 800610c <_free_r+0x58>
 8006108:	42a3      	cmp	r3, r4
 800610a:	d9fa      	bls.n	8006102 <_free_r+0x4e>
 800610c:	6811      	ldr	r1, [r2, #0]
 800610e:	1855      	adds	r5, r2, r1
 8006110:	42a5      	cmp	r5, r4
 8006112:	d10b      	bne.n	800612c <_free_r+0x78>
 8006114:	6824      	ldr	r4, [r4, #0]
 8006116:	4421      	add	r1, r4
 8006118:	1854      	adds	r4, r2, r1
 800611a:	42a3      	cmp	r3, r4
 800611c:	6011      	str	r1, [r2, #0]
 800611e:	d1dd      	bne.n	80060dc <_free_r+0x28>
 8006120:	681c      	ldr	r4, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	6053      	str	r3, [r2, #4]
 8006126:	4421      	add	r1, r4
 8006128:	6011      	str	r1, [r2, #0]
 800612a:	e7d7      	b.n	80060dc <_free_r+0x28>
 800612c:	d902      	bls.n	8006134 <_free_r+0x80>
 800612e:	230c      	movs	r3, #12
 8006130:	6003      	str	r3, [r0, #0]
 8006132:	e7d3      	b.n	80060dc <_free_r+0x28>
 8006134:	6825      	ldr	r5, [r4, #0]
 8006136:	1961      	adds	r1, r4, r5
 8006138:	428b      	cmp	r3, r1
 800613a:	bf04      	itt	eq
 800613c:	6819      	ldreq	r1, [r3, #0]
 800613e:	685b      	ldreq	r3, [r3, #4]
 8006140:	6063      	str	r3, [r4, #4]
 8006142:	bf04      	itt	eq
 8006144:	1949      	addeq	r1, r1, r5
 8006146:	6021      	streq	r1, [r4, #0]
 8006148:	6054      	str	r4, [r2, #4]
 800614a:	e7c7      	b.n	80060dc <_free_r+0x28>
 800614c:	b003      	add	sp, #12
 800614e:	bd30      	pop	{r4, r5, pc}
 8006150:	200001fc 	.word	0x200001fc

08006154 <_malloc_r>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	1ccd      	adds	r5, r1, #3
 8006158:	f025 0503 	bic.w	r5, r5, #3
 800615c:	3508      	adds	r5, #8
 800615e:	2d0c      	cmp	r5, #12
 8006160:	bf38      	it	cc
 8006162:	250c      	movcc	r5, #12
 8006164:	2d00      	cmp	r5, #0
 8006166:	4606      	mov	r6, r0
 8006168:	db01      	blt.n	800616e <_malloc_r+0x1a>
 800616a:	42a9      	cmp	r1, r5
 800616c:	d903      	bls.n	8006176 <_malloc_r+0x22>
 800616e:	230c      	movs	r3, #12
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	2000      	movs	r0, #0
 8006174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006176:	f000 fa0f 	bl	8006598 <__malloc_lock>
 800617a:	4921      	ldr	r1, [pc, #132]	; (8006200 <_malloc_r+0xac>)
 800617c:	680a      	ldr	r2, [r1, #0]
 800617e:	4614      	mov	r4, r2
 8006180:	b99c      	cbnz	r4, 80061aa <_malloc_r+0x56>
 8006182:	4f20      	ldr	r7, [pc, #128]	; (8006204 <_malloc_r+0xb0>)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	b923      	cbnz	r3, 8006192 <_malloc_r+0x3e>
 8006188:	4621      	mov	r1, r4
 800618a:	4630      	mov	r0, r6
 800618c:	f000 f998 	bl	80064c0 <_sbrk_r>
 8006190:	6038      	str	r0, [r7, #0]
 8006192:	4629      	mov	r1, r5
 8006194:	4630      	mov	r0, r6
 8006196:	f000 f993 	bl	80064c0 <_sbrk_r>
 800619a:	1c43      	adds	r3, r0, #1
 800619c:	d123      	bne.n	80061e6 <_malloc_r+0x92>
 800619e:	230c      	movs	r3, #12
 80061a0:	6033      	str	r3, [r6, #0]
 80061a2:	4630      	mov	r0, r6
 80061a4:	f000 f9fe 	bl	80065a4 <__malloc_unlock>
 80061a8:	e7e3      	b.n	8006172 <_malloc_r+0x1e>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	1b5b      	subs	r3, r3, r5
 80061ae:	d417      	bmi.n	80061e0 <_malloc_r+0x8c>
 80061b0:	2b0b      	cmp	r3, #11
 80061b2:	d903      	bls.n	80061bc <_malloc_r+0x68>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	441c      	add	r4, r3
 80061b8:	6025      	str	r5, [r4, #0]
 80061ba:	e004      	b.n	80061c6 <_malloc_r+0x72>
 80061bc:	6863      	ldr	r3, [r4, #4]
 80061be:	42a2      	cmp	r2, r4
 80061c0:	bf0c      	ite	eq
 80061c2:	600b      	streq	r3, [r1, #0]
 80061c4:	6053      	strne	r3, [r2, #4]
 80061c6:	4630      	mov	r0, r6
 80061c8:	f000 f9ec 	bl	80065a4 <__malloc_unlock>
 80061cc:	f104 000b 	add.w	r0, r4, #11
 80061d0:	1d23      	adds	r3, r4, #4
 80061d2:	f020 0007 	bic.w	r0, r0, #7
 80061d6:	1ac2      	subs	r2, r0, r3
 80061d8:	d0cc      	beq.n	8006174 <_malloc_r+0x20>
 80061da:	1a1b      	subs	r3, r3, r0
 80061dc:	50a3      	str	r3, [r4, r2]
 80061de:	e7c9      	b.n	8006174 <_malloc_r+0x20>
 80061e0:	4622      	mov	r2, r4
 80061e2:	6864      	ldr	r4, [r4, #4]
 80061e4:	e7cc      	b.n	8006180 <_malloc_r+0x2c>
 80061e6:	1cc4      	adds	r4, r0, #3
 80061e8:	f024 0403 	bic.w	r4, r4, #3
 80061ec:	42a0      	cmp	r0, r4
 80061ee:	d0e3      	beq.n	80061b8 <_malloc_r+0x64>
 80061f0:	1a21      	subs	r1, r4, r0
 80061f2:	4630      	mov	r0, r6
 80061f4:	f000 f964 	bl	80064c0 <_sbrk_r>
 80061f8:	3001      	adds	r0, #1
 80061fa:	d1dd      	bne.n	80061b8 <_malloc_r+0x64>
 80061fc:	e7cf      	b.n	800619e <_malloc_r+0x4a>
 80061fe:	bf00      	nop
 8006200:	200001fc 	.word	0x200001fc
 8006204:	20000200 	.word	0x20000200

08006208 <__ssputs_r>:
 8006208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	688e      	ldr	r6, [r1, #8]
 800620e:	429e      	cmp	r6, r3
 8006210:	4682      	mov	sl, r0
 8006212:	460c      	mov	r4, r1
 8006214:	4690      	mov	r8, r2
 8006216:	461f      	mov	r7, r3
 8006218:	d838      	bhi.n	800628c <__ssputs_r+0x84>
 800621a:	898a      	ldrh	r2, [r1, #12]
 800621c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006220:	d032      	beq.n	8006288 <__ssputs_r+0x80>
 8006222:	6825      	ldr	r5, [r4, #0]
 8006224:	6909      	ldr	r1, [r1, #16]
 8006226:	eba5 0901 	sub.w	r9, r5, r1
 800622a:	6965      	ldr	r5, [r4, #20]
 800622c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006234:	3301      	adds	r3, #1
 8006236:	444b      	add	r3, r9
 8006238:	106d      	asrs	r5, r5, #1
 800623a:	429d      	cmp	r5, r3
 800623c:	bf38      	it	cc
 800623e:	461d      	movcc	r5, r3
 8006240:	0553      	lsls	r3, r2, #21
 8006242:	d531      	bpl.n	80062a8 <__ssputs_r+0xa0>
 8006244:	4629      	mov	r1, r5
 8006246:	f7ff ff85 	bl	8006154 <_malloc_r>
 800624a:	4606      	mov	r6, r0
 800624c:	b950      	cbnz	r0, 8006264 <__ssputs_r+0x5c>
 800624e:	230c      	movs	r3, #12
 8006250:	f8ca 3000 	str.w	r3, [sl]
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625a:	81a3      	strh	r3, [r4, #12]
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006264:	6921      	ldr	r1, [r4, #16]
 8006266:	464a      	mov	r2, r9
 8006268:	f7fd fee8 	bl	800403c <memcpy>
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	6126      	str	r6, [r4, #16]
 800627a:	6165      	str	r5, [r4, #20]
 800627c:	444e      	add	r6, r9
 800627e:	eba5 0509 	sub.w	r5, r5, r9
 8006282:	6026      	str	r6, [r4, #0]
 8006284:	60a5      	str	r5, [r4, #8]
 8006286:	463e      	mov	r6, r7
 8006288:	42be      	cmp	r6, r7
 800628a:	d900      	bls.n	800628e <__ssputs_r+0x86>
 800628c:	463e      	mov	r6, r7
 800628e:	4632      	mov	r2, r6
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	4641      	mov	r1, r8
 8006294:	f000 f966 	bl	8006564 <memmove>
 8006298:	68a3      	ldr	r3, [r4, #8]
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	1b9b      	subs	r3, r3, r6
 800629e:	4432      	add	r2, r6
 80062a0:	60a3      	str	r3, [r4, #8]
 80062a2:	6022      	str	r2, [r4, #0]
 80062a4:	2000      	movs	r0, #0
 80062a6:	e7db      	b.n	8006260 <__ssputs_r+0x58>
 80062a8:	462a      	mov	r2, r5
 80062aa:	f000 f981 	bl	80065b0 <_realloc_r>
 80062ae:	4606      	mov	r6, r0
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d1e1      	bne.n	8006278 <__ssputs_r+0x70>
 80062b4:	6921      	ldr	r1, [r4, #16]
 80062b6:	4650      	mov	r0, sl
 80062b8:	f7ff fefc 	bl	80060b4 <_free_r>
 80062bc:	e7c7      	b.n	800624e <__ssputs_r+0x46>
	...

080062c0 <_svfiprintf_r>:
 80062c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c4:	4698      	mov	r8, r3
 80062c6:	898b      	ldrh	r3, [r1, #12]
 80062c8:	061b      	lsls	r3, r3, #24
 80062ca:	b09d      	sub	sp, #116	; 0x74
 80062cc:	4607      	mov	r7, r0
 80062ce:	460d      	mov	r5, r1
 80062d0:	4614      	mov	r4, r2
 80062d2:	d50e      	bpl.n	80062f2 <_svfiprintf_r+0x32>
 80062d4:	690b      	ldr	r3, [r1, #16]
 80062d6:	b963      	cbnz	r3, 80062f2 <_svfiprintf_r+0x32>
 80062d8:	2140      	movs	r1, #64	; 0x40
 80062da:	f7ff ff3b 	bl	8006154 <_malloc_r>
 80062de:	6028      	str	r0, [r5, #0]
 80062e0:	6128      	str	r0, [r5, #16]
 80062e2:	b920      	cbnz	r0, 80062ee <_svfiprintf_r+0x2e>
 80062e4:	230c      	movs	r3, #12
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	e0d1      	b.n	8006492 <_svfiprintf_r+0x1d2>
 80062ee:	2340      	movs	r3, #64	; 0x40
 80062f0:	616b      	str	r3, [r5, #20]
 80062f2:	2300      	movs	r3, #0
 80062f4:	9309      	str	r3, [sp, #36]	; 0x24
 80062f6:	2320      	movs	r3, #32
 80062f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006300:	2330      	movs	r3, #48	; 0x30
 8006302:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80064ac <_svfiprintf_r+0x1ec>
 8006306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800630a:	f04f 0901 	mov.w	r9, #1
 800630e:	4623      	mov	r3, r4
 8006310:	469a      	mov	sl, r3
 8006312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006316:	b10a      	cbz	r2, 800631c <_svfiprintf_r+0x5c>
 8006318:	2a25      	cmp	r2, #37	; 0x25
 800631a:	d1f9      	bne.n	8006310 <_svfiprintf_r+0x50>
 800631c:	ebba 0b04 	subs.w	fp, sl, r4
 8006320:	d00b      	beq.n	800633a <_svfiprintf_r+0x7a>
 8006322:	465b      	mov	r3, fp
 8006324:	4622      	mov	r2, r4
 8006326:	4629      	mov	r1, r5
 8006328:	4638      	mov	r0, r7
 800632a:	f7ff ff6d 	bl	8006208 <__ssputs_r>
 800632e:	3001      	adds	r0, #1
 8006330:	f000 80aa 	beq.w	8006488 <_svfiprintf_r+0x1c8>
 8006334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006336:	445a      	add	r2, fp
 8006338:	9209      	str	r2, [sp, #36]	; 0x24
 800633a:	f89a 3000 	ldrb.w	r3, [sl]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 80a2 	beq.w	8006488 <_svfiprintf_r+0x1c8>
 8006344:	2300      	movs	r3, #0
 8006346:	f04f 32ff 	mov.w	r2, #4294967295
 800634a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800634e:	f10a 0a01 	add.w	sl, sl, #1
 8006352:	9304      	str	r3, [sp, #16]
 8006354:	9307      	str	r3, [sp, #28]
 8006356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800635a:	931a      	str	r3, [sp, #104]	; 0x68
 800635c:	4654      	mov	r4, sl
 800635e:	2205      	movs	r2, #5
 8006360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006364:	4851      	ldr	r0, [pc, #324]	; (80064ac <_svfiprintf_r+0x1ec>)
 8006366:	f7f9 ff43 	bl	80001f0 <memchr>
 800636a:	9a04      	ldr	r2, [sp, #16]
 800636c:	b9d8      	cbnz	r0, 80063a6 <_svfiprintf_r+0xe6>
 800636e:	06d0      	lsls	r0, r2, #27
 8006370:	bf44      	itt	mi
 8006372:	2320      	movmi	r3, #32
 8006374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006378:	0711      	lsls	r1, r2, #28
 800637a:	bf44      	itt	mi
 800637c:	232b      	movmi	r3, #43	; 0x2b
 800637e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006382:	f89a 3000 	ldrb.w	r3, [sl]
 8006386:	2b2a      	cmp	r3, #42	; 0x2a
 8006388:	d015      	beq.n	80063b6 <_svfiprintf_r+0xf6>
 800638a:	9a07      	ldr	r2, [sp, #28]
 800638c:	4654      	mov	r4, sl
 800638e:	2000      	movs	r0, #0
 8006390:	f04f 0c0a 	mov.w	ip, #10
 8006394:	4621      	mov	r1, r4
 8006396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800639a:	3b30      	subs	r3, #48	; 0x30
 800639c:	2b09      	cmp	r3, #9
 800639e:	d94e      	bls.n	800643e <_svfiprintf_r+0x17e>
 80063a0:	b1b0      	cbz	r0, 80063d0 <_svfiprintf_r+0x110>
 80063a2:	9207      	str	r2, [sp, #28]
 80063a4:	e014      	b.n	80063d0 <_svfiprintf_r+0x110>
 80063a6:	eba0 0308 	sub.w	r3, r0, r8
 80063aa:	fa09 f303 	lsl.w	r3, r9, r3
 80063ae:	4313      	orrs	r3, r2
 80063b0:	9304      	str	r3, [sp, #16]
 80063b2:	46a2      	mov	sl, r4
 80063b4:	e7d2      	b.n	800635c <_svfiprintf_r+0x9c>
 80063b6:	9b03      	ldr	r3, [sp, #12]
 80063b8:	1d19      	adds	r1, r3, #4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	9103      	str	r1, [sp, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	bfbb      	ittet	lt
 80063c2:	425b      	neglt	r3, r3
 80063c4:	f042 0202 	orrlt.w	r2, r2, #2
 80063c8:	9307      	strge	r3, [sp, #28]
 80063ca:	9307      	strlt	r3, [sp, #28]
 80063cc:	bfb8      	it	lt
 80063ce:	9204      	strlt	r2, [sp, #16]
 80063d0:	7823      	ldrb	r3, [r4, #0]
 80063d2:	2b2e      	cmp	r3, #46	; 0x2e
 80063d4:	d10c      	bne.n	80063f0 <_svfiprintf_r+0x130>
 80063d6:	7863      	ldrb	r3, [r4, #1]
 80063d8:	2b2a      	cmp	r3, #42	; 0x2a
 80063da:	d135      	bne.n	8006448 <_svfiprintf_r+0x188>
 80063dc:	9b03      	ldr	r3, [sp, #12]
 80063de:	1d1a      	adds	r2, r3, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	9203      	str	r2, [sp, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bfb8      	it	lt
 80063e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80063ec:	3402      	adds	r4, #2
 80063ee:	9305      	str	r3, [sp, #20]
 80063f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064bc <_svfiprintf_r+0x1fc>
 80063f4:	7821      	ldrb	r1, [r4, #0]
 80063f6:	2203      	movs	r2, #3
 80063f8:	4650      	mov	r0, sl
 80063fa:	f7f9 fef9 	bl	80001f0 <memchr>
 80063fe:	b140      	cbz	r0, 8006412 <_svfiprintf_r+0x152>
 8006400:	2340      	movs	r3, #64	; 0x40
 8006402:	eba0 000a 	sub.w	r0, r0, sl
 8006406:	fa03 f000 	lsl.w	r0, r3, r0
 800640a:	9b04      	ldr	r3, [sp, #16]
 800640c:	4303      	orrs	r3, r0
 800640e:	3401      	adds	r4, #1
 8006410:	9304      	str	r3, [sp, #16]
 8006412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006416:	4826      	ldr	r0, [pc, #152]	; (80064b0 <_svfiprintf_r+0x1f0>)
 8006418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800641c:	2206      	movs	r2, #6
 800641e:	f7f9 fee7 	bl	80001f0 <memchr>
 8006422:	2800      	cmp	r0, #0
 8006424:	d038      	beq.n	8006498 <_svfiprintf_r+0x1d8>
 8006426:	4b23      	ldr	r3, [pc, #140]	; (80064b4 <_svfiprintf_r+0x1f4>)
 8006428:	bb1b      	cbnz	r3, 8006472 <_svfiprintf_r+0x1b2>
 800642a:	9b03      	ldr	r3, [sp, #12]
 800642c:	3307      	adds	r3, #7
 800642e:	f023 0307 	bic.w	r3, r3, #7
 8006432:	3308      	adds	r3, #8
 8006434:	9303      	str	r3, [sp, #12]
 8006436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006438:	4433      	add	r3, r6
 800643a:	9309      	str	r3, [sp, #36]	; 0x24
 800643c:	e767      	b.n	800630e <_svfiprintf_r+0x4e>
 800643e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006442:	460c      	mov	r4, r1
 8006444:	2001      	movs	r0, #1
 8006446:	e7a5      	b.n	8006394 <_svfiprintf_r+0xd4>
 8006448:	2300      	movs	r3, #0
 800644a:	3401      	adds	r4, #1
 800644c:	9305      	str	r3, [sp, #20]
 800644e:	4619      	mov	r1, r3
 8006450:	f04f 0c0a 	mov.w	ip, #10
 8006454:	4620      	mov	r0, r4
 8006456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800645a:	3a30      	subs	r2, #48	; 0x30
 800645c:	2a09      	cmp	r2, #9
 800645e:	d903      	bls.n	8006468 <_svfiprintf_r+0x1a8>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0c5      	beq.n	80063f0 <_svfiprintf_r+0x130>
 8006464:	9105      	str	r1, [sp, #20]
 8006466:	e7c3      	b.n	80063f0 <_svfiprintf_r+0x130>
 8006468:	fb0c 2101 	mla	r1, ip, r1, r2
 800646c:	4604      	mov	r4, r0
 800646e:	2301      	movs	r3, #1
 8006470:	e7f0      	b.n	8006454 <_svfiprintf_r+0x194>
 8006472:	ab03      	add	r3, sp, #12
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	462a      	mov	r2, r5
 8006478:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <_svfiprintf_r+0x1f8>)
 800647a:	a904      	add	r1, sp, #16
 800647c:	4638      	mov	r0, r7
 800647e:	f7fd fe93 	bl	80041a8 <_printf_float>
 8006482:	1c42      	adds	r2, r0, #1
 8006484:	4606      	mov	r6, r0
 8006486:	d1d6      	bne.n	8006436 <_svfiprintf_r+0x176>
 8006488:	89ab      	ldrh	r3, [r5, #12]
 800648a:	065b      	lsls	r3, r3, #25
 800648c:	f53f af2c 	bmi.w	80062e8 <_svfiprintf_r+0x28>
 8006490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006492:	b01d      	add	sp, #116	; 0x74
 8006494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006498:	ab03      	add	r3, sp, #12
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	462a      	mov	r2, r5
 800649e:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <_svfiprintf_r+0x1f8>)
 80064a0:	a904      	add	r1, sp, #16
 80064a2:	4638      	mov	r0, r7
 80064a4:	f7fe f924 	bl	80046f0 <_printf_i>
 80064a8:	e7eb      	b.n	8006482 <_svfiprintf_r+0x1c2>
 80064aa:	bf00      	nop
 80064ac:	0800794c 	.word	0x0800794c
 80064b0:	08007956 	.word	0x08007956
 80064b4:	080041a9 	.word	0x080041a9
 80064b8:	08006209 	.word	0x08006209
 80064bc:	08007952 	.word	0x08007952

080064c0 <_sbrk_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4d06      	ldr	r5, [pc, #24]	; (80064dc <_sbrk_r+0x1c>)
 80064c4:	2300      	movs	r3, #0
 80064c6:	4604      	mov	r4, r0
 80064c8:	4608      	mov	r0, r1
 80064ca:	602b      	str	r3, [r5, #0]
 80064cc:	f7fc fb42 	bl	8002b54 <_sbrk>
 80064d0:	1c43      	adds	r3, r0, #1
 80064d2:	d102      	bne.n	80064da <_sbrk_r+0x1a>
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	b103      	cbz	r3, 80064da <_sbrk_r+0x1a>
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	bd38      	pop	{r3, r4, r5, pc}
 80064dc:	20000260 	.word	0x20000260

080064e0 <__assert_func>:
 80064e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064e2:	4614      	mov	r4, r2
 80064e4:	461a      	mov	r2, r3
 80064e6:	4b09      	ldr	r3, [pc, #36]	; (800650c <__assert_func+0x2c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4605      	mov	r5, r0
 80064ec:	68d8      	ldr	r0, [r3, #12]
 80064ee:	b14c      	cbz	r4, 8006504 <__assert_func+0x24>
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <__assert_func+0x30>)
 80064f2:	9100      	str	r1, [sp, #0]
 80064f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064f8:	4906      	ldr	r1, [pc, #24]	; (8006514 <__assert_func+0x34>)
 80064fa:	462b      	mov	r3, r5
 80064fc:	f000 f80e 	bl	800651c <fiprintf>
 8006500:	f000 faa4 	bl	8006a4c <abort>
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <__assert_func+0x38>)
 8006506:	461c      	mov	r4, r3
 8006508:	e7f3      	b.n	80064f2 <__assert_func+0x12>
 800650a:	bf00      	nop
 800650c:	2000000c 	.word	0x2000000c
 8006510:	0800795d 	.word	0x0800795d
 8006514:	0800796a 	.word	0x0800796a
 8006518:	08007998 	.word	0x08007998

0800651c <fiprintf>:
 800651c:	b40e      	push	{r1, r2, r3}
 800651e:	b503      	push	{r0, r1, lr}
 8006520:	4601      	mov	r1, r0
 8006522:	ab03      	add	r3, sp, #12
 8006524:	4805      	ldr	r0, [pc, #20]	; (800653c <fiprintf+0x20>)
 8006526:	f853 2b04 	ldr.w	r2, [r3], #4
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	f000 f88f 	bl	8006650 <_vfiprintf_r>
 8006532:	b002      	add	sp, #8
 8006534:	f85d eb04 	ldr.w	lr, [sp], #4
 8006538:	b003      	add	sp, #12
 800653a:	4770      	bx	lr
 800653c:	2000000c 	.word	0x2000000c

08006540 <__ascii_mbtowc>:
 8006540:	b082      	sub	sp, #8
 8006542:	b901      	cbnz	r1, 8006546 <__ascii_mbtowc+0x6>
 8006544:	a901      	add	r1, sp, #4
 8006546:	b142      	cbz	r2, 800655a <__ascii_mbtowc+0x1a>
 8006548:	b14b      	cbz	r3, 800655e <__ascii_mbtowc+0x1e>
 800654a:	7813      	ldrb	r3, [r2, #0]
 800654c:	600b      	str	r3, [r1, #0]
 800654e:	7812      	ldrb	r2, [r2, #0]
 8006550:	1e10      	subs	r0, r2, #0
 8006552:	bf18      	it	ne
 8006554:	2001      	movne	r0, #1
 8006556:	b002      	add	sp, #8
 8006558:	4770      	bx	lr
 800655a:	4610      	mov	r0, r2
 800655c:	e7fb      	b.n	8006556 <__ascii_mbtowc+0x16>
 800655e:	f06f 0001 	mvn.w	r0, #1
 8006562:	e7f8      	b.n	8006556 <__ascii_mbtowc+0x16>

08006564 <memmove>:
 8006564:	4288      	cmp	r0, r1
 8006566:	b510      	push	{r4, lr}
 8006568:	eb01 0402 	add.w	r4, r1, r2
 800656c:	d902      	bls.n	8006574 <memmove+0x10>
 800656e:	4284      	cmp	r4, r0
 8006570:	4623      	mov	r3, r4
 8006572:	d807      	bhi.n	8006584 <memmove+0x20>
 8006574:	1e43      	subs	r3, r0, #1
 8006576:	42a1      	cmp	r1, r4
 8006578:	d008      	beq.n	800658c <memmove+0x28>
 800657a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800657e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006582:	e7f8      	b.n	8006576 <memmove+0x12>
 8006584:	4402      	add	r2, r0
 8006586:	4601      	mov	r1, r0
 8006588:	428a      	cmp	r2, r1
 800658a:	d100      	bne.n	800658e <memmove+0x2a>
 800658c:	bd10      	pop	{r4, pc}
 800658e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006596:	e7f7      	b.n	8006588 <memmove+0x24>

08006598 <__malloc_lock>:
 8006598:	4801      	ldr	r0, [pc, #4]	; (80065a0 <__malloc_lock+0x8>)
 800659a:	f000 bc17 	b.w	8006dcc <__retarget_lock_acquire_recursive>
 800659e:	bf00      	nop
 80065a0:	20000268 	.word	0x20000268

080065a4 <__malloc_unlock>:
 80065a4:	4801      	ldr	r0, [pc, #4]	; (80065ac <__malloc_unlock+0x8>)
 80065a6:	f000 bc12 	b.w	8006dce <__retarget_lock_release_recursive>
 80065aa:	bf00      	nop
 80065ac:	20000268 	.word	0x20000268

080065b0 <_realloc_r>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	4607      	mov	r7, r0
 80065b4:	4614      	mov	r4, r2
 80065b6:	460e      	mov	r6, r1
 80065b8:	b921      	cbnz	r1, 80065c4 <_realloc_r+0x14>
 80065ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065be:	4611      	mov	r1, r2
 80065c0:	f7ff bdc8 	b.w	8006154 <_malloc_r>
 80065c4:	b922      	cbnz	r2, 80065d0 <_realloc_r+0x20>
 80065c6:	f7ff fd75 	bl	80060b4 <_free_r>
 80065ca:	4625      	mov	r5, r4
 80065cc:	4628      	mov	r0, r5
 80065ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065d0:	f000 fc62 	bl	8006e98 <_malloc_usable_size_r>
 80065d4:	42a0      	cmp	r0, r4
 80065d6:	d20f      	bcs.n	80065f8 <_realloc_r+0x48>
 80065d8:	4621      	mov	r1, r4
 80065da:	4638      	mov	r0, r7
 80065dc:	f7ff fdba 	bl	8006154 <_malloc_r>
 80065e0:	4605      	mov	r5, r0
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d0f2      	beq.n	80065cc <_realloc_r+0x1c>
 80065e6:	4631      	mov	r1, r6
 80065e8:	4622      	mov	r2, r4
 80065ea:	f7fd fd27 	bl	800403c <memcpy>
 80065ee:	4631      	mov	r1, r6
 80065f0:	4638      	mov	r0, r7
 80065f2:	f7ff fd5f 	bl	80060b4 <_free_r>
 80065f6:	e7e9      	b.n	80065cc <_realloc_r+0x1c>
 80065f8:	4635      	mov	r5, r6
 80065fa:	e7e7      	b.n	80065cc <_realloc_r+0x1c>

080065fc <__sfputc_r>:
 80065fc:	6893      	ldr	r3, [r2, #8]
 80065fe:	3b01      	subs	r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	b410      	push	{r4}
 8006604:	6093      	str	r3, [r2, #8]
 8006606:	da08      	bge.n	800661a <__sfputc_r+0x1e>
 8006608:	6994      	ldr	r4, [r2, #24]
 800660a:	42a3      	cmp	r3, r4
 800660c:	db01      	blt.n	8006612 <__sfputc_r+0x16>
 800660e:	290a      	cmp	r1, #10
 8006610:	d103      	bne.n	800661a <__sfputc_r+0x1e>
 8006612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006616:	f000 b94b 	b.w	80068b0 <__swbuf_r>
 800661a:	6813      	ldr	r3, [r2, #0]
 800661c:	1c58      	adds	r0, r3, #1
 800661e:	6010      	str	r0, [r2, #0]
 8006620:	7019      	strb	r1, [r3, #0]
 8006622:	4608      	mov	r0, r1
 8006624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006628:	4770      	bx	lr

0800662a <__sfputs_r>:
 800662a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662c:	4606      	mov	r6, r0
 800662e:	460f      	mov	r7, r1
 8006630:	4614      	mov	r4, r2
 8006632:	18d5      	adds	r5, r2, r3
 8006634:	42ac      	cmp	r4, r5
 8006636:	d101      	bne.n	800663c <__sfputs_r+0x12>
 8006638:	2000      	movs	r0, #0
 800663a:	e007      	b.n	800664c <__sfputs_r+0x22>
 800663c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006640:	463a      	mov	r2, r7
 8006642:	4630      	mov	r0, r6
 8006644:	f7ff ffda 	bl	80065fc <__sfputc_r>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d1f3      	bne.n	8006634 <__sfputs_r+0xa>
 800664c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006650 <_vfiprintf_r>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	460d      	mov	r5, r1
 8006656:	b09d      	sub	sp, #116	; 0x74
 8006658:	4614      	mov	r4, r2
 800665a:	4698      	mov	r8, r3
 800665c:	4606      	mov	r6, r0
 800665e:	b118      	cbz	r0, 8006668 <_vfiprintf_r+0x18>
 8006660:	6983      	ldr	r3, [r0, #24]
 8006662:	b90b      	cbnz	r3, 8006668 <_vfiprintf_r+0x18>
 8006664:	f000 fb14 	bl	8006c90 <__sinit>
 8006668:	4b89      	ldr	r3, [pc, #548]	; (8006890 <_vfiprintf_r+0x240>)
 800666a:	429d      	cmp	r5, r3
 800666c:	d11b      	bne.n	80066a6 <_vfiprintf_r+0x56>
 800666e:	6875      	ldr	r5, [r6, #4]
 8006670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006672:	07d9      	lsls	r1, r3, #31
 8006674:	d405      	bmi.n	8006682 <_vfiprintf_r+0x32>
 8006676:	89ab      	ldrh	r3, [r5, #12]
 8006678:	059a      	lsls	r2, r3, #22
 800667a:	d402      	bmi.n	8006682 <_vfiprintf_r+0x32>
 800667c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800667e:	f000 fba5 	bl	8006dcc <__retarget_lock_acquire_recursive>
 8006682:	89ab      	ldrh	r3, [r5, #12]
 8006684:	071b      	lsls	r3, r3, #28
 8006686:	d501      	bpl.n	800668c <_vfiprintf_r+0x3c>
 8006688:	692b      	ldr	r3, [r5, #16]
 800668a:	b9eb      	cbnz	r3, 80066c8 <_vfiprintf_r+0x78>
 800668c:	4629      	mov	r1, r5
 800668e:	4630      	mov	r0, r6
 8006690:	f000 f96e 	bl	8006970 <__swsetup_r>
 8006694:	b1c0      	cbz	r0, 80066c8 <_vfiprintf_r+0x78>
 8006696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006698:	07dc      	lsls	r4, r3, #31
 800669a:	d50e      	bpl.n	80066ba <_vfiprintf_r+0x6a>
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	b01d      	add	sp, #116	; 0x74
 80066a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a6:	4b7b      	ldr	r3, [pc, #492]	; (8006894 <_vfiprintf_r+0x244>)
 80066a8:	429d      	cmp	r5, r3
 80066aa:	d101      	bne.n	80066b0 <_vfiprintf_r+0x60>
 80066ac:	68b5      	ldr	r5, [r6, #8]
 80066ae:	e7df      	b.n	8006670 <_vfiprintf_r+0x20>
 80066b0:	4b79      	ldr	r3, [pc, #484]	; (8006898 <_vfiprintf_r+0x248>)
 80066b2:	429d      	cmp	r5, r3
 80066b4:	bf08      	it	eq
 80066b6:	68f5      	ldreq	r5, [r6, #12]
 80066b8:	e7da      	b.n	8006670 <_vfiprintf_r+0x20>
 80066ba:	89ab      	ldrh	r3, [r5, #12]
 80066bc:	0598      	lsls	r0, r3, #22
 80066be:	d4ed      	bmi.n	800669c <_vfiprintf_r+0x4c>
 80066c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066c2:	f000 fb84 	bl	8006dce <__retarget_lock_release_recursive>
 80066c6:	e7e9      	b.n	800669c <_vfiprintf_r+0x4c>
 80066c8:	2300      	movs	r3, #0
 80066ca:	9309      	str	r3, [sp, #36]	; 0x24
 80066cc:	2320      	movs	r3, #32
 80066ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80066d6:	2330      	movs	r3, #48	; 0x30
 80066d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800689c <_vfiprintf_r+0x24c>
 80066dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066e0:	f04f 0901 	mov.w	r9, #1
 80066e4:	4623      	mov	r3, r4
 80066e6:	469a      	mov	sl, r3
 80066e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ec:	b10a      	cbz	r2, 80066f2 <_vfiprintf_r+0xa2>
 80066ee:	2a25      	cmp	r2, #37	; 0x25
 80066f0:	d1f9      	bne.n	80066e6 <_vfiprintf_r+0x96>
 80066f2:	ebba 0b04 	subs.w	fp, sl, r4
 80066f6:	d00b      	beq.n	8006710 <_vfiprintf_r+0xc0>
 80066f8:	465b      	mov	r3, fp
 80066fa:	4622      	mov	r2, r4
 80066fc:	4629      	mov	r1, r5
 80066fe:	4630      	mov	r0, r6
 8006700:	f7ff ff93 	bl	800662a <__sfputs_r>
 8006704:	3001      	adds	r0, #1
 8006706:	f000 80aa 	beq.w	800685e <_vfiprintf_r+0x20e>
 800670a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800670c:	445a      	add	r2, fp
 800670e:	9209      	str	r2, [sp, #36]	; 0x24
 8006710:	f89a 3000 	ldrb.w	r3, [sl]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80a2 	beq.w	800685e <_vfiprintf_r+0x20e>
 800671a:	2300      	movs	r3, #0
 800671c:	f04f 32ff 	mov.w	r2, #4294967295
 8006720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006724:	f10a 0a01 	add.w	sl, sl, #1
 8006728:	9304      	str	r3, [sp, #16]
 800672a:	9307      	str	r3, [sp, #28]
 800672c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006730:	931a      	str	r3, [sp, #104]	; 0x68
 8006732:	4654      	mov	r4, sl
 8006734:	2205      	movs	r2, #5
 8006736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673a:	4858      	ldr	r0, [pc, #352]	; (800689c <_vfiprintf_r+0x24c>)
 800673c:	f7f9 fd58 	bl	80001f0 <memchr>
 8006740:	9a04      	ldr	r2, [sp, #16]
 8006742:	b9d8      	cbnz	r0, 800677c <_vfiprintf_r+0x12c>
 8006744:	06d1      	lsls	r1, r2, #27
 8006746:	bf44      	itt	mi
 8006748:	2320      	movmi	r3, #32
 800674a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800674e:	0713      	lsls	r3, r2, #28
 8006750:	bf44      	itt	mi
 8006752:	232b      	movmi	r3, #43	; 0x2b
 8006754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006758:	f89a 3000 	ldrb.w	r3, [sl]
 800675c:	2b2a      	cmp	r3, #42	; 0x2a
 800675e:	d015      	beq.n	800678c <_vfiprintf_r+0x13c>
 8006760:	9a07      	ldr	r2, [sp, #28]
 8006762:	4654      	mov	r4, sl
 8006764:	2000      	movs	r0, #0
 8006766:	f04f 0c0a 	mov.w	ip, #10
 800676a:	4621      	mov	r1, r4
 800676c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006770:	3b30      	subs	r3, #48	; 0x30
 8006772:	2b09      	cmp	r3, #9
 8006774:	d94e      	bls.n	8006814 <_vfiprintf_r+0x1c4>
 8006776:	b1b0      	cbz	r0, 80067a6 <_vfiprintf_r+0x156>
 8006778:	9207      	str	r2, [sp, #28]
 800677a:	e014      	b.n	80067a6 <_vfiprintf_r+0x156>
 800677c:	eba0 0308 	sub.w	r3, r0, r8
 8006780:	fa09 f303 	lsl.w	r3, r9, r3
 8006784:	4313      	orrs	r3, r2
 8006786:	9304      	str	r3, [sp, #16]
 8006788:	46a2      	mov	sl, r4
 800678a:	e7d2      	b.n	8006732 <_vfiprintf_r+0xe2>
 800678c:	9b03      	ldr	r3, [sp, #12]
 800678e:	1d19      	adds	r1, r3, #4
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	9103      	str	r1, [sp, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	bfbb      	ittet	lt
 8006798:	425b      	neglt	r3, r3
 800679a:	f042 0202 	orrlt.w	r2, r2, #2
 800679e:	9307      	strge	r3, [sp, #28]
 80067a0:	9307      	strlt	r3, [sp, #28]
 80067a2:	bfb8      	it	lt
 80067a4:	9204      	strlt	r2, [sp, #16]
 80067a6:	7823      	ldrb	r3, [r4, #0]
 80067a8:	2b2e      	cmp	r3, #46	; 0x2e
 80067aa:	d10c      	bne.n	80067c6 <_vfiprintf_r+0x176>
 80067ac:	7863      	ldrb	r3, [r4, #1]
 80067ae:	2b2a      	cmp	r3, #42	; 0x2a
 80067b0:	d135      	bne.n	800681e <_vfiprintf_r+0x1ce>
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	1d1a      	adds	r2, r3, #4
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	9203      	str	r2, [sp, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bfb8      	it	lt
 80067be:	f04f 33ff 	movlt.w	r3, #4294967295
 80067c2:	3402      	adds	r4, #2
 80067c4:	9305      	str	r3, [sp, #20]
 80067c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80068ac <_vfiprintf_r+0x25c>
 80067ca:	7821      	ldrb	r1, [r4, #0]
 80067cc:	2203      	movs	r2, #3
 80067ce:	4650      	mov	r0, sl
 80067d0:	f7f9 fd0e 	bl	80001f0 <memchr>
 80067d4:	b140      	cbz	r0, 80067e8 <_vfiprintf_r+0x198>
 80067d6:	2340      	movs	r3, #64	; 0x40
 80067d8:	eba0 000a 	sub.w	r0, r0, sl
 80067dc:	fa03 f000 	lsl.w	r0, r3, r0
 80067e0:	9b04      	ldr	r3, [sp, #16]
 80067e2:	4303      	orrs	r3, r0
 80067e4:	3401      	adds	r4, #1
 80067e6:	9304      	str	r3, [sp, #16]
 80067e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ec:	482c      	ldr	r0, [pc, #176]	; (80068a0 <_vfiprintf_r+0x250>)
 80067ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067f2:	2206      	movs	r2, #6
 80067f4:	f7f9 fcfc 	bl	80001f0 <memchr>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d03f      	beq.n	800687c <_vfiprintf_r+0x22c>
 80067fc:	4b29      	ldr	r3, [pc, #164]	; (80068a4 <_vfiprintf_r+0x254>)
 80067fe:	bb1b      	cbnz	r3, 8006848 <_vfiprintf_r+0x1f8>
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	3307      	adds	r3, #7
 8006804:	f023 0307 	bic.w	r3, r3, #7
 8006808:	3308      	adds	r3, #8
 800680a:	9303      	str	r3, [sp, #12]
 800680c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680e:	443b      	add	r3, r7
 8006810:	9309      	str	r3, [sp, #36]	; 0x24
 8006812:	e767      	b.n	80066e4 <_vfiprintf_r+0x94>
 8006814:	fb0c 3202 	mla	r2, ip, r2, r3
 8006818:	460c      	mov	r4, r1
 800681a:	2001      	movs	r0, #1
 800681c:	e7a5      	b.n	800676a <_vfiprintf_r+0x11a>
 800681e:	2300      	movs	r3, #0
 8006820:	3401      	adds	r4, #1
 8006822:	9305      	str	r3, [sp, #20]
 8006824:	4619      	mov	r1, r3
 8006826:	f04f 0c0a 	mov.w	ip, #10
 800682a:	4620      	mov	r0, r4
 800682c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006830:	3a30      	subs	r2, #48	; 0x30
 8006832:	2a09      	cmp	r2, #9
 8006834:	d903      	bls.n	800683e <_vfiprintf_r+0x1ee>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0c5      	beq.n	80067c6 <_vfiprintf_r+0x176>
 800683a:	9105      	str	r1, [sp, #20]
 800683c:	e7c3      	b.n	80067c6 <_vfiprintf_r+0x176>
 800683e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006842:	4604      	mov	r4, r0
 8006844:	2301      	movs	r3, #1
 8006846:	e7f0      	b.n	800682a <_vfiprintf_r+0x1da>
 8006848:	ab03      	add	r3, sp, #12
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	462a      	mov	r2, r5
 800684e:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <_vfiprintf_r+0x258>)
 8006850:	a904      	add	r1, sp, #16
 8006852:	4630      	mov	r0, r6
 8006854:	f7fd fca8 	bl	80041a8 <_printf_float>
 8006858:	4607      	mov	r7, r0
 800685a:	1c78      	adds	r0, r7, #1
 800685c:	d1d6      	bne.n	800680c <_vfiprintf_r+0x1bc>
 800685e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006860:	07d9      	lsls	r1, r3, #31
 8006862:	d405      	bmi.n	8006870 <_vfiprintf_r+0x220>
 8006864:	89ab      	ldrh	r3, [r5, #12]
 8006866:	059a      	lsls	r2, r3, #22
 8006868:	d402      	bmi.n	8006870 <_vfiprintf_r+0x220>
 800686a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800686c:	f000 faaf 	bl	8006dce <__retarget_lock_release_recursive>
 8006870:	89ab      	ldrh	r3, [r5, #12]
 8006872:	065b      	lsls	r3, r3, #25
 8006874:	f53f af12 	bmi.w	800669c <_vfiprintf_r+0x4c>
 8006878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800687a:	e711      	b.n	80066a0 <_vfiprintf_r+0x50>
 800687c:	ab03      	add	r3, sp, #12
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	462a      	mov	r2, r5
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <_vfiprintf_r+0x258>)
 8006884:	a904      	add	r1, sp, #16
 8006886:	4630      	mov	r0, r6
 8006888:	f7fd ff32 	bl	80046f0 <_printf_i>
 800688c:	e7e4      	b.n	8006858 <_vfiprintf_r+0x208>
 800688e:	bf00      	nop
 8006890:	08007ac4 	.word	0x08007ac4
 8006894:	08007ae4 	.word	0x08007ae4
 8006898:	08007aa4 	.word	0x08007aa4
 800689c:	0800794c 	.word	0x0800794c
 80068a0:	08007956 	.word	0x08007956
 80068a4:	080041a9 	.word	0x080041a9
 80068a8:	0800662b 	.word	0x0800662b
 80068ac:	08007952 	.word	0x08007952

080068b0 <__swbuf_r>:
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b2:	460e      	mov	r6, r1
 80068b4:	4614      	mov	r4, r2
 80068b6:	4605      	mov	r5, r0
 80068b8:	b118      	cbz	r0, 80068c2 <__swbuf_r+0x12>
 80068ba:	6983      	ldr	r3, [r0, #24]
 80068bc:	b90b      	cbnz	r3, 80068c2 <__swbuf_r+0x12>
 80068be:	f000 f9e7 	bl	8006c90 <__sinit>
 80068c2:	4b21      	ldr	r3, [pc, #132]	; (8006948 <__swbuf_r+0x98>)
 80068c4:	429c      	cmp	r4, r3
 80068c6:	d12b      	bne.n	8006920 <__swbuf_r+0x70>
 80068c8:	686c      	ldr	r4, [r5, #4]
 80068ca:	69a3      	ldr	r3, [r4, #24]
 80068cc:	60a3      	str	r3, [r4, #8]
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	071a      	lsls	r2, r3, #28
 80068d2:	d52f      	bpl.n	8006934 <__swbuf_r+0x84>
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	b36b      	cbz	r3, 8006934 <__swbuf_r+0x84>
 80068d8:	6923      	ldr	r3, [r4, #16]
 80068da:	6820      	ldr	r0, [r4, #0]
 80068dc:	1ac0      	subs	r0, r0, r3
 80068de:	6963      	ldr	r3, [r4, #20]
 80068e0:	b2f6      	uxtb	r6, r6
 80068e2:	4283      	cmp	r3, r0
 80068e4:	4637      	mov	r7, r6
 80068e6:	dc04      	bgt.n	80068f2 <__swbuf_r+0x42>
 80068e8:	4621      	mov	r1, r4
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 f93c 	bl	8006b68 <_fflush_r>
 80068f0:	bb30      	cbnz	r0, 8006940 <__swbuf_r+0x90>
 80068f2:	68a3      	ldr	r3, [r4, #8]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	60a3      	str	r3, [r4, #8]
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	6022      	str	r2, [r4, #0]
 80068fe:	701e      	strb	r6, [r3, #0]
 8006900:	6963      	ldr	r3, [r4, #20]
 8006902:	3001      	adds	r0, #1
 8006904:	4283      	cmp	r3, r0
 8006906:	d004      	beq.n	8006912 <__swbuf_r+0x62>
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	07db      	lsls	r3, r3, #31
 800690c:	d506      	bpl.n	800691c <__swbuf_r+0x6c>
 800690e:	2e0a      	cmp	r6, #10
 8006910:	d104      	bne.n	800691c <__swbuf_r+0x6c>
 8006912:	4621      	mov	r1, r4
 8006914:	4628      	mov	r0, r5
 8006916:	f000 f927 	bl	8006b68 <_fflush_r>
 800691a:	b988      	cbnz	r0, 8006940 <__swbuf_r+0x90>
 800691c:	4638      	mov	r0, r7
 800691e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006920:	4b0a      	ldr	r3, [pc, #40]	; (800694c <__swbuf_r+0x9c>)
 8006922:	429c      	cmp	r4, r3
 8006924:	d101      	bne.n	800692a <__swbuf_r+0x7a>
 8006926:	68ac      	ldr	r4, [r5, #8]
 8006928:	e7cf      	b.n	80068ca <__swbuf_r+0x1a>
 800692a:	4b09      	ldr	r3, [pc, #36]	; (8006950 <__swbuf_r+0xa0>)
 800692c:	429c      	cmp	r4, r3
 800692e:	bf08      	it	eq
 8006930:	68ec      	ldreq	r4, [r5, #12]
 8006932:	e7ca      	b.n	80068ca <__swbuf_r+0x1a>
 8006934:	4621      	mov	r1, r4
 8006936:	4628      	mov	r0, r5
 8006938:	f000 f81a 	bl	8006970 <__swsetup_r>
 800693c:	2800      	cmp	r0, #0
 800693e:	d0cb      	beq.n	80068d8 <__swbuf_r+0x28>
 8006940:	f04f 37ff 	mov.w	r7, #4294967295
 8006944:	e7ea      	b.n	800691c <__swbuf_r+0x6c>
 8006946:	bf00      	nop
 8006948:	08007ac4 	.word	0x08007ac4
 800694c:	08007ae4 	.word	0x08007ae4
 8006950:	08007aa4 	.word	0x08007aa4

08006954 <__ascii_wctomb>:
 8006954:	b149      	cbz	r1, 800696a <__ascii_wctomb+0x16>
 8006956:	2aff      	cmp	r2, #255	; 0xff
 8006958:	bf85      	ittet	hi
 800695a:	238a      	movhi	r3, #138	; 0x8a
 800695c:	6003      	strhi	r3, [r0, #0]
 800695e:	700a      	strbls	r2, [r1, #0]
 8006960:	f04f 30ff 	movhi.w	r0, #4294967295
 8006964:	bf98      	it	ls
 8006966:	2001      	movls	r0, #1
 8006968:	4770      	bx	lr
 800696a:	4608      	mov	r0, r1
 800696c:	4770      	bx	lr
	...

08006970 <__swsetup_r>:
 8006970:	4b32      	ldr	r3, [pc, #200]	; (8006a3c <__swsetup_r+0xcc>)
 8006972:	b570      	push	{r4, r5, r6, lr}
 8006974:	681d      	ldr	r5, [r3, #0]
 8006976:	4606      	mov	r6, r0
 8006978:	460c      	mov	r4, r1
 800697a:	b125      	cbz	r5, 8006986 <__swsetup_r+0x16>
 800697c:	69ab      	ldr	r3, [r5, #24]
 800697e:	b913      	cbnz	r3, 8006986 <__swsetup_r+0x16>
 8006980:	4628      	mov	r0, r5
 8006982:	f000 f985 	bl	8006c90 <__sinit>
 8006986:	4b2e      	ldr	r3, [pc, #184]	; (8006a40 <__swsetup_r+0xd0>)
 8006988:	429c      	cmp	r4, r3
 800698a:	d10f      	bne.n	80069ac <__swsetup_r+0x3c>
 800698c:	686c      	ldr	r4, [r5, #4]
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006994:	0719      	lsls	r1, r3, #28
 8006996:	d42c      	bmi.n	80069f2 <__swsetup_r+0x82>
 8006998:	06dd      	lsls	r5, r3, #27
 800699a:	d411      	bmi.n	80069c0 <__swsetup_r+0x50>
 800699c:	2309      	movs	r3, #9
 800699e:	6033      	str	r3, [r6, #0]
 80069a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	f04f 30ff 	mov.w	r0, #4294967295
 80069aa:	e03e      	b.n	8006a2a <__swsetup_r+0xba>
 80069ac:	4b25      	ldr	r3, [pc, #148]	; (8006a44 <__swsetup_r+0xd4>)
 80069ae:	429c      	cmp	r4, r3
 80069b0:	d101      	bne.n	80069b6 <__swsetup_r+0x46>
 80069b2:	68ac      	ldr	r4, [r5, #8]
 80069b4:	e7eb      	b.n	800698e <__swsetup_r+0x1e>
 80069b6:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <__swsetup_r+0xd8>)
 80069b8:	429c      	cmp	r4, r3
 80069ba:	bf08      	it	eq
 80069bc:	68ec      	ldreq	r4, [r5, #12]
 80069be:	e7e6      	b.n	800698e <__swsetup_r+0x1e>
 80069c0:	0758      	lsls	r0, r3, #29
 80069c2:	d512      	bpl.n	80069ea <__swsetup_r+0x7a>
 80069c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069c6:	b141      	cbz	r1, 80069da <__swsetup_r+0x6a>
 80069c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069cc:	4299      	cmp	r1, r3
 80069ce:	d002      	beq.n	80069d6 <__swsetup_r+0x66>
 80069d0:	4630      	mov	r0, r6
 80069d2:	f7ff fb6f 	bl	80060b4 <_free_r>
 80069d6:	2300      	movs	r3, #0
 80069d8:	6363      	str	r3, [r4, #52]	; 0x34
 80069da:	89a3      	ldrh	r3, [r4, #12]
 80069dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069e0:	81a3      	strh	r3, [r4, #12]
 80069e2:	2300      	movs	r3, #0
 80069e4:	6063      	str	r3, [r4, #4]
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	f043 0308 	orr.w	r3, r3, #8
 80069f0:	81a3      	strh	r3, [r4, #12]
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	b94b      	cbnz	r3, 8006a0a <__swsetup_r+0x9a>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a00:	d003      	beq.n	8006a0a <__swsetup_r+0x9a>
 8006a02:	4621      	mov	r1, r4
 8006a04:	4630      	mov	r0, r6
 8006a06:	f000 fa07 	bl	8006e18 <__smakebuf_r>
 8006a0a:	89a0      	ldrh	r0, [r4, #12]
 8006a0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a10:	f010 0301 	ands.w	r3, r0, #1
 8006a14:	d00a      	beq.n	8006a2c <__swsetup_r+0xbc>
 8006a16:	2300      	movs	r3, #0
 8006a18:	60a3      	str	r3, [r4, #8]
 8006a1a:	6963      	ldr	r3, [r4, #20]
 8006a1c:	425b      	negs	r3, r3
 8006a1e:	61a3      	str	r3, [r4, #24]
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	b943      	cbnz	r3, 8006a36 <__swsetup_r+0xc6>
 8006a24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a28:	d1ba      	bne.n	80069a0 <__swsetup_r+0x30>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	0781      	lsls	r1, r0, #30
 8006a2e:	bf58      	it	pl
 8006a30:	6963      	ldrpl	r3, [r4, #20]
 8006a32:	60a3      	str	r3, [r4, #8]
 8006a34:	e7f4      	b.n	8006a20 <__swsetup_r+0xb0>
 8006a36:	2000      	movs	r0, #0
 8006a38:	e7f7      	b.n	8006a2a <__swsetup_r+0xba>
 8006a3a:	bf00      	nop
 8006a3c:	2000000c 	.word	0x2000000c
 8006a40:	08007ac4 	.word	0x08007ac4
 8006a44:	08007ae4 	.word	0x08007ae4
 8006a48:	08007aa4 	.word	0x08007aa4

08006a4c <abort>:
 8006a4c:	b508      	push	{r3, lr}
 8006a4e:	2006      	movs	r0, #6
 8006a50:	f000 fa52 	bl	8006ef8 <raise>
 8006a54:	2001      	movs	r0, #1
 8006a56:	f7fc f805 	bl	8002a64 <_exit>
	...

08006a5c <__sflush_r>:
 8006a5c:	898a      	ldrh	r2, [r1, #12]
 8006a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a62:	4605      	mov	r5, r0
 8006a64:	0710      	lsls	r0, r2, #28
 8006a66:	460c      	mov	r4, r1
 8006a68:	d458      	bmi.n	8006b1c <__sflush_r+0xc0>
 8006a6a:	684b      	ldr	r3, [r1, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	dc05      	bgt.n	8006a7c <__sflush_r+0x20>
 8006a70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	dc02      	bgt.n	8006a7c <__sflush_r+0x20>
 8006a76:	2000      	movs	r0, #0
 8006a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	d0f9      	beq.n	8006a76 <__sflush_r+0x1a>
 8006a82:	2300      	movs	r3, #0
 8006a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a88:	682f      	ldr	r7, [r5, #0]
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	d032      	beq.n	8006af4 <__sflush_r+0x98>
 8006a8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	075a      	lsls	r2, r3, #29
 8006a94:	d505      	bpl.n	8006aa2 <__sflush_r+0x46>
 8006a96:	6863      	ldr	r3, [r4, #4]
 8006a98:	1ac0      	subs	r0, r0, r3
 8006a9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a9c:	b10b      	cbz	r3, 8006aa2 <__sflush_r+0x46>
 8006a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aa0:	1ac0      	subs	r0, r0, r3
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aa8:	6a21      	ldr	r1, [r4, #32]
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b0      	blx	r6
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	d106      	bne.n	8006ac2 <__sflush_r+0x66>
 8006ab4:	6829      	ldr	r1, [r5, #0]
 8006ab6:	291d      	cmp	r1, #29
 8006ab8:	d82c      	bhi.n	8006b14 <__sflush_r+0xb8>
 8006aba:	4a2a      	ldr	r2, [pc, #168]	; (8006b64 <__sflush_r+0x108>)
 8006abc:	40ca      	lsrs	r2, r1
 8006abe:	07d6      	lsls	r6, r2, #31
 8006ac0:	d528      	bpl.n	8006b14 <__sflush_r+0xb8>
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	6062      	str	r2, [r4, #4]
 8006ac6:	04d9      	lsls	r1, r3, #19
 8006ac8:	6922      	ldr	r2, [r4, #16]
 8006aca:	6022      	str	r2, [r4, #0]
 8006acc:	d504      	bpl.n	8006ad8 <__sflush_r+0x7c>
 8006ace:	1c42      	adds	r2, r0, #1
 8006ad0:	d101      	bne.n	8006ad6 <__sflush_r+0x7a>
 8006ad2:	682b      	ldr	r3, [r5, #0]
 8006ad4:	b903      	cbnz	r3, 8006ad8 <__sflush_r+0x7c>
 8006ad6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ada:	602f      	str	r7, [r5, #0]
 8006adc:	2900      	cmp	r1, #0
 8006ade:	d0ca      	beq.n	8006a76 <__sflush_r+0x1a>
 8006ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ae4:	4299      	cmp	r1, r3
 8006ae6:	d002      	beq.n	8006aee <__sflush_r+0x92>
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f7ff fae3 	bl	80060b4 <_free_r>
 8006aee:	2000      	movs	r0, #0
 8006af0:	6360      	str	r0, [r4, #52]	; 0x34
 8006af2:	e7c1      	b.n	8006a78 <__sflush_r+0x1c>
 8006af4:	6a21      	ldr	r1, [r4, #32]
 8006af6:	2301      	movs	r3, #1
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b0      	blx	r6
 8006afc:	1c41      	adds	r1, r0, #1
 8006afe:	d1c7      	bne.n	8006a90 <__sflush_r+0x34>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0c4      	beq.n	8006a90 <__sflush_r+0x34>
 8006b06:	2b1d      	cmp	r3, #29
 8006b08:	d001      	beq.n	8006b0e <__sflush_r+0xb2>
 8006b0a:	2b16      	cmp	r3, #22
 8006b0c:	d101      	bne.n	8006b12 <__sflush_r+0xb6>
 8006b0e:	602f      	str	r7, [r5, #0]
 8006b10:	e7b1      	b.n	8006a76 <__sflush_r+0x1a>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b18:	81a3      	strh	r3, [r4, #12]
 8006b1a:	e7ad      	b.n	8006a78 <__sflush_r+0x1c>
 8006b1c:	690f      	ldr	r7, [r1, #16]
 8006b1e:	2f00      	cmp	r7, #0
 8006b20:	d0a9      	beq.n	8006a76 <__sflush_r+0x1a>
 8006b22:	0793      	lsls	r3, r2, #30
 8006b24:	680e      	ldr	r6, [r1, #0]
 8006b26:	bf08      	it	eq
 8006b28:	694b      	ldreq	r3, [r1, #20]
 8006b2a:	600f      	str	r7, [r1, #0]
 8006b2c:	bf18      	it	ne
 8006b2e:	2300      	movne	r3, #0
 8006b30:	eba6 0807 	sub.w	r8, r6, r7
 8006b34:	608b      	str	r3, [r1, #8]
 8006b36:	f1b8 0f00 	cmp.w	r8, #0
 8006b3a:	dd9c      	ble.n	8006a76 <__sflush_r+0x1a>
 8006b3c:	6a21      	ldr	r1, [r4, #32]
 8006b3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b40:	4643      	mov	r3, r8
 8006b42:	463a      	mov	r2, r7
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b0      	blx	r6
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	dc06      	bgt.n	8006b5a <__sflush_r+0xfe>
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b52:	81a3      	strh	r3, [r4, #12]
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	e78e      	b.n	8006a78 <__sflush_r+0x1c>
 8006b5a:	4407      	add	r7, r0
 8006b5c:	eba8 0800 	sub.w	r8, r8, r0
 8006b60:	e7e9      	b.n	8006b36 <__sflush_r+0xda>
 8006b62:	bf00      	nop
 8006b64:	20400001 	.word	0x20400001

08006b68 <_fflush_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	690b      	ldr	r3, [r1, #16]
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	b913      	cbnz	r3, 8006b78 <_fflush_r+0x10>
 8006b72:	2500      	movs	r5, #0
 8006b74:	4628      	mov	r0, r5
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	b118      	cbz	r0, 8006b82 <_fflush_r+0x1a>
 8006b7a:	6983      	ldr	r3, [r0, #24]
 8006b7c:	b90b      	cbnz	r3, 8006b82 <_fflush_r+0x1a>
 8006b7e:	f000 f887 	bl	8006c90 <__sinit>
 8006b82:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <_fflush_r+0x6c>)
 8006b84:	429c      	cmp	r4, r3
 8006b86:	d11b      	bne.n	8006bc0 <_fflush_r+0x58>
 8006b88:	686c      	ldr	r4, [r5, #4]
 8006b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0ef      	beq.n	8006b72 <_fflush_r+0xa>
 8006b92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b94:	07d0      	lsls	r0, r2, #31
 8006b96:	d404      	bmi.n	8006ba2 <_fflush_r+0x3a>
 8006b98:	0599      	lsls	r1, r3, #22
 8006b9a:	d402      	bmi.n	8006ba2 <_fflush_r+0x3a>
 8006b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9e:	f000 f915 	bl	8006dcc <__retarget_lock_acquire_recursive>
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	f7ff ff59 	bl	8006a5c <__sflush_r>
 8006baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bac:	07da      	lsls	r2, r3, #31
 8006bae:	4605      	mov	r5, r0
 8006bb0:	d4e0      	bmi.n	8006b74 <_fflush_r+0xc>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	059b      	lsls	r3, r3, #22
 8006bb6:	d4dd      	bmi.n	8006b74 <_fflush_r+0xc>
 8006bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bba:	f000 f908 	bl	8006dce <__retarget_lock_release_recursive>
 8006bbe:	e7d9      	b.n	8006b74 <_fflush_r+0xc>
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <_fflush_r+0x70>)
 8006bc2:	429c      	cmp	r4, r3
 8006bc4:	d101      	bne.n	8006bca <_fflush_r+0x62>
 8006bc6:	68ac      	ldr	r4, [r5, #8]
 8006bc8:	e7df      	b.n	8006b8a <_fflush_r+0x22>
 8006bca:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <_fflush_r+0x74>)
 8006bcc:	429c      	cmp	r4, r3
 8006bce:	bf08      	it	eq
 8006bd0:	68ec      	ldreq	r4, [r5, #12]
 8006bd2:	e7da      	b.n	8006b8a <_fflush_r+0x22>
 8006bd4:	08007ac4 	.word	0x08007ac4
 8006bd8:	08007ae4 	.word	0x08007ae4
 8006bdc:	08007aa4 	.word	0x08007aa4

08006be0 <std>:
 8006be0:	2300      	movs	r3, #0
 8006be2:	b510      	push	{r4, lr}
 8006be4:	4604      	mov	r4, r0
 8006be6:	e9c0 3300 	strd	r3, r3, [r0]
 8006bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bee:	6083      	str	r3, [r0, #8]
 8006bf0:	8181      	strh	r1, [r0, #12]
 8006bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8006bf4:	81c2      	strh	r2, [r0, #14]
 8006bf6:	6183      	str	r3, [r0, #24]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	2208      	movs	r2, #8
 8006bfc:	305c      	adds	r0, #92	; 0x5c
 8006bfe:	f7fd fa2b 	bl	8004058 <memset>
 8006c02:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <std+0x38>)
 8006c04:	6263      	str	r3, [r4, #36]	; 0x24
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <std+0x3c>)
 8006c08:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c0a:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <std+0x40>)
 8006c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c0e:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <std+0x44>)
 8006c10:	6224      	str	r4, [r4, #32]
 8006c12:	6323      	str	r3, [r4, #48]	; 0x30
 8006c14:	bd10      	pop	{r4, pc}
 8006c16:	bf00      	nop
 8006c18:	08006f31 	.word	0x08006f31
 8006c1c:	08006f53 	.word	0x08006f53
 8006c20:	08006f8b 	.word	0x08006f8b
 8006c24:	08006faf 	.word	0x08006faf

08006c28 <_cleanup_r>:
 8006c28:	4901      	ldr	r1, [pc, #4]	; (8006c30 <_cleanup_r+0x8>)
 8006c2a:	f000 b8af 	b.w	8006d8c <_fwalk_reent>
 8006c2e:	bf00      	nop
 8006c30:	08006b69 	.word	0x08006b69

08006c34 <__sfmoreglue>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	1e4a      	subs	r2, r1, #1
 8006c38:	2568      	movs	r5, #104	; 0x68
 8006c3a:	4355      	muls	r5, r2
 8006c3c:	460e      	mov	r6, r1
 8006c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c42:	f7ff fa87 	bl	8006154 <_malloc_r>
 8006c46:	4604      	mov	r4, r0
 8006c48:	b140      	cbz	r0, 8006c5c <__sfmoreglue+0x28>
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	e9c0 1600 	strd	r1, r6, [r0]
 8006c50:	300c      	adds	r0, #12
 8006c52:	60a0      	str	r0, [r4, #8]
 8006c54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c58:	f7fd f9fe 	bl	8004058 <memset>
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}

08006c60 <__sfp_lock_acquire>:
 8006c60:	4801      	ldr	r0, [pc, #4]	; (8006c68 <__sfp_lock_acquire+0x8>)
 8006c62:	f000 b8b3 	b.w	8006dcc <__retarget_lock_acquire_recursive>
 8006c66:	bf00      	nop
 8006c68:	2000026c 	.word	0x2000026c

08006c6c <__sfp_lock_release>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	; (8006c74 <__sfp_lock_release+0x8>)
 8006c6e:	f000 b8ae 	b.w	8006dce <__retarget_lock_release_recursive>
 8006c72:	bf00      	nop
 8006c74:	2000026c 	.word	0x2000026c

08006c78 <__sinit_lock_acquire>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__sinit_lock_acquire+0x8>)
 8006c7a:	f000 b8a7 	b.w	8006dcc <__retarget_lock_acquire_recursive>
 8006c7e:	bf00      	nop
 8006c80:	20000267 	.word	0x20000267

08006c84 <__sinit_lock_release>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__sinit_lock_release+0x8>)
 8006c86:	f000 b8a2 	b.w	8006dce <__retarget_lock_release_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	20000267 	.word	0x20000267

08006c90 <__sinit>:
 8006c90:	b510      	push	{r4, lr}
 8006c92:	4604      	mov	r4, r0
 8006c94:	f7ff fff0 	bl	8006c78 <__sinit_lock_acquire>
 8006c98:	69a3      	ldr	r3, [r4, #24]
 8006c9a:	b11b      	cbz	r3, 8006ca4 <__sinit+0x14>
 8006c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca0:	f7ff bff0 	b.w	8006c84 <__sinit_lock_release>
 8006ca4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ca8:	6523      	str	r3, [r4, #80]	; 0x50
 8006caa:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <__sinit+0x68>)
 8006cac:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <__sinit+0x6c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	bf04      	itt	eq
 8006cb6:	2301      	moveq	r3, #1
 8006cb8:	61a3      	streq	r3, [r4, #24]
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 f820 	bl	8006d00 <__sfp>
 8006cc0:	6060      	str	r0, [r4, #4]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 f81c 	bl	8006d00 <__sfp>
 8006cc8:	60a0      	str	r0, [r4, #8]
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 f818 	bl	8006d00 <__sfp>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	60e0      	str	r0, [r4, #12]
 8006cd4:	2104      	movs	r1, #4
 8006cd6:	6860      	ldr	r0, [r4, #4]
 8006cd8:	f7ff ff82 	bl	8006be0 <std>
 8006cdc:	68a0      	ldr	r0, [r4, #8]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	2109      	movs	r1, #9
 8006ce2:	f7ff ff7d 	bl	8006be0 <std>
 8006ce6:	68e0      	ldr	r0, [r4, #12]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	2112      	movs	r1, #18
 8006cec:	f7ff ff78 	bl	8006be0 <std>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	61a3      	str	r3, [r4, #24]
 8006cf4:	e7d2      	b.n	8006c9c <__sinit+0xc>
 8006cf6:	bf00      	nop
 8006cf8:	08007720 	.word	0x08007720
 8006cfc:	08006c29 	.word	0x08006c29

08006d00 <__sfp>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	4607      	mov	r7, r0
 8006d04:	f7ff ffac 	bl	8006c60 <__sfp_lock_acquire>
 8006d08:	4b1e      	ldr	r3, [pc, #120]	; (8006d84 <__sfp+0x84>)
 8006d0a:	681e      	ldr	r6, [r3, #0]
 8006d0c:	69b3      	ldr	r3, [r6, #24]
 8006d0e:	b913      	cbnz	r3, 8006d16 <__sfp+0x16>
 8006d10:	4630      	mov	r0, r6
 8006d12:	f7ff ffbd 	bl	8006c90 <__sinit>
 8006d16:	3648      	adds	r6, #72	; 0x48
 8006d18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	d503      	bpl.n	8006d28 <__sfp+0x28>
 8006d20:	6833      	ldr	r3, [r6, #0]
 8006d22:	b30b      	cbz	r3, 8006d68 <__sfp+0x68>
 8006d24:	6836      	ldr	r6, [r6, #0]
 8006d26:	e7f7      	b.n	8006d18 <__sfp+0x18>
 8006d28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d2c:	b9d5      	cbnz	r5, 8006d64 <__sfp+0x64>
 8006d2e:	4b16      	ldr	r3, [pc, #88]	; (8006d88 <__sfp+0x88>)
 8006d30:	60e3      	str	r3, [r4, #12]
 8006d32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d36:	6665      	str	r5, [r4, #100]	; 0x64
 8006d38:	f000 f847 	bl	8006dca <__retarget_lock_init_recursive>
 8006d3c:	f7ff ff96 	bl	8006c6c <__sfp_lock_release>
 8006d40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d48:	6025      	str	r5, [r4, #0]
 8006d4a:	61a5      	str	r5, [r4, #24]
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	4629      	mov	r1, r5
 8006d50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d54:	f7fd f980 	bl	8004058 <memset>
 8006d58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d60:	4620      	mov	r0, r4
 8006d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d64:	3468      	adds	r4, #104	; 0x68
 8006d66:	e7d9      	b.n	8006d1c <__sfp+0x1c>
 8006d68:	2104      	movs	r1, #4
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	f7ff ff62 	bl	8006c34 <__sfmoreglue>
 8006d70:	4604      	mov	r4, r0
 8006d72:	6030      	str	r0, [r6, #0]
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d1d5      	bne.n	8006d24 <__sfp+0x24>
 8006d78:	f7ff ff78 	bl	8006c6c <__sfp_lock_release>
 8006d7c:	230c      	movs	r3, #12
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	e7ee      	b.n	8006d60 <__sfp+0x60>
 8006d82:	bf00      	nop
 8006d84:	08007720 	.word	0x08007720
 8006d88:	ffff0001 	.word	0xffff0001

08006d8c <_fwalk_reent>:
 8006d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d90:	4606      	mov	r6, r0
 8006d92:	4688      	mov	r8, r1
 8006d94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d98:	2700      	movs	r7, #0
 8006d9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d9e:	f1b9 0901 	subs.w	r9, r9, #1
 8006da2:	d505      	bpl.n	8006db0 <_fwalk_reent+0x24>
 8006da4:	6824      	ldr	r4, [r4, #0]
 8006da6:	2c00      	cmp	r4, #0
 8006da8:	d1f7      	bne.n	8006d9a <_fwalk_reent+0xe>
 8006daa:	4638      	mov	r0, r7
 8006dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db0:	89ab      	ldrh	r3, [r5, #12]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d907      	bls.n	8006dc6 <_fwalk_reent+0x3a>
 8006db6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	d003      	beq.n	8006dc6 <_fwalk_reent+0x3a>
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	47c0      	blx	r8
 8006dc4:	4307      	orrs	r7, r0
 8006dc6:	3568      	adds	r5, #104	; 0x68
 8006dc8:	e7e9      	b.n	8006d9e <_fwalk_reent+0x12>

08006dca <__retarget_lock_init_recursive>:
 8006dca:	4770      	bx	lr

08006dcc <__retarget_lock_acquire_recursive>:
 8006dcc:	4770      	bx	lr

08006dce <__retarget_lock_release_recursive>:
 8006dce:	4770      	bx	lr

08006dd0 <__swhatbuf_r>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	460e      	mov	r6, r1
 8006dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	b096      	sub	sp, #88	; 0x58
 8006ddc:	4614      	mov	r4, r2
 8006dde:	461d      	mov	r5, r3
 8006de0:	da07      	bge.n	8006df2 <__swhatbuf_r+0x22>
 8006de2:	2300      	movs	r3, #0
 8006de4:	602b      	str	r3, [r5, #0]
 8006de6:	89b3      	ldrh	r3, [r6, #12]
 8006de8:	061a      	lsls	r2, r3, #24
 8006dea:	d410      	bmi.n	8006e0e <__swhatbuf_r+0x3e>
 8006dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df0:	e00e      	b.n	8006e10 <__swhatbuf_r+0x40>
 8006df2:	466a      	mov	r2, sp
 8006df4:	f000 f902 	bl	8006ffc <_fstat_r>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	dbf2      	blt.n	8006de2 <__swhatbuf_r+0x12>
 8006dfc:	9a01      	ldr	r2, [sp, #4]
 8006dfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e06:	425a      	negs	r2, r3
 8006e08:	415a      	adcs	r2, r3
 8006e0a:	602a      	str	r2, [r5, #0]
 8006e0c:	e7ee      	b.n	8006dec <__swhatbuf_r+0x1c>
 8006e0e:	2340      	movs	r3, #64	; 0x40
 8006e10:	2000      	movs	r0, #0
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	b016      	add	sp, #88	; 0x58
 8006e16:	bd70      	pop	{r4, r5, r6, pc}

08006e18 <__smakebuf_r>:
 8006e18:	898b      	ldrh	r3, [r1, #12]
 8006e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e1c:	079d      	lsls	r5, r3, #30
 8006e1e:	4606      	mov	r6, r0
 8006e20:	460c      	mov	r4, r1
 8006e22:	d507      	bpl.n	8006e34 <__smakebuf_r+0x1c>
 8006e24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	6163      	str	r3, [r4, #20]
 8006e30:	b002      	add	sp, #8
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	ab01      	add	r3, sp, #4
 8006e36:	466a      	mov	r2, sp
 8006e38:	f7ff ffca 	bl	8006dd0 <__swhatbuf_r>
 8006e3c:	9900      	ldr	r1, [sp, #0]
 8006e3e:	4605      	mov	r5, r0
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7ff f987 	bl	8006154 <_malloc_r>
 8006e46:	b948      	cbnz	r0, 8006e5c <__smakebuf_r+0x44>
 8006e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4c:	059a      	lsls	r2, r3, #22
 8006e4e:	d4ef      	bmi.n	8006e30 <__smakebuf_r+0x18>
 8006e50:	f023 0303 	bic.w	r3, r3, #3
 8006e54:	f043 0302 	orr.w	r3, r3, #2
 8006e58:	81a3      	strh	r3, [r4, #12]
 8006e5a:	e7e3      	b.n	8006e24 <__smakebuf_r+0xc>
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <__smakebuf_r+0x7c>)
 8006e5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	6020      	str	r0, [r4, #0]
 8006e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e68:	81a3      	strh	r3, [r4, #12]
 8006e6a:	9b00      	ldr	r3, [sp, #0]
 8006e6c:	6163      	str	r3, [r4, #20]
 8006e6e:	9b01      	ldr	r3, [sp, #4]
 8006e70:	6120      	str	r0, [r4, #16]
 8006e72:	b15b      	cbz	r3, 8006e8c <__smakebuf_r+0x74>
 8006e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f000 f8d1 	bl	8007020 <_isatty_r>
 8006e7e:	b128      	cbz	r0, 8006e8c <__smakebuf_r+0x74>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	89a0      	ldrh	r0, [r4, #12]
 8006e8e:	4305      	orrs	r5, r0
 8006e90:	81a5      	strh	r5, [r4, #12]
 8006e92:	e7cd      	b.n	8006e30 <__smakebuf_r+0x18>
 8006e94:	08006c29 	.word	0x08006c29

08006e98 <_malloc_usable_size_r>:
 8006e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e9c:	1f18      	subs	r0, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bfbc      	itt	lt
 8006ea2:	580b      	ldrlt	r3, [r1, r0]
 8006ea4:	18c0      	addlt	r0, r0, r3
 8006ea6:	4770      	bx	lr

08006ea8 <_raise_r>:
 8006ea8:	291f      	cmp	r1, #31
 8006eaa:	b538      	push	{r3, r4, r5, lr}
 8006eac:	4604      	mov	r4, r0
 8006eae:	460d      	mov	r5, r1
 8006eb0:	d904      	bls.n	8006ebc <_raise_r+0x14>
 8006eb2:	2316      	movs	r3, #22
 8006eb4:	6003      	str	r3, [r0, #0]
 8006eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ebe:	b112      	cbz	r2, 8006ec6 <_raise_r+0x1e>
 8006ec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ec4:	b94b      	cbnz	r3, 8006eda <_raise_r+0x32>
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 f830 	bl	8006f2c <_getpid_r>
 8006ecc:	462a      	mov	r2, r5
 8006ece:	4601      	mov	r1, r0
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ed6:	f000 b817 	b.w	8006f08 <_kill_r>
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d00a      	beq.n	8006ef4 <_raise_r+0x4c>
 8006ede:	1c59      	adds	r1, r3, #1
 8006ee0:	d103      	bne.n	8006eea <_raise_r+0x42>
 8006ee2:	2316      	movs	r3, #22
 8006ee4:	6003      	str	r3, [r0, #0]
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	e7e7      	b.n	8006eba <_raise_r+0x12>
 8006eea:	2400      	movs	r4, #0
 8006eec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	4798      	blx	r3
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	e7e0      	b.n	8006eba <_raise_r+0x12>

08006ef8 <raise>:
 8006ef8:	4b02      	ldr	r3, [pc, #8]	; (8006f04 <raise+0xc>)
 8006efa:	4601      	mov	r1, r0
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	f7ff bfd3 	b.w	8006ea8 <_raise_r>
 8006f02:	bf00      	nop
 8006f04:	2000000c 	.word	0x2000000c

08006f08 <_kill_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d07      	ldr	r5, [pc, #28]	; (8006f28 <_kill_r+0x20>)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4608      	mov	r0, r1
 8006f12:	4611      	mov	r1, r2
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	f7fb fd95 	bl	8002a44 <_kill>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	d102      	bne.n	8006f24 <_kill_r+0x1c>
 8006f1e:	682b      	ldr	r3, [r5, #0]
 8006f20:	b103      	cbz	r3, 8006f24 <_kill_r+0x1c>
 8006f22:	6023      	str	r3, [r4, #0]
 8006f24:	bd38      	pop	{r3, r4, r5, pc}
 8006f26:	bf00      	nop
 8006f28:	20000260 	.word	0x20000260

08006f2c <_getpid_r>:
 8006f2c:	f7fb bd82 	b.w	8002a34 <_getpid>

08006f30 <__sread>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	460c      	mov	r4, r1
 8006f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f38:	f000 f894 	bl	8007064 <_read_r>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	bfab      	itete	ge
 8006f40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f42:	89a3      	ldrhlt	r3, [r4, #12]
 8006f44:	181b      	addge	r3, r3, r0
 8006f46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f4a:	bfac      	ite	ge
 8006f4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f4e:	81a3      	strhlt	r3, [r4, #12]
 8006f50:	bd10      	pop	{r4, pc}

08006f52 <__swrite>:
 8006f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f56:	461f      	mov	r7, r3
 8006f58:	898b      	ldrh	r3, [r1, #12]
 8006f5a:	05db      	lsls	r3, r3, #23
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	4616      	mov	r6, r2
 8006f62:	d505      	bpl.n	8006f70 <__swrite+0x1e>
 8006f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f68:	2302      	movs	r3, #2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f000 f868 	bl	8007040 <_lseek_r>
 8006f70:	89a3      	ldrh	r3, [r4, #12]
 8006f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f7a:	81a3      	strh	r3, [r4, #12]
 8006f7c:	4632      	mov	r2, r6
 8006f7e:	463b      	mov	r3, r7
 8006f80:	4628      	mov	r0, r5
 8006f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f86:	f000 b817 	b.w	8006fb8 <_write_r>

08006f8a <__sseek>:
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f92:	f000 f855 	bl	8007040 <_lseek_r>
 8006f96:	1c43      	adds	r3, r0, #1
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	bf15      	itete	ne
 8006f9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fa6:	81a3      	strheq	r3, [r4, #12]
 8006fa8:	bf18      	it	ne
 8006faa:	81a3      	strhne	r3, [r4, #12]
 8006fac:	bd10      	pop	{r4, pc}

08006fae <__sclose>:
 8006fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb2:	f000 b813 	b.w	8006fdc <_close_r>
	...

08006fb8 <_write_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4d07      	ldr	r5, [pc, #28]	; (8006fd8 <_write_r+0x20>)
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	4608      	mov	r0, r1
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	602a      	str	r2, [r5, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f7fb fd73 	bl	8002ab2 <_write>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_write_r+0x1e>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_write_r+0x1e>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	20000260 	.word	0x20000260

08006fdc <_close_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d06      	ldr	r5, [pc, #24]	; (8006ff8 <_close_r+0x1c>)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	f7fb fd7f 	bl	8002aea <_close>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_close_r+0x1a>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_close_r+0x1a>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	20000260 	.word	0x20000260

08006ffc <_fstat_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d07      	ldr	r5, [pc, #28]	; (800701c <_fstat_r+0x20>)
 8007000:	2300      	movs	r3, #0
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	4611      	mov	r1, r2
 8007008:	602b      	str	r3, [r5, #0]
 800700a:	f7fb fd7a 	bl	8002b02 <_fstat>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d102      	bne.n	8007018 <_fstat_r+0x1c>
 8007012:	682b      	ldr	r3, [r5, #0]
 8007014:	b103      	cbz	r3, 8007018 <_fstat_r+0x1c>
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	bd38      	pop	{r3, r4, r5, pc}
 800701a:	bf00      	nop
 800701c:	20000260 	.word	0x20000260

08007020 <_isatty_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	; (800703c <_isatty_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7fb fd79 	bl	8002b22 <_isatty>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_isatty_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_isatty_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20000260 	.word	0x20000260

08007040 <_lseek_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	; (8007060 <_lseek_r+0x20>)
 8007044:	4604      	mov	r4, r0
 8007046:	4608      	mov	r0, r1
 8007048:	4611      	mov	r1, r2
 800704a:	2200      	movs	r2, #0
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fb fd72 	bl	8002b38 <_lseek>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_lseek_r+0x1e>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_lseek_r+0x1e>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20000260 	.word	0x20000260

08007064 <_read_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d07      	ldr	r5, [pc, #28]	; (8007084 <_read_r+0x20>)
 8007068:	4604      	mov	r4, r0
 800706a:	4608      	mov	r0, r1
 800706c:	4611      	mov	r1, r2
 800706e:	2200      	movs	r2, #0
 8007070:	602a      	str	r2, [r5, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	f7fb fd00 	bl	8002a78 <_read>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_read_r+0x1e>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_read_r+0x1e>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20000260 	.word	0x20000260

08007088 <atan2f>:
 8007088:	f000 b800 	b.w	800708c <__ieee754_atan2f>

0800708c <__ieee754_atan2f>:
 800708c:	ee10 2a90 	vmov	r2, s1
 8007090:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007094:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007098:	b510      	push	{r4, lr}
 800709a:	eef0 7a40 	vmov.f32	s15, s0
 800709e:	dc06      	bgt.n	80070ae <__ieee754_atan2f+0x22>
 80070a0:	ee10 0a10 	vmov	r0, s0
 80070a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80070a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80070ac:	dd04      	ble.n	80070b8 <__ieee754_atan2f+0x2c>
 80070ae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80070b2:	eeb0 0a67 	vmov.f32	s0, s15
 80070b6:	bd10      	pop	{r4, pc}
 80070b8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80070bc:	d103      	bne.n	80070c6 <__ieee754_atan2f+0x3a>
 80070be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c2:	f000 b883 	b.w	80071cc <atanf>
 80070c6:	1794      	asrs	r4, r2, #30
 80070c8:	f004 0402 	and.w	r4, r4, #2
 80070cc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80070d0:	b943      	cbnz	r3, 80070e4 <__ieee754_atan2f+0x58>
 80070d2:	2c02      	cmp	r4, #2
 80070d4:	d05e      	beq.n	8007194 <__ieee754_atan2f+0x108>
 80070d6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80071a8 <__ieee754_atan2f+0x11c>
 80070da:	2c03      	cmp	r4, #3
 80070dc:	bf08      	it	eq
 80070de:	eef0 7a47 	vmoveq.f32	s15, s14
 80070e2:	e7e6      	b.n	80070b2 <__ieee754_atan2f+0x26>
 80070e4:	b941      	cbnz	r1, 80070f8 <__ieee754_atan2f+0x6c>
 80070e6:	eddf 7a31 	vldr	s15, [pc, #196]	; 80071ac <__ieee754_atan2f+0x120>
 80070ea:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80071b0 <__ieee754_atan2f+0x124>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	bfb8      	it	lt
 80070f2:	eef0 7a40 	vmovlt.f32	s15, s0
 80070f6:	e7dc      	b.n	80070b2 <__ieee754_atan2f+0x26>
 80070f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80070fc:	d110      	bne.n	8007120 <__ieee754_atan2f+0x94>
 80070fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007102:	f104 34ff 	add.w	r4, r4, #4294967295
 8007106:	d107      	bne.n	8007118 <__ieee754_atan2f+0x8c>
 8007108:	2c02      	cmp	r4, #2
 800710a:	d846      	bhi.n	800719a <__ieee754_atan2f+0x10e>
 800710c:	4b29      	ldr	r3, [pc, #164]	; (80071b4 <__ieee754_atan2f+0x128>)
 800710e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007112:	edd4 7a00 	vldr	s15, [r4]
 8007116:	e7cc      	b.n	80070b2 <__ieee754_atan2f+0x26>
 8007118:	2c02      	cmp	r4, #2
 800711a:	d841      	bhi.n	80071a0 <__ieee754_atan2f+0x114>
 800711c:	4b26      	ldr	r3, [pc, #152]	; (80071b8 <__ieee754_atan2f+0x12c>)
 800711e:	e7f6      	b.n	800710e <__ieee754_atan2f+0x82>
 8007120:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007124:	d0df      	beq.n	80070e6 <__ieee754_atan2f+0x5a>
 8007126:	1a5b      	subs	r3, r3, r1
 8007128:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800712c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007130:	da1a      	bge.n	8007168 <__ieee754_atan2f+0xdc>
 8007132:	2a00      	cmp	r2, #0
 8007134:	da01      	bge.n	800713a <__ieee754_atan2f+0xae>
 8007136:	313c      	adds	r1, #60	; 0x3c
 8007138:	db19      	blt.n	800716e <__ieee754_atan2f+0xe2>
 800713a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800713e:	f000 f919 	bl	8007374 <fabsf>
 8007142:	f000 f843 	bl	80071cc <atanf>
 8007146:	eef0 7a40 	vmov.f32	s15, s0
 800714a:	2c01      	cmp	r4, #1
 800714c:	d012      	beq.n	8007174 <__ieee754_atan2f+0xe8>
 800714e:	2c02      	cmp	r4, #2
 8007150:	d017      	beq.n	8007182 <__ieee754_atan2f+0xf6>
 8007152:	2c00      	cmp	r4, #0
 8007154:	d0ad      	beq.n	80070b2 <__ieee754_atan2f+0x26>
 8007156:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80071bc <__ieee754_atan2f+0x130>
 800715a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800715e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80071c0 <__ieee754_atan2f+0x134>
 8007162:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007166:	e7a4      	b.n	80070b2 <__ieee754_atan2f+0x26>
 8007168:	eddf 7a10 	vldr	s15, [pc, #64]	; 80071ac <__ieee754_atan2f+0x120>
 800716c:	e7ed      	b.n	800714a <__ieee754_atan2f+0xbe>
 800716e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80071c4 <__ieee754_atan2f+0x138>
 8007172:	e7ea      	b.n	800714a <__ieee754_atan2f+0xbe>
 8007174:	ee17 3a90 	vmov	r3, s15
 8007178:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	e797      	b.n	80070b2 <__ieee754_atan2f+0x26>
 8007182:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80071bc <__ieee754_atan2f+0x130>
 8007186:	ee77 7a80 	vadd.f32	s15, s15, s0
 800718a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80071c0 <__ieee754_atan2f+0x134>
 800718e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007192:	e78e      	b.n	80070b2 <__ieee754_atan2f+0x26>
 8007194:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80071c0 <__ieee754_atan2f+0x134>
 8007198:	e78b      	b.n	80070b2 <__ieee754_atan2f+0x26>
 800719a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80071c8 <__ieee754_atan2f+0x13c>
 800719e:	e788      	b.n	80070b2 <__ieee754_atan2f+0x26>
 80071a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80071c4 <__ieee754_atan2f+0x138>
 80071a4:	e785      	b.n	80070b2 <__ieee754_atan2f+0x26>
 80071a6:	bf00      	nop
 80071a8:	c0490fdb 	.word	0xc0490fdb
 80071ac:	3fc90fdb 	.word	0x3fc90fdb
 80071b0:	bfc90fdb 	.word	0xbfc90fdb
 80071b4:	08007b04 	.word	0x08007b04
 80071b8:	08007b10 	.word	0x08007b10
 80071bc:	33bbbd2e 	.word	0x33bbbd2e
 80071c0:	40490fdb 	.word	0x40490fdb
 80071c4:	00000000 	.word	0x00000000
 80071c8:	3f490fdb 	.word	0x3f490fdb

080071cc <atanf>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	ee10 5a10 	vmov	r5, s0
 80071d2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80071d6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80071da:	eef0 7a40 	vmov.f32	s15, s0
 80071de:	db10      	blt.n	8007202 <atanf+0x36>
 80071e0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80071e4:	dd04      	ble.n	80071f0 <atanf+0x24>
 80071e6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80071ea:	eeb0 0a67 	vmov.f32	s0, s15
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007328 <atanf+0x15c>
 80071f4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800732c <atanf+0x160>
 80071f8:	2d00      	cmp	r5, #0
 80071fa:	bfd8      	it	le
 80071fc:	eef0 7a40 	vmovle.f32	s15, s0
 8007200:	e7f3      	b.n	80071ea <atanf+0x1e>
 8007202:	4b4b      	ldr	r3, [pc, #300]	; (8007330 <atanf+0x164>)
 8007204:	429c      	cmp	r4, r3
 8007206:	dc10      	bgt.n	800722a <atanf+0x5e>
 8007208:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800720c:	da0a      	bge.n	8007224 <atanf+0x58>
 800720e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007334 <atanf+0x168>
 8007212:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800721a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800721e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007222:	dce2      	bgt.n	80071ea <atanf+0x1e>
 8007224:	f04f 33ff 	mov.w	r3, #4294967295
 8007228:	e013      	b.n	8007252 <atanf+0x86>
 800722a:	f000 f8a3 	bl	8007374 <fabsf>
 800722e:	4b42      	ldr	r3, [pc, #264]	; (8007338 <atanf+0x16c>)
 8007230:	429c      	cmp	r4, r3
 8007232:	dc4f      	bgt.n	80072d4 <atanf+0x108>
 8007234:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007238:	429c      	cmp	r4, r3
 800723a:	dc41      	bgt.n	80072c0 <atanf+0xf4>
 800723c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007240:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007244:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007248:	2300      	movs	r3, #0
 800724a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800724e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007258:	eddf 5a38 	vldr	s11, [pc, #224]	; 800733c <atanf+0x170>
 800725c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8007340 <atanf+0x174>
 8007260:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007344 <atanf+0x178>
 8007264:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8007348 <atanf+0x17c>
 8007268:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800726c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007270:	eddf 5a36 	vldr	s11, [pc, #216]	; 800734c <atanf+0x180>
 8007274:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007278:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8007350 <atanf+0x184>
 800727c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007280:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007354 <atanf+0x188>
 8007284:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007288:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8007358 <atanf+0x18c>
 800728c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007290:	eddf 5a32 	vldr	s11, [pc, #200]	; 800735c <atanf+0x190>
 8007294:	eee7 5a05 	vfma.f32	s11, s14, s10
 8007298:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8007360 <atanf+0x194>
 800729c:	eea5 5a87 	vfma.f32	s10, s11, s14
 80072a0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8007364 <atanf+0x198>
 80072a4:	eee5 5a07 	vfma.f32	s11, s10, s14
 80072a8:	eea5 0a87 	vfma.f32	s0, s11, s14
 80072ac:	ee20 0a07 	vmul.f32	s0, s0, s14
 80072b0:	eea6 0a26 	vfma.f32	s0, s12, s13
 80072b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80072b8:	d121      	bne.n	80072fe <atanf+0x132>
 80072ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80072be:	e794      	b.n	80071ea <atanf+0x1e>
 80072c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80072c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80072c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80072cc:	2301      	movs	r3, #1
 80072ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80072d2:	e7be      	b.n	8007252 <atanf+0x86>
 80072d4:	4b24      	ldr	r3, [pc, #144]	; (8007368 <atanf+0x19c>)
 80072d6:	429c      	cmp	r4, r3
 80072d8:	dc0b      	bgt.n	80072f2 <atanf+0x126>
 80072da:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80072de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80072e6:	2302      	movs	r3, #2
 80072e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80072ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f0:	e7af      	b.n	8007252 <atanf+0x86>
 80072f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80072f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80072fa:	2303      	movs	r3, #3
 80072fc:	e7a9      	b.n	8007252 <atanf+0x86>
 80072fe:	4a1b      	ldr	r2, [pc, #108]	; (800736c <atanf+0x1a0>)
 8007300:	491b      	ldr	r1, [pc, #108]	; (8007370 <atanf+0x1a4>)
 8007302:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007306:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800730a:	ed93 7a00 	vldr	s14, [r3]
 800730e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007312:	2d00      	cmp	r5, #0
 8007314:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007318:	ed92 0a00 	vldr	s0, [r2]
 800731c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007320:	bfb8      	it	lt
 8007322:	eef1 7a67 	vneglt.f32	s15, s15
 8007326:	e760      	b.n	80071ea <atanf+0x1e>
 8007328:	3fc90fdb 	.word	0x3fc90fdb
 800732c:	bfc90fdb 	.word	0xbfc90fdb
 8007330:	3edfffff 	.word	0x3edfffff
 8007334:	7149f2ca 	.word	0x7149f2ca
 8007338:	3f97ffff 	.word	0x3f97ffff
 800733c:	3c8569d7 	.word	0x3c8569d7
 8007340:	3d4bda59 	.word	0x3d4bda59
 8007344:	bd15a221 	.word	0xbd15a221
 8007348:	be4ccccd 	.word	0xbe4ccccd
 800734c:	3d886b35 	.word	0x3d886b35
 8007350:	3dba2e6e 	.word	0x3dba2e6e
 8007354:	3e124925 	.word	0x3e124925
 8007358:	3eaaaaab 	.word	0x3eaaaaab
 800735c:	bd6ef16b 	.word	0xbd6ef16b
 8007360:	bd9d8795 	.word	0xbd9d8795
 8007364:	bde38e38 	.word	0xbde38e38
 8007368:	401bffff 	.word	0x401bffff
 800736c:	08007b1c 	.word	0x08007b1c
 8007370:	08007b2c 	.word	0x08007b2c

08007374 <fabsf>:
 8007374:	ee10 3a10 	vmov	r3, s0
 8007378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800737c:	ee00 3a10 	vmov	s0, r3
 8007380:	4770      	bx	lr
	...

08007384 <_init>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	bf00      	nop
 8007388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738a:	bc08      	pop	{r3}
 800738c:	469e      	mov	lr, r3
 800738e:	4770      	bx	lr

08007390 <_fini>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	bf00      	nop
 8007394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007396:	bc08      	pop	{r3}
 8007398:	469e      	mov	lr, r3
 800739a:	4770      	bx	lr
