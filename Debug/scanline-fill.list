
scanline-fill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  080097a0  080097a0  000197a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b48  08009b48  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009b48  08009b48  00019b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b50  08009b50  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b54  08009b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b90  200001e4  08009d3c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d74  08009d3c  00021d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018757  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd1  00000000  00000000  0003896b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  0003c740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  0003d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c93  00000000  00000000  0003e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014106  00000000  00000000  00057f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a471  00000000  00000000  0006c099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f650a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004050  00000000  00000000  000f6560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009784 	.word	0x08009784

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08009784 	.word	0x08009784

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b96e 	b.w	8000ec0 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	468c      	mov	ip, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8083 	bne.w	8000d12 <__udivmoddi4+0x116>
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	4617      	mov	r7, r2
 8000c10:	d947      	bls.n	8000ca2 <__udivmoddi4+0xa6>
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	b142      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c18:	f1c2 0020 	rsb	r0, r2, #32
 8000c1c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c20:	4091      	lsls	r1, r2
 8000c22:	4097      	lsls	r7, r2
 8000c24:	ea40 0c01 	orr.w	ip, r0, r1
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fbbc f6f8 	udiv	r6, ip, r8
 8000c34:	fa1f fe87 	uxth.w	lr, r7
 8000c38:	fb08 c116 	mls	r1, r8, r6, ip
 8000c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c40:	fb06 f10e 	mul.w	r1, r6, lr
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x60>
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 8119 	bcs.w	8000e84 <__udivmoddi4+0x288>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 8116 	bls.w	8000e84 <__udivmoddi4+0x288>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	443b      	add	r3, r7
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x8c>
 8000c74:	193c      	adds	r4, r7, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	f080 8105 	bcs.w	8000e88 <__udivmoddi4+0x28c>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	f240 8102 	bls.w	8000e88 <__udivmoddi4+0x28c>
 8000c84:	3802      	subs	r0, #2
 8000c86:	443c      	add	r4, r7
 8000c88:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8c:	eba4 040e 	sub.w	r4, r4, lr
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa0>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	b902      	cbnz	r2, 8000ca6 <__udivmoddi4+0xaa>
 8000ca4:	deff      	udf	#255	; 0xff
 8000ca6:	fab2 f282 	clz	r2, r2
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d150      	bne.n	8000d50 <__udivmoddi4+0x154>
 8000cae:	1bcb      	subs	r3, r1, r7
 8000cb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb4:	fa1f f887 	uxth.w	r8, r7
 8000cb8:	2601      	movs	r6, #1
 8000cba:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cbe:	0c21      	lsrs	r1, r4, #16
 8000cc0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb08 f30c 	mul.w	r3, r8, ip
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0xe4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0xe2>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	f200 80e9 	bhi.w	8000eb0 <__udivmoddi4+0x2b4>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1ac9      	subs	r1, r1, r3
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x10c>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x10a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80d9 	bhi.w	8000eb8 <__udivmoddi4+0x2bc>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e7bf      	b.n	8000c92 <__udivmoddi4+0x96>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x12e>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80b1 	beq.w	8000e7e <__udivmoddi4+0x282>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x1cc>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0x140>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80b8 	bhi.w	8000eac <__udivmoddi4+0x2b0>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	468c      	mov	ip, r1
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0a8      	beq.n	8000c9c <__udivmoddi4+0xa0>
 8000d4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f603 	lsr.w	r6, r0, r3
 8000d58:	4097      	lsls	r7, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d62:	40d9      	lsrs	r1, r3
 8000d64:	4330      	orrs	r0, r6
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d6c:	fa1f f887 	uxth.w	r8, r7
 8000d70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f108 	mul.w	r1, r6, r8
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x19c>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d8a:	f080 808d 	bcs.w	8000ea8 <__udivmoddi4+0x2ac>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 808a 	bls.w	8000ea8 <__udivmoddi4+0x2ac>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b281      	uxth	r1, r0
 8000d9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da8:	fb00 f308 	mul.w	r3, r0, r8
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x1c4>
 8000db0:	1879      	adds	r1, r7, r1
 8000db2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db6:	d273      	bcs.n	8000ea0 <__udivmoddi4+0x2a4>
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d971      	bls.n	8000ea0 <__udivmoddi4+0x2a4>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4439      	add	r1, r7
 8000dc0:	1acb      	subs	r3, r1, r3
 8000dc2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc6:	e778      	b.n	8000cba <__udivmoddi4+0xbe>
 8000dc8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dcc:	fa03 f406 	lsl.w	r4, r3, r6
 8000dd0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd4:	431c      	orrs	r4, r3
 8000dd6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000de2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de6:	431f      	orrs	r7, r3
 8000de8:	0c3b      	lsrs	r3, r7, #16
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fa1f f884 	uxth.w	r8, r4
 8000df2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dfa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	fa02 f206 	lsl.w	r2, r2, r6
 8000e04:	fa00 f306 	lsl.w	r3, r0, r6
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x220>
 8000e0a:	1861      	adds	r1, r4, r1
 8000e0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e10:	d248      	bcs.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e12:	458a      	cmp	sl, r1
 8000e14:	d946      	bls.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e16:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1a:	4421      	add	r1, r4
 8000e1c:	eba1 010a 	sub.w	r1, r1, sl
 8000e20:	b2bf      	uxth	r7, r7
 8000e22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2e:	fb00 f808 	mul.w	r8, r0, r8
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x24a>
 8000e36:	19e7      	adds	r7, r4, r7
 8000e38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e3c:	d22e      	bcs.n	8000e9c <__udivmoddi4+0x2a0>
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d92c      	bls.n	8000e9c <__udivmoddi4+0x2a0>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4427      	add	r7, r4
 8000e46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e4a:	eba7 0708 	sub.w	r7, r7, r8
 8000e4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e52:	454f      	cmp	r7, r9
 8000e54:	46c6      	mov	lr, r8
 8000e56:	4649      	mov	r1, r9
 8000e58:	d31a      	bcc.n	8000e90 <__udivmoddi4+0x294>
 8000e5a:	d017      	beq.n	8000e8c <__udivmoddi4+0x290>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x27a>
 8000e5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e62:	eb67 0701 	sbc.w	r7, r7, r1
 8000e66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e6a:	40f2      	lsrs	r2, r6
 8000e6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e70:	40f7      	lsrs	r7, r6
 8000e72:	e9c5 2700 	strd	r2, r7, [r5]
 8000e76:	2600      	movs	r6, #0
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e70b      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fd      	b.n	8000c88 <__udivmoddi4+0x8c>
 8000e8c:	4543      	cmp	r3, r8
 8000e8e:	d2e5      	bcs.n	8000e5c <__udivmoddi4+0x260>
 8000e90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e94:	eb69 0104 	sbc.w	r1, r9, r4
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7df      	b.n	8000e5c <__udivmoddi4+0x260>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e7d2      	b.n	8000e46 <__udivmoddi4+0x24a>
 8000ea0:	4660      	mov	r0, ip
 8000ea2:	e78d      	b.n	8000dc0 <__udivmoddi4+0x1c4>
 8000ea4:	4681      	mov	r9, r0
 8000ea6:	e7b9      	b.n	8000e1c <__udivmoddi4+0x220>
 8000ea8:	4666      	mov	r6, ip
 8000eaa:	e775      	b.n	8000d98 <__udivmoddi4+0x19c>
 8000eac:	4630      	mov	r0, r6
 8000eae:	e74a      	b.n	8000d46 <__udivmoddi4+0x14a>
 8000eb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb4:	4439      	add	r1, r7
 8000eb6:	e713      	b.n	8000ce0 <__udivmoddi4+0xe4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e724      	b.n	8000d08 <__udivmoddi4+0x10c>
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <Artist_ClearCanvas>:
#include "font.h"
#include "scanline_fill.h"
#include "constants.h"

void Artist_ClearCanvas(Canvas *canvas, const color_t color)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	for(size_t iRow = 0; iRow < canvas->numRows; ++iRow)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	e01a      	b.n	8000f0a <Artist_ClearCanvas+0x46>
	{
		for(size_t iCol = 0; iCol < canvas->numCols; ++iCol)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	e00f      	b.n	8000efa <Artist_ClearCanvas+0x36>
		{
			canvas->data[iRow * canvas->numCols + iCol] = color;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	68f9      	ldr	r1, [r7, #12]
 8000ee4:	fb01 f103 	mul.w	r1, r1, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	440b      	add	r3, r1
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	601a      	str	r2, [r3, #0]
		for(size_t iCol = 0; iCol < canvas->numCols; ++iCol)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d3ea      	bcc.n	8000eda <Artist_ClearCanvas+0x16>
	for(size_t iRow = 0; iRow < canvas->numRows; ++iRow)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3301      	adds	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d3df      	bcc.n	8000ed4 <Artist_ClearCanvas+0x10>
		}
	}
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <Artist_DrawText>:

void Artist_DrawText(Canvas *canvas, const char *txt, const Point pos, const color_t color)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4639      	mov	r1, r7
 8000f30:	e881 000c 	stmia.w	r1, {r2, r3}
	Point currentPos = pos;
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	463a      	mov	r2, r7
 8000f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f3e:	e883 0003 	stmia.w	r3, {r0, r1}
	for (const char *c = txt; *c != '\0'; ++c)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	e041      	b.n	8000fcc <Artist_DrawText+0xa8>
	{
		// get character bytes from font array and write in data array
		for(uint8_t x = 0; x < FONT_WIDTH; ++x)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	76fb      	strb	r3, [r7, #27]
 8000f4c:	e038      	b.n	8000fc0 <Artist_DrawText+0x9c>
		{
			currentPos.x = pos.x;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	613b      	str	r3, [r7, #16]
			uint8_t fontCol = font6x8[(*c - 32)*FONT_WIDTH + x];
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	f1a3 0220 	sub.w	r2, r3, #32
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	461a      	mov	r2, r3
 8000f64:	7efb      	ldrb	r3, [r7, #27]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <Artist_DrawText+0xc0>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	767b      	strb	r3, [r7, #25]
			for(uint8_t y = 0; y < FONT_HEIGHT; ++y)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	76bb      	strb	r3, [r7, #26]
 8000f72:	e01c      	b.n	8000fae <Artist_DrawText+0x8a>
			{
				if(fontCol & (1 << y))
 8000f74:	7e7a      	ldrb	r2, [r7, #25]
 8000f76:	7ebb      	ldrb	r3, [r7, #26]
 8000f78:	fa42 f303 	asr.w	r3, r2, r3
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00e      	beq.n	8000fa2 <Artist_DrawText+0x7e>
				{
					canvas->data[currentPos.y + currentPos.x * canvas->numCols] = color;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	fb03 f300 	mul.w	r3, r3, r0
 8000f98:	440b      	add	r3, r1
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fa0:	601a      	str	r2, [r3, #0]
				}
				currentPos.x += 1;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
			for(uint8_t y = 0; y < FONT_HEIGHT; ++y)
 8000fa8:	7ebb      	ldrb	r3, [r7, #26]
 8000faa:	3301      	adds	r3, #1
 8000fac:	76bb      	strb	r3, [r7, #26]
 8000fae:	7ebb      	ldrb	r3, [r7, #26]
 8000fb0:	2b07      	cmp	r3, #7
 8000fb2:	d9df      	bls.n	8000f74 <Artist_DrawText+0x50>
			}
			currentPos.y += 1;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
		for(uint8_t x = 0; x < FONT_WIDTH; ++x)
 8000fba:	7efb      	ldrb	r3, [r7, #27]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	76fb      	strb	r3, [r7, #27]
 8000fc0:	7efb      	ldrb	r3, [r7, #27]
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d9c3      	bls.n	8000f4e <Artist_DrawText+0x2a>
	for (const char *c = txt; *c != '\0'; ++c)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1b9      	bne.n	8000f48 <Artist_DrawText+0x24>
		}
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	0800984c 	.word	0x0800984c

08000fe8 <Artist_FillPolygon>:

void Artist_FillPolygon(Canvas *canvas, Point *points, const size_t numPoints, const color_t color)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	f2ad 7dc4 	subw	sp, sp, #1988	; 0x7c4
 8000fee:	af02      	add	r7, sp, #8
 8000ff0:	f107 040c 	add.w	r4, r7, #12
 8000ff4:	6020      	str	r0, [r4, #0]
 8000ff6:	f107 0008 	add.w	r0, r7, #8
 8000ffa:	6001      	str	r1, [r0, #0]
 8000ffc:	1d39      	adds	r1, r7, #4
 8000ffe:	600a      	str	r2, [r1, #0]
 8001000:	463a      	mov	r2, r7
 8001002:	6013      	str	r3, [r2, #0]
	//1. Sort points anti-clockwise
	Point_SortAntiClockwise(points, numPoints);
 8001004:	1d3a      	adds	r2, r7, #4
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	6811      	ldr	r1, [r2, #0]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	f000 ff73 	bl	8001ef8 <Point_SortAntiClockwise>
	//2. Find ymin and ymax for the polygon
	int32_t ymin = points[0].y, ymax = points[1].y;
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3308      	adds	r3, #8
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f8c7 37b0 	str.w	r3, [r7, #1968]	; 0x7b0
	for(const Point *p = points + 1; p != (points + numPoints); ++p)
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3308      	adds	r3, #8
 8001034:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 8001038:	e01c      	b.n	8001074 <Artist_FillPolygon+0x8c>
	{
		if(p->y < ymin) ymin = p->y;
 800103a:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	; 0x7ac
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 8001044:	429a      	cmp	r2, r3
 8001046:	dd04      	ble.n	8001052 <Artist_FillPolygon+0x6a>
 8001048:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	; 0x7ac
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
		if(p->y > ymax) ymax = p->y;
 8001052:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	; 0x7ac
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800105c:	429a      	cmp	r2, r3
 800105e:	da04      	bge.n	800106a <Artist_FillPolygon+0x82>
 8001060:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	; 0x7ac
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f8c7 37b0 	str.w	r3, [r7, #1968]	; 0x7b0
	for(const Point *p = points + 1; p != (points + numPoints); ++p)
 800106a:	f8d7 37ac 	ldr.w	r3, [r7, #1964]	; 0x7ac
 800106e:	3308      	adds	r3, #8
 8001070:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	f107 0208 	add.w	r2, r7, #8
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	4413      	add	r3, r2
 8001082:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 8001086:	429a      	cmp	r2, r3
 8001088:	d1d7      	bne.n	800103a <Artist_FillPolygon+0x52>
	}
	// Create required lists
	Edge table[SCANLINE_FILL_TABLE_SIZE] = {};
 800108a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800108e:	4618      	mov	r0, r3
 8001090:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001094:	461a      	mov	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f007 fb48 	bl	800872c <memset>
	Edge edges[SCANLINE_FILL_EDGES_MAX_NUM] = {};
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	4618      	mov	r0, r3
 80010a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010a6:	461a      	mov	r2, r3
 80010a8:	2100      	movs	r1, #0
 80010aa:	f007 fb3f 	bl	800872c <memset>
	Edge active = {}; // head of list of active edges
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	461a      	mov	r2, r3
 80010b4:	2300      	movs	r3, #0
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	6053      	str	r3, [r2, #4]
 80010ba:	6093      	str	r3, [r2, #8]
 80010bc:	60d3      	str	r3, [r2, #12]
	//3. Build edge table
	ScanlineFill_BuildEdgeTable(table, SCANLINE_FILL_TABLE_SIZE, edges, SCANLINE_FILL_EDGES_MAX_NUM, points, numPoints);
 80010be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80010c2:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2314      	movs	r3, #20
 80010d6:	2164      	movs	r1, #100	; 0x64
 80010d8:	f000 ffba 	bl	8002050 <ScanlineFill_BuildEdgeTable>
	//4. Iterate through each scanline, applying scanline fill
	for(int32_t yScanline = ymin; yScanline <= ymax; ++yScanline)
 80010dc:	f8d7 37b4 	ldr.w	r3, [r7, #1972]	; 0x7b4
 80010e0:	f8c7 37a8 	str.w	r3, [r7, #1960]	; 0x7a8
 80010e4:	e031      	b.n	800114a <Artist_FillPolygon+0x162>
	{
		//4.1. Build list of active edges
		ScanlineFill_BuildActiveEdgeList(table, SCANLINE_FILL_TABLE_SIZE, &active, yScanline);
 80010e6:	f107 0214 	add.w	r2, r7, #20
 80010ea:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 80010ee:	f8d7 37a8 	ldr.w	r3, [r7, #1960]	; 0x7a8
 80010f2:	2164      	movs	r1, #100	; 0x64
 80010f4:	f001 f80e 	bl	8002114 <ScanlineFill_BuildActiveEdgeList>
		if(active.next)
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d01e      	beq.n	8001140 <Artist_FillPolygon+0x158>
		{
			//4.2. Fill the pixels inside the polygon on the given scanline
			ScanlineFill_FillScanline(&active, yScanline, canvas->data, canvas->numCols, canvas->numRows, color);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6819      	ldr	r1, [r3, #0]
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689c      	ldr	r4, [r3, #8]
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f107 0014 	add.w	r0, r7, #20
 800111e:	463a      	mov	r2, r7
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	9201      	str	r2, [sp, #4]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4623      	mov	r3, r4
 8001128:	460a      	mov	r2, r1
 800112a:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	; 0x7a8
 800112e:	f001 f85a 	bl	80021e6 <ScanlineFill_FillScanline>
			//4.3. Update active edges list
			ScanlineFill_UpdateActiveEdgeList(&active, yScanline);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	; 0x7a8
 800113a:	4618      	mov	r0, r3
 800113c:	f001 f809 	bl	8002152 <ScanlineFill_UpdateActiveEdgeList>
	for(int32_t yScanline = ymin; yScanline <= ymax; ++yScanline)
 8001140:	f8d7 37a8 	ldr.w	r3, [r7, #1960]	; 0x7a8
 8001144:	3301      	adds	r3, #1
 8001146:	f8c7 37a8 	str.w	r3, [r7, #1960]	; 0x7a8
 800114a:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800114e:	f8d7 37b0 	ldr.w	r3, [r7, #1968]	; 0x7b0
 8001152:	429a      	cmp	r2, r3
 8001154:	ddc7      	ble.n	80010e6 <Artist_FillPolygon+0xfe>
		}
	}
	//5. Color polygon points
	for(const Point *p = points; p != (points + numPoints); ++p)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 8001160:	e01a      	b.n	8001198 <Artist_FillPolygon+0x1b0>
	{
		canvas->data[p->y * canvas->numCols + p->x] = YELLOW;
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	; 0x7a4
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4619      	mov	r1, r3
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	fb03 f301 	mul.w	r3, r3, r1
 800117e:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	; 0x7a4
 8001182:	6809      	ldr	r1, [r1, #0]
 8001184:	440b      	add	r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <Artist_FillPolygon+0x1d4>)
 800118c:	601a      	str	r2, [r3, #0]
	for(const Point *p = points; p != (points + numPoints); ++p)
 800118e:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	; 0x7a4
 8001192:	3308      	adds	r3, #8
 8001194:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	f107 0208 	add.w	r2, r7, #8
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d1d9      	bne.n	8001162 <Artist_FillPolygon+0x17a>
	}
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	f207 77bc 	addw	r7, r7, #1980	; 0x7bc
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd90      	pop	{r4, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	0003ffc0 	.word	0x0003ffc0

080011c0 <CycleCounter_GetValue>:
/**
 * @brief Get the current cycle counter value
 * @retval current cycle counter value
 */
inline uint32_t CycleCounter_GetValue(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	return DWT->CYCCNT;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <CycleCounter_GetValue+0x14>)
 80011c6:	685b      	ldr	r3, [r3, #4]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e0001000 	.word	0xe0001000

080011d8 <CycleCounter_Init>:
 */

#include "cycle_counter.h"

void CycleCounter_Init(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <CycleCounter_Init+0x38>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <CycleCounter_Init+0x38>)
 80011e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011e6:	60d3      	str	r3, [r2, #12]
	ITM->LAR = 0xc5acce55;
 80011e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011ec:	4a09      	ldr	r2, [pc, #36]	; (8001214 <CycleCounter_Init+0x3c>)
 80011ee:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	DWT->CYCCNT = 0;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <CycleCounter_Init+0x40>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <CycleCounter_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <CycleCounter_Init+0x40>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000edf0 	.word	0xe000edf0
 8001214:	c5acce55 	.word	0xc5acce55
 8001218:	e0001000 	.word	0xe0001000

0800121c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b42      	ldr	r3, [pc, #264]	; (8001340 <MX_GPIO_Init+0x124>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a41      	ldr	r2, [pc, #260]	; (8001340 <MX_GPIO_Init+0x124>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <MX_GPIO_Init+0x124>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <MX_GPIO_Init+0x124>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a3a      	ldr	r2, [pc, #232]	; (8001340 <MX_GPIO_Init+0x124>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b38      	ldr	r3, [pc, #224]	; (8001340 <MX_GPIO_Init+0x124>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <MX_GPIO_Init+0x124>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a33      	ldr	r2, [pc, #204]	; (8001340 <MX_GPIO_Init+0x124>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <MX_GPIO_Init+0x124>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <MX_GPIO_Init+0x124>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a2c      	ldr	r2, [pc, #176]	; (8001340 <MX_GPIO_Init+0x124>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <MX_GPIO_Init+0x124>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a8:	4826      	ldr	r0, [pc, #152]	; (8001344 <MX_GPIO_Init+0x128>)
 80012aa:	f001 fcdd 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2110      	movs	r1, #16
 80012b2:	4825      	ldr	r0, [pc, #148]	; (8001348 <MX_GPIO_Init+0x12c>)
 80012b4:	f001 fcd8 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BACKLIGHT_Pin|LCD_DC_Pin|LCD_RESET_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 7160 	mov.w	r1, #896	; 0x380
 80012be:	4823      	ldr	r0, [pc, #140]	; (800134c <MX_GPIO_Init+0x130>)
 80012c0:	f001 fcd2 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4819      	ldr	r0, [pc, #100]	; (8001344 <MX_GPIO_Init+0x128>)
 80012de:	f001 fb3f 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80012e2:	2310      	movs	r3, #16
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4813      	ldr	r0, [pc, #76]	; (8001348 <MX_GPIO_Init+0x12c>)
 80012fa:	f001 fb31 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_GPIO_Init+0x130>)
 8001316:	f001 fb23 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RESET_Pin;
 800131a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_GPIO_Init+0x130>)
 8001334:	f001 fb14 	bl	8002960 <HAL_GPIO_Init>

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40020800 	.word	0x40020800
 8001348:	40020000 	.word	0x40020000
 800134c:	40020400 	.word	0x40020400

08001350 <LCD_StartCom>:

// Private functions declarations

// helper functions
static inline void LCD_StartCom(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	// set CS low
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2110      	movs	r1, #16
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <LCD_StartCom+0x14>)
 800135a:	f001 fc85 	bl	8002c68 <HAL_GPIO_WritePin>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40020000 	.word	0x40020000

08001368 <LCD_StopCom>:

static inline void LCD_StopCom(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	// set CS high
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2110      	movs	r1, #16
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <LCD_StopCom+0x14>)
 8001372:	f001 fc79 	bl	8002c68 <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40020000 	.word	0x40020000

08001380 <LCD_SetDataWrite>:

static inline void LCD_SetDataWrite(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	// set DC pin high (data)
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138a:	4802      	ldr	r0, [pc, #8]	; (8001394 <LCD_SetDataWrite+0x14>)
 800138c:	f001 fc6c 	bl	8002c68 <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40020400 	.word	0x40020400

08001398 <LCD_SetCmdWrite>:

static inline void LCD_SetCmdWrite(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	// set DC pin low (command)
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	4802      	ldr	r0, [pc, #8]	; (80013ac <LCD_SetCmdWrite+0x14>)
 80013a4:	f001 fc60 	bl	8002c68 <HAL_GPIO_WritePin>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40020400 	.word	0x40020400

080013b0 <LCD_Reset>:
 */
static void LCD_PrepareGRAMWrite(void);

// Private functions definitions
void LCD_Reset(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	// set reset pin low
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ba:	4808      	ldr	r0, [pc, #32]	; (80013dc <LCD_Reset+0x2c>)
 80013bc:	f001 fc54 	bl	8002c68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013c0:	2064      	movs	r0, #100	; 0x64
 80013c2:	f001 f997 	bl	80026f4 <HAL_Delay>
	// set reset pin high
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <LCD_Reset+0x2c>)
 80013ce:	f001 fc4b 	bl	8002c68 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013d2:	2032      	movs	r0, #50	; 0x32
 80013d4:	f001 f98e 	bl	80026f4 <HAL_Delay>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40020400 	.word	0x40020400

080013e0 <LCD_WriteCmd>:

void LCD_WriteCmd(uint8_t cmd)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	LCD_StartCom();
 80013ea:	f7ff ffb1 	bl	8001350 <LCD_StartCom>
	LCD_SetCmdWrite();
 80013ee:	f7ff ffd3 	bl	8001398 <LCD_SetCmdWrite>
	// send command via SPI
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80013f2:	1df9      	adds	r1, r7, #7
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	2201      	movs	r2, #1
 80013fa:	4804      	ldr	r0, [pc, #16]	; (800140c <LCD_WriteCmd+0x2c>)
 80013fc:	f003 fa93 	bl	8004926 <HAL_SPI_Transmit>
	LCD_StopCom();
 8001400:	f7ff ffb2 	bl	8001368 <LCD_StopCom>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000430 	.word	0x20000430

08001410 <LCD_WriteData8>:

void LCD_WriteData8(uint8_t data)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	LCD_StartCom();
 800141a:	f7ff ff99 	bl	8001350 <LCD_StartCom>
	LCD_SetDataWrite();
 800141e:	f7ff ffaf 	bl	8001380 <LCD_SetDataWrite>
	// send data via SPI
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001422:	1df9      	adds	r1, r7, #7
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	2201      	movs	r2, #1
 800142a:	4804      	ldr	r0, [pc, #16]	; (800143c <LCD_WriteData8+0x2c>)
 800142c:	f003 fa7b 	bl	8004926 <HAL_SPI_Transmit>
	LCD_StopCom();
 8001430:	f7ff ff9a 	bl	8001368 <LCD_StopCom>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000430 	.word	0x20000430

08001440 <LCD_WriteDataColor>:

void LCD_WriteDataColor(const color_t color)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	// send red data
	LCD_WriteData8((color >> 8) & 0xFC);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	b2db      	uxtb	r3, r3
 800144e:	f023 0303 	bic.w	r3, r3, #3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ffdb 	bl	8001410 <LCD_WriteData8>
	// send green data
	LCD_WriteData8((color >> 2) & 0xFC);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f023 0303 	bic.w	r3, r3, #3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ffd2 	bl	8001410 <LCD_WriteData8>
	// send blue data
	LCD_WriteData8((color << 2) & 0xFC);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ffcb 	bl	8001410 <LCD_WriteData8>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <LCD_PrepareGRAMWrite>:

void LCD_PrepareGRAMWrite(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
	LCD_WriteCmd(0x2C);
 8001486:	202c      	movs	r0, #44	; 0x2c
 8001488:	f7ff ffaa 	bl	80013e0 <LCD_WriteCmd>
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <LCD_Init>:

// Public function definitions
void LCD_Init(Lcd *lcd)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	// reset the LCD
 	LCD_Reset();
 8001498:	f7ff ff8a 	bl	80013b0 <LCD_Reset>

 	// send initialization sequence
	LCD_WriteCmd(0XF7);
 800149c:	20f7      	movs	r0, #247	; 0xf7
 800149e:	f7ff ff9f 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0xA9);
 80014a2:	20a9      	movs	r0, #169	; 0xa9
 80014a4:	f7ff ffb4 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x51);
 80014a8:	2051      	movs	r0, #81	; 0x51
 80014aa:	f7ff ffb1 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x2C);
 80014ae:	202c      	movs	r0, #44	; 0x2c
 80014b0:	f7ff ffae 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x82);
 80014b4:	2082      	movs	r0, #130	; 0x82
 80014b6:	f7ff ffab 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0xC0);
 80014ba:	20c0      	movs	r0, #192	; 0xc0
 80014bc:	f7ff ff90 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0x11);
 80014c0:	2011      	movs	r0, #17
 80014c2:	f7ff ffa5 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x09);
 80014c6:	2009      	movs	r0, #9
 80014c8:	f7ff ffa2 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0xC1);
 80014cc:	20c1      	movs	r0, #193	; 0xc1
 80014ce:	f7ff ff87 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0x41);
 80014d2:	2041      	movs	r0, #65	; 0x41
 80014d4:	f7ff ff9c 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0XC5);
 80014d8:	20c5      	movs	r0, #197	; 0xc5
 80014da:	f7ff ff81 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff ff96 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 80014e4:	200a      	movs	r0, #10
 80014e6:	f7ff ff93 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x80);
 80014ea:	2080      	movs	r0, #128	; 0x80
 80014ec:	f7ff ff90 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0xB1);
 80014f0:	20b1      	movs	r0, #177	; 0xb1
 80014f2:	f7ff ff75 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0xB0);
 80014f6:	20b0      	movs	r0, #176	; 0xb0
 80014f8:	f7ff ff8a 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x11);
 80014fc:	2011      	movs	r0, #17
 80014fe:	f7ff ff87 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0xB4);
 8001502:	20b4      	movs	r0, #180	; 0xb4
 8001504:	f7ff ff6c 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0x02);
 8001508:	2002      	movs	r0, #2
 800150a:	f7ff ff81 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0xB6);
 800150e:	20b6      	movs	r0, #182	; 0xb6
 8001510:	f7ff ff66 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0x02);
 8001514:	2002      	movs	r0, #2
 8001516:	f7ff ff7b 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x42);
 800151a:	2042      	movs	r0, #66	; 0x42
 800151c:	f7ff ff78 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0xB7);
 8001520:	20b7      	movs	r0, #183	; 0xb7
 8001522:	f7ff ff5d 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0xc6);
 8001526:	20c6      	movs	r0, #198	; 0xc6
 8001528:	f7ff ff72 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0xBE);
 800152c:	20be      	movs	r0, #190	; 0xbe
 800152e:	f7ff ff57 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff ff6c 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x04);
 8001538:	2004      	movs	r0, #4
 800153a:	f7ff ff69 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0xE9);
 800153e:	20e9      	movs	r0, #233	; 0xe9
 8001540:	f7ff ff4e 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff ff63 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0x36);
 800154a:	2036      	movs	r0, #54	; 0x36
 800154c:	f7ff ff48 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8((1<<3)|(0<<7)|(1<<6)|(1<<5));
 8001550:	2068      	movs	r0, #104	; 0x68
 8001552:	f7ff ff5d 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0x3A);
 8001556:	203a      	movs	r0, #58	; 0x3a
 8001558:	f7ff ff42 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0x66);
 800155c:	2066      	movs	r0, #102	; 0x66
 800155e:	f7ff ff57 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0xE0);
 8001562:	20e0      	movs	r0, #224	; 0xe0
 8001564:	f7ff ff3c 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff ff51 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x07);
 800156e:	2007      	movs	r0, #7
 8001570:	f7ff ff4e 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x10);
 8001574:	2010      	movs	r0, #16
 8001576:	f7ff ff4b 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x09);
 800157a:	2009      	movs	r0, #9
 800157c:	f7ff ff48 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x17);
 8001580:	2017      	movs	r0, #23
 8001582:	f7ff ff45 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x0B);
 8001586:	200b      	movs	r0, #11
 8001588:	f7ff ff42 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x41);
 800158c:	2041      	movs	r0, #65	; 0x41
 800158e:	f7ff ff3f 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x89);
 8001592:	2089      	movs	r0, #137	; 0x89
 8001594:	f7ff ff3c 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x4B);
 8001598:	204b      	movs	r0, #75	; 0x4b
 800159a:	f7ff ff39 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 800159e:	200a      	movs	r0, #10
 80015a0:	f7ff ff36 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x0C);
 80015a4:	200c      	movs	r0, #12
 80015a6:	f7ff ff33 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x0E);
 80015aa:	200e      	movs	r0, #14
 80015ac:	f7ff ff30 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x18);
 80015b0:	2018      	movs	r0, #24
 80015b2:	f7ff ff2d 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x1B);
 80015b6:	201b      	movs	r0, #27
 80015b8:	f7ff ff2a 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x0F);
 80015bc:	200f      	movs	r0, #15
 80015be:	f7ff ff27 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0XE1);
 80015c2:	20e1      	movs	r0, #225	; 0xe1
 80015c4:	f7ff ff0c 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff ff21 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x17);
 80015ce:	2017      	movs	r0, #23
 80015d0:	f7ff ff1e 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x1A);
 80015d4:	201a      	movs	r0, #26
 80015d6:	f7ff ff1b 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x04);
 80015da:	2004      	movs	r0, #4
 80015dc:	f7ff ff18 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x0E);
 80015e0:	200e      	movs	r0, #14
 80015e2:	f7ff ff15 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x06);
 80015e6:	2006      	movs	r0, #6
 80015e8:	f7ff ff12 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x2F);
 80015ec:	202f      	movs	r0, #47	; 0x2f
 80015ee:	f7ff ff0f 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x45);
 80015f2:	2045      	movs	r0, #69	; 0x45
 80015f4:	f7ff ff0c 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x43);
 80015f8:	2043      	movs	r0, #67	; 0x43
 80015fa:	f7ff ff09 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x02);
 80015fe:	2002      	movs	r0, #2
 8001600:	f7ff ff06 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 8001604:	200a      	movs	r0, #10
 8001606:	f7ff ff03 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x09);
 800160a:	2009      	movs	r0, #9
 800160c:	f7ff ff00 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x32);
 8001610:	2032      	movs	r0, #50	; 0x32
 8001612:	f7ff fefd 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x36);
 8001616:	2036      	movs	r0, #54	; 0x36
 8001618:	f7ff fefa 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(0x0F);
 800161c:	200f      	movs	r0, #15
 800161e:	f7ff fef7 	bl	8001410 <LCD_WriteData8>
	LCD_WriteCmd(0x11);
 8001622:	2011      	movs	r0, #17
 8001624:	f7ff fedc 	bl	80013e0 <LCD_WriteCmd>
	HAL_Delay(120);
 8001628:	2078      	movs	r0, #120	; 0x78
 800162a:	f001 f863 	bl	80026f4 <HAL_Delay>
	LCD_WriteCmd(0x29);
 800162e:	2029      	movs	r0, #41	; 0x29
 8001630:	f7ff fed6 	bl	80013e0 <LCD_WriteCmd>

  	// set orientation
	LCD_SetOrientation(lcd, 0);
 8001634:	2100      	movs	r1, #0
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f860 	bl	80016fc <LCD_SetOrientation>

	// turn on backlight
	HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_Port, LCD_BACKLIGHT_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <LCD_Init+0x1d4>)
 8001642:	f001 fb11 	bl	8002c68 <HAL_GPIO_WritePin>

	// clear display with black color
	LCD_Clear(lcd, BLACK);
 8001646:	2100      	movs	r1, #0
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8a9 	bl	80017a0 <LCD_Clear>

	// set cursor to (x, y)
	lcd->cursor.x = lcd->cursor.y = 0;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	601a      	str	r2, [r3, #0]
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40020400 	.word	0x40020400

08001668 <LCD_SetArea>:
{
	LCD_SetArea(lcd, p, p);
}

void LCD_SetArea(Lcd *lcd, const Point startPoint, const Point endPoint)
{
 8001668:	b082      	sub	sp, #8
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	1d38      	adds	r0, r7, #4
 8001674:	e880 0006 	stmia.w	r0, {r1, r2}
 8001678:	61fb      	str	r3, [r7, #28]
	LCD_WriteCmd(0x2A);
 800167a:	202a      	movs	r0, #42	; 0x2a
 800167c:	f7ff feb0 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(startPoint.x >> 8);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	121b      	asrs	r3, r3, #8
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fec2 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(startPoint.x & 0x00FF);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff febd 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(endPoint.x >> 8);
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	121b      	asrs	r3, r3, #8
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff feb7 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(endPoint.x & 0x00FF);
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff feb2 	bl	8001410 <LCD_WriteData8>

	LCD_WriteCmd(0x2B);
 80016ac:	202b      	movs	r0, #43	; 0x2b
 80016ae:	f7ff fe97 	bl	80013e0 <LCD_WriteCmd>
	LCD_WriteData8(startPoint.y >> 8);
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	121b      	asrs	r3, r3, #8
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fea9 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(startPoint.y & 0x00FF);
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fea4 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(endPoint.y >> 8);
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	121b      	asrs	r3, r3, #8
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fe9e 	bl	8001410 <LCD_WriteData8>
	LCD_WriteData8(endPoint.y & 0x00FF);
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe99 	bl	8001410 <LCD_WriteData8>

	lcd->cursor.x = startPoint.x;
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	601a      	str	r2, [r3, #0]
	lcd->cursor.y = startPoint.y;
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	605a      	str	r2, [r3, #4]

	LCD_PrepareGRAMWrite();
 80016ea:	f7ff feca 	bl	8001482 <LCD_PrepareGRAMWrite>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016f8:	b002      	add	sp, #8
 80016fa:	4770      	bx	lr

080016fc <LCD_SetOrientation>:

void LCD_SetOrientation(Lcd *lcd, const uint8_t rotation)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
	uint8_t memAccReg = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
	switch(rotation){
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d836      	bhi.n	8001780 <LCD_SetOrientation+0x84>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <LCD_SetOrientation+0x1c>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001729 	.word	0x08001729
 800171c:	0800173f 	.word	0x0800173f
 8001720:	08001755 	.word	0x08001755
 8001724:	0800176b 	.word	0x0800176b
		case 0:
			lcd->width = LCD_WIDTH;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800172e:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_HEIGHT;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001736:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (0 << 6) | (0 << 7);
 8001738:	2308      	movs	r3, #8
 800173a:	73fb      	strb	r3, [r7, #15]
		break;
 800173c:	e021      	b.n	8001782 <LCD_SetOrientation+0x86>
		case 1:
			lcd->width = LCD_HEIGHT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001744:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_WIDTH;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800174c:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (0 << 7) | (1 << 6) | (1 << 5);
 800174e:	2368      	movs	r3, #104	; 0x68
 8001750:	73fb      	strb	r3, [r7, #15]
		break;
 8001752:	e016      	b.n	8001782 <LCD_SetOrientation+0x86>
		case 2:
			lcd->width = LCD_WIDTH;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800175a:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_HEIGHT;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001762:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (1 << 6) | (1 << 7);
 8001764:	23c8      	movs	r3, #200	; 0xc8
 8001766:	73fb      	strb	r3, [r7, #15]
		break;
 8001768:	e00b      	b.n	8001782 <LCD_SetOrientation+0x86>
		case 3:
			lcd->width = LCD_HEIGHT;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001770:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_WIDTH;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001778:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (1 << 7) | (1 << 5);
 800177a:	23a8      	movs	r3, #168	; 0xa8
 800177c:	73fb      	strb	r3, [r7, #15]
		break;
 800177e:	e000      	b.n	8001782 <LCD_SetOrientation+0x86>
		default:
		break;
 8001780:	bf00      	nop
	}
	if(memAccReg != 0)
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <LCD_SetOrientation+0x9a>
	{
		LCD_WriteCmd(0x36);
 8001788:	2036      	movs	r0, #54	; 0x36
 800178a:	f7ff fe29 	bl	80013e0 <LCD_WriteCmd>
		LCD_WriteData8(memAccReg);
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fe3d 	bl	8001410 <LCD_WriteData8>
	}
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop

080017a0 <LCD_Clear>:

void LCD_Clear(Lcd *lcd, const color_t color)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	Point startPoint = {0, 0}, endPoint = {lcd->width - 1, lcd->height - 1};
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	891b      	ldrh	r3, [r3, #8]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	895b      	ldrh	r3, [r3, #10]
 80017be:	3b01      	subs	r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
	LCD_SetArea(lcd, startPoint, endPoint);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f107 0214 	add.w	r2, r7, #20
 80017cc:	ca06      	ldmia	r2, {r1, r2}
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ff4a 	bl	8001668 <LCD_SetArea>

	LCD_StartCom();
 80017d4:	f7ff fdbc 	bl	8001350 <LCD_StartCom>
	LCD_SetDataWrite();
 80017d8:	f7ff fdd2 	bl	8001380 <LCD_SetDataWrite>

	for(uint16_t x = 0; x < lcd->height; ++x)
 80017dc:	2300      	movs	r3, #0
 80017de:	83fb      	strh	r3, [r7, #30]
 80017e0:	e010      	b.n	8001804 <LCD_Clear+0x64>
	{
		for(uint16_t y = 0; y < lcd->width; ++y)
 80017e2:	2300      	movs	r3, #0
 80017e4:	83bb      	strh	r3, [r7, #28]
 80017e6:	e005      	b.n	80017f4 <LCD_Clear+0x54>
		{
			LCD_WriteDataColor(color);
 80017e8:	6838      	ldr	r0, [r7, #0]
 80017ea:	f7ff fe29 	bl	8001440 <LCD_WriteDataColor>
		for(uint16_t y = 0; y < lcd->width; ++y)
 80017ee:	8bbb      	ldrh	r3, [r7, #28]
 80017f0:	3301      	adds	r3, #1
 80017f2:	83bb      	strh	r3, [r7, #28]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	891b      	ldrh	r3, [r3, #8]
 80017f8:	8bba      	ldrh	r2, [r7, #28]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d3f4      	bcc.n	80017e8 <LCD_Clear+0x48>
	for(uint16_t x = 0; x < lcd->height; ++x)
 80017fe:	8bfb      	ldrh	r3, [r7, #30]
 8001800:	3301      	adds	r3, #1
 8001802:	83fb      	strh	r3, [r7, #30]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	895b      	ldrh	r3, [r3, #10]
 8001808:	8bfa      	ldrh	r2, [r7, #30]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3e9      	bcc.n	80017e2 <LCD_Clear+0x42>
		}
	}

	LCD_StopCom();
 800180e:	f7ff fdab 	bl	8001368 <LCD_StopCom>
}
 8001812:	bf00      	nop
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <LCD_DrawArea>:
	LCD_SetCursor(lcd, p);
	LCD_WriteDataColor(color);
}

void LCD_DrawArea(Lcd *lcd, const color_t *data, const size_t numRows, const size_t numCols)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	603b      	str	r3, [r7, #0]
	LCD_StartCom();
 8001828:	f7ff fd92 	bl	8001350 <LCD_StartCom>
	LCD_SetDataWrite();
 800182c:	f7ff fda8 	bl	8001380 <LCD_SetDataWrite>

	for(uint16_t x = 0; x < numRows; ++x)
 8001830:	2300      	movs	r3, #0
 8001832:	82fb      	strh	r3, [r7, #22]
 8001834:	e019      	b.n	800186a <LCD_DrawArea+0x50>
	{
		for(uint16_t y = 0; y < numCols; ++y)
 8001836:	2300      	movs	r3, #0
 8001838:	82bb      	strh	r3, [r7, #20]
 800183a:	e00f      	b.n	800185c <LCD_DrawArea+0x42>
		{
			LCD_WriteDataColor(data[y + x * numCols]);
 800183c:	8aba      	ldrh	r2, [r7, #20]
 800183e:	8afb      	ldrh	r3, [r7, #22]
 8001840:	6839      	ldr	r1, [r7, #0]
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	4413      	add	r3, r2
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fdf5 	bl	8001440 <LCD_WriteDataColor>
		for(uint16_t y = 0; y < numCols; ++y)
 8001856:	8abb      	ldrh	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	82bb      	strh	r3, [r7, #20]
 800185c:	8abb      	ldrh	r3, [r7, #20]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8eb      	bhi.n	800183c <LCD_DrawArea+0x22>
	for(uint16_t x = 0; x < numRows; ++x)
 8001864:	8afb      	ldrh	r3, [r7, #22]
 8001866:	3301      	adds	r3, #1
 8001868:	82fb      	strh	r3, [r7, #22]
 800186a:	8afb      	ldrh	r3, [r7, #22]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	d8e1      	bhi.n	8001836 <LCD_DrawArea+0x1c>
		}
	}

	LCD_StopCom();
 8001872:	f7ff fd79 	bl	8001368 <LCD_StopCom>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	f5ad 4d45 	sub.w	sp, sp, #50432	; 0xc500
 8001886:	b086      	sub	sp, #24
 8001888:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char buf[100] = {};
 800188a:	2300      	movs	r3, #0
 800188c:	f507 4244 	add.w	r2, r7, #50176	; 0xc400
 8001890:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	f507 4344 	add.w	r3, r7, #50176	; 0xc400
 800189a:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800189e:	2260      	movs	r2, #96	; 0x60
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f006 ff42 	bl	800872c <memset>
  Lcd lcd = {};
 80018a8:	f507 4344 	add.w	r3, r7, #50176	; 0xc400
 80018ac:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
  color_t textBuf[FONT_HEIGHT][LCD_WIDTH] = {};
 80018b8:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 80018bc:	f103 03d0 	add.w	r3, r3, #208	; 0xd0
 80018c0:	3b3c      	subs	r3, #60	; 0x3c
 80018c2:	4618      	mov	r0, r3
 80018c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018c8:	461a      	mov	r2, r3
 80018ca:	2100      	movs	r1, #0
 80018cc:	f006 ff2e 	bl	800872c <memset>
  Canvas textCanvas = {
 80018d0:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 80018d4:	f103 0390 	add.w	r3, r3, #144	; 0x90
 80018d8:	3b08      	subs	r3, #8
 80018da:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80018de:	f102 02d0 	add.w	r2, r2, #208	; 0xd0
 80018e2:	3a3c      	subs	r2, #60	; 0x3c
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 80018ea:	f103 0390 	add.w	r3, r3, #144	; 0x90
 80018ee:	3b08      	subs	r3, #8
 80018f0:	2208      	movs	r2, #8
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 80018f8:	f103 0390 	add.w	r3, r3, #144	; 0x90
 80018fc:	3b08      	subs	r3, #8
 80018fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001902:	609a      	str	r2, [r3, #8]
		  .data = (color_t*)textBuf,
		  .numRows = FONT_HEIGHT,
		  .numCols = LCD_WIDTH
  };
  color_t polygonBuf[POLYGON_BUF_HEIGHT][POLYGON_BUF_WIDTH] = {};
 8001904:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001908:	3bc8      	subs	r3, #200	; 0xc8
 800190a:	4618      	mov	r0, r3
 800190c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001910:	461a      	mov	r2, r3
 8001912:	2100      	movs	r1, #0
 8001914:	f006 ff0a 	bl	800872c <memset>
  Canvas polygonCanvas = {
 8001918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800191c:	3bd4      	subs	r3, #212	; 0xd4
 800191e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001922:	3ac8      	subs	r2, #200	; 0xc8
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800192a:	3bd4      	subs	r3, #212	; 0xd4
 800192c:	2264      	movs	r2, #100	; 0x64
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001934:	3bd4      	subs	r3, #212	; 0xd4
 8001936:	2264      	movs	r2, #100	; 0x64
 8001938:	609a      	str	r2, [r3, #8]
		  .data = (color_t*)polygonBuf,
		  .numRows = POLYGON_BUF_HEIGHT,
		  .numCols = POLYGON_BUF_WIDTH
  };
  Point polygonPoints[] = {
 800193a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800193e:	3bf4      	subs	r3, #244	; 0xf4
 8001940:	4ac2      	ldr	r2, [pc, #776]	; (8001c4c <main+0x3cc>)
 8001942:	461c      	mov	r4, r3
 8001944:	4615      	mov	r5, r2
 8001946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800194e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  {40, 60},
		  {50, 20},
		  {20, 90},
		  {1, 1}
  };
  const size_t numPolygonPoints = sizeof(polygonPoints)/sizeof(polygonPoints[0]);
 8001952:	2304      	movs	r3, #4
 8001954:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 8001958:	f102 020c 	add.w	r2, r2, #12
 800195c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f000 fe57 	bl	8002610 <HAL_Init>

  /* USER CODE BEGIN Init */
  CycleCounter_Init();
 8001962:	f7ff fc39 	bl	80011d8 <CycleCounter_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001966:	f000 f97b 	bl	8001c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196a:	f7ff fc57 	bl	800121c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800196e:	f006 f9bb 	bl	8007ce8 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001972:	f000 fd01 	bl	8002378 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&lcd);
 8001976:	f507 4344 	add.w	r3, r7, #50176	; 0xc400
 800197a:	f103 0394 	add.w	r3, r3, #148	; 0x94
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fd86 	bl	8001490 <LCD_Init>

  // Draw header text
  Point bufPos = {0, 0}, screenStartPos = {0, 0}, screenEndPos = {LCD_WIDTH, FONT_HEIGHT};
 8001984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001988:	3bfc      	subs	r3, #252	; 0xfc
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001992:	3bfc      	subs	r3, #252	; 0xfc
 8001994:	2200      	movs	r2, #0
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	3b04      	subs	r3, #4
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	3b04      	subs	r3, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	3b0c      	subs	r3, #12
 80019b2:	4aa7      	ldr	r2, [pc, #668]	; (8001c50 <main+0x3d0>)
 80019b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019b8:	e883 0003 	stmia.w	r3, {r0, r1}
  strcpy(buf, "Scanline Fill Algorithm Benchmark");
 80019bc:	f507 4344 	add.w	r3, r7, #50176	; 0xc400
 80019c0:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 80019c4:	4aa3      	ldr	r2, [pc, #652]	; (8001c54 <main+0x3d4>)
 80019c6:	461c      	mov	r4, r3
 80019c8:	4615      	mov	r5, r2
 80019ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d2:	682b      	ldr	r3, [r5, #0]
 80019d4:	8023      	strh	r3, [r4, #0]
  Artist_ClearCanvas(&textCanvas, BLACK);
 80019d6:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 80019da:	f103 0390 	add.w	r3, r3, #144	; 0x90
 80019de:	3b08      	subs	r3, #8
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fa6e 	bl	8000ec4 <Artist_ClearCanvas>
  Artist_DrawText(&textCanvas, buf, bufPos, GREEN);
 80019e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019ec:	3bfc      	subs	r3, #252	; 0xfc
 80019ee:	f507 4144 	add.w	r1, r7, #50176	; 0xc400
 80019f2:	f101 01a0 	add.w	r1, r1, #160	; 0xa0
 80019f6:	f507 401c 	add.w	r0, r7, #39936	; 0x9c00
 80019fa:	f100 0090 	add.w	r0, r0, #144	; 0x90
 80019fe:	3808      	subs	r0, #8
 8001a00:	f44f 627c 	mov.w	r2, #4032	; 0xfc0
 8001a04:	9200      	str	r2, [sp, #0]
 8001a06:	cb0c      	ldmia	r3, {r2, r3}
 8001a08:	f7ff fa8c 	bl	8000f24 <Artist_DrawText>
  LCD_SetArea(&lcd, screenStartPos, screenEndPos);
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	3b0c      	subs	r3, #12
 8001a12:	f107 0210 	add.w	r2, r7, #16
 8001a16:	3a04      	subs	r2, #4
 8001a18:	f507 4044 	add.w	r0, r7, #50176	; 0xc400
 8001a1c:	f100 0094 	add.w	r0, r0, #148	; 0x94
 8001a20:	6859      	ldr	r1, [r3, #4]
 8001a22:	9100      	str	r1, [sp, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	ca06      	ldmia	r2, {r1, r2}
 8001a28:	f7ff fe1e 	bl	8001668 <LCD_SetArea>
  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 8001a2c:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8001a30:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001a34:	3b08      	subs	r3, #8
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8001a3c:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001a40:	3b08      	subs	r3, #8
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8001a48:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001a4c:	3b08      	subs	r3, #8
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f507 4044 	add.w	r0, r7, #50176	; 0xc400
 8001a54:	f100 0094 	add.w	r0, r0, #148	; 0x94
 8001a58:	f7ff fedf 	bl	800181a <LCD_DrawArea>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8001a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a60:	487d      	ldr	r0, [pc, #500]	; (8001c58 <main+0x3d8>)
 8001a62:	f001 f91a 	bl	8002c9a <HAL_GPIO_TogglePin>

	  Artist_ClearCanvas(&polygonCanvas, BLACK);
 8001a66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a6a:	3bd4      	subs	r3, #212	; 0xd4
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fa28 	bl	8000ec4 <Artist_ClearCanvas>
	  uint32_t start_ticks = CycleCounter_GetValue();
 8001a74:	f7ff fba4 	bl	80011c0 <CycleCounter_GetValue>
 8001a78:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 8001a7c:	f103 0308 	add.w	r3, r3, #8
 8001a80:	6018      	str	r0, [r3, #0]
	  Artist_FillPolygon(&polygonCanvas, polygonPoints, numPolygonPoints, BLUE);
 8001a82:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001a86:	39f4      	subs	r1, #244	; 0xf4
 8001a88:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8001a8c:	38d4      	subs	r0, #212	; 0xd4
 8001a8e:	233f      	movs	r3, #63	; 0x3f
 8001a90:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 8001a94:	f102 020c 	add.w	r2, r2, #12
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	f7ff faa5 	bl	8000fe8 <Artist_FillPolygon>
	  uint32_t duration_ticks = CycleCounter_GetValue() - start_ticks;
 8001a9e:	f7ff fb8f 	bl	80011c0 <CycleCounter_GetValue>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f507 4345 	add.w	r3, r7, #50432	; 0xc500
 8001aa8:	f103 0308 	add.w	r3, r3, #8
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 8001ab4:	f102 0204 	add.w	r2, r2, #4
 8001ab8:	6013      	str	r3, [r2, #0]
	  // uint32_t execution_time = (duration_ticks * 1000000UL) / SystemCoreClock;

	  bufPos.x = 0; bufPos.y = 0;
 8001aba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001abe:	3bfc      	subs	r3, #252	; 0xfc
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ac8:	3bfc      	subs	r3, #252	; 0xfc
 8001aca:	2200      	movs	r2, #0
 8001acc:	605a      	str	r2, [r3, #4]
	  screenStartPos.x = LCD_WIDTH/4; screenStartPos.y = LCD_HEIGHT/4;
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	2250      	movs	r2, #80	; 0x50
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	3b04      	subs	r3, #4
 8001ade:	2278      	movs	r2, #120	; 0x78
 8001ae0:	605a      	str	r2, [r3, #4]
	  screenEndPos.x = screenStartPos.x + POLYGON_BUF_WIDTH; screenEndPos.y = screenStartPos.y + POLYGON_BUF_HEIGHT;
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	3b0c      	subs	r3, #12
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	3b04      	subs	r3, #4
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	3b0c      	subs	r3, #12
 8001b08:	605a      	str	r2, [r3, #4]
	  LCD_SetArea(&lcd, screenStartPos, screenEndPos);
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	3b0c      	subs	r3, #12
 8001b10:	f107 0210 	add.w	r2, r7, #16
 8001b14:	3a04      	subs	r2, #4
 8001b16:	f507 4044 	add.w	r0, r7, #50176	; 0xc400
 8001b1a:	f100 0094 	add.w	r0, r0, #148	; 0x94
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	9100      	str	r1, [sp, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	ca06      	ldmia	r2, {r1, r2}
 8001b26:	f7ff fd9f 	bl	8001668 <LCD_SetArea>
	  LCD_DrawArea(&lcd, polygonCanvas.data, polygonCanvas.numRows, polygonCanvas.numCols);
 8001b2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b2e:	3bd4      	subs	r3, #212	; 0xd4
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b36:	3bd4      	subs	r3, #212	; 0xd4
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b3e:	3bd4      	subs	r3, #212	; 0xd4
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f507 4044 	add.w	r0, r7, #50176	; 0xc400
 8001b46:	f100 0094 	add.w	r0, r0, #148	; 0x94
 8001b4a:	f7ff fe66 	bl	800181a <LCD_DrawArea>
	  sprintf(buf, "Execution ticks: %lu", duration_ticks);
 8001b4e:	f507 4344 	add.w	r3, r7, #50176	; 0xc400
 8001b52:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8001b56:	f507 4245 	add.w	r2, r7, #50432	; 0xc500
 8001b5a:	f102 0204 	add.w	r2, r2, #4
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	493e      	ldr	r1, [pc, #248]	; (8001c5c <main+0x3dc>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f006 ff74 	bl	8008a50 <siprintf>
	  bufPos.x = 0; bufPos.y = 0;
 8001b68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b6c:	3bfc      	subs	r3, #252	; 0xfc
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b76:	3bfc      	subs	r3, #252	; 0xfc
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
	  screenStartPos.x = 0; screenStartPos.y = 3*LCD_HEIGHT/4;
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	3b04      	subs	r3, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001b90:	605a      	str	r2, [r3, #4]
	  screenEndPos.x = screenStartPos.x + LCD_WIDTH; screenEndPos.y = screenStartPos.y + FONT_HEIGHT;
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	3b04      	subs	r3, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	3b0c      	subs	r3, #12
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	3b04      	subs	r3, #4
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f103 0208 	add.w	r2, r3, #8
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	3b0c      	subs	r3, #12
 8001bb8:	605a      	str	r2, [r3, #4]
	  Artist_ClearCanvas(&textCanvas, BLACK);
 8001bba:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8001bbe:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001bc2:	3b08      	subs	r3, #8
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f97c 	bl	8000ec4 <Artist_ClearCanvas>
	  Artist_DrawText(&textCanvas, buf, bufPos, RED);
 8001bcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bd0:	3bfc      	subs	r3, #252	; 0xfc
 8001bd2:	f507 4144 	add.w	r1, r7, #50176	; 0xc400
 8001bd6:	f101 01a0 	add.w	r1, r1, #160	; 0xa0
 8001bda:	f507 401c 	add.w	r0, r7, #39936	; 0x9c00
 8001bde:	f100 0090 	add.w	r0, r0, #144	; 0x90
 8001be2:	3808      	subs	r0, #8
 8001be4:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 8001be8:	9200      	str	r2, [sp, #0]
 8001bea:	cb0c      	ldmia	r3, {r2, r3}
 8001bec:	f7ff f99a 	bl	8000f24 <Artist_DrawText>
	  LCD_SetArea(&lcd, screenStartPos, screenEndPos);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	3b0c      	subs	r3, #12
 8001bf6:	f107 0210 	add.w	r2, r7, #16
 8001bfa:	3a04      	subs	r2, #4
 8001bfc:	f507 4044 	add.w	r0, r7, #50176	; 0xc400
 8001c00:	f100 0094 	add.w	r0, r0, #148	; 0x94
 8001c04:	6859      	ldr	r1, [r3, #4]
 8001c06:	9100      	str	r1, [sp, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	ca06      	ldmia	r2, {r1, r2}
 8001c0c:	f7ff fd2c 	bl	8001668 <LCD_SetArea>
	  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 8001c10:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8001c14:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001c18:	3b08      	subs	r3, #8
 8001c1a:	6819      	ldr	r1, [r3, #0]
 8001c1c:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8001c20:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001c24:	3b08      	subs	r3, #8
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8001c2c:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001c30:	3b08      	subs	r3, #8
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f507 4044 	add.w	r0, r7, #50176	; 0xc400
 8001c38:	f100 0094 	add.w	r0, r0, #148	; 0x94
 8001c3c:	f7ff fded 	bl	800181a <LCD_DrawArea>
	  HAL_Delay(500);
 8001c40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c44:	f000 fd56 	bl	80026f4 <HAL_Delay>
  {
 8001c48:	e708      	b.n	8001a5c <main+0x1dc>
 8001c4a:	bf00      	nop
 8001c4c:	080097dc 	.word	0x080097dc
 8001c50:	080097fc 	.word	0x080097fc
 8001c54:	080097a0 	.word	0x080097a0
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	080097c4 	.word	0x080097c4

08001c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b094      	sub	sp, #80	; 0x50
 8001c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	2230      	movs	r2, #48	; 0x30
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f006 fd5c 	bl	800872c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <SystemClock_Config+0xc8>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	4a26      	ldr	r2, [pc, #152]	; (8001d28 <SystemClock_Config+0xc8>)
 8001c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c92:	6413      	str	r3, [r2, #64]	; 0x40
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <SystemClock_Config+0xc8>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <SystemClock_Config+0xcc>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a20      	ldr	r2, [pc, #128]	; (8001d2c <SystemClock_Config+0xcc>)
 8001caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <SystemClock_Config+0xcc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001cd0:	2319      	movs	r3, #25
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001cd4:	23c0      	movs	r3, #192	; 0xc0
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce0:	f107 0320 	add.w	r3, r7, #32
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 f975 	bl	8003fd4 <HAL_RCC_OscConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cf0:	f000 f81e 	bl	8001d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	2103      	movs	r1, #3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fbd7 	bl	80044c4 <HAL_RCC_ClockConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d1c:	f000 f808 	bl	8001d30 <Error_Handler>
  }
}
 8001d20:	bf00      	nop
 8001d22:	3750      	adds	r7, #80	; 0x50
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40007000 	.word	0x40007000

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <Error_Handler+0x8>
	...

08001d3c <PolarPointWithIndex_compare>:
	size_t index;
} PolarPointWithIndex;

// compare polar points based on angle and radius
static int PolarPointWithIndex_compare(const void *a, const void *b)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	static const float eps = 1e-5f;
	const float angleDiff = ((PolarPointWithIndex*)a)->point.angle - ((PolarPointWithIndex*)b)->point.angle;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d56:	edc7 7a03 	vstr	s15, [r7, #12]
	if (fabsf(angleDiff) < eps)
 8001d5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d5e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <PolarPointWithIndex_compare+0x74>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	d50d      	bpl.n	8001d8e <PolarPointWithIndex_compare+0x52>
	{
		const uint32_t radiusDiff = ((PolarPointWithIndex*)a)->point.radiusSquared - ((PolarPointWithIndex*)b)->point.radiusSquared;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	60bb      	str	r3, [r7, #8]
		if (radiusDiff < 0)
		{
			return 1;
		}
		else if (radiusDiff > 0)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <PolarPointWithIndex_compare+0x4e>
		{
			return -1;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	e00c      	b.n	8001da4 <PolarPointWithIndex_compare+0x68>
		}
		else
		{
			return 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e00a      	b.n	8001da4 <PolarPointWithIndex_compare+0x68>
		}
	}
	else if (angleDiff > 0)
 8001d8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	dd01      	ble.n	8001da0 <PolarPointWithIndex_compare+0x64>
	{
		return 1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e001      	b.n	8001da4 <PolarPointWithIndex_compare+0x68>
	}
	else
	{
		return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	08009a8c 	.word	0x08009a8c

08001db4 <Point_CartesianToPolar>:

PointPolar Point_CartesianToPolar(const Point *point)
{
 8001db4:	b5b0      	push	{r4, r5, r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
	PointPolar polar = {};
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
	polar.radiusSquared = point->x * point->x + point->y * point->y;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	fb02 f203 	mul.w	r2, r2, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	6849      	ldr	r1, [r1, #4]
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
	polar.angle = atan2(point->y, point->x);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb9b 	bl	8000524 <__aeabi_i2d>
 8001dee:	4604      	mov	r4, r0
 8001df0:	460d      	mov	r5, r1
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fb94 	bl	8000524 <__aeabi_i2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	ec43 2b11 	vmov	d1, r2, r3
 8001e04:	ec45 4b10 	vmov	d0, r4, r5
 8001e08:	f007 fa42 	bl	8009290 <atan2>
 8001e0c:	ec53 2b10 	vmov	r2, r3, d0
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fe8a 	bl	8000b2c <__aeabi_d2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60fb      	str	r3, [r7, #12]
	return polar;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e28:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bdb0      	pop	{r4, r5, r7, pc}

08001e34 <Point_FindMassCenter>:

Point Point_FindMassCenter(const Point *points, const size_t numPoints)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b08b      	sub	sp, #44	; 0x2c
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
	int32_t xSum = 0, ySum = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
	for(const Point *p = points; p != (points + numPoints); ++p)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	e00c      	b.n	8001e68 <Point_FindMassCenter+0x34>
	{
		xSum += p->x;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	4413      	add	r3, r2
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
		ySum += p->y;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	6a3a      	ldr	r2, [r7, #32]
 8001e5e:	4413      	add	r3, r2
 8001e60:	623b      	str	r3, [r7, #32]
	for(const Point *p = points; p != (points + numPoints); ++p)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3308      	adds	r3, #8
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	4413      	add	r3, r2
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d1eb      	bne.n	8001e4e <Point_FindMassCenter+0x1a>
	}

	Point massCenter = {
			.x = xSum / numPoints,
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
	Point massCenter = {
 8001e7e:	617b      	str	r3, [r7, #20]
			.y = ySum / numPoints
 8001e80:	6a3a      	ldr	r2, [r7, #32]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
	Point massCenter = {
 8001e88:	61bb      	str	r3, [r7, #24]
	};

	return massCenter;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e96:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	372c      	adds	r7, #44	; 0x2c
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <Point_MoveOrigin>:

void Point_MoveOrigin(Point *points, const size_t numPoints, const Point *origin)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
	for(Point *p = points; p != (points + numPoints); ++p)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	e010      	b.n	8001eda <Point_MoveOrigin+0x34>
	{
		p->x -= origin->x;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	1ad2      	subs	r2, r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	601a      	str	r2, [r3, #0]
		p->y -= origin->y;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	1ad2      	subs	r2, r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	605a      	str	r2, [r3, #4]
	for(Point *p = points; p != (points + numPoints); ++p)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3308      	adds	r3, #8
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1e7      	bne.n	8001eb8 <Point_MoveOrigin+0x12>
	}
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <Point_SortAntiClockwise>:

void Point_SortAntiClockwise(Point *points, const size_t numPoints)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b0ed      	sub	sp, #436	; 0x1b4
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	6018      	str	r0, [r3, #0]
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	6019      	str	r1, [r3, #0]
	// Make a copy of the points
	Point pointsOriginal[POINT_MAX_NUM] = {};
 8001f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f0e:	22a0      	movs	r2, #160	; 0xa0
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f006 fc0a 	bl	800872c <memset>
	memcpy(pointsOriginal, points, numPoints*sizeof(points[0]));
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	00da      	lsls	r2, r3, #3
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	f006 fbf1 	bl	8008710 <memcpy>
	// 1. Find mass center
	Point massCenter = Point_FindMassCenter(points, numPoints);
 8001f2e:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8001f32:	f107 0208 	add.w	r2, r7, #8
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	6819      	ldr	r1, [r3, #0]
 8001f3e:	f7ff ff79 	bl	8001e34 <Point_FindMassCenter>
	// 2. Shift points origin to mass center
	Point_MoveOrigin(points, numPoints, &massCenter);
 8001f42:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8001f46:	f107 0108 	add.w	r1, r7, #8
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	6809      	ldr	r1, [r1, #0]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	f7ff ffa8 	bl	8001ea6 <Point_MoveOrigin>
	// 3. Convert to polar coordinates
	PolarPointWithIndex polarPointsWithIndex[POINT_MAX_NUM] = {};
 8001f56:	f107 0310 	add.w	r3, r7, #16
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	23f0      	movs	r3, #240	; 0xf0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2100      	movs	r1, #0
 8001f62:	f006 fbe3 	bl	800872c <memset>
	for (size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001f6c:	e02c      	b.n	8001fc8 <Point_SortAntiClockwise+0xd0>
	{
		polarPointsWithIndex[iPoint].point = Point_CartesianToPolar(points + iPoint);
 8001f6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	f107 020c 	add.w	r2, r7, #12
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	18d0      	adds	r0, r2, r3
 8001f7c:	f107 0110 	add.w	r1, r7, #16
 8001f80:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	18cc      	adds	r4, r1, r3
 8001f8e:	463b      	mov	r3, r7
 8001f90:	4601      	mov	r1, r0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff0e 	bl	8001db4 <Point_CartesianToPolar>
 8001f98:	463a      	mov	r2, r7
 8001f9a:	4623      	mov	r3, r4
 8001f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fa0:	e883 0003 	stmia.w	r3, {r0, r1}
		polarPointsWithIndex[iPoint].index = iPoint;
 8001fa4:	f107 0110 	add.w	r1, r7, #16
 8001fa8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001fbc:	601a      	str	r2, [r3, #0]
	for (size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8001fbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3cb      	bcc.n	8001f6e <Point_SortAntiClockwise+0x76>
	}
	// 4. Sort points based on polar coordinates
	qsort(polarPointsWithIndex, numPoints, sizeof(PolarPointWithIndex), PolarPointWithIndex_compare);
 8001fd6:	f107 0108 	add.w	r1, r7, #8
 8001fda:	f107 0010 	add.w	r0, r7, #16
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <Point_SortAntiClockwise+0x154>)
 8001fe0:	220c      	movs	r2, #12
 8001fe2:	6809      	ldr	r1, [r1, #0]
 8001fe4:	f006 fbe3 	bl	80087ae <qsort>
	// 5. Reorder original points based on the sorted order of polar points
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001fee:	e01f      	b.n	8002030 <Point_SortAntiClockwise+0x138>
	{
		points[iPoint] = pointsOriginal[polarPointsWithIndex[iPoint].index];
 8001ff0:	f107 0110 	add.w	r1, r7, #16
 8001ff4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	3308      	adds	r3, #8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800200a:	00d2      	lsls	r2, r2, #3
 800200c:	f107 010c 	add.w	r1, r7, #12
 8002010:	6809      	ldr	r1, [r1, #0]
 8002012:	440a      	add	r2, r1
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 800201a:	440b      	add	r3, r1
 800201c:	3ba8      	subs	r3, #168	; 0xa8
 800201e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002022:	e882 0003 	stmia.w	r2, {r0, r1}
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8002026:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800202a:	3301      	adds	r3, #1
 800202c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d3d8      	bcc.n	8001ff0 <Point_SortAntiClockwise+0xf8>
	}
}
 800203e:	bf00      	nop
 8002040:	bf00      	nop
 8002042:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}
 800204a:	bf00      	nop
 800204c:	08001d3d 	.word	0x08001d3d

08002050 <ScanlineFill_BuildEdgeTable>:
 * if y-coordinates are monotonic or not
 */
static void ScanlineFill_FillEdgeData(Edge *table, const size_t maxTableSize, Edge *edge, const Point *lower, const Point *upper, int32_t yComp);

void ScanlineFill_BuildEdgeTable(Edge *table, const size_t maxTableSize, Edge *edges, const size_t maxNumEdges, const Point *points, const size_t numPoints)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b08d      	sub	sp, #52	; 0x34
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
	// Iterate through every pair of points and create edges info
	const Point *p1 = points + (numPoints - 1);  // First edge point
 800205e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002060:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002064:	3b01      	subs	r3, #1
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800206a:	4413      	add	r3, r2
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
	const Point *p2 = NULL;  // Second point
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
	int32_t yPrev = p1->y;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	623b      	str	r3, [r7, #32]
	size_t iEdge = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	e03f      	b.n	8002102 <ScanlineFill_BuildEdgeTable+0xb2>
	{
		p2 = points + iPoint;
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002088:	4413      	add	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
		// Find lower and upper points of non-horizontal edge
		if(p1->y < p2->y)
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	da16      	bge.n	80020c6 <ScanlineFill_BuildEdgeTable+0x76>
		{
			// p1 is lower, p2 is upper point, edge is going upwards
			ScanlineFill_FillEdgeData(table, maxTableSize, edges + iEdge, p1, p2, ScanlineFill_yNext(points, numPoints, iPoint));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	18d4      	adds	r4, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020a6:	f000 f8d0 	bl	800224a <ScanlineFill_yNext>
 80020aa:	4603      	mov	r3, r0
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	4622      	mov	r2, r4
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f921 	bl	8002300 <ScanlineFill_FillEdgeData>
			++iEdge;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3301      	adds	r3, #1
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	e015      	b.n	80020f2 <ScanlineFill_BuildEdgeTable+0xa2>
		}
		else if(p1->y > p2->y)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	dd0f      	ble.n	80020f2 <ScanlineFill_BuildEdgeTable+0xa2>
		{
			// p2 is lower, p1 is upper point, edge is going downwards
			ScanlineFill_FillEdgeData(table, maxTableSize, edges + iEdge, p2, p1, yPrev);
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f90a 	bl	8002300 <ScanlineFill_FillEdgeData>
			++iEdge;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	3301      	adds	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
		}
		yPrev = p1->y;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	623b      	str	r3, [r7, #32]
		p1 = p2;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	3301      	adds	r3, #1
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002106:	429a      	cmp	r2, r3
 8002108:	d3bb      	bcc.n	8002082 <ScanlineFill_BuildEdgeTable+0x32>
	}
}
 800210a:	bf00      	nop
 800210c:	bf00      	nop
 800210e:	372c      	adds	r7, #44	; 0x2c
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}

08002114 <ScanlineFill_BuildActiveEdgeList>:

void ScanlineFill_BuildActiveEdgeList(Edge *table, const size_t maxTableSize, Edge *active, int32_t yScanline)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
	Edge *scanlineEdge = table[yScanline].next, *nextScanlineEdge;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4413      	add	r3, r2
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	617b      	str	r3, [r7, #20]
	// insert edges related to current scanline in the active edges list
	while(scanlineEdge)
 800212e:	e008      	b.n	8002142 <ScanlineFill_BuildActiveEdgeList+0x2e>
	{
		nextScanlineEdge = scanlineEdge->next;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	613b      	str	r3, [r7, #16]
		ScanlineFill_InsertEdge(active, scanlineEdge);
 8002136:	6979      	ldr	r1, [r7, #20]
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8b8 	bl	80022ae <ScanlineFill_InsertEdge>
		scanlineEdge = nextScanlineEdge;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	617b      	str	r3, [r7, #20]
	while(scanlineEdge)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f3      	bne.n	8002130 <ScanlineFill_BuildActiveEdgeList+0x1c>
	}
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <ScanlineFill_UpdateActiveEdgeList>:

void ScanlineFill_UpdateActiveEdgeList(Edge *active, int32_t yScanline)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
	//1. Update edges x-coordinates
	Edge *currentEdge = active->next, *edgeBefore = active;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	613b      	str	r3, [r7, #16]
	while(currentEdge)
 8002166:	e023      	b.n	80021b0 <ScanlineFill_UpdateActiveEdgeList+0x5e>
	{
		if(yScanline >= currentEdge->yu)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	db08      	blt.n	8002184 <ScanlineFill_UpdateActiveEdgeList+0x32>
		{
			// remove completed edges
			currentEdge = currentEdge->next;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	617b      	str	r3, [r7, #20]
			edgeBefore->next = edgeBefore->next->next;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	e015      	b.n	80021b0 <ScanlineFill_UpdateActiveEdgeList+0x5e>
		}
		else
		{
			// update edges in-progress
			currentEdge->xl = currentEdge->xl + currentEdge->dx;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	edd3 7a02 	vldr	s15, [r3, #8]
 8002196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219e:	ee17 2a90 	vmov	r2, s15
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	601a      	str	r2, [r3, #0]
			edgeBefore = currentEdge;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	613b      	str	r3, [r7, #16]
			currentEdge = currentEdge->next;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	617b      	str	r3, [r7, #20]
	while(currentEdge)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1d8      	bne.n	8002168 <ScanlineFill_UpdateActiveEdgeList+0x16>
		}
	}
	//2. Resort list of active edges by rebuilding it
	Edge *nextEdge;
	currentEdge = active->next;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	617b      	str	r3, [r7, #20]
	active->next = NULL;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
	while(currentEdge)
 80021c2:	e008      	b.n	80021d6 <ScanlineFill_UpdateActiveEdgeList+0x84>
	{
		nextEdge = currentEdge->next;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60fb      	str	r3, [r7, #12]
		ScanlineFill_InsertEdge(active, currentEdge);
 80021ca:	6979      	ldr	r1, [r7, #20]
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f86e 	bl	80022ae <ScanlineFill_InsertEdge>
		currentEdge = nextEdge;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	617b      	str	r3, [r7, #20]
	while(currentEdge)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f3      	bne.n	80021c4 <ScanlineFill_UpdateActiveEdgeList+0x72>
	}
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <ScanlineFill_FillScanline>:

void ScanlineFill_FillScanline(Edge *active, int32_t yScanline, color_t *data, const size_t dataWidth, const size_t dataHeight, const color_t color)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b089      	sub	sp, #36	; 0x24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	603b      	str	r3, [r7, #0]
	Edge *e1, *e2;
	e1 = active->next;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61fb      	str	r3, [r7, #28]
	while(e1)
 80021fa:	e01c      	b.n	8002236 <ScanlineFill_FillScanline+0x50>
	{
		e2 = e1->next;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	617b      	str	r3, [r7, #20]
		// fill pixels between the pair of edge points
		for(int32_t x = e1->xl; x < e2->xl; ++x)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e00d      	b.n	8002226 <ScanlineFill_FillScanline+0x40>
		{
			data[dataWidth * yScanline + x] = color;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	fb02 f203 	mul.w	r2, r2, r3
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221e:	601a      	str	r2, [r3, #0]
		for(int32_t x = e1->xl; x < e2->xl; ++x)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	3301      	adds	r3, #1
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	429a      	cmp	r2, r3
 800222e:	dbec      	blt.n	800220a <ScanlineFill_FillScanline+0x24>
		}
		e1 = e2->next;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61fb      	str	r3, [r7, #28]
	while(e1)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1df      	bne.n	80021fc <ScanlineFill_FillScanline+0x16>
	}
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <ScanlineFill_yNext>:

int32_t ScanlineFill_yNext(const Point *points, const size_t numPoints, const size_t iCurrentPoint)
{
 800224a:	b480      	push	{r7}
 800224c:	b087      	sub	sp, #28
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
	size_t iNextPoint = (iCurrentPoint + 1) % numPoints;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3301      	adds	r3, #1
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	fb01 f202 	mul.w	r2, r1, r2
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	617b      	str	r3, [r7, #20]
	while (points[iNextPoint].y == points[iCurrentPoint].y)
 800226a:	e009      	b.n	8002280 <ScanlineFill_yNext+0x36>
	{
		iNextPoint = (iNextPoint + 1) % numPoints;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	3301      	adds	r3, #1
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	fbb3 f2f2 	udiv	r2, r3, r2
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	fb01 f202 	mul.w	r2, r1, r2
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	617b      	str	r3, [r7, #20]
	while (points[iNextPoint].y == points[iCurrentPoint].y)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	440b      	add	r3, r1
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	d0e9      	beq.n	800226c <ScanlineFill_yNext+0x22>
	}
	return points[iNextPoint].y;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	685b      	ldr	r3, [r3, #4]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <ScanlineFill_InsertEdge>:

void ScanlineFill_InsertEdge(Edge *list, Edge *edge)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
	Edge *currentEdge = list->next, *edgeBefore = list;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60bb      	str	r3, [r7, #8]
	while(currentEdge)
 80022c2:	e00d      	b.n	80022e0 <ScanlineFill_InsertEdge+0x32>
	{
		if(edge->xl < currentEdge->xl)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	da02      	bge.n	80022d6 <ScanlineFill_InsertEdge+0x28>
		{
			currentEdge = NULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e004      	b.n	80022e0 <ScanlineFill_InsertEdge+0x32>
		}
		else
		{
			edgeBefore = currentEdge;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
			currentEdge = currentEdge->next;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	60fb      	str	r3, [r7, #12]
	while(currentEdge)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1ee      	bne.n	80022c4 <ScanlineFill_InsertEdge+0x16>
		}
	}
	// insert the new edge in the linked list
	edge->next = edgeBefore->next;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	60da      	str	r2, [r3, #12]
	edgeBefore->next = edge;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	60da      	str	r2, [r3, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <ScanlineFill_FillEdgeData>:

void ScanlineFill_FillEdgeData(Edge *table, const size_t maxTableSize, Edge *edge, const Point *lower, const Point *upper, int32_t yComp)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
	// Fill edge info
	edge->xl = lower->x;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	601a      	str	r2, [r3, #0]
	edge->yu = (upper->y < yComp) ? upper->y - 1 : upper->y;  // adjust if edge is monotonically increasing or decreasing
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	dd03      	ble.n	8002328 <ScanlineFill_FillEdgeData+0x28>
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	3b01      	subs	r3, #1
 8002326:	e001      	b.n	800232c <ScanlineFill_FillEdgeData+0x2c>
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6053      	str	r3, [r2, #4]
	edge->dx = ((float)(upper->x - lower->x)) / (upper->y - lower->y);
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	edc3 7a02 	vstr	s15, [r3, #8]
	// Insert edge in edge table
	ScanlineFill_InsertEdge(&table[lower->y], edge);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff9f 	bl	80022ae <ScanlineFill_InsertEdge>
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800237c:	4b17      	ldr	r3, [pc, #92]	; (80023dc <MX_SPI1_Init+0x64>)
 800237e:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <MX_SPI1_Init+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <MX_SPI1_Init+0x64>)
 8002384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <MX_SPI1_Init+0x64>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <MX_SPI1_Init+0x64>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_SPI1_Init+0x64>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_SPI1_Init+0x64>)
 800239e:	2200      	movs	r2, #0
 80023a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_SPI1_Init+0x64>)
 80023a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_SPI1_Init+0x64>)
 80023ac:	2208      	movs	r2, #8
 80023ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <MX_SPI1_Init+0x64>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_SPI1_Init+0x64>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <MX_SPI1_Init+0x64>)
 80023be:	2200      	movs	r2, #0
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_SPI1_Init+0x64>)
 80023c4:	220a      	movs	r2, #10
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023c8:	4804      	ldr	r0, [pc, #16]	; (80023dc <MX_SPI1_Init+0x64>)
 80023ca:	f002 fa23 	bl	8004814 <HAL_SPI_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023d4:	f7ff fcac 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000430 	.word	0x20000430
 80023e0:	40013000 	.word	0x40013000

080023e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_SPI_MspInit+0x84>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d12b      	bne.n	800245e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_SPI_MspInit+0x88>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a17      	ldr	r2, [pc, #92]	; (800246c <HAL_SPI_MspInit+0x88>)
 8002410:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <HAL_SPI_MspInit+0x88>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_SPI_MspInit+0x88>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_SPI_MspInit+0x88>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_SPI_MspInit+0x88>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800243e:	23e0      	movs	r3, #224	; 0xe0
 8002440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244a:	2303      	movs	r3, #3
 800244c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800244e:	2305      	movs	r3, #5
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	4805      	ldr	r0, [pc, #20]	; (8002470 <HAL_SPI_MspInit+0x8c>)
 800245a:	f000 fa81 	bl	8002960 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800245e:	bf00      	nop
 8002460:	3728      	adds	r7, #40	; 0x28
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40013000 	.word	0x40013000
 800246c:	40023800 	.word	0x40023800
 8002470:	40020000 	.word	0x40020000

08002474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_MspInit+0x4c>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_MspInit+0x4c>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_MspInit+0x4c>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_MspInit+0x4c>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_MspInit+0x4c>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_MspInit+0x4c>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800

080024c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <NMI_Handler+0x4>

080024ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <HardFault_Handler+0x4>

080024d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <MemManage_Handler+0x4>

080024d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024da:	e7fe      	b.n	80024da <BusFault_Handler+0x4>

080024dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <UsageFault_Handler+0x4>

080024e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002510:	f000 f8d0 	bl	80026b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <OTG_FS_IRQHandler+0x10>)
 800251e:	f000 fd26 	bl	8002f6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	2000195c 	.word	0x2000195c

0800252c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002534:	4a14      	ldr	r2, [pc, #80]	; (8002588 <_sbrk+0x5c>)
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <_sbrk+0x60>)
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <_sbrk+0x64>)
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <_sbrk+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	429a      	cmp	r2, r3
 800255a:	d207      	bcs.n	800256c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800255c:	f006 f8ae 	bl	80086bc <__errno>
 8002560:	4603      	mov	r3, r0
 8002562:	220c      	movs	r2, #12
 8002564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	e009      	b.n	8002580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <_sbrk+0x64>)
 800257c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800257e:	68fb      	ldr	r3, [r7, #12]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20020000 	.word	0x20020000
 800258c:	00000400 	.word	0x00000400
 8002590:	20000200 	.word	0x20000200
 8002594:	20001d78 	.word	0x20001d78

08002598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <SystemInit+0x20>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <SystemInit+0x20>)
 80025a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025c2:	490e      	ldr	r1, [pc, #56]	; (80025fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025c4:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c8:	e002      	b.n	80025d0 <LoopCopyDataInit>

080025ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ce:	3304      	adds	r3, #4

080025d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d4:	d3f9      	bcc.n	80025ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025d8:	4c0b      	ldr	r4, [pc, #44]	; (8002608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025dc:	e001      	b.n	80025e2 <LoopFillZerobss>

080025de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e0:	3204      	adds	r2, #4

080025e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e4:	d3fb      	bcc.n	80025de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025e6:	f7ff ffd7 	bl	8002598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ea:	f006 f86d 	bl	80086c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ee:	f7ff f947 	bl	8001880 <main>
  bx  lr    
 80025f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025fc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002600:	08009b58 	.word	0x08009b58
  ldr r2, =_sbss
 8002604:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002608:	20001d74 	.word	0x20001d74

0800260c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800260c:	e7fe      	b.n	800260c <ADC_IRQHandler>
	...

08002610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_Init+0x40>)
 800261a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_Init+0x40>)
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_Init+0x40>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002638:	2003      	movs	r0, #3
 800263a:	f000 f94f 	bl	80028dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263e:	200f      	movs	r0, #15
 8002640:	f000 f808 	bl	8002654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002644:	f7ff ff16 	bl	8002474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_InitTick+0x54>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_InitTick+0x58>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	fbb3 f3f1 	udiv	r3, r3, r1
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f967 	bl	8002946 <HAL_SYSTICK_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d80a      	bhi.n	800269e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002688:	2200      	movs	r2, #0
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f000 f92f 	bl	80028f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_InitTick+0x5c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000008 	.word	0x20000008
 80026b0:	20000004 	.word	0x20000004

080026b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_IncTick+0x20>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_IncTick+0x24>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_IncTick+0x24>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000008 	.word	0x20000008
 80026d8:	20000488 	.word	0x20000488

080026dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return uwTick;
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_GetTick+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000488 	.word	0x20000488

080026f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff ffee 	bl	80026dc <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d005      	beq.n	800271a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_Delay+0x44>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800271a:	bf00      	nop
 800271c:	f7ff ffde 	bl	80026dc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	429a      	cmp	r2, r3
 800272a:	d8f7      	bhi.n	800271c <HAL_Delay+0x28>
  {
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000008 	.word	0x20000008

0800273c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800276c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60d3      	str	r3, [r2, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <__NVIC_GetPriorityGrouping+0x18>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	f003 0307 	and.w	r3, r3, #7
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	db0b      	blt.n	80027ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	f003 021f 	and.w	r2, r3, #31
 80027b8:	4907      	ldr	r1, [pc, #28]	; (80027d8 <__NVIC_EnableIRQ+0x38>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2001      	movs	r0, #1
 80027c2:	fa00 f202 	lsl.w	r2, r0, r2
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000e100 	.word	0xe000e100

080027dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	db0a      	blt.n	8002806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	490c      	ldr	r1, [pc, #48]	; (8002828 <__NVIC_SetPriority+0x4c>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	440b      	add	r3, r1
 8002800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002804:	e00a      	b.n	800281c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4908      	ldr	r1, [pc, #32]	; (800282c <__NVIC_SetPriority+0x50>)
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	3b04      	subs	r3, #4
 8002814:	0112      	lsls	r2, r2, #4
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	440b      	add	r3, r1
 800281a:	761a      	strb	r2, [r3, #24]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000e100 	.word	0xe000e100
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	; 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f1c3 0307 	rsb	r3, r3, #7
 800284a:	2b04      	cmp	r3, #4
 800284c:	bf28      	it	cs
 800284e:	2304      	movcs	r3, #4
 8002850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3304      	adds	r3, #4
 8002856:	2b06      	cmp	r3, #6
 8002858:	d902      	bls.n	8002860 <NVIC_EncodePriority+0x30>
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3b03      	subs	r3, #3
 800285e:	e000      	b.n	8002862 <NVIC_EncodePriority+0x32>
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	f04f 32ff 	mov.w	r2, #4294967295
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	401a      	ands	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002878:	f04f 31ff 	mov.w	r1, #4294967295
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	43d9      	mvns	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	4313      	orrs	r3, r2
         );
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	; 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a8:	d301      	bcc.n	80028ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00f      	b.n	80028ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ae:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <SysTick_Config+0x40>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b6:	210f      	movs	r1, #15
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295
 80028bc:	f7ff ff8e 	bl	80027dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <SysTick_Config+0x40>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c6:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <SysTick_Config+0x40>)
 80028c8:	2207      	movs	r2, #7
 80028ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	e000e010 	.word	0xe000e010

080028dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff ff29 	bl	800273c <__NVIC_SetPriorityGrouping>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002904:	f7ff ff3e 	bl	8002784 <__NVIC_GetPriorityGrouping>
 8002908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f7ff ff8e 	bl	8002830 <NVIC_EncodePriority>
 8002914:	4602      	mov	r2, r0
 8002916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff5d 	bl	80027dc <__NVIC_SetPriority>
}
 8002922:	bf00      	nop
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff31 	bl	80027a0 <__NVIC_EnableIRQ>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ffa2 	bl	8002898 <SysTick_Config>
 8002954:	4603      	mov	r3, r0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	e159      	b.n	8002c30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800297c:	2201      	movs	r2, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	f040 8148 	bne.w	8002c2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d005      	beq.n	80029b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d130      	bne.n	8002a14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 0201 	and.w	r2, r3, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d017      	beq.n	8002a50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d123      	bne.n	8002aa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	08da      	lsrs	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3208      	adds	r2, #8
 8002a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	220f      	movs	r2, #15
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	08da      	lsrs	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3208      	adds	r2, #8
 8002a9e:	69b9      	ldr	r1, [r7, #24]
 8002aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0203 	and.w	r2, r3, #3
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80a2 	beq.w	8002c2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b57      	ldr	r3, [pc, #348]	; (8002c48 <HAL_GPIO_Init+0x2e8>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	4a56      	ldr	r2, [pc, #344]	; (8002c48 <HAL_GPIO_Init+0x2e8>)
 8002af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af4:	6453      	str	r3, [r2, #68]	; 0x44
 8002af6:	4b54      	ldr	r3, [pc, #336]	; (8002c48 <HAL_GPIO_Init+0x2e8>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b02:	4a52      	ldr	r2, [pc, #328]	; (8002c4c <HAL_GPIO_Init+0x2ec>)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	089b      	lsrs	r3, r3, #2
 8002b08:	3302      	adds	r3, #2
 8002b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a49      	ldr	r2, [pc, #292]	; (8002c50 <HAL_GPIO_Init+0x2f0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d019      	beq.n	8002b62 <HAL_GPIO_Init+0x202>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a48      	ldr	r2, [pc, #288]	; (8002c54 <HAL_GPIO_Init+0x2f4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_GPIO_Init+0x1fe>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a47      	ldr	r2, [pc, #284]	; (8002c58 <HAL_GPIO_Init+0x2f8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00d      	beq.n	8002b5a <HAL_GPIO_Init+0x1fa>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a46      	ldr	r2, [pc, #280]	; (8002c5c <HAL_GPIO_Init+0x2fc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d007      	beq.n	8002b56 <HAL_GPIO_Init+0x1f6>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a45      	ldr	r2, [pc, #276]	; (8002c60 <HAL_GPIO_Init+0x300>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_GPIO_Init+0x1f2>
 8002b4e:	2304      	movs	r3, #4
 8002b50:	e008      	b.n	8002b64 <HAL_GPIO_Init+0x204>
 8002b52:	2307      	movs	r3, #7
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x204>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e004      	b.n	8002b64 <HAL_GPIO_Init+0x204>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_Init+0x204>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x204>
 8002b62:	2300      	movs	r3, #0
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f002 0203 	and.w	r2, r2, #3
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b74:	4935      	ldr	r1, [pc, #212]	; (8002c4c <HAL_GPIO_Init+0x2ec>)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b82:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ba6:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bac:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd0:	4a24      	ldr	r2, [pc, #144]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c24:	4a0f      	ldr	r2, [pc, #60]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b0f      	cmp	r3, #15
 8002c34:	f67f aea2 	bls.w	800297c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40020c00 	.word	0x40020c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40013c00 	.word	0x40013c00

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c78:	787b      	ldrb	r3, [r7, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c84:	e003      	b.n	8002c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	041a      	lsls	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	041a      	lsls	r2, r3, #16
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43d9      	mvns	r1, r3
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	400b      	ands	r3, r1
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	619a      	str	r2, [r3, #24]
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd0:	b08f      	sub	sp, #60	; 0x3c
 8002cd2:	af0a      	add	r7, sp, #40	; 0x28
 8002cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e10f      	b.n	8002f00 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f005 f9d4 	bl	80080a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2203      	movs	r2, #3
 8002d04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 f91d 	bl	8004f5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	687e      	ldr	r6, [r7, #4]
 8002d2c:	466d      	mov	r5, sp
 8002d2e:	f106 0410 	add.w	r4, r6, #16
 8002d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d42:	1d33      	adds	r3, r6, #4
 8002d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d46:	6838      	ldr	r0, [r7, #0]
 8002d48:	f001 fff4 	bl	8004d34 <USB_CoreInit>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0d0      	b.n	8002f00 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 f90b 	bl	8004f80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	e04a      	b.n	8002e06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	333d      	adds	r3, #61	; 0x3d
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	333c      	adds	r3, #60	; 0x3c
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d98:	7bfa      	ldrb	r2, [r7, #15]
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	b298      	uxth	r0, r3
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3342      	adds	r3, #66	; 0x42
 8002dac:	4602      	mov	r2, r0
 8002dae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	333f      	adds	r3, #63	; 0x3f
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3344      	adds	r3, #68	; 0x44
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3348      	adds	r3, #72	; 0x48
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3350      	adds	r3, #80	; 0x50
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	3301      	adds	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d3af      	bcc.n	8002d70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
 8002e14:	e044      	b.n	8002ea0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d3b5      	bcc.n	8002e16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	687e      	ldr	r6, [r7, #4]
 8002eb2:	466d      	mov	r5, sp
 8002eb4:	f106 0410 	add.w	r4, r6, #16
 8002eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ec8:	1d33      	adds	r3, r6, #4
 8002eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ecc:	6838      	ldr	r0, [r7, #0]
 8002ece:	f002 f8a3 	bl	8005018 <USB_DevInit>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e00d      	b.n	8002f00 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 f91f 	bl	800613c <USB_DevDisconnect>

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_PCD_Start+0x1c>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e020      	b.n	8002f66 <HAL_PCD_Start+0x5e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d109      	bne.n	8002f48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d005      	beq.n	8002f48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 fff5 	bl	8004f3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 f8cf 	bl	80060fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f6e:	b590      	push	{r4, r7, lr}
 8002f70:	b08d      	sub	sp, #52	; 0x34
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 f98d 	bl	80062a4 <USB_GetMode>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f040 839d 	bne.w	80036cc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 f8f1 	bl	800617e <USB_ReadInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8393 	beq.w	80036ca <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 f8e8 	bl	800617e <USB_ReadInterrupts>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d107      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f002 0202 	and.w	r2, r2, #2
 8002fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 f8d6 	bl	800617e <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d161      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0210 	bic.w	r2, r2, #16
 8002fea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f003 020f 	and.w	r2, r3, #15
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	3304      	adds	r3, #4
 800300a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	0c5b      	lsrs	r3, r3, #17
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	2b02      	cmp	r3, #2
 8003016:	d124      	bne.n	8003062 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d035      	beq.n	8003090 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800302e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	6a38      	ldr	r0, [r7, #32]
 8003038:	f002 ff0d 	bl	8005e56 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003048:	441a      	add	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800305a:	441a      	add	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	619a      	str	r2, [r3, #24]
 8003060:	e016      	b.n	8003090 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	0c5b      	lsrs	r3, r3, #17
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	2b06      	cmp	r3, #6
 800306c:	d110      	bne.n	8003090 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003074:	2208      	movs	r2, #8
 8003076:	4619      	mov	r1, r3
 8003078:	6a38      	ldr	r0, [r7, #32]
 800307a:	f002 feec 	bl	8005e56 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800308a:	441a      	add	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0210 	orr.w	r2, r2, #16
 800309e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f003 f86a 	bl	800617e <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030b4:	d16e      	bne.n	8003194 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 f870 	bl	80061a4 <USB_ReadDevAllOutEpInterrupt>
 80030c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030c6:	e062      	b.n	800318e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d057      	beq.n	8003182 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 f895 	bl	800620c <USB_ReadDevOutEPInterrupt>
 80030e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00c      	beq.n	8003108 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fa:	461a      	mov	r2, r3
 80030fc:	2301      	movs	r3, #1
 80030fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fdb0 	bl	8003c68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311e:	461a      	mov	r2, r3
 8003120:	2308      	movs	r3, #8
 8003122:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 feaa 	bl	8003e80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003142:	461a      	mov	r2, r3
 8003144:	2310      	movs	r3, #16
 8003146:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315e:	461a      	mov	r2, r3
 8003160:	2320      	movs	r3, #32
 8003162:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	461a      	mov	r2, r3
 800317c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003180:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	3301      	adds	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	d199      	bne.n	80030c8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f002 fff0 	bl	800617e <USB_ReadInterrupts>
 800319e:	4603      	mov	r3, r0
 80031a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031a8:	f040 80c0 	bne.w	800332c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 f811 	bl	80061d8 <USB_ReadDevAllInEpInterrupt>
 80031b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80031bc:	e0b2      	b.n	8003324 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80a7 	beq.w	8003318 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 f837 	bl	8006248 <USB_ReadDevInEPInterrupt>
 80031da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d057      	beq.n	8003296 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	2201      	movs	r2, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	43db      	mvns	r3, r3
 8003200:	69f9      	ldr	r1, [r7, #28]
 8003202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003206:	4013      	ands	r3, r2
 8003208:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	4413      	add	r3, r2
 8003212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003216:	461a      	mov	r2, r3
 8003218:	2301      	movs	r3, #1
 800321a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d132      	bne.n	800328a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3348      	adds	r3, #72	; 0x48
 8003234:	6819      	ldr	r1, [r3, #0]
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4403      	add	r3, r0
 8003244:	3344      	adds	r3, #68	; 0x44
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4419      	add	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4403      	add	r3, r0
 8003258:	3348      	adds	r3, #72	; 0x48
 800325a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	2b00      	cmp	r3, #0
 8003260:	d113      	bne.n	800328a <HAL_PCD_IRQHandler+0x31c>
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	3350      	adds	r3, #80	; 0x50
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d108      	bne.n	800328a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003282:	461a      	mov	r2, r3
 8003284:	2101      	movs	r1, #1
 8003286:	f003 f83f 	bl	8006308 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	b2db      	uxtb	r3, r3
 800328e:	4619      	mov	r1, r3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f004 ff8a 	bl	80081aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ac:	461a      	mov	r2, r3
 80032ae:	2308      	movs	r3, #8
 80032b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c8:	461a      	mov	r2, r3
 80032ca:	2310      	movs	r3, #16
 80032cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e4:	461a      	mov	r2, r3
 80032e6:	2340      	movs	r3, #64	; 0x40
 80032e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003300:	461a      	mov	r2, r3
 8003302:	2302      	movs	r3, #2
 8003304:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fc1b 	bl	8003b4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	3301      	adds	r3, #1
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	f47f af49 	bne.w	80031be <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f002 ff24 	bl	800617e <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800333c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003340:	d122      	bne.n	8003388 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800335c:	2b01      	cmp	r3, #1
 800335e:	d108      	bne.n	8003372 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003368:	2100      	movs	r1, #0
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fe26 	bl	8003fbc <HAL_PCDEx_LPM_Callback>
 8003370:	e002      	b.n	8003378 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f004 ff86 	bl	8008284 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f002 fef6 	bl	800617e <USB_ReadInterrupts>
 8003392:	4603      	mov	r3, r0
 8003394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800339c:	d112      	bne.n	80033c4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d102      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f004 ff42 	bl	8008238 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f002 fed8 	bl	800617e <USB_ReadInterrupts>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d8:	f040 80c7 	bne.w	800356a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2110      	movs	r1, #16
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 ff72 	bl	80052e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003400:	e056      	b.n	80034b0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340e:	461a      	mov	r2, r3
 8003410:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003414:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003426:	0151      	lsls	r1, r2, #5
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	440a      	add	r2, r1
 800342c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003430:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003434:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003446:	0151      	lsls	r1, r2, #5
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	440a      	add	r2, r1
 800344c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003450:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003454:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003468:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800347a:	0151      	lsls	r1, r2, #5
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	440a      	add	r2, r1
 8003480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003484:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003488:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	4413      	add	r3, r2
 8003492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800349a:	0151      	lsls	r1, r2, #5
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	440a      	add	r2, r1
 80034a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	3301      	adds	r3, #1
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d3a3      	bcc.n	8003402 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e6:	f043 030b 	orr.w	r3, r3, #11
 80034ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034fc:	f043 030b 	orr.w	r3, r3, #11
 8003500:	6453      	str	r3, [r2, #68]	; 0x44
 8003502:	e015      	b.n	8003530 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003512:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003516:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800351a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800352a:	f043 030b 	orr.w	r3, r3, #11
 800352e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800353e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003542:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003554:	461a      	mov	r2, r3
 8003556:	f002 fed7 	bl	8006308 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f002 fe05 	bl	800617e <USB_ReadInterrupts>
 8003574:	4603      	mov	r3, r0
 8003576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800357a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357e:	d124      	bne.n	80035ca <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f002 fe9b 	bl	80062c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f001 ff03 	bl	800539a <USB_GetDevSpeed>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681c      	ldr	r4, [r3, #0]
 80035a0:	f001 f92c 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 80035a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	4620      	mov	r0, r4
 80035b0:	f001 fc22 	bl	8004df8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f004 fe20 	bl	80081fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80035c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f002 fdd5 	bl	800617e <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d10a      	bne.n	80035f4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f004 fdfd 	bl	80081de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f002 0208 	and.w	r2, r2, #8
 80035f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f002 fdc0 	bl	800617e <USB_ReadInterrupts>
 80035fe:	4603      	mov	r3, r0
 8003600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003608:	d10f      	bne.n	800362a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	b2db      	uxtb	r3, r3
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f004 fe55 	bl	80082c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f002 fda5 	bl	800617e <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800363e:	d10f      	bne.n	8003660 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	b2db      	uxtb	r3, r3
 8003648:	4619      	mov	r1, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f004 fe28 	bl	80082a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800365e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f002 fd8a 	bl	800617e <USB_ReadInterrupts>
 800366a:	4603      	mov	r3, r0
 800366c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003674:	d10a      	bne.n	800368c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f004 fe36 	bl	80082e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800368a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f002 fd74 	bl	800617e <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b04      	cmp	r3, #4
 800369e:	d115      	bne.n	80036cc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f004 fe26 	bl	8008304 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	e000      	b.n	80036cc <HAL_PCD_IRQHandler+0x75e>
      return;
 80036ca:	bf00      	nop
    }
  }
}
 80036cc:	3734      	adds	r7, #52	; 0x34
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd90      	pop	{r4, r7, pc}

080036d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_PCD_SetAddress+0x1a>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e013      	b.n	8003714 <HAL_PCD_SetAddress+0x42>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f002 fcd2 	bl	80060ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	4608      	mov	r0, r1
 8003726:	4611      	mov	r1, r2
 8003728:	461a      	mov	r2, r3
 800372a:	4603      	mov	r3, r0
 800372c:	70fb      	strb	r3, [r7, #3]
 800372e:	460b      	mov	r3, r1
 8003730:	803b      	strh	r3, [r7, #0]
 8003732:	4613      	mov	r3, r2
 8003734:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800373a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800373e:	2b00      	cmp	r3, #0
 8003740:	da0f      	bge.n	8003762 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	3338      	adds	r3, #56	; 0x38
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	3304      	adds	r3, #4
 8003758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	705a      	strb	r2, [r3, #1]
 8003760:	e00f      	b.n	8003782 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 020f 	and.w	r2, r3, #15
 8003768:	4613      	mov	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	3304      	adds	r3, #4
 800377a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	b2da      	uxtb	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800378e:	883a      	ldrh	r2, [r7, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	78ba      	ldrb	r2, [r7, #2]
 8003798:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	785b      	ldrb	r3, [r3, #1]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d004      	beq.n	80037ac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037ac:	78bb      	ldrb	r3, [r7, #2]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d102      	bne.n	80037b8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_PCD_EP_Open+0xaa>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e00e      	b.n	80037e4 <HAL_PCD_EP_Open+0xc8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68f9      	ldr	r1, [r7, #12]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 fe05 	bl	80053e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80037e2:	7afb      	ldrb	r3, [r7, #11]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	da0f      	bge.n	8003820 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	3338      	adds	r3, #56	; 0x38
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	4413      	add	r3, r2
 8003814:	3304      	adds	r3, #4
 8003816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	705a      	strb	r2, [r3, #1]
 800381e:	e00f      	b.n	8003840 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	f003 020f 	and.w	r2, r3, #15
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	3304      	adds	r3, #4
 8003838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_PCD_EP_Close+0x6e>
 8003856:	2302      	movs	r3, #2
 8003858:	e00e      	b.n	8003878 <HAL_PCD_EP_Close+0x8c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	4618      	mov	r0, r3
 800386a:	f001 fe43 	bl	80054f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	460b      	mov	r3, r1
 800388e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003890:	7afb      	ldrb	r3, [r7, #11]
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2200      	movs	r2, #0
 80038ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2200      	movs	r2, #0
 80038c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038c2:	7afb      	ldrb	r3, [r7, #11]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d102      	bne.n	80038dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038dc:	7afb      	ldrb	r3, [r7, #11]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	6979      	ldr	r1, [r7, #20]
 80038f4:	f002 f91e 	bl	8005b34 <USB_EP0StartXfer>
 80038f8:	e008      	b.n	800390c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	6979      	ldr	r1, [r7, #20]
 8003908:	f001 fed0 	bl	80056ac <USB_EPStartXfer>
  }

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	f003 020f 	and.w	r2, r3, #15
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003938:	681b      	ldr	r3, [r3, #0]
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	460b      	mov	r3, r1
 8003954:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003956:	7afb      	ldrb	r3, [r7, #11]
 8003958:	f003 020f 	and.w	r2, r3, #15
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	3338      	adds	r3, #56	; 0x38
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	3304      	adds	r3, #4
 800396c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2201      	movs	r2, #1
 8003984:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003986:	7afb      	ldrb	r3, [r7, #11]
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	b2da      	uxtb	r2, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d102      	bne.n	80039a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039a0:	7afb      	ldrb	r3, [r7, #11]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	6979      	ldr	r1, [r7, #20]
 80039b8:	f002 f8bc 	bl	8005b34 <USB_EP0StartXfer>
 80039bc:	e008      	b.n	80039d0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	6979      	ldr	r1, [r7, #20]
 80039cc:	f001 fe6e 	bl	80056ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039e6:	78fb      	ldrb	r3, [r7, #3]
 80039e8:	f003 020f 	and.w	r2, r3, #15
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d901      	bls.n	80039f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e050      	b.n	8003a9a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	da0f      	bge.n	8003a20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	f003 020f 	and.w	r2, r3, #15
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	3338      	adds	r3, #56	; 0x38
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	3304      	adds	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	705a      	strb	r2, [r3, #1]
 8003a1e:	e00d      	b.n	8003a3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	4613      	mov	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	3304      	adds	r3, #4
 8003a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_PCD_EP_SetStall+0x82>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e01e      	b.n	8003a9a <HAL_PCD_EP_SetStall+0xc0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f002 fa4b 	bl	8005f06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	b2d9      	uxtb	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f002 fc3c 	bl	8006308 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f003 020f 	and.w	r2, r3, #15
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d901      	bls.n	8003ac0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e042      	b.n	8003b46 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	da0f      	bge.n	8003ae8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	f003 020f 	and.w	r2, r3, #15
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	3338      	adds	r3, #56	; 0x38
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	3304      	adds	r3, #4
 8003ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	705a      	strb	r2, [r3, #1]
 8003ae6:	e00f      	b.n	8003b08 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	f003 020f 	and.w	r2, r3, #15
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	3304      	adds	r3, #4
 8003b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_PCD_EP_ClrStall+0x86>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e00e      	b.n	8003b46 <HAL_PCD_EP_ClrStall+0xa4>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68f9      	ldr	r1, [r7, #12]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f002 fa53 	bl	8005fe2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b08a      	sub	sp, #40	; 0x28
 8003b52:	af02      	add	r7, sp, #8
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	3338      	adds	r3, #56	; 0x38
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	3304      	adds	r3, #4
 8003b74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d901      	bls.n	8003b86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e06c      	b.n	8003c60 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d902      	bls.n	8003ba2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3303      	adds	r3, #3
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003baa:	e02b      	b.n	8003c04 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d902      	bls.n	8003bc8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	3303      	adds	r3, #3
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68d9      	ldr	r1, [r3, #12]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	4603      	mov	r3, r0
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f002 f8f7 	bl	8005dda <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	441a      	add	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	441a      	add	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d809      	bhi.n	8003c2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d203      	bcs.n	8003c2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1be      	bne.n	8003bac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d811      	bhi.n	8003c5e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	2201      	movs	r2, #1
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	43db      	mvns	r3, r3
 8003c54:	6939      	ldr	r1, [r7, #16]
 8003c56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	333c      	adds	r3, #60	; 0x3c
 8003c80:	3304      	adds	r3, #4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	f040 80a0 	bne.w	8003de0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d015      	beq.n	8003cd6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a72      	ldr	r2, [pc, #456]	; (8003e78 <PCD_EP_OutXfrComplete_int+0x210>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	f240 80dd 	bls.w	8003e6e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80d7 	beq.w	8003e6e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd2:	6093      	str	r3, [r2, #8]
 8003cd4:	e0cb      	b.n	8003e6e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d009      	beq.n	8003cf4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cec:	461a      	mov	r2, r3
 8003cee:	2320      	movs	r3, #32
 8003cf0:	6093      	str	r3, [r2, #8]
 8003cf2:	e0bc      	b.n	8003e6e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 80b7 	bne.w	8003e6e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a5d      	ldr	r2, [pc, #372]	; (8003e78 <PCD_EP_OutXfrComplete_int+0x210>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d90f      	bls.n	8003d28 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d24:	6093      	str	r3, [r2, #8]
 8003d26:	e0a2      	b.n	8003e6e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d3a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	0159      	lsls	r1, r3, #5
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	440b      	add	r3, r1
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003d4e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4403      	add	r3, r0
 8003d5e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d62:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d76:	6819      	ldr	r1, [r3, #0]
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4403      	add	r3, r0
 8003d86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4419      	add	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	4613      	mov	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4403      	add	r3, r0
 8003d9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003da0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d114      	bne.n	8003dd2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d108      	bne.n	8003dd2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2101      	movs	r1, #1
 8003dce:	f002 fa9b 	bl	8006308 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f004 f9cb 	bl	8008174 <HAL_PCD_DataOutStageCallback>
 8003dde:	e046      	b.n	8003e6e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <PCD_EP_OutXfrComplete_int+0x214>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d124      	bne.n	8003e32 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e04:	6093      	str	r3, [r2, #8]
 8003e06:	e032      	b.n	8003e6e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2320      	movs	r3, #32
 8003e22:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f004 f9a2 	bl	8008174 <HAL_PCD_DataOutStageCallback>
 8003e30:	e01d      	b.n	8003e6e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d114      	bne.n	8003e62 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d108      	bne.n	8003e62 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	f002 fa53 	bl	8006308 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f004 f983 	bl	8008174 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	4f54300a 	.word	0x4f54300a
 8003e7c:	4f54310a 	.word	0x4f54310a

08003e80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	333c      	adds	r3, #60	; 0x3c
 8003e98:	3304      	adds	r3, #4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d90e      	bls.n	8003ed4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f004 f93b 	bl	8008150 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d90c      	bls.n	8003efc <PCD_EP_OutSetupPacket_int+0x7c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d108      	bne.n	8003efc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	f002 fa06 	bl	8006308 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	4f54300a 	.word	0x4f54300a

08003f0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d107      	bne.n	8003f3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f2a:	883b      	ldrh	r3, [r7, #0]
 8003f2c:	0419      	lsls	r1, r3, #16
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
 8003f38:	e028      	b.n	8003f8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	4413      	add	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	e00d      	b.n	8003f6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	3340      	adds	r3, #64	; 0x40
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	4413      	add	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	3301      	adds	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
 8003f6a:	7bfa      	ldrb	r2, [r7, #15]
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d3ec      	bcc.n	8003f4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f74:	883b      	ldrh	r3, [r7, #0]
 8003f76:	0418      	lsls	r0, r3, #16
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6819      	ldr	r1, [r3, #0]
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	4302      	orrs	r2, r0
 8003f84:	3340      	adds	r3, #64	; 0x40
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	887a      	ldrh	r2, [r7, #2]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e264      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d075      	beq.n	80040de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ff2:	4ba3      	ldr	r3, [pc, #652]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d00c      	beq.n	8004018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffe:	4ba0      	ldr	r3, [pc, #640]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004006:	2b08      	cmp	r3, #8
 8004008:	d112      	bne.n	8004030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800400a:	4b9d      	ldr	r3, [pc, #628]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004016:	d10b      	bne.n	8004030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	4b99      	ldr	r3, [pc, #612]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d05b      	beq.n	80040dc <HAL_RCC_OscConfig+0x108>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d157      	bne.n	80040dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e23f      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004038:	d106      	bne.n	8004048 <HAL_RCC_OscConfig+0x74>
 800403a:	4b91      	ldr	r3, [pc, #580]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a90      	ldr	r2, [pc, #576]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e01d      	b.n	8004084 <HAL_RCC_OscConfig+0xb0>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x98>
 8004052:	4b8b      	ldr	r3, [pc, #556]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a8a      	ldr	r2, [pc, #552]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b88      	ldr	r3, [pc, #544]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a87      	ldr	r2, [pc, #540]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0xb0>
 800406c:	4b84      	ldr	r3, [pc, #528]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a83      	ldr	r2, [pc, #524]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4b81      	ldr	r3, [pc, #516]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a80      	ldr	r2, [pc, #512]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 800407e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fe fb26 	bl	80026dc <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004094:	f7fe fb22 	bl	80026dc <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e204      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a6:	4b76      	ldr	r3, [pc, #472]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0xc0>
 80040b2:	e014      	b.n	80040de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fe fb12 	bl	80026dc <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fe fb0e 	bl	80026dc <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	; 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e1f0      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ce:	4b6c      	ldr	r3, [pc, #432]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0xe8>
 80040da:	e000      	b.n	80040de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d063      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ea:	4b65      	ldr	r3, [pc, #404]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f6:	4b62      	ldr	r3, [pc, #392]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d11c      	bne.n	800413c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004102:	4b5f      	ldr	r3, [pc, #380]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d116      	bne.n	800413c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410e:	4b5c      	ldr	r3, [pc, #368]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_RCC_OscConfig+0x152>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d001      	beq.n	8004126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e1c4      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b56      	ldr	r3, [pc, #344]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4952      	ldr	r1, [pc, #328]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	e03a      	b.n	80041b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004144:	4b4f      	ldr	r3, [pc, #316]	; (8004284 <HAL_RCC_OscConfig+0x2b0>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fe fac7 	bl	80026dc <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004152:	f7fe fac3 	bl	80026dc <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e1a5      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004164:	4b46      	ldr	r3, [pc, #280]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004170:	4b43      	ldr	r3, [pc, #268]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4940      	ldr	r1, [pc, #256]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]
 8004184:	e015      	b.n	80041b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004186:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_OscConfig+0x2b0>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fe faa6 	bl	80026dc <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004194:	f7fe faa2 	bl	80026dc <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e184      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a6:	4b36      	ldr	r3, [pc, #216]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d030      	beq.n	8004220 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c6:	4b30      	ldr	r3, [pc, #192]	; (8004288 <HAL_RCC_OscConfig+0x2b4>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fe fa86 	bl	80026dc <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fe fa82 	bl	80026dc <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e164      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e6:	4b26      	ldr	r3, [pc, #152]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x200>
 80041f2:	e015      	b.n	8004220 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f4:	4b24      	ldr	r3, [pc, #144]	; (8004288 <HAL_RCC_OscConfig+0x2b4>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fa:	f7fe fa6f 	bl	80026dc <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004202:	f7fe fa6b 	bl	80026dc <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e14d      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f0      	bne.n	8004202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80a0 	beq.w	800436e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004232:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10f      	bne.n	800425e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	4a0e      	ldr	r2, [pc, #56]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424c:	6413      	str	r3, [r2, #64]	; 0x40
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800425a:	2301      	movs	r3, #1
 800425c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_OscConfig+0x2b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d121      	bne.n	80042ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <HAL_RCC_OscConfig+0x2b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <HAL_RCC_OscConfig+0x2b8>)
 8004270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004276:	f7fe fa31 	bl	80026dc <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427c:	e011      	b.n	80042a2 <HAL_RCC_OscConfig+0x2ce>
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
 8004284:	42470000 	.word	0x42470000
 8004288:	42470e80 	.word	0x42470e80
 800428c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004290:	f7fe fa24 	bl	80026dc <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e106      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a2:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <HAL_RCC_OscConfig+0x4e4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d106      	bne.n	80042c4 <HAL_RCC_OscConfig+0x2f0>
 80042b6:	4b81      	ldr	r3, [pc, #516]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a80      	ldr	r2, [pc, #512]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	e01c      	b.n	80042fe <HAL_RCC_OscConfig+0x32a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCC_OscConfig+0x312>
 80042cc:	4b7b      	ldr	r3, [pc, #492]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	4a7a      	ldr	r2, [pc, #488]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
 80042d8:	4b78      	ldr	r3, [pc, #480]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a77      	ldr	r2, [pc, #476]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
 80042e4:	e00b      	b.n	80042fe <HAL_RCC_OscConfig+0x32a>
 80042e6:	4b75      	ldr	r3, [pc, #468]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	4a74      	ldr	r2, [pc, #464]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	6713      	str	r3, [r2, #112]	; 0x70
 80042f2:	4b72      	ldr	r3, [pc, #456]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a71      	ldr	r2, [pc, #452]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d015      	beq.n	8004332 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fe f9e9 	bl	80026dc <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fe f9e5 	bl	80026dc <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0c5      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004324:	4b65      	ldr	r3, [pc, #404]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ee      	beq.n	800430e <HAL_RCC_OscConfig+0x33a>
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004332:	f7fe f9d3 	bl	80026dc <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fe f9cf 	bl	80026dc <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e0af      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004350:	4b5a      	ldr	r3, [pc, #360]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ee      	bne.n	800433a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004362:	4b56      	ldr	r3, [pc, #344]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a55      	ldr	r2, [pc, #340]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 8004368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 809b 	beq.w	80044ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004378:	4b50      	ldr	r3, [pc, #320]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d05c      	beq.n	800443e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d141      	bne.n	8004410 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438c:	4b4c      	ldr	r3, [pc, #304]	; (80044c0 <HAL_RCC_OscConfig+0x4ec>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fe f9a3 	bl	80026dc <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439a:	f7fe f99f 	bl	80026dc <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e081      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ac:	4b43      	ldr	r3, [pc, #268]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f0      	bne.n	800439a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69da      	ldr	r2, [r3, #28]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	019b      	lsls	r3, r3, #6
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	3b01      	subs	r3, #1
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	061b      	lsls	r3, r3, #24
 80043dc:	4937      	ldr	r1, [pc, #220]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e2:	4b37      	ldr	r3, [pc, #220]	; (80044c0 <HAL_RCC_OscConfig+0x4ec>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fe f978 	bl	80026dc <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fe f974 	bl	80026dc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e056      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	4b2e      	ldr	r3, [pc, #184]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x41c>
 800440e:	e04e      	b.n	80044ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004410:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <HAL_RCC_OscConfig+0x4ec>)
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004416:	f7fe f961 	bl	80026dc <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441e:	f7fe f95d 	bl	80026dc <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e03f      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004430:	4b22      	ldr	r3, [pc, #136]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <HAL_RCC_OscConfig+0x44a>
 800443c:	e037      	b.n	80044ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e032      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800444a:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <HAL_RCC_OscConfig+0x4e8>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d028      	beq.n	80044aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d121      	bne.n	80044aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004470:	429a      	cmp	r2, r3
 8004472:	d11a      	bne.n	80044aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800447a:	4013      	ands	r3, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004480:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004482:	4293      	cmp	r3, r2
 8004484:	d111      	bne.n	80044aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	3b01      	subs	r3, #1
 8004494:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004496:	429a      	cmp	r2, r3
 8004498:	d107      	bne.n	80044aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40007000 	.word	0x40007000
 80044bc:	40023800 	.word	0x40023800
 80044c0:	42470060 	.word	0x42470060

080044c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0cc      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d8:	4b68      	ldr	r3, [pc, #416]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d90c      	bls.n	8004500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b65      	ldr	r3, [pc, #404]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b63      	ldr	r3, [pc, #396]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0b8      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004518:	4b59      	ldr	r3, [pc, #356]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a58      	ldr	r2, [pc, #352]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004530:	4b53      	ldr	r3, [pc, #332]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a52      	ldr	r2, [pc, #328]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800453a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453c:	4b50      	ldr	r3, [pc, #320]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	494d      	ldr	r1, [pc, #308]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d044      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d107      	bne.n	8004572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b47      	ldr	r3, [pc, #284]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d119      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e07f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d003      	beq.n	8004582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800457e:	2b03      	cmp	r3, #3
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	4b3f      	ldr	r3, [pc, #252]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e06f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e067      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a2:	4b37      	ldr	r3, [pc, #220]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 0203 	bic.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4934      	ldr	r1, [pc, #208]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b4:	f7fe f892 	bl	80026dc <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045bc:	f7fe f88e 	bl	80026dc <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e04f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 020c 	and.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d1eb      	bne.n	80045bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e4:	4b25      	ldr	r3, [pc, #148]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d20c      	bcs.n	800460c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b22      	ldr	r3, [pc, #136]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fa:	4b20      	ldr	r3, [pc, #128]	; (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d001      	beq.n	800460c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e032      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4916      	ldr	r1, [pc, #88]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	490e      	ldr	r1, [pc, #56]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800464a:	f000 f821 	bl	8004690 <HAL_RCC_GetSysClockFreq>
 800464e:	4602      	mov	r2, r0
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	490a      	ldr	r1, [pc, #40]	; (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 800465c:	5ccb      	ldrb	r3, [r1, r3]
 800465e:	fa22 f303 	lsr.w	r3, r2, r3
 8004662:	4a09      	ldr	r2, [pc, #36]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004666:	4b09      	ldr	r3, [pc, #36]	; (800468c <HAL_RCC_ClockConfig+0x1c8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7fd fff2 	bl	8002654 <HAL_InitTick>

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40023c00 	.word	0x40023c00
 8004680:	40023800 	.word	0x40023800
 8004684:	08009a90 	.word	0x08009a90
 8004688:	20000000 	.word	0x20000000
 800468c:	20000004 	.word	0x20000004

08004690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004690:	b5b0      	push	{r4, r5, r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004696:	2100      	movs	r1, #0
 8004698:	6079      	str	r1, [r7, #4]
 800469a:	2100      	movs	r1, #0
 800469c:	60f9      	str	r1, [r7, #12]
 800469e:	2100      	movs	r1, #0
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046a2:	2100      	movs	r1, #0
 80046a4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a6:	4952      	ldr	r1, [pc, #328]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80046a8:	6889      	ldr	r1, [r1, #8]
 80046aa:	f001 010c 	and.w	r1, r1, #12
 80046ae:	2908      	cmp	r1, #8
 80046b0:	d00d      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0x3e>
 80046b2:	2908      	cmp	r1, #8
 80046b4:	f200 8094 	bhi.w	80047e0 <HAL_RCC_GetSysClockFreq+0x150>
 80046b8:	2900      	cmp	r1, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x32>
 80046bc:	2904      	cmp	r1, #4
 80046be:	d003      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x38>
 80046c0:	e08e      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046c2:	4b4c      	ldr	r3, [pc, #304]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80046c4:	60bb      	str	r3, [r7, #8]
       break;
 80046c6:	e08e      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046c8:	4b4b      	ldr	r3, [pc, #300]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80046ca:	60bb      	str	r3, [r7, #8]
      break;
 80046cc:	e08b      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ce:	4948      	ldr	r1, [pc, #288]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80046d0:	6849      	ldr	r1, [r1, #4]
 80046d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80046d6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046d8:	4945      	ldr	r1, [pc, #276]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80046da:	6849      	ldr	r1, [r1, #4]
 80046dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80046e0:	2900      	cmp	r1, #0
 80046e2:	d024      	beq.n	800472e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e4:	4942      	ldr	r1, [pc, #264]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80046e6:	6849      	ldr	r1, [r1, #4]
 80046e8:	0989      	lsrs	r1, r1, #6
 80046ea:	4608      	mov	r0, r1
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80046f4:	f04f 0500 	mov.w	r5, #0
 80046f8:	ea00 0204 	and.w	r2, r0, r4
 80046fc:	ea01 0305 	and.w	r3, r1, r5
 8004700:	493d      	ldr	r1, [pc, #244]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004702:	fb01 f003 	mul.w	r0, r1, r3
 8004706:	2100      	movs	r1, #0
 8004708:	fb01 f102 	mul.w	r1, r1, r2
 800470c:	1844      	adds	r4, r0, r1
 800470e:	493a      	ldr	r1, [pc, #232]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004710:	fba2 0101 	umull	r0, r1, r2, r1
 8004714:	1863      	adds	r3, r4, r1
 8004716:	4619      	mov	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	461a      	mov	r2, r3
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	f7fc fa54 	bl	8000bcc <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4613      	mov	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e04a      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800472e:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	099b      	lsrs	r3, r3, #6
 8004734:	461a      	mov	r2, r3
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800473e:	f04f 0100 	mov.w	r1, #0
 8004742:	ea02 0400 	and.w	r4, r2, r0
 8004746:	ea03 0501 	and.w	r5, r3, r1
 800474a:	4620      	mov	r0, r4
 800474c:	4629      	mov	r1, r5
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	014b      	lsls	r3, r1, #5
 8004758:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800475c:	0142      	lsls	r2, r0, #5
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	1b00      	subs	r0, r0, r4
 8004764:	eb61 0105 	sbc.w	r1, r1, r5
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	018b      	lsls	r3, r1, #6
 8004772:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004776:	0182      	lsls	r2, r0, #6
 8004778:	1a12      	subs	r2, r2, r0
 800477a:	eb63 0301 	sbc.w	r3, r3, r1
 800477e:	f04f 0000 	mov.w	r0, #0
 8004782:	f04f 0100 	mov.w	r1, #0
 8004786:	00d9      	lsls	r1, r3, #3
 8004788:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800478c:	00d0      	lsls	r0, r2, #3
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	1912      	adds	r2, r2, r4
 8004794:	eb45 0303 	adc.w	r3, r5, r3
 8004798:	f04f 0000 	mov.w	r0, #0
 800479c:	f04f 0100 	mov.w	r1, #0
 80047a0:	0299      	lsls	r1, r3, #10
 80047a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047a6:	0290      	lsls	r0, r2, #10
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	f7fc fa08 	bl	8000bcc <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4613      	mov	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047c4:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	0c1b      	lsrs	r3, r3, #16
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	3301      	adds	r3, #1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	60bb      	str	r3, [r7, #8]
      break;
 80047de:	e002      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047e0:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80047e2:	60bb      	str	r3, [r7, #8]
      break;
 80047e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047e6:	68bb      	ldr	r3, [r7, #8]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bdb0      	pop	{r4, r5, r7, pc}
 80047f0:	40023800 	.word	0x40023800
 80047f4:	00f42400 	.word	0x00f42400
 80047f8:	017d7840 	.word	0x017d7840

080047fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004800:	4b03      	ldr	r3, [pc, #12]	; (8004810 <HAL_RCC_GetHCLKFreq+0x14>)
 8004802:	681b      	ldr	r3, [r3, #0]
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000000 	.word	0x20000000

08004814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07b      	b.n	800491e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d108      	bne.n	8004840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004836:	d009      	beq.n	800484c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	61da      	str	r2, [r3, #28]
 800483e:	e005      	b.n	800484c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd fdbc 	bl	80023e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004882:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d0:	ea42 0103 	orr.w	r1, r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	f003 0104 	and.w	r1, r3, #4
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	f003 0210 	and.w	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800490c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b088      	sub	sp, #32
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_SPI_Transmit+0x22>
 8004944:	2302      	movs	r3, #2
 8004946:	e126      	b.n	8004b96 <HAL_SPI_Transmit+0x270>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004950:	f7fd fec4 	bl	80026dc <HAL_GetTick>
 8004954:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	d002      	beq.n	800496c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004966:	2302      	movs	r3, #2
 8004968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800496a:	e10b      	b.n	8004b84 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0x52>
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800497c:	e102      	b.n	8004b84 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2203      	movs	r2, #3
 8004982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c4:	d10f      	bne.n	80049e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d007      	beq.n	8004a04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0c:	d14b      	bne.n	8004aa6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_SPI_Transmit+0xf6>
 8004a16:	8afb      	ldrh	r3, [r7, #22]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d13e      	bne.n	8004a9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	881a      	ldrh	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	1c9a      	adds	r2, r3, #2
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a40:	e02b      	b.n	8004a9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d112      	bne.n	8004a76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	881a      	ldrh	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	1c9a      	adds	r2, r3, #2
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a74:	e011      	b.n	8004a9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a76:	f7fd fe31 	bl	80026dc <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d803      	bhi.n	8004a8e <HAL_SPI_Transmit+0x168>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d102      	bne.n	8004a94 <HAL_SPI_Transmit+0x16e>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d102      	bne.n	8004a9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a98:	e074      	b.n	8004b84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1ce      	bne.n	8004a42 <HAL_SPI_Transmit+0x11c>
 8004aa4:	e04c      	b.n	8004b40 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_Transmit+0x18e>
 8004aae:	8afb      	ldrh	r3, [r7, #22]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d140      	bne.n	8004b36 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	7812      	ldrb	r2, [r2, #0]
 8004ac0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ada:	e02c      	b.n	8004b36 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d113      	bne.n	8004b12 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b10:	e011      	b.n	8004b36 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b12:	f7fd fde3 	bl	80026dc <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d803      	bhi.n	8004b2a <HAL_SPI_Transmit+0x204>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d102      	bne.n	8004b30 <HAL_SPI_Transmit+0x20a>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b34:	e026      	b.n	8004b84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1cd      	bne.n	8004adc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	6839      	ldr	r1, [r7, #0]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f8b3 	bl	8004cb0 <SPI_EndRxTxTransaction>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e000      	b.n	8004b84 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b94:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	4613      	mov	r3, r2
 8004bae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bb0:	f7fd fd94 	bl	80026dc <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bc0:	f7fd fd8c 	bl	80026dc <HAL_GetTick>
 8004bc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bc6:	4b39      	ldr	r3, [pc, #228]	; (8004cac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	015b      	lsls	r3, r3, #5
 8004bcc:	0d1b      	lsrs	r3, r3, #20
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	fb02 f303 	mul.w	r3, r2, r3
 8004bd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bd6:	e054      	b.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d050      	beq.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004be0:	f7fd fd7c 	bl	80026dc <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d902      	bls.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d13d      	bne.n	8004c72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0e:	d111      	bne.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c18:	d004      	beq.n	8004c24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c22:	d107      	bne.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3c:	d10f      	bne.n	8004c5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e017      	b.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d19b      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3720      	adds	r7, #32
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000000 	.word	0x20000000

08004cb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <SPI_EndRxTxTransaction+0x7c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <SPI_EndRxTxTransaction+0x80>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	0d5b      	lsrs	r3, r3, #21
 8004cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cda:	d112      	bne.n	8004d02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7ff ff5a 	bl	8004ba0 <SPI_WaitFlagStateUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f043 0220 	orr.w	r2, r3, #32
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e00f      	b.n	8004d22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d18:	2b80      	cmp	r3, #128	; 0x80
 8004d1a:	d0f2      	beq.n	8004d02 <SPI_EndRxTxTransaction+0x52>
 8004d1c:	e000      	b.n	8004d20 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d1e:	bf00      	nop
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000000 	.word	0x20000000
 8004d30:	165e9f81 	.word	0x165e9f81

08004d34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d34:	b084      	sub	sp, #16
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	f107 001c 	add.w	r0, r7, #28
 8004d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d122      	bne.n	8004d92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d105      	bne.n	8004d86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f001 fb1c 	bl	80063c4 <USB_CoreReset>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	73fb      	strb	r3, [r7, #15]
 8004d90:	e01a      	b.n	8004dc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f001 fb10 	bl	80063c4 <USB_CoreReset>
 8004da4:	4603      	mov	r3, r0
 8004da6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
 8004dba:	e005      	b.n	8004dc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10b      	bne.n	8004de6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f043 0206 	orr.w	r2, r3, #6
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004df2:	b004      	add	sp, #16
 8004df4:	4770      	bx	lr
	...

08004df8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d165      	bne.n	8004ed8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4a41      	ldr	r2, [pc, #260]	; (8004f14 <USB_SetTurnaroundTime+0x11c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d906      	bls.n	8004e22 <USB_SetTurnaroundTime+0x2a>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4a40      	ldr	r2, [pc, #256]	; (8004f18 <USB_SetTurnaroundTime+0x120>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d202      	bcs.n	8004e22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e1c:	230f      	movs	r3, #15
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e062      	b.n	8004ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	4a3c      	ldr	r2, [pc, #240]	; (8004f18 <USB_SetTurnaroundTime+0x120>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d306      	bcc.n	8004e38 <USB_SetTurnaroundTime+0x40>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4a3b      	ldr	r2, [pc, #236]	; (8004f1c <USB_SetTurnaroundTime+0x124>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d202      	bcs.n	8004e38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e32:	230e      	movs	r3, #14
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e057      	b.n	8004ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a38      	ldr	r2, [pc, #224]	; (8004f1c <USB_SetTurnaroundTime+0x124>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d306      	bcc.n	8004e4e <USB_SetTurnaroundTime+0x56>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4a37      	ldr	r2, [pc, #220]	; (8004f20 <USB_SetTurnaroundTime+0x128>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d202      	bcs.n	8004e4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e48:	230d      	movs	r3, #13
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e04c      	b.n	8004ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4a33      	ldr	r2, [pc, #204]	; (8004f20 <USB_SetTurnaroundTime+0x128>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d306      	bcc.n	8004e64 <USB_SetTurnaroundTime+0x6c>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4a32      	ldr	r2, [pc, #200]	; (8004f24 <USB_SetTurnaroundTime+0x12c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d802      	bhi.n	8004e64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e5e:	230c      	movs	r3, #12
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e041      	b.n	8004ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4a2f      	ldr	r2, [pc, #188]	; (8004f24 <USB_SetTurnaroundTime+0x12c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d906      	bls.n	8004e7a <USB_SetTurnaroundTime+0x82>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4a2e      	ldr	r2, [pc, #184]	; (8004f28 <USB_SetTurnaroundTime+0x130>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d802      	bhi.n	8004e7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e74:	230b      	movs	r3, #11
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	e036      	b.n	8004ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4a2a      	ldr	r2, [pc, #168]	; (8004f28 <USB_SetTurnaroundTime+0x130>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d906      	bls.n	8004e90 <USB_SetTurnaroundTime+0x98>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4a29      	ldr	r2, [pc, #164]	; (8004f2c <USB_SetTurnaroundTime+0x134>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d802      	bhi.n	8004e90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e8a:	230a      	movs	r3, #10
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e02b      	b.n	8004ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <USB_SetTurnaroundTime+0x134>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d906      	bls.n	8004ea6 <USB_SetTurnaroundTime+0xae>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4a25      	ldr	r2, [pc, #148]	; (8004f30 <USB_SetTurnaroundTime+0x138>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d202      	bcs.n	8004ea6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ea0:	2309      	movs	r3, #9
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	e020      	b.n	8004ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4a21      	ldr	r2, [pc, #132]	; (8004f30 <USB_SetTurnaroundTime+0x138>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d306      	bcc.n	8004ebc <USB_SetTurnaroundTime+0xc4>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4a20      	ldr	r2, [pc, #128]	; (8004f34 <USB_SetTurnaroundTime+0x13c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d802      	bhi.n	8004ebc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e015      	b.n	8004ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <USB_SetTurnaroundTime+0x13c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d906      	bls.n	8004ed2 <USB_SetTurnaroundTime+0xda>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <USB_SetTurnaroundTime+0x140>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d202      	bcs.n	8004ed2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ecc:	2307      	movs	r3, #7
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e00a      	b.n	8004ee8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ed2:	2306      	movs	r3, #6
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	e007      	b.n	8004ee8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ede:	2309      	movs	r3, #9
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e001      	b.n	8004ee8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ee4:	2309      	movs	r3, #9
 8004ee6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	029b      	lsls	r3, r3, #10
 8004efc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	00d8acbf 	.word	0x00d8acbf
 8004f18:	00e4e1c0 	.word	0x00e4e1c0
 8004f1c:	00f42400 	.word	0x00f42400
 8004f20:	01067380 	.word	0x01067380
 8004f24:	011a499f 	.word	0x011a499f
 8004f28:	01312cff 	.word	0x01312cff
 8004f2c:	014ca43f 	.word	0x014ca43f
 8004f30:	016e3600 	.word	0x016e3600
 8004f34:	01a6ab1f 	.word	0x01a6ab1f
 8004f38:	01e84800 	.word	0x01e84800

08004f3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f043 0201 	orr.w	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f023 0201 	bic.w	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d115      	bne.n	8004fce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fae:	2001      	movs	r0, #1
 8004fb0:	f7fd fba0 	bl	80026f4 <HAL_Delay>
      ms++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f001 f972 	bl	80062a4 <USB_GetMode>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d01e      	beq.n	8005004 <USB_SetCurrentMode+0x84>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b31      	cmp	r3, #49	; 0x31
 8004fca:	d9f0      	bls.n	8004fae <USB_SetCurrentMode+0x2e>
 8004fcc:	e01a      	b.n	8005004 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d115      	bne.n	8005000 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f7fd fb87 	bl	80026f4 <HAL_Delay>
      ms++;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f001 f959 	bl	80062a4 <USB_GetMode>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <USB_SetCurrentMode+0x84>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b31      	cmp	r3, #49	; 0x31
 8004ffc:	d9f0      	bls.n	8004fe0 <USB_SetCurrentMode+0x60>
 8004ffe:	e001      	b.n	8005004 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e005      	b.n	8005010 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b32      	cmp	r3, #50	; 0x32
 8005008:	d101      	bne.n	800500e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005018:	b084      	sub	sp, #16
 800501a:	b580      	push	{r7, lr}
 800501c:	b086      	sub	sp, #24
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	e009      	b.n	800504c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	3340      	adds	r3, #64	; 0x40
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	2200      	movs	r2, #0
 8005044:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3301      	adds	r3, #1
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b0e      	cmp	r3, #14
 8005050:	d9f2      	bls.n	8005038 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11c      	bne.n	8005092 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005066:	f043 0302 	orr.w	r3, r3, #2
 800506a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005088:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
 8005090:	e00b      	b.n	80050aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050b0:	461a      	mov	r2, r3
 80050b2:	2300      	movs	r3, #0
 80050b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	4619      	mov	r1, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c4:	461a      	mov	r2, r3
 80050c6:	680b      	ldr	r3, [r1, #0]
 80050c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d10c      	bne.n	80050ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050d6:	2100      	movs	r1, #0
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f945 	bl	8005368 <USB_SetDevSpeed>
 80050de:	e008      	b.n	80050f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050e0:	2101      	movs	r1, #1
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f940 	bl	8005368 <USB_SetDevSpeed>
 80050e8:	e003      	b.n	80050f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050ea:	2103      	movs	r1, #3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f93b 	bl	8005368 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050f2:	2110      	movs	r1, #16
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f8f3 	bl	80052e0 <USB_FlushTxFifo>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f90f 	bl	8005328 <USB_FlushRxFifo>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511a:	461a      	mov	r2, r3
 800511c:	2300      	movs	r3, #0
 800511e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	461a      	mov	r2, r3
 8005128:	2300      	movs	r3, #0
 800512a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005132:	461a      	mov	r2, r3
 8005134:	2300      	movs	r3, #0
 8005136:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	e043      	b.n	80051c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005154:	d118      	bne.n	8005188 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	461a      	mov	r2, r3
 800516a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	e013      	b.n	800519a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	461a      	mov	r2, r3
 8005180:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e008      	b.n	800519a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	461a      	mov	r2, r3
 8005196:	2300      	movs	r3, #0
 8005198:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	461a      	mov	r2, r3
 80051a8:	2300      	movs	r3, #0
 80051aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	461a      	mov	r2, r3
 80051ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	3301      	adds	r3, #1
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d3b7      	bcc.n	800513e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e043      	b.n	800525c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ea:	d118      	bne.n	800521e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fe:	461a      	mov	r2, r3
 8005200:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	e013      	b.n	8005230 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	461a      	mov	r2, r3
 8005216:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	e008      	b.n	8005230 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	461a      	mov	r2, r3
 800522c:	2300      	movs	r3, #0
 800522e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	461a      	mov	r2, r3
 800523e:	2300      	movs	r3, #0
 8005240:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	461a      	mov	r2, r3
 8005250:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005254:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	3301      	adds	r3, #1
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	429a      	cmp	r2, r3
 8005262:	d3b7      	bcc.n	80051d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005272:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005276:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005284:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	2b00      	cmp	r3, #0
 800528a:	d105      	bne.n	8005298 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f043 0210 	orr.w	r2, r3, #16
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699a      	ldr	r2, [r3, #24]
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <USB_DevInit+0x2c4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f043 0208 	orr.w	r2, r3, #8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d107      	bne.n	80052cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c4:	f043 0304 	orr.w	r3, r3, #4
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d8:	b004      	add	sp, #16
 80052da:	4770      	bx	lr
 80052dc:	803c3800 	.word	0x803c3800

080052e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	019b      	lsls	r3, r3, #6
 80052f2:	f043 0220 	orr.w	r2, r3, #32
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	4a08      	ldr	r2, [pc, #32]	; (8005324 <USB_FlushTxFifo+0x44>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e006      	b.n	8005318 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b20      	cmp	r3, #32
 8005314:	d0f1      	beq.n	80052fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	00030d40 	.word	0x00030d40

08005328 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2210      	movs	r2, #16
 8005338:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3301      	adds	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <USB_FlushRxFifo+0x3c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e006      	b.n	8005358 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b10      	cmp	r3, #16
 8005354:	d0f1      	beq.n	800533a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	00030d40 	.word	0x00030d40

08005368 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800539a:	b480      	push	{r7}
 800539c:	b087      	sub	sp, #28
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0306 	and.w	r3, r3, #6
 80053b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d102      	bne.n	80053c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]
 80053be:	e00a      	b.n	80053d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d002      	beq.n	80053cc <USB_GetDevSpeed+0x32>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d102      	bne.n	80053d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053cc:	2302      	movs	r3, #2
 80053ce:	75fb      	strb	r3, [r7, #23]
 80053d0:	e001      	b.n	80053d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053d2:	230f      	movs	r3, #15
 80053d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d13a      	bne.n	8005476 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	2101      	movs	r1, #1
 8005412:	fa01 f303 	lsl.w	r3, r1, r3
 8005416:	b29b      	uxth	r3, r3
 8005418:	68f9      	ldr	r1, [r7, #12]
 800541a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800541e:	4313      	orrs	r3, r2
 8005420:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d155      	bne.n	80054e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	78db      	ldrb	r3, [r3, #3]
 8005452:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005454:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	059b      	lsls	r3, r3, #22
 800545a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800545c:	4313      	orrs	r3, r2
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	e036      	b.n	80054e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547c:	69da      	ldr	r2, [r3, #28]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	2101      	movs	r1, #1
 8005488:	fa01 f303 	lsl.w	r3, r1, r3
 800548c:	041b      	lsls	r3, r3, #16
 800548e:	68f9      	ldr	r1, [r7, #12]
 8005490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005494:	4313      	orrs	r3, r2
 8005496:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11a      	bne.n	80054e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	78db      	ldrb	r3, [r3, #3]
 80054c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054ca:	430b      	orrs	r3, r1
 80054cc:	4313      	orrs	r3, r2
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d161      	bne.n	80055d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005526:	d11f      	bne.n	8005568 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	440a      	add	r2, r1
 800553e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005546:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005566:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	2101      	movs	r1, #1
 800557a:	fa01 f303 	lsl.w	r3, r1, r3
 800557e:	b29b      	uxth	r3, r3
 8005580:	43db      	mvns	r3, r3
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005588:	4013      	ands	r3, r2
 800558a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	2101      	movs	r1, #1
 800559e:	fa01 f303 	lsl.w	r3, r1, r3
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ac:	4013      	ands	r3, r2
 80055ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	0159      	lsls	r1, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	440b      	add	r3, r1
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	4619      	mov	r1, r3
 80055cc:	4b35      	ldr	r3, [pc, #212]	; (80056a4 <USB_DeactivateEndpoint+0x1b0>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]
 80055d2:	e060      	b.n	8005696 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ea:	d11f      	bne.n	800562c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	440a      	add	r2, r1
 8005602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005606:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800560a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005626:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800562a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	2101      	movs	r1, #1
 800563e:	fa01 f303 	lsl.w	r3, r1, r3
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	43db      	mvns	r3, r3
 8005646:	68f9      	ldr	r1, [r7, #12]
 8005648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800564c:	4013      	ands	r3, r2
 800564e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	2101      	movs	r1, #1
 8005662:	fa01 f303 	lsl.w	r3, r1, r3
 8005666:	041b      	lsls	r3, r3, #16
 8005668:	43db      	mvns	r3, r3
 800566a:	68f9      	ldr	r1, [r7, #12]
 800566c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005670:	4013      	ands	r3, r2
 8005672:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	0159      	lsls	r1, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	440b      	add	r3, r1
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	4619      	mov	r1, r3
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <USB_DeactivateEndpoint+0x1b4>)
 8005692:	4013      	ands	r3, r2
 8005694:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	ec337800 	.word	0xec337800
 80056a8:	eff37800 	.word	0xeff37800

080056ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	; 0x28
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	f040 815c 	bne.w	8005986 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d132      	bne.n	800573c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005714:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005718:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	0151      	lsls	r1, r2, #5
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	440a      	add	r2, r1
 8005730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005734:	0cdb      	lsrs	r3, r3, #19
 8005736:	04db      	lsls	r3, r3, #19
 8005738:	6113      	str	r3, [r2, #16]
 800573a:	e074      	b.n	8005826 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005756:	0cdb      	lsrs	r3, r3, #19
 8005758:	04db      	lsls	r3, r3, #19
 800575a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	69fa      	ldr	r2, [r7, #28]
 8005770:	440a      	add	r2, r1
 8005772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005776:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800577a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800577e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6959      	ldr	r1, [r3, #20]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	440b      	add	r3, r1
 8005798:	1e59      	subs	r1, r3, #1
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	fbb1 f3f3 	udiv	r3, r1, r3
 80057a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057a4:	4b9d      	ldr	r3, [pc, #628]	; (8005a1c <USB_EPStartXfer+0x370>)
 80057a6:	400b      	ands	r3, r1
 80057a8:	69b9      	ldr	r1, [r7, #24]
 80057aa:	0148      	lsls	r0, r1, #5
 80057ac:	69f9      	ldr	r1, [r7, #28]
 80057ae:	4401      	add	r1, r0
 80057b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057b4:	4313      	orrs	r3, r2
 80057b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ce:	69b9      	ldr	r1, [r7, #24]
 80057d0:	0148      	lsls	r0, r1, #5
 80057d2:	69f9      	ldr	r1, [r7, #28]
 80057d4:	4401      	add	r1, r0
 80057d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057da:	4313      	orrs	r3, r2
 80057dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	78db      	ldrb	r3, [r3, #3]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d11f      	bne.n	8005826 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005800:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005804:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005820:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005824:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d14b      	bne.n	80058c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	461a      	mov	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	78db      	ldrb	r3, [r3, #3]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d128      	bne.n	80058a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d110      	bne.n	8005882 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	440a      	add	r2, r1
 8005876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	e00f      	b.n	80058a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	440a      	add	r2, r1
 8005898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	e12f      	b.n	8005b24 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d015      	beq.n	8005918 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 8117 	beq.w	8005b24 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	2101      	movs	r1, #1
 8005908:	fa01 f303 	lsl.w	r3, r1, r3
 800590c:	69f9      	ldr	r1, [r7, #28]
 800590e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005912:	4313      	orrs	r3, r2
 8005914:	634b      	str	r3, [r1, #52]	; 0x34
 8005916:	e105      	b.n	8005b24 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d110      	bne.n	800594a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	e00f      	b.n	800596a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005968:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	68d9      	ldr	r1, [r3, #12]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	b298      	uxth	r0, r3
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	4603      	mov	r3, r0
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fa2b 	bl	8005dda <USB_WritePacket>
 8005984:	e0ce      	b.n	8005b24 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	440a      	add	r2, r1
 800599c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a0:	0cdb      	lsrs	r3, r3, #19
 80059a2:	04db      	lsls	r3, r3, #19
 80059a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d126      	bne.n	8005a20 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e8:	69b9      	ldr	r1, [r7, #24]
 80059ea:	0148      	lsls	r0, r1, #5
 80059ec:	69f9      	ldr	r1, [r7, #28]
 80059ee:	4401      	add	r1, r0
 80059f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059f4:	4313      	orrs	r3, r2
 80059f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a16:	6113      	str	r3, [r2, #16]
 8005a18:	e036      	b.n	8005a88 <USB_EPStartXfer+0x3dc>
 8005a1a:	bf00      	nop
 8005a1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	695a      	ldr	r2, [r3, #20]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4413      	add	r3, r2
 8005a2a:	1e5a      	subs	r2, r3, #1
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a34:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	8afb      	ldrh	r3, [r7, #22]
 8005a46:	04d9      	lsls	r1, r3, #19
 8005a48:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <USB_EPStartXfer+0x484>)
 8005a4a:	400b      	ands	r3, r1
 8005a4c:	69b9      	ldr	r1, [r7, #24]
 8005a4e:	0148      	lsls	r0, r1, #5
 8005a50:	69f9      	ldr	r1, [r7, #28]
 8005a52:	4401      	add	r1, r0
 8005a54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	8af9      	ldrh	r1, [r7, #22]
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a78:	69b9      	ldr	r1, [r7, #24]
 8005a7a:	0148      	lsls	r0, r1, #5
 8005a7c:	69f9      	ldr	r1, [r7, #28]
 8005a7e:	4401      	add	r1, r0
 8005a80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a84:	4313      	orrs	r3, r2
 8005a86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d10d      	bne.n	8005aaa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	68d9      	ldr	r1, [r3, #12]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa6:	460a      	mov	r2, r1
 8005aa8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	78db      	ldrb	r3, [r3, #3]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d128      	bne.n	8005b04 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d110      	bne.n	8005ae4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005adc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	e00f      	b.n	8005b04 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	1ff80000 	.word	0x1ff80000

08005b34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	f040 80cd 	bne.w	8005cf0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d132      	bne.n	8005bc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	0151      	lsls	r1, r2, #5
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	440a      	add	r2, r1
 8005b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ba0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbc:	0cdb      	lsrs	r3, r3, #19
 8005bbe:	04db      	lsls	r3, r3, #19
 8005bc0:	6113      	str	r3, [r2, #16]
 8005bc2:	e04e      	b.n	8005c62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	0151      	lsls	r1, r2, #5
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	440a      	add	r2, r1
 8005bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bde:	0cdb      	lsrs	r3, r3, #19
 8005be0:	04db      	lsls	r3, r3, #19
 8005be2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d903      	bls.n	8005c1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c52:	6939      	ldr	r1, [r7, #16]
 8005c54:	0148      	lsls	r0, r1, #5
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	4401      	add	r1, r0
 8005c5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d11e      	bne.n	8005ca6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	e092      	b.n	8005dcc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d07e      	beq.n	8005dcc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	2101      	movs	r1, #1
 8005ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce4:	6979      	ldr	r1, [r7, #20]
 8005ce6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cea:	4313      	orrs	r3, r2
 8005cec:	634b      	str	r3, [r1, #52]	; 0x34
 8005cee:	e06d      	b.n	8005dcc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0a:	0cdb      	lsrs	r3, r3, #19
 8005d0c:	04db      	lsls	r3, r3, #19
 8005d0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d32:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d7a:	6939      	ldr	r1, [r7, #16]
 8005d7c:	0148      	lsls	r0, r1, #5
 8005d7e:	6979      	ldr	r1, [r7, #20]
 8005d80:	4401      	add	r1, r0
 8005d82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d86:	4313      	orrs	r3, r2
 8005d88:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10d      	bne.n	8005dac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d009      	beq.n	8005dac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	68d9      	ldr	r1, [r3, #12]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	460a      	mov	r2, r1
 8005daa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b089      	sub	sp, #36	; 0x24
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	4611      	mov	r1, r2
 8005de6:	461a      	mov	r2, r3
 8005de8:	460b      	mov	r3, r1
 8005dea:	71fb      	strb	r3, [r7, #7]
 8005dec:	4613      	mov	r3, r2
 8005dee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005df8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d123      	bne.n	8005e48 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e00:	88bb      	ldrh	r3, [r7, #4]
 8005e02:	3303      	adds	r3, #3
 8005e04:	089b      	lsrs	r3, r3, #2
 8005e06:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	e018      	b.n	8005e40 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	031a      	lsls	r2, r3, #12
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	3301      	adds	r3, #1
 8005e26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	3301      	adds	r3, #1
 8005e32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	3301      	adds	r3, #1
 8005e38:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d3e2      	bcc.n	8005e0e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3724      	adds	r7, #36	; 0x24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b08b      	sub	sp, #44	; 0x2c
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	4613      	mov	r3, r2
 8005e62:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	089b      	lsrs	r3, r3, #2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e74:	88fb      	ldrh	r3, [r7, #6]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	623b      	str	r3, [r7, #32]
 8005e80:	e014      	b.n	8005eac <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	3301      	adds	r3, #1
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	3301      	adds	r3, #1
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	6a3a      	ldr	r2, [r7, #32]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d3e6      	bcc.n	8005e82 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005eb4:	8bfb      	ldrh	r3, [r7, #30]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01e      	beq.n	8005ef8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f107 0310 	add.w	r3, r7, #16
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	701a      	strb	r2, [r3, #0]
      i++;
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	3301      	adds	r3, #1
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005eec:	8bfb      	ldrh	r3, [r7, #30]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ef2:	8bfb      	ldrh	r3, [r7, #30]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1ea      	bne.n	8005ece <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	372c      	adds	r7, #44	; 0x2c
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d12c      	bne.n	8005f7c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	db12      	blt.n	8005f5a <USB_EPSetStall+0x54>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00f      	beq.n	8005f5a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f58:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e02b      	b.n	8005fd4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	db12      	blt.n	8005fb4 <USB_EPSetStall+0xae>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00f      	beq.n	8005fb4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fb2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d128      	bne.n	8006050 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006018:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800601c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	78db      	ldrb	r3, [r3, #3]
 8006022:	2b03      	cmp	r3, #3
 8006024:	d003      	beq.n	800602e <USB_EPClearStall+0x4c>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	78db      	ldrb	r3, [r3, #3]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d138      	bne.n	80060a0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	440a      	add	r2, r1
 8006044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	e027      	b.n	80060a0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800606a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800606e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	78db      	ldrb	r3, [r3, #3]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d003      	beq.n	8006080 <USB_EPClearStall+0x9e>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	78db      	ldrb	r3, [r3, #3]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d10f      	bne.n	80060a0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b085      	sub	sp, #20
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	460b      	mov	r3, r1
 80060b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060e8:	4313      	orrs	r3, r2
 80060ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b085      	sub	sp, #20
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006114:	f023 0303 	bic.w	r3, r3, #3
 8006118:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006128:	f023 0302 	bic.w	r3, r3, #2
 800612c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006156:	f023 0303 	bic.w	r3, r3, #3
 800615a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800616a:	f043 0302 	orr.w	r3, r3, #2
 800616e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4013      	ands	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006196:	68fb      	ldr	r3, [r7, #12]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	4013      	ands	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	0c1b      	lsrs	r3, r3, #16
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	4013      	ands	r3, r2
 80061fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	b29b      	uxth	r3, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	4013      	ands	r3, r2
 8006238:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800623a:	68bb      	ldr	r3, [r7, #8]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
 8006278:	01db      	lsls	r3, r3, #7
 800627a:	b2db      	uxtb	r3, r3
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4013      	ands	r3, r2
 8006294:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006296:	68bb      	ldr	r3, [r7, #8]
}
 8006298:	4618      	mov	r0, r3
 800629a:	371c      	adds	r7, #28
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	f003 0301 	and.w	r3, r3, #1
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062de:	f023 0307 	bic.w	r3, r3, #7
 80062e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	460b      	mov	r3, r1
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	333c      	adds	r3, #60	; 0x3c
 800631e:	3304      	adds	r3, #4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4a26      	ldr	r2, [pc, #152]	; (80063c0 <USB_EP0_OutStart+0xb8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d90a      	bls.n	8006342 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800633c:	d101      	bne.n	8006342 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	e037      	b.n	80063b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006348:	461a      	mov	r2, r3
 800634a:	2300      	movs	r3, #0
 800634c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006360:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006370:	f043 0318 	orr.w	r3, r3, #24
 8006374:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006384:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006388:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800638a:	7afb      	ldrb	r3, [r7, #11]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d10f      	bne.n	80063b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006396:	461a      	mov	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80063ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	4f54300a 	.word	0x4f54300a

080063c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3301      	adds	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	4a13      	ldr	r2, [pc, #76]	; (8006424 <USB_CoreReset+0x60>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d901      	bls.n	80063e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e01a      	b.n	8006416 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	daf3      	bge.n	80063d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f043 0201 	orr.w	r2, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	4a09      	ldr	r2, [pc, #36]	; (8006424 <USB_CoreReset+0x60>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d901      	bls.n	8006408 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e006      	b.n	8006416 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	d0f1      	beq.n	80063f8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	00030d40 	.word	0x00030d40

08006428 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006434:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006438:	f002 f8fc 	bl	8008634 <USBD_static_malloc>
 800643c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d105      	bne.n	8006450 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800644c:	2302      	movs	r3, #2
 800644e:	e066      	b.n	800651e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	7c1b      	ldrb	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d119      	bne.n	8006494 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006464:	2202      	movs	r2, #2
 8006466:	2181      	movs	r1, #129	; 0x81
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 ffc0 	bl	80083ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006474:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006478:	2202      	movs	r2, #2
 800647a:	2101      	movs	r1, #1
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 ffb6 	bl	80083ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2210      	movs	r2, #16
 800648e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006492:	e016      	b.n	80064c2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006494:	2340      	movs	r3, #64	; 0x40
 8006496:	2202      	movs	r2, #2
 8006498:	2181      	movs	r1, #129	; 0x81
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f001 ffa7 	bl	80083ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064a6:	2340      	movs	r3, #64	; 0x40
 80064a8:	2202      	movs	r2, #2
 80064aa:	2101      	movs	r1, #1
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 ff9e 	bl	80083ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2210      	movs	r2, #16
 80064be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064c2:	2308      	movs	r3, #8
 80064c4:	2203      	movs	r2, #3
 80064c6:	2182      	movs	r1, #130	; 0x82
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 ff90 	bl	80083ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	7c1b      	ldrb	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006502:	2101      	movs	r1, #1
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f002 f861 	bl	80085cc <USBD_LL_PrepareReceive>
 800650a:	e007      	b.n	800651c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006512:	2340      	movs	r3, #64	; 0x40
 8006514:	2101      	movs	r1, #1
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f002 f858 	bl	80085cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006532:	2181      	movs	r1, #129	; 0x81
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 ff80 	bl	800843a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006540:	2101      	movs	r1, #1
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 ff79 	bl	800843a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006550:	2182      	movs	r1, #130	; 0x82
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 ff71 	bl	800843a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00e      	beq.n	8006590 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006582:	4618      	mov	r0, r3
 8006584:	f002 f864 	bl	8008650 <USBD_static_free>
    pdev->pClassData = NULL;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e0af      	b.n	8006724 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d03f      	beq.n	8006650 <USBD_CDC_Setup+0xb4>
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	f040 809f 	bne.w	8006714 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	88db      	ldrh	r3, [r3, #6]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d02e      	beq.n	800663c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b25b      	sxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	da16      	bge.n	8006616 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80065f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	88d2      	ldrh	r2, [r2, #6]
 80065fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	88db      	ldrh	r3, [r3, #6]
 8006600:	2b07      	cmp	r3, #7
 8006602:	bf28      	it	cs
 8006604:	2307      	movcs	r3, #7
 8006606:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	89fa      	ldrh	r2, [r7, #14]
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f001 fae9 	bl	8007be6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006614:	e085      	b.n	8006722 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	785a      	ldrb	r2, [r3, #1]
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	88db      	ldrh	r3, [r3, #6]
 8006624:	b2da      	uxtb	r2, r3
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800662c:	6939      	ldr	r1, [r7, #16]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	88db      	ldrh	r3, [r3, #6]
 8006632:	461a      	mov	r2, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fb02 	bl	8007c3e <USBD_CtlPrepareRx>
      break;
 800663a:	e072      	b.n	8006722 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	7850      	ldrb	r0, [r2, #1]
 8006648:	2200      	movs	r2, #0
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	4798      	blx	r3
      break;
 800664e:	e068      	b.n	8006722 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b0b      	cmp	r3, #11
 8006656:	d852      	bhi.n	80066fe <USBD_CDC_Setup+0x162>
 8006658:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <USBD_CDC_Setup+0xc4>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	08006691 	.word	0x08006691
 8006664:	0800670d 	.word	0x0800670d
 8006668:	080066ff 	.word	0x080066ff
 800666c:	080066ff 	.word	0x080066ff
 8006670:	080066ff 	.word	0x080066ff
 8006674:	080066ff 	.word	0x080066ff
 8006678:	080066ff 	.word	0x080066ff
 800667c:	080066ff 	.word	0x080066ff
 8006680:	080066ff 	.word	0x080066ff
 8006684:	080066ff 	.word	0x080066ff
 8006688:	080066bb 	.word	0x080066bb
 800668c:	080066e5 	.word	0x080066e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b03      	cmp	r3, #3
 800669a:	d107      	bne.n	80066ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800669c:	f107 030a 	add.w	r3, r7, #10
 80066a0:	2202      	movs	r2, #2
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 fa9e 	bl	8007be6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066aa:	e032      	b.n	8006712 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f001 fa28 	bl	8007b04 <USBD_CtlError>
            ret = USBD_FAIL;
 80066b4:	2303      	movs	r3, #3
 80066b6:	75fb      	strb	r3, [r7, #23]
          break;
 80066b8:	e02b      	b.n	8006712 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d107      	bne.n	80066d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80066c6:	f107 030d 	add.w	r3, r7, #13
 80066ca:	2201      	movs	r2, #1
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 fa89 	bl	8007be6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066d4:	e01d      	b.n	8006712 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 fa13 	bl	8007b04 <USBD_CtlError>
            ret = USBD_FAIL;
 80066de:	2303      	movs	r3, #3
 80066e0:	75fb      	strb	r3, [r7, #23]
          break;
 80066e2:	e016      	b.n	8006712 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d00f      	beq.n	8006710 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 fa06 	bl	8007b04 <USBD_CtlError>
            ret = USBD_FAIL;
 80066f8:	2303      	movs	r3, #3
 80066fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80066fc:	e008      	b.n	8006710 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 f9ff 	bl	8007b04 <USBD_CtlError>
          ret = USBD_FAIL;
 8006706:	2303      	movs	r3, #3
 8006708:	75fb      	strb	r3, [r7, #23]
          break;
 800670a:	e002      	b.n	8006712 <USBD_CDC_Setup+0x176>
          break;
 800670c:	bf00      	nop
 800670e:	e008      	b.n	8006722 <USBD_CDC_Setup+0x186>
          break;
 8006710:	bf00      	nop
      }
      break;
 8006712:	e006      	b.n	8006722 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 f9f4 	bl	8007b04 <USBD_CtlError>
      ret = USBD_FAIL;
 800671c:	2303      	movs	r3, #3
 800671e:	75fb      	strb	r3, [r7, #23]
      break;
 8006720:	bf00      	nop
  }

  return (uint8_t)ret;
 8006722:	7dfb      	ldrb	r3, [r7, #23]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800673e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800674a:	2303      	movs	r3, #3
 800674c:	e04f      	b.n	80067ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006754:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006756:	78fa      	ldrb	r2, [r7, #3]
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	3318      	adds	r3, #24
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d029      	beq.n	80067c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800676c:	78fa      	ldrb	r2, [r7, #3]
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	3318      	adds	r3, #24
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	78f9      	ldrb	r1, [r7, #3]
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	460b      	mov	r3, r1
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	1a5b      	subs	r3, r3, r1
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4403      	add	r3, r0
 800678c:	3344      	adds	r3, #68	; 0x44
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	fbb2 f1f3 	udiv	r1, r2, r3
 8006794:	fb03 f301 	mul.w	r3, r3, r1
 8006798:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800679a:	2b00      	cmp	r3, #0
 800679c:	d110      	bne.n	80067c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800679e:	78fa      	ldrb	r2, [r7, #3]
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	3318      	adds	r3, #24
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067b2:	78f9      	ldrb	r1, [r7, #3]
 80067b4:	2300      	movs	r3, #0
 80067b6:	2200      	movs	r2, #0
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 fee6 	bl	800858a <USBD_LL_Transmit>
 80067be:	e015      	b.n	80067ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006808:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006814:	2303      	movs	r3, #3
 8006816:	e015      	b.n	8006844 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 fef6 	bl	800860e <USBD_LL_GetRxDataSize>
 8006822:	4602      	mov	r2, r0
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800683e:	4611      	mov	r1, r2
 8006840:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800685a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006862:	2303      	movs	r3, #3
 8006864:	e01b      	b.n	800689e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d015      	beq.n	800689c <USBD_CDC_EP0_RxReady+0x50>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006876:	2bff      	cmp	r3, #255	; 0xff
 8006878:	d010      	beq.n	800689c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006888:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006890:	b292      	uxth	r2, r2
 8006892:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	22ff      	movs	r2, #255	; 0xff
 8006898:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2243      	movs	r2, #67	; 0x43
 80068b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80068b6:	4b03      	ldr	r3, [pc, #12]	; (80068c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	20000094 	.word	0x20000094

080068c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2243      	movs	r2, #67	; 0x43
 80068d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80068d6:	4b03      	ldr	r3, [pc, #12]	; (80068e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	20000050 	.word	0x20000050

080068e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2243      	movs	r2, #67	; 0x43
 80068f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80068f6:	4b03      	ldr	r3, [pc, #12]	; (8006904 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	200000d8 	.word	0x200000d8

08006908 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	220a      	movs	r2, #10
 8006914:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006916:	4b03      	ldr	r3, [pc, #12]	; (8006924 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	2000000c 	.word	0x2000000c

08006928 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006938:	2303      	movs	r3, #3
 800693a:	e004      	b.n	8006946 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006952:	b480      	push	{r7}
 8006954:	b087      	sub	sp, #28
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006964:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800696c:	2303      	movs	r3, #3
 800696e:	e008      	b.n	8006982 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800698e:	b480      	push	{r7}
 8006990:	b085      	sub	sp, #20
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800699e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e004      	b.n	80069b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80069da:	2303      	movs	r3, #3
 80069dc:	e016      	b.n	8006a0c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	7c1b      	ldrb	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069f0:	2101      	movs	r1, #1
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 fdea 	bl	80085cc <USBD_LL_PrepareReceive>
 80069f8:	e007      	b.n	8006a0a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a00:	2340      	movs	r3, #64	; 0x40
 8006a02:	2101      	movs	r1, #1
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fde1 	bl	80085cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e01f      	b.n	8006a6c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	79fa      	ldrb	r2, [r7, #7]
 8006a5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f001 fc5d 	bl	8008320 <USBD_LL_Init>
 8006a66:	4603      	mov	r3, r0
 8006a68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e016      	b.n	8006aba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	f107 020e 	add.w	r2, r7, #14
 8006aac:	4610      	mov	r0, r2
 8006aae:	4798      	blx	r3
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fc74 	bl	80083b8 <USBD_LL_Start>
 8006ad0:	4603      	mov	r3, r0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006afc:	2303      	movs	r3, #3
 8006afe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d009      	beq.n	8006b1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	4611      	mov	r1, r2
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	4611      	mov	r1, r2
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
  }

  return USBD_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 ff90 	bl	8007a90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d01a      	beq.n	8006bca <USBD_LL_SetupStage+0x72>
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d822      	bhi.n	8006bde <USBD_LL_SetupStage+0x86>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <USBD_LL_SetupStage+0x4a>
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d00a      	beq.n	8006bb6 <USBD_LL_SetupStage+0x5e>
 8006ba0:	e01d      	b.n	8006bde <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa62 	bl	8007074 <USBD_StdDevReq>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb4:	e020      	b.n	8006bf8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fac6 	bl	8007150 <USBD_StdItfReq>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc8:	e016      	b.n	8006bf8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fb05 	bl	80071e2 <USBD_StdEPReq>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73fb      	strb	r3, [r7, #15]
      break;
 8006bdc:	e00c      	b.n	8006bf8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006be4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 fc43 	bl	8008478 <USBD_LL_StallEP>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf6:	bf00      	nop
  }

  return ret;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b086      	sub	sp, #24
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c10:	7afb      	ldrb	r3, [r7, #11]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d138      	bne.n	8006c88 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d14a      	bne.n	8006cbe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d913      	bls.n	8006c5c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	1ad2      	subs	r2, r2, r3
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	bf28      	it	cs
 8006c4e:	4613      	movcs	r3, r2
 8006c50:	461a      	mov	r2, r3
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f001 f80f 	bl	8007c78 <USBD_CtlContinueRx>
 8006c5a:	e030      	b.n	8006cbe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d10b      	bne.n	8006c80 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f001 f80a 	bl	8007c9a <USBD_CtlSendStatus>
 8006c86:	e01a      	b.n	8006cbe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d114      	bne.n	8006cbe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00e      	beq.n	8006cbe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	7afa      	ldrb	r2, [r7, #11]
 8006caa:	4611      	mov	r1, r2
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	4798      	blx	r3
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	e000      	b.n	8006cc0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d16b      	bne.n	8006db4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3314      	adds	r3, #20
 8006ce0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d156      	bne.n	8006d9a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d914      	bls.n	8006d22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	1ad2      	subs	r2, r2, r3
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 ff84 	bl	8007c1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d14:	2300      	movs	r3, #0
 8006d16:	2200      	movs	r2, #0
 8006d18:	2100      	movs	r1, #0
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f001 fc56 	bl	80085cc <USBD_LL_PrepareReceive>
 8006d20:	e03b      	b.n	8006d9a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d11c      	bne.n	8006d68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d316      	bcc.n	8006d68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d20f      	bcs.n	8006d68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 ff65 	bl	8007c1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2100      	movs	r1, #0
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f001 fc33 	bl	80085cc <USBD_LL_PrepareReceive>
 8006d66:	e018      	b.n	8006d9a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d10b      	bne.n	8006d8c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d005      	beq.n	8006d8c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d8c:	2180      	movs	r1, #128	; 0x80
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f001 fb72 	bl	8008478 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 ff93 	bl	8007cc0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d122      	bne.n	8006dea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff fe98 	bl	8006ada <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006db2:	e01a      	b.n	8006dea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d114      	bne.n	8006dea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00e      	beq.n	8006dea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	7afa      	ldrb	r2, [r7, #11]
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	4798      	blx	r3
 8006ddc:	4603      	mov	r3, r0
 8006dde:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	e000      	b.n	8006dec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e02f      	b.n	8006e88 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00f      	beq.n	8006e52 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6852      	ldr	r2, [r2, #4]
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e52:	2340      	movs	r3, #64	; 0x40
 8006e54:	2200      	movs	r2, #0
 8006e56:	2100      	movs	r1, #0
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 fac8 	bl	80083ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2240      	movs	r2, #64	; 0x40
 8006e6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e6e:	2340      	movs	r3, #64	; 0x40
 8006e70:	2200      	movs	r2, #0
 8006e72:	2180      	movs	r1, #128	; 0x80
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 faba 	bl	80083ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2240      	movs	r2, #64	; 0x40
 8006e84:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d106      	bne.n	8006efe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e012      	b.n	8006f48 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d10b      	bne.n	8006f46 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d005      	beq.n	8006f46 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e014      	b.n	8006f94 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d10d      	bne.n	8006f92 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	78fa      	ldrb	r2, [r7, #3]
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e014      	b.n	8006fe0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d10d      	bne.n	8006fde <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	78fa      	ldrb	r2, [r7, #3]
 8006fd8:	4611      	mov	r1, r2
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6852      	ldr	r2, [r2, #4]
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	4611      	mov	r1, r2
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	4798      	blx	r3
  }

  return USBD_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007036:	b480      	push	{r7}
 8007038:	b087      	sub	sp, #28
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	3301      	adds	r3, #1
 800704c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007054:	8a3b      	ldrh	r3, [r7, #16]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	b21a      	sxth	r2, r3
 800705a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800705e:	4313      	orrs	r3, r2
 8007060:	b21b      	sxth	r3, r3
 8007062:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007064:	89fb      	ldrh	r3, [r7, #14]
}
 8007066:	4618      	mov	r0, r3
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
	...

08007074 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800708a:	2b40      	cmp	r3, #64	; 0x40
 800708c:	d005      	beq.n	800709a <USBD_StdDevReq+0x26>
 800708e:	2b40      	cmp	r3, #64	; 0x40
 8007090:	d853      	bhi.n	800713a <USBD_StdDevReq+0xc6>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <USBD_StdDevReq+0x3a>
 8007096:	2b20      	cmp	r3, #32
 8007098:	d14f      	bne.n	800713a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	4798      	blx	r3
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
      break;
 80070ac:	e04a      	b.n	8007144 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	785b      	ldrb	r3, [r3, #1]
 80070b2:	2b09      	cmp	r3, #9
 80070b4:	d83b      	bhi.n	800712e <USBD_StdDevReq+0xba>
 80070b6:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <USBD_StdDevReq+0x48>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	08007111 	.word	0x08007111
 80070c0:	08007125 	.word	0x08007125
 80070c4:	0800712f 	.word	0x0800712f
 80070c8:	0800711b 	.word	0x0800711b
 80070cc:	0800712f 	.word	0x0800712f
 80070d0:	080070ef 	.word	0x080070ef
 80070d4:	080070e5 	.word	0x080070e5
 80070d8:	0800712f 	.word	0x0800712f
 80070dc:	08007107 	.word	0x08007107
 80070e0:	080070f9 	.word	0x080070f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f9de 	bl	80074a8 <USBD_GetDescriptor>
          break;
 80070ec:	e024      	b.n	8007138 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fb43 	bl	800777c <USBD_SetAddress>
          break;
 80070f6:	e01f      	b.n	8007138 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fb82 	bl	8007804 <USBD_SetConfig>
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]
          break;
 8007104:	e018      	b.n	8007138 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fc21 	bl	8007950 <USBD_GetConfig>
          break;
 800710e:	e013      	b.n	8007138 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fc52 	bl	80079bc <USBD_GetStatus>
          break;
 8007118:	e00e      	b.n	8007138 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fc81 	bl	8007a24 <USBD_SetFeature>
          break;
 8007122:	e009      	b.n	8007138 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fc90 	bl	8007a4c <USBD_ClrFeature>
          break;
 800712c:	e004      	b.n	8007138 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fce7 	bl	8007b04 <USBD_CtlError>
          break;
 8007136:	bf00      	nop
      }
      break;
 8007138:	e004      	b.n	8007144 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fce1 	bl	8007b04 <USBD_CtlError>
      break;
 8007142:	bf00      	nop
  }

  return ret;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop

08007150 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d005      	beq.n	8007176 <USBD_StdItfReq+0x26>
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	d82f      	bhi.n	80071ce <USBD_StdItfReq+0x7e>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <USBD_StdItfReq+0x26>
 8007172:	2b20      	cmp	r3, #32
 8007174:	d12b      	bne.n	80071ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717c:	b2db      	uxtb	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	2b02      	cmp	r3, #2
 8007182:	d81d      	bhi.n	80071c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	889b      	ldrh	r3, [r3, #4]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b01      	cmp	r3, #1
 800718c:	d813      	bhi.n	80071b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	4798      	blx	r3
 800719c:	4603      	mov	r3, r0
 800719e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	88db      	ldrh	r3, [r3, #6]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d110      	bne.n	80071ca <USBD_StdItfReq+0x7a>
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10d      	bne.n	80071ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fd73 	bl	8007c9a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071b4:	e009      	b.n	80071ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fca3 	bl	8007b04 <USBD_CtlError>
          break;
 80071be:	e004      	b.n	80071ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fc9e 	bl	8007b04 <USBD_CtlError>
          break;
 80071c8:	e000      	b.n	80071cc <USBD_StdItfReq+0x7c>
          break;
 80071ca:	bf00      	nop
      }
      break;
 80071cc:	e004      	b.n	80071d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fc97 	bl	8007b04 <USBD_CtlError>
      break;
 80071d6:	bf00      	nop
  }

  return ret;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	889b      	ldrh	r3, [r3, #4]
 80071f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	d007      	beq.n	8007212 <USBD_StdEPReq+0x30>
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	f200 8145 	bhi.w	8007492 <USBD_StdEPReq+0x2b0>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <USBD_StdEPReq+0x44>
 800720c:	2b20      	cmp	r3, #32
 800720e:	f040 8140 	bne.w	8007492 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
      break;
 8007224:	e13a      	b.n	800749c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	2b03      	cmp	r3, #3
 800722c:	d007      	beq.n	800723e <USBD_StdEPReq+0x5c>
 800722e:	2b03      	cmp	r3, #3
 8007230:	f300 8129 	bgt.w	8007486 <USBD_StdEPReq+0x2a4>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d07f      	beq.n	8007338 <USBD_StdEPReq+0x156>
 8007238:	2b01      	cmp	r3, #1
 800723a:	d03c      	beq.n	80072b6 <USBD_StdEPReq+0xd4>
 800723c:	e123      	b.n	8007486 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d002      	beq.n	8007250 <USBD_StdEPReq+0x6e>
 800724a:	2b03      	cmp	r3, #3
 800724c:	d016      	beq.n	800727c <USBD_StdEPReq+0x9a>
 800724e:	e02c      	b.n	80072aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00d      	beq.n	8007272 <USBD_StdEPReq+0x90>
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	2b80      	cmp	r3, #128	; 0x80
 800725a:	d00a      	beq.n	8007272 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 f909 	bl	8008478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007266:	2180      	movs	r1, #128	; 0x80
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 f905 	bl	8008478 <USBD_LL_StallEP>
 800726e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007270:	e020      	b.n	80072b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fc45 	bl	8007b04 <USBD_CtlError>
              break;
 800727a:	e01b      	b.n	80072b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	885b      	ldrh	r3, [r3, #2]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10e      	bne.n	80072a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <USBD_StdEPReq+0xc0>
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b80      	cmp	r3, #128	; 0x80
 800728e:	d008      	beq.n	80072a2 <USBD_StdEPReq+0xc0>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	88db      	ldrh	r3, [r3, #6]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d104      	bne.n	80072a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 f8eb 	bl	8008478 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fcf9 	bl	8007c9a <USBD_CtlSendStatus>

              break;
 80072a8:	e004      	b.n	80072b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fc29 	bl	8007b04 <USBD_CtlError>
              break;
 80072b2:	bf00      	nop
          }
          break;
 80072b4:	e0ec      	b.n	8007490 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d002      	beq.n	80072c8 <USBD_StdEPReq+0xe6>
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d016      	beq.n	80072f4 <USBD_StdEPReq+0x112>
 80072c6:	e030      	b.n	800732a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00d      	beq.n	80072ea <USBD_StdEPReq+0x108>
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b80      	cmp	r3, #128	; 0x80
 80072d2:	d00a      	beq.n	80072ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 f8cd 	bl	8008478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072de:	2180      	movs	r1, #128	; 0x80
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 f8c9 	bl	8008478 <USBD_LL_StallEP>
 80072e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072e8:	e025      	b.n	8007336 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fc09 	bl	8007b04 <USBD_CtlError>
              break;
 80072f2:	e020      	b.n	8007336 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	885b      	ldrh	r3, [r3, #2]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d11b      	bne.n	8007334 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 f8d3 	bl	80084b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fcc2 	bl	8007c9a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
 8007324:	4603      	mov	r3, r0
 8007326:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007328:	e004      	b.n	8007334 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fbe9 	bl	8007b04 <USBD_CtlError>
              break;
 8007332:	e000      	b.n	8007336 <USBD_StdEPReq+0x154>
              break;
 8007334:	bf00      	nop
          }
          break;
 8007336:	e0ab      	b.n	8007490 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d002      	beq.n	800734a <USBD_StdEPReq+0x168>
 8007344:	2b03      	cmp	r3, #3
 8007346:	d032      	beq.n	80073ae <USBD_StdEPReq+0x1cc>
 8007348:	e097      	b.n	800747a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <USBD_StdEPReq+0x17e>
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	2b80      	cmp	r3, #128	; 0x80
 8007354:	d004      	beq.n	8007360 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fbd3 	bl	8007b04 <USBD_CtlError>
                break;
 800735e:	e091      	b.n	8007484 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007364:	2b00      	cmp	r3, #0
 8007366:	da0b      	bge.n	8007380 <USBD_StdEPReq+0x19e>
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	3310      	adds	r3, #16
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	4413      	add	r3, r2
 800737c:	3304      	adds	r3, #4
 800737e:	e00b      	b.n	8007398 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	4413      	add	r3, r2
 8007396:	3304      	adds	r3, #4
 8007398:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2202      	movs	r2, #2
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fc1d 	bl	8007be6 <USBD_CtlSendData>
              break;
 80073ac:	e06a      	b.n	8007484 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	da11      	bge.n	80073da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	f003 020f 	and.w	r2, r3, #15
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	3324      	adds	r3, #36	; 0x24
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d117      	bne.n	8007400 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fb96 	bl	8007b04 <USBD_CtlError>
                  break;
 80073d8:	e054      	b.n	8007484 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	f003 020f 	and.w	r2, r3, #15
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	440b      	add	r3, r1
 80073ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d104      	bne.n	8007400 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fb83 	bl	8007b04 <USBD_CtlError>
                  break;
 80073fe:	e041      	b.n	8007484 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007404:	2b00      	cmp	r3, #0
 8007406:	da0b      	bge.n	8007420 <USBD_StdEPReq+0x23e>
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	3310      	adds	r3, #16
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	4413      	add	r3, r2
 800741c:	3304      	adds	r3, #4
 800741e:	e00b      	b.n	8007438 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	4413      	add	r3, r2
 8007436:	3304      	adds	r3, #4
 8007438:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <USBD_StdEPReq+0x264>
 8007440:	7bbb      	ldrb	r3, [r7, #14]
 8007442:	2b80      	cmp	r3, #128	; 0x80
 8007444:	d103      	bne.n	800744e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	e00e      	b.n	800746c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 f84e 	bl	80084f4 <USBD_LL_IsStallEP>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2201      	movs	r2, #1
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e002      	b.n	800746c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2202      	movs	r2, #2
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fbb7 	bl	8007be6 <USBD_CtlSendData>
              break;
 8007478:	e004      	b.n	8007484 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fb41 	bl	8007b04 <USBD_CtlError>
              break;
 8007482:	bf00      	nop
          }
          break;
 8007484:	e004      	b.n	8007490 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fb3b 	bl	8007b04 <USBD_CtlError>
          break;
 800748e:	bf00      	nop
      }
      break;
 8007490:	e004      	b.n	800749c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fb35 	bl	8007b04 <USBD_CtlError>
      break;
 800749a:	bf00      	nop
  }

  return ret;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	885b      	ldrh	r3, [r3, #2]
 80074c2:	0a1b      	lsrs	r3, r3, #8
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	2b06      	cmp	r3, #6
 80074ca:	f200 8128 	bhi.w	800771e <USBD_GetDescriptor+0x276>
 80074ce:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <USBD_GetDescriptor+0x2c>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	080074f1 	.word	0x080074f1
 80074d8:	08007509 	.word	0x08007509
 80074dc:	08007549 	.word	0x08007549
 80074e0:	0800771f 	.word	0x0800771f
 80074e4:	0800771f 	.word	0x0800771f
 80074e8:	080076bf 	.word	0x080076bf
 80074ec:	080076eb 	.word	0x080076eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7c12      	ldrb	r2, [r2, #16]
 80074fc:	f107 0108 	add.w	r1, r7, #8
 8007500:	4610      	mov	r0, r2
 8007502:	4798      	blx	r3
 8007504:	60f8      	str	r0, [r7, #12]
      break;
 8007506:	e112      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	7c1b      	ldrb	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10d      	bne.n	800752c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007518:	f107 0208 	add.w	r2, r7, #8
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
 8007520:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3301      	adds	r3, #1
 8007526:	2202      	movs	r2, #2
 8007528:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800752a:	e100      	b.n	800772e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	f107 0208 	add.w	r2, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	2202      	movs	r2, #2
 8007544:	701a      	strb	r2, [r3, #0]
      break;
 8007546:	e0f2      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	885b      	ldrh	r3, [r3, #2]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b05      	cmp	r3, #5
 8007550:	f200 80ac 	bhi.w	80076ac <USBD_GetDescriptor+0x204>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <USBD_GetDescriptor+0xb4>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	08007575 	.word	0x08007575
 8007560:	080075a9 	.word	0x080075a9
 8007564:	080075dd 	.word	0x080075dd
 8007568:	08007611 	.word	0x08007611
 800756c:	08007645 	.word	0x08007645
 8007570:	08007679 	.word	0x08007679
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7c12      	ldrb	r2, [r2, #16]
 800758c:	f107 0108 	add.w	r1, r7, #8
 8007590:	4610      	mov	r0, r2
 8007592:	4798      	blx	r3
 8007594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007596:	e091      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fab2 	bl	8007b04 <USBD_CtlError>
            err++;
 80075a0:	7afb      	ldrb	r3, [r7, #11]
 80075a2:	3301      	adds	r3, #1
 80075a4:	72fb      	strb	r3, [r7, #11]
          break;
 80075a6:	e089      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	7c12      	ldrb	r2, [r2, #16]
 80075c0:	f107 0108 	add.w	r1, r7, #8
 80075c4:	4610      	mov	r0, r2
 80075c6:	4798      	blx	r3
 80075c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ca:	e077      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa98 	bl	8007b04 <USBD_CtlError>
            err++;
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	3301      	adds	r3, #1
 80075d8:	72fb      	strb	r3, [r7, #11]
          break;
 80075da:	e06f      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	7c12      	ldrb	r2, [r2, #16]
 80075f4:	f107 0108 	add.w	r1, r7, #8
 80075f8:	4610      	mov	r0, r2
 80075fa:	4798      	blx	r3
 80075fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075fe:	e05d      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa7e 	bl	8007b04 <USBD_CtlError>
            err++;
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	3301      	adds	r3, #1
 800760c:	72fb      	strb	r3, [r7, #11]
          break;
 800760e:	e055      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	7c12      	ldrb	r2, [r2, #16]
 8007628:	f107 0108 	add.w	r1, r7, #8
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
 8007630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007632:	e043      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa64 	bl	8007b04 <USBD_CtlError>
            err++;
 800763c:	7afb      	ldrb	r3, [r7, #11]
 800763e:	3301      	adds	r3, #1
 8007640:	72fb      	strb	r3, [r7, #11]
          break;
 8007642:	e03b      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	7c12      	ldrb	r2, [r2, #16]
 800765c:	f107 0108 	add.w	r1, r7, #8
 8007660:	4610      	mov	r0, r2
 8007662:	4798      	blx	r3
 8007664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007666:	e029      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fa4a 	bl	8007b04 <USBD_CtlError>
            err++;
 8007670:	7afb      	ldrb	r3, [r7, #11]
 8007672:	3301      	adds	r3, #1
 8007674:	72fb      	strb	r3, [r7, #11]
          break;
 8007676:	e021      	b.n	80076bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	7c12      	ldrb	r2, [r2, #16]
 8007690:	f107 0108 	add.w	r1, r7, #8
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
 8007698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769a:	e00f      	b.n	80076bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fa30 	bl	8007b04 <USBD_CtlError>
            err++;
 80076a4:	7afb      	ldrb	r3, [r7, #11]
 80076a6:	3301      	adds	r3, #1
 80076a8:	72fb      	strb	r3, [r7, #11]
          break;
 80076aa:	e007      	b.n	80076bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa28 	bl	8007b04 <USBD_CtlError>
          err++;
 80076b4:	7afb      	ldrb	r3, [r7, #11]
 80076b6:	3301      	adds	r3, #1
 80076b8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80076ba:	bf00      	nop
      }
      break;
 80076bc:	e037      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	7c1b      	ldrb	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	f107 0208 	add.w	r2, r7, #8
 80076d2:	4610      	mov	r0, r2
 80076d4:	4798      	blx	r3
 80076d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076d8:	e029      	b.n	800772e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fa11 	bl	8007b04 <USBD_CtlError>
        err++;
 80076e2:	7afb      	ldrb	r3, [r7, #11]
 80076e4:	3301      	adds	r3, #1
 80076e6:	72fb      	strb	r3, [r7, #11]
      break;
 80076e8:	e021      	b.n	800772e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7c1b      	ldrb	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10d      	bne.n	800770e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	f107 0208 	add.w	r2, r7, #8
 80076fe:	4610      	mov	r0, r2
 8007700:	4798      	blx	r3
 8007702:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3301      	adds	r3, #1
 8007708:	2207      	movs	r2, #7
 800770a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800770c:	e00f      	b.n	800772e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f9f7 	bl	8007b04 <USBD_CtlError>
        err++;
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	3301      	adds	r3, #1
 800771a:	72fb      	strb	r3, [r7, #11]
      break;
 800771c:	e007      	b.n	800772e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f9ef 	bl	8007b04 <USBD_CtlError>
      err++;
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	3301      	adds	r3, #1
 800772a:	72fb      	strb	r3, [r7, #11]
      break;
 800772c:	bf00      	nop
  }

  if (err != 0U)
 800772e:	7afb      	ldrb	r3, [r7, #11]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11e      	bne.n	8007772 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	88db      	ldrh	r3, [r3, #6]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d016      	beq.n	800776a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800773c:	893b      	ldrh	r3, [r7, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00e      	beq.n	8007760 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	88da      	ldrh	r2, [r3, #6]
 8007746:	893b      	ldrh	r3, [r7, #8]
 8007748:	4293      	cmp	r3, r2
 800774a:	bf28      	it	cs
 800774c:	4613      	movcs	r3, r2
 800774e:	b29b      	uxth	r3, r3
 8007750:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007752:	893b      	ldrh	r3, [r7, #8]
 8007754:	461a      	mov	r2, r3
 8007756:	68f9      	ldr	r1, [r7, #12]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fa44 	bl	8007be6 <USBD_CtlSendData>
 800775e:	e009      	b.n	8007774 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f9ce 	bl	8007b04 <USBD_CtlError>
 8007768:	e004      	b.n	8007774 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa95 	bl	8007c9a <USBD_CtlSendStatus>
 8007770:	e000      	b.n	8007774 <USBD_GetDescriptor+0x2cc>
    return;
 8007772:	bf00      	nop
  }
}
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop

0800777c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	889b      	ldrh	r3, [r3, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d131      	bne.n	80077f2 <USBD_SetAddress+0x76>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	88db      	ldrh	r3, [r3, #6]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d12d      	bne.n	80077f2 <USBD_SetAddress+0x76>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	885b      	ldrh	r3, [r3, #2]
 800779a:	2b7f      	cmp	r3, #127	; 0x7f
 800779c:	d829      	bhi.n	80077f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	885b      	ldrh	r3, [r3, #2]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d104      	bne.n	80077c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f9a3 	bl	8007b04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077be:	e01d      	b.n	80077fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	7bfa      	ldrb	r2, [r7, #15]
 80077c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 febd 	bl	800854c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa61 	bl	8007c9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2202      	movs	r2, #2
 80077e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e6:	e009      	b.n	80077fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f0:	e004      	b.n	80077fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f985 	bl	8007b04 <USBD_CtlError>
  }
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	b2da      	uxtb	r2, r3
 8007818:	4b4c      	ldr	r3, [pc, #304]	; (800794c <USBD_SetConfig+0x148>)
 800781a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800781c:	4b4b      	ldr	r3, [pc, #300]	; (800794c <USBD_SetConfig+0x148>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d905      	bls.n	8007830 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f96c 	bl	8007b04 <USBD_CtlError>
    return USBD_FAIL;
 800782c:	2303      	movs	r3, #3
 800782e:	e088      	b.n	8007942 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d002      	beq.n	8007842 <USBD_SetConfig+0x3e>
 800783c:	2b03      	cmp	r3, #3
 800783e:	d025      	beq.n	800788c <USBD_SetConfig+0x88>
 8007840:	e071      	b.n	8007926 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007842:	4b42      	ldr	r3, [pc, #264]	; (800794c <USBD_SetConfig+0x148>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d01c      	beq.n	8007884 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800784a:	4b40      	ldr	r3, [pc, #256]	; (800794c <USBD_SetConfig+0x148>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007854:	4b3d      	ldr	r3, [pc, #244]	; (800794c <USBD_SetConfig+0x148>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff f948 	bl	8006af0 <USBD_SetClassConfig>
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d004      	beq.n	8007874 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f949 	bl	8007b04 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007872:	e065      	b.n	8007940 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa10 	bl	8007c9a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2203      	movs	r2, #3
 800787e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007882:	e05d      	b.n	8007940 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fa08 	bl	8007c9a <USBD_CtlSendStatus>
      break;
 800788a:	e059      	b.n	8007940 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800788c:	4b2f      	ldr	r3, [pc, #188]	; (800794c <USBD_SetConfig+0x148>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d112      	bne.n	80078ba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800789c:	4b2b      	ldr	r3, [pc, #172]	; (800794c <USBD_SetConfig+0x148>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078a6:	4b29      	ldr	r3, [pc, #164]	; (800794c <USBD_SetConfig+0x148>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff f93b 	bl	8006b28 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9f1 	bl	8007c9a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078b8:	e042      	b.n	8007940 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80078ba:	4b24      	ldr	r3, [pc, #144]	; (800794c <USBD_SetConfig+0x148>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d02a      	beq.n	800791e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff f929 	bl	8006b28 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078d6:	4b1d      	ldr	r3, [pc, #116]	; (800794c <USBD_SetConfig+0x148>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078e0:	4b1a      	ldr	r3, [pc, #104]	; (800794c <USBD_SetConfig+0x148>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff f902 	bl	8006af0 <USBD_SetClassConfig>
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00f      	beq.n	8007916 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f903 	bl	8007b04 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff f90e 	bl	8006b28 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007914:	e014      	b.n	8007940 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f9bf 	bl	8007c9a <USBD_CtlSendStatus>
      break;
 800791c:	e010      	b.n	8007940 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f9bb 	bl	8007c9a <USBD_CtlSendStatus>
      break;
 8007924:	e00c      	b.n	8007940 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f8eb 	bl	8007b04 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800792e:	4b07      	ldr	r3, [pc, #28]	; (800794c <USBD_SetConfig+0x148>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff f8f7 	bl	8006b28 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800793a:	2303      	movs	r3, #3
 800793c:	73fb      	strb	r3, [r7, #15]
      break;
 800793e:	bf00      	nop
  }

  return ret;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	20000204 	.word	0x20000204

08007950 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	88db      	ldrh	r3, [r3, #6]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d004      	beq.n	800796c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f8cd 	bl	8007b04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800796a:	e023      	b.n	80079b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	dc02      	bgt.n	800797e <USBD_GetConfig+0x2e>
 8007978:	2b00      	cmp	r3, #0
 800797a:	dc03      	bgt.n	8007984 <USBD_GetConfig+0x34>
 800797c:	e015      	b.n	80079aa <USBD_GetConfig+0x5a>
 800797e:	2b03      	cmp	r3, #3
 8007980:	d00b      	beq.n	800799a <USBD_GetConfig+0x4a>
 8007982:	e012      	b.n	80079aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3308      	adds	r3, #8
 800798e:	2201      	movs	r2, #1
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f927 	bl	8007be6 <USBD_CtlSendData>
        break;
 8007998:	e00c      	b.n	80079b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3304      	adds	r3, #4
 800799e:	2201      	movs	r2, #1
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f91f 	bl	8007be6 <USBD_CtlSendData>
        break;
 80079a8:	e004      	b.n	80079b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f8a9 	bl	8007b04 <USBD_CtlError>
        break;
 80079b2:	bf00      	nop
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d81e      	bhi.n	8007a12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	88db      	ldrh	r3, [r3, #6]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d004      	beq.n	80079e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f890 	bl	8007b04 <USBD_CtlError>
        break;
 80079e4:	e01a      	b.n	8007a1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f043 0202 	orr.w	r2, r3, #2
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	330c      	adds	r3, #12
 8007a06:	2202      	movs	r2, #2
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f8eb 	bl	8007be6 <USBD_CtlSendData>
      break;
 8007a10:	e004      	b.n	8007a1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f875 	bl	8007b04 <USBD_CtlError>
      break;
 8007a1a:	bf00      	nop
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	885b      	ldrh	r3, [r3, #2]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d106      	bne.n	8007a44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f92b 	bl	8007c9a <USBD_CtlSendStatus>
  }
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d80b      	bhi.n	8007a7c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	885b      	ldrh	r3, [r3, #2]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d10c      	bne.n	8007a86 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f910 	bl	8007c9a <USBD_CtlSendStatus>
      }
      break;
 8007a7a:	e004      	b.n	8007a86 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f840 	bl	8007b04 <USBD_CtlError>
      break;
 8007a84:	e000      	b.n	8007a88 <USBD_ClrFeature+0x3c>
      break;
 8007a86:	bf00      	nop
  }
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	781a      	ldrb	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	781a      	ldrb	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7ff fabb 	bl	8007036 <SWAPBYTE>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3301      	adds	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff faae 	bl	8007036 <SWAPBYTE>
 8007ada:	4603      	mov	r3, r0
 8007adc:	461a      	mov	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7ff faa1 	bl	8007036 <SWAPBYTE>
 8007af4:	4603      	mov	r3, r0
 8007af6:	461a      	mov	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	80da      	strh	r2, [r3, #6]
}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b0e:	2180      	movs	r1, #128	; 0x80
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fcb1 	bl	8008478 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b16:	2100      	movs	r1, #0
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fcad 	bl	8008478 <USBD_LL_StallEP>
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b086      	sub	sp, #24
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d036      	beq.n	8007baa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b40:	6938      	ldr	r0, [r7, #16]
 8007b42:	f000 f836 	bl	8007bb2 <USBD_GetLen>
 8007b46:	4603      	mov	r3, r0
 8007b48:	3301      	adds	r3, #1
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	4413      	add	r3, r2
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	7812      	ldrb	r2, [r2, #0]
 8007b5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	3301      	adds	r3, #1
 8007b64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	2203      	movs	r2, #3
 8007b6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	3301      	adds	r3, #1
 8007b74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b76:	e013      	b.n	8007ba0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	7812      	ldrb	r2, [r2, #0]
 8007b82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	3301      	adds	r3, #1
 8007b88:	613b      	str	r3, [r7, #16]
    idx++;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	4413      	add	r3, r2
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e7      	bne.n	8007b78 <USBD_GetString+0x52>
 8007ba8:	e000      	b.n	8007bac <USBD_GetString+0x86>
    return;
 8007baa:	bf00      	nop
  }
}
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bc2:	e005      	b.n	8007bd0 <USBD_GetLen+0x1e>
  {
    len++;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1f5      	bne.n	8007bc4 <USBD_GetLen+0x12>
  }

  return len;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 fcbc 	bl	800858a <USBD_LL_Transmit>

  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 fcab 	bl	800858a <USBD_LL_Transmit>

  return USBD_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2203      	movs	r2, #3
 8007c4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	2100      	movs	r1, #0
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 fcaf 	bl	80085cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	2100      	movs	r1, #0
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fc9e 	bl	80085cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2204      	movs	r2, #4
 8007ca6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007caa:	2300      	movs	r3, #0
 8007cac:	2200      	movs	r2, #0
 8007cae:	2100      	movs	r1, #0
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fc6a 	bl	800858a <USBD_LL_Transmit>

  return USBD_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2205      	movs	r2, #5
 8007ccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fc78 	bl	80085cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007cec:	2200      	movs	r2, #0
 8007cee:	4912      	ldr	r1, [pc, #72]	; (8007d38 <MX_USB_DEVICE_Init+0x50>)
 8007cf0:	4812      	ldr	r0, [pc, #72]	; (8007d3c <MX_USB_DEVICE_Init+0x54>)
 8007cf2:	f7fe fe8f 	bl	8006a14 <USBD_Init>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cfc:	f7fa f818 	bl	8001d30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d00:	490f      	ldr	r1, [pc, #60]	; (8007d40 <MX_USB_DEVICE_Init+0x58>)
 8007d02:	480e      	ldr	r0, [pc, #56]	; (8007d3c <MX_USB_DEVICE_Init+0x54>)
 8007d04:	f7fe feb6 	bl	8006a74 <USBD_RegisterClass>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d0e:	f7fa f80f 	bl	8001d30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d12:	490c      	ldr	r1, [pc, #48]	; (8007d44 <MX_USB_DEVICE_Init+0x5c>)
 8007d14:	4809      	ldr	r0, [pc, #36]	; (8007d3c <MX_USB_DEVICE_Init+0x54>)
 8007d16:	f7fe fe07 	bl	8006928 <USBD_CDC_RegisterInterface>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d20:	f7fa f806 	bl	8001d30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d24:	4805      	ldr	r0, [pc, #20]	; (8007d3c <MX_USB_DEVICE_Init+0x54>)
 8007d26:	f7fe fecc 	bl	8006ac2 <USBD_Start>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d30:	f7f9 fffe 	bl	8001d30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d34:	bf00      	nop
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	20000130 	.word	0x20000130
 8007d3c:	2000048c 	.word	0x2000048c
 8007d40:	20000018 	.word	0x20000018
 8007d44:	2000011c 	.word	0x2000011c

08007d48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4905      	ldr	r1, [pc, #20]	; (8007d64 <CDC_Init_FS+0x1c>)
 8007d50:	4805      	ldr	r0, [pc, #20]	; (8007d68 <CDC_Init_FS+0x20>)
 8007d52:	f7fe fdfe 	bl	8006952 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d56:	4905      	ldr	r1, [pc, #20]	; (8007d6c <CDC_Init_FS+0x24>)
 8007d58:	4803      	ldr	r0, [pc, #12]	; (8007d68 <CDC_Init_FS+0x20>)
 8007d5a:	f7fe fe18 	bl	800698e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20000f5c 	.word	0x20000f5c
 8007d68:	2000048c 	.word	0x2000048c
 8007d6c:	2000075c 	.word	0x2000075c

08007d70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	6039      	str	r1, [r7, #0]
 8007d8a:	71fb      	strb	r3, [r7, #7]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d90:	79fb      	ldrb	r3, [r7, #7]
 8007d92:	2b23      	cmp	r3, #35	; 0x23
 8007d94:	d84a      	bhi.n	8007e2c <CDC_Control_FS+0xac>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <CDC_Control_FS+0x1c>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007e2d 	.word	0x08007e2d
 8007da0:	08007e2d 	.word	0x08007e2d
 8007da4:	08007e2d 	.word	0x08007e2d
 8007da8:	08007e2d 	.word	0x08007e2d
 8007dac:	08007e2d 	.word	0x08007e2d
 8007db0:	08007e2d 	.word	0x08007e2d
 8007db4:	08007e2d 	.word	0x08007e2d
 8007db8:	08007e2d 	.word	0x08007e2d
 8007dbc:	08007e2d 	.word	0x08007e2d
 8007dc0:	08007e2d 	.word	0x08007e2d
 8007dc4:	08007e2d 	.word	0x08007e2d
 8007dc8:	08007e2d 	.word	0x08007e2d
 8007dcc:	08007e2d 	.word	0x08007e2d
 8007dd0:	08007e2d 	.word	0x08007e2d
 8007dd4:	08007e2d 	.word	0x08007e2d
 8007dd8:	08007e2d 	.word	0x08007e2d
 8007ddc:	08007e2d 	.word	0x08007e2d
 8007de0:	08007e2d 	.word	0x08007e2d
 8007de4:	08007e2d 	.word	0x08007e2d
 8007de8:	08007e2d 	.word	0x08007e2d
 8007dec:	08007e2d 	.word	0x08007e2d
 8007df0:	08007e2d 	.word	0x08007e2d
 8007df4:	08007e2d 	.word	0x08007e2d
 8007df8:	08007e2d 	.word	0x08007e2d
 8007dfc:	08007e2d 	.word	0x08007e2d
 8007e00:	08007e2d 	.word	0x08007e2d
 8007e04:	08007e2d 	.word	0x08007e2d
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e2d 	.word	0x08007e2d
 8007e10:	08007e2d 	.word	0x08007e2d
 8007e14:	08007e2d 	.word	0x08007e2d
 8007e18:	08007e2d 	.word	0x08007e2d
 8007e1c:	08007e2d 	.word	0x08007e2d
 8007e20:	08007e2d 	.word	0x08007e2d
 8007e24:	08007e2d 	.word	0x08007e2d
 8007e28:	08007e2d 	.word	0x08007e2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e2c:	bf00      	nop
  }

  return (USBD_OK);
 8007e2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	4805      	ldr	r0, [pc, #20]	; (8007e60 <CDC_Receive_FS+0x24>)
 8007e4a:	f7fe fda0 	bl	800698e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e4e:	4804      	ldr	r0, [pc, #16]	; (8007e60 <CDC_Receive_FS+0x24>)
 8007e50:	f7fe fdb6 	bl	80069c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	2000048c 	.word	0x2000048c

08007e64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2212      	movs	r2, #18
 8007e98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e9a:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	2000014c 	.word	0x2000014c

08007eac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2204      	movs	r2, #4
 8007ebc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ebe:	4b03      	ldr	r3, [pc, #12]	; (8007ecc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	20000160 	.word	0x20000160

08007ed0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	6039      	str	r1, [r7, #0]
 8007eda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d105      	bne.n	8007eee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	4907      	ldr	r1, [pc, #28]	; (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ee6:	4808      	ldr	r0, [pc, #32]	; (8007f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ee8:	f7ff fe1d 	bl	8007b26 <USBD_GetString>
 8007eec:	e004      	b.n	8007ef8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	4904      	ldr	r1, [pc, #16]	; (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ef2:	4805      	ldr	r0, [pc, #20]	; (8007f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ef4:	f7ff fe17 	bl	8007b26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ef8:	4b02      	ldr	r3, [pc, #8]	; (8007f04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	2000175c 	.word	0x2000175c
 8007f08:	08009804 	.word	0x08009804

08007f0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	6039      	str	r1, [r7, #0]
 8007f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	4904      	ldr	r1, [pc, #16]	; (8007f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f1c:	4804      	ldr	r0, [pc, #16]	; (8007f30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f1e:	f7ff fe02 	bl	8007b26 <USBD_GetString>
  return USBD_StrDesc;
 8007f22:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	2000175c 	.word	0x2000175c
 8007f30:	0800981c 	.word	0x0800981c

08007f34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6039      	str	r1, [r7, #0]
 8007f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	221a      	movs	r2, #26
 8007f44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f46:	f000 f843 	bl	8007fd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f4a:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000164 	.word	0x20000164

08007f58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d105      	bne.n	8007f76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4907      	ldr	r1, [pc, #28]	; (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f6e:	4808      	ldr	r0, [pc, #32]	; (8007f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f70:	f7ff fdd9 	bl	8007b26 <USBD_GetString>
 8007f74:	e004      	b.n	8007f80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	4904      	ldr	r1, [pc, #16]	; (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f7a:	4805      	ldr	r0, [pc, #20]	; (8007f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f7c:	f7ff fdd3 	bl	8007b26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f80:	4b02      	ldr	r3, [pc, #8]	; (8007f8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	2000175c 	.word	0x2000175c
 8007f90:	08009830 	.word	0x08009830

08007f94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d105      	bne.n	8007fb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	4907      	ldr	r1, [pc, #28]	; (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007faa:	4808      	ldr	r0, [pc, #32]	; (8007fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fac:	f7ff fdbb 	bl	8007b26 <USBD_GetString>
 8007fb0:	e004      	b.n	8007fbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	4904      	ldr	r1, [pc, #16]	; (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fb6:	4805      	ldr	r0, [pc, #20]	; (8007fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fb8:	f7ff fdb5 	bl	8007b26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fbc:	4b02      	ldr	r3, [pc, #8]	; (8007fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	2000175c 	.word	0x2000175c
 8007fcc:	0800983c 	.word	0x0800983c

08007fd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fd6:	4b0f      	ldr	r3, [pc, #60]	; (8008014 <Get_SerialNum+0x44>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <Get_SerialNum+0x48>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	; (800801c <Get_SerialNum+0x4c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4413      	add	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	4909      	ldr	r1, [pc, #36]	; (8008020 <Get_SerialNum+0x50>)
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f814 	bl	8008028 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008000:	2204      	movs	r2, #4
 8008002:	4908      	ldr	r1, [pc, #32]	; (8008024 <Get_SerialNum+0x54>)
 8008004:	68b8      	ldr	r0, [r7, #8]
 8008006:	f000 f80f 	bl	8008028 <IntToUnicode>
  }
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	1fff7a10 	.word	0x1fff7a10
 8008018:	1fff7a14 	.word	0x1fff7a14
 800801c:	1fff7a18 	.word	0x1fff7a18
 8008020:	20000166 	.word	0x20000166
 8008024:	20000176 	.word	0x20000176

08008028 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
 800803e:	e027      	b.n	8008090 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	0f1b      	lsrs	r3, r3, #28
 8008044:	2b09      	cmp	r3, #9
 8008046:	d80b      	bhi.n	8008060 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	0f1b      	lsrs	r3, r3, #28
 800804c:	b2da      	uxtb	r2, r3
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	4619      	mov	r1, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	440b      	add	r3, r1
 8008058:	3230      	adds	r2, #48	; 0x30
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e00a      	b.n	8008076 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	0f1b      	lsrs	r3, r3, #28
 8008064:	b2da      	uxtb	r2, r3
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	4619      	mov	r1, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	440b      	add	r3, r1
 8008070:	3237      	adds	r2, #55	; 0x37
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	3301      	adds	r3, #1
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	4413      	add	r3, r2
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	3301      	adds	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]
 8008090:	7dfa      	ldrb	r2, [r7, #23]
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	429a      	cmp	r2, r3
 8008096:	d3d3      	bcc.n	8008040 <IntToUnicode+0x18>
  }
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
	...

080080a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08a      	sub	sp, #40	; 0x28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080b0:	f107 0314 	add.w	r3, r7, #20
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	605a      	str	r2, [r3, #4]
 80080ba:	609a      	str	r2, [r3, #8]
 80080bc:	60da      	str	r2, [r3, #12]
 80080be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080c8:	d13a      	bne.n	8008140 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	4b1e      	ldr	r3, [pc, #120]	; (8008148 <HAL_PCD_MspInit+0xa0>)
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	4a1d      	ldr	r2, [pc, #116]	; (8008148 <HAL_PCD_MspInit+0xa0>)
 80080d4:	f043 0301 	orr.w	r3, r3, #1
 80080d8:	6313      	str	r3, [r2, #48]	; 0x30
 80080da:	4b1b      	ldr	r3, [pc, #108]	; (8008148 <HAL_PCD_MspInit+0xa0>)
 80080dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	613b      	str	r3, [r7, #16]
 80080e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80080ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ec:	2302      	movs	r3, #2
 80080ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080f4:	2303      	movs	r3, #3
 80080f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080f8:	230a      	movs	r3, #10
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080fc:	f107 0314 	add.w	r3, r7, #20
 8008100:	4619      	mov	r1, r3
 8008102:	4812      	ldr	r0, [pc, #72]	; (800814c <HAL_PCD_MspInit+0xa4>)
 8008104:	f7fa fc2c 	bl	8002960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008108:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <HAL_PCD_MspInit+0xa0>)
 800810a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810c:	4a0e      	ldr	r2, [pc, #56]	; (8008148 <HAL_PCD_MspInit+0xa0>)
 800810e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008112:	6353      	str	r3, [r2, #52]	; 0x34
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <HAL_PCD_MspInit+0xa0>)
 800811a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811c:	4a0a      	ldr	r2, [pc, #40]	; (8008148 <HAL_PCD_MspInit+0xa0>)
 800811e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008122:	6453      	str	r3, [r2, #68]	; 0x44
 8008124:	4b08      	ldr	r3, [pc, #32]	; (8008148 <HAL_PCD_MspInit+0xa0>)
 8008126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008130:	2200      	movs	r2, #0
 8008132:	2100      	movs	r1, #0
 8008134:	2043      	movs	r0, #67	; 0x43
 8008136:	f7fa fbdc 	bl	80028f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800813a:	2043      	movs	r0, #67	; 0x43
 800813c:	f7fa fbf5 	bl	800292a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008140:	bf00      	nop
 8008142:	3728      	adds	r7, #40	; 0x28
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	40023800 	.word	0x40023800
 800814c:	40020000 	.word	0x40020000

08008150 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f7fe fcf6 	bl	8006b58 <USBD_LL_SetupStage>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008186:	78fa      	ldrb	r2, [r7, #3]
 8008188:	6879      	ldr	r1, [r7, #4]
 800818a:	4613      	mov	r3, r2
 800818c:	00db      	lsls	r3, r3, #3
 800818e:	1a9b      	subs	r3, r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	440b      	add	r3, r1
 8008194:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	4619      	mov	r1, r3
 800819e:	f7fe fd30 	bl	8006c02 <USBD_LL_DataOutStage>
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	460b      	mov	r3, r1
 80081b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80081bc:	78fa      	ldrb	r2, [r7, #3]
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	4613      	mov	r3, r2
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	440b      	add	r3, r1
 80081ca:	3348      	adds	r3, #72	; 0x48
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	4619      	mov	r1, r3
 80081d2:	f7fe fd79 	bl	8006cc8 <USBD_LL_DataInStage>
}
 80081d6:	bf00      	nop
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe fe8d 	bl	8006f0c <USBD_LL_SOF>
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008202:	2301      	movs	r3, #1
 8008204:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	2b02      	cmp	r3, #2
 800820c:	d001      	beq.n	8008212 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800820e:	f7f9 fd8f 	bl	8001d30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008218:	7bfa      	ldrb	r2, [r7, #15]
 800821a:	4611      	mov	r1, r2
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe fe37 	bl	8006e90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008228:	4618      	mov	r0, r3
 800822a:	f7fe fde3 	bl	8006df4 <USBD_LL_Reset>
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fe32 	bl	8006eb0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800825e:	f043 0301 	orr.w	r3, r3, #1
 8008262:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800826c:	4b04      	ldr	r3, [pc, #16]	; (8008280 <HAL_PCD_SuspendCallback+0x48>)
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	4a03      	ldr	r2, [pc, #12]	; (8008280 <HAL_PCD_SuspendCallback+0x48>)
 8008272:	f043 0306 	orr.w	r3, r3, #6
 8008276:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	e000ed00 	.word	0xe000ed00

08008284 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fe22 	bl	8006edc <USBD_LL_Resume>
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082b2:	78fa      	ldrb	r2, [r7, #3]
 80082b4:	4611      	mov	r1, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fe70 	bl	8006f9c <USBD_LL_IsoOUTIncomplete>
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fe38 	bl	8006f50 <USBD_LL_IsoINIncomplete>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe fe76 	bl	8006fe8 <USBD_LL_DevConnected>
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe fe73 	bl	8006ffe <USBD_LL_DevDisconnected>
}
 8008318:	bf00      	nop
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d13c      	bne.n	80083aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008330:	4a20      	ldr	r2, [pc, #128]	; (80083b4 <USBD_LL_Init+0x94>)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a1e      	ldr	r2, [pc, #120]	; (80083b4 <USBD_LL_Init+0x94>)
 800833c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008340:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <USBD_LL_Init+0x94>)
 8008342:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008346:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008348:	4b1a      	ldr	r3, [pc, #104]	; (80083b4 <USBD_LL_Init+0x94>)
 800834a:	2204      	movs	r2, #4
 800834c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800834e:	4b19      	ldr	r3, [pc, #100]	; (80083b4 <USBD_LL_Init+0x94>)
 8008350:	2202      	movs	r2, #2
 8008352:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008354:	4b17      	ldr	r3, [pc, #92]	; (80083b4 <USBD_LL_Init+0x94>)
 8008356:	2200      	movs	r2, #0
 8008358:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800835a:	4b16      	ldr	r3, [pc, #88]	; (80083b4 <USBD_LL_Init+0x94>)
 800835c:	2202      	movs	r2, #2
 800835e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008360:	4b14      	ldr	r3, [pc, #80]	; (80083b4 <USBD_LL_Init+0x94>)
 8008362:	2200      	movs	r2, #0
 8008364:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008366:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <USBD_LL_Init+0x94>)
 8008368:	2200      	movs	r2, #0
 800836a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800836c:	4b11      	ldr	r3, [pc, #68]	; (80083b4 <USBD_LL_Init+0x94>)
 800836e:	2200      	movs	r2, #0
 8008370:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008372:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <USBD_LL_Init+0x94>)
 8008374:	2200      	movs	r2, #0
 8008376:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008378:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <USBD_LL_Init+0x94>)
 800837a:	2200      	movs	r2, #0
 800837c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800837e:	480d      	ldr	r0, [pc, #52]	; (80083b4 <USBD_LL_Init+0x94>)
 8008380:	f7fa fca5 	bl	8002cce <HAL_PCD_Init>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800838a:	f7f9 fcd1 	bl	8001d30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800838e:	2180      	movs	r1, #128	; 0x80
 8008390:	4808      	ldr	r0, [pc, #32]	; (80083b4 <USBD_LL_Init+0x94>)
 8008392:	f7fb fe02 	bl	8003f9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008396:	2240      	movs	r2, #64	; 0x40
 8008398:	2100      	movs	r1, #0
 800839a:	4806      	ldr	r0, [pc, #24]	; (80083b4 <USBD_LL_Init+0x94>)
 800839c:	f7fb fdb6 	bl	8003f0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083a0:	2280      	movs	r2, #128	; 0x80
 80083a2:	2101      	movs	r1, #1
 80083a4:	4803      	ldr	r0, [pc, #12]	; (80083b4 <USBD_LL_Init+0x94>)
 80083a6:	f7fb fdb1 	bl	8003f0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	2000195c 	.word	0x2000195c

080083b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fa fd9a 	bl	8002f08 <HAL_PCD_Start>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 f942 	bl	8008664 <USBD_Get_USB_Status>
 80083e0:	4603      	mov	r3, r0
 80083e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	461a      	mov	r2, r3
 80083fc:	4603      	mov	r3, r0
 80083fe:	70fb      	strb	r3, [r7, #3]
 8008400:	460b      	mov	r3, r1
 8008402:	70bb      	strb	r3, [r7, #2]
 8008404:	4613      	mov	r3, r2
 8008406:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008416:	78bb      	ldrb	r3, [r7, #2]
 8008418:	883a      	ldrh	r2, [r7, #0]
 800841a:	78f9      	ldrb	r1, [r7, #3]
 800841c:	f7fb f97e 	bl	800371c <HAL_PCD_EP_Open>
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008424:	7bfb      	ldrb	r3, [r7, #15]
 8008426:	4618      	mov	r0, r3
 8008428:	f000 f91c 	bl	8008664 <USBD_Get_USB_Status>
 800842c:	4603      	mov	r3, r0
 800842e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008430:	7bbb      	ldrb	r3, [r7, #14]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	460b      	mov	r3, r1
 8008444:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008454:	78fa      	ldrb	r2, [r7, #3]
 8008456:	4611      	mov	r1, r2
 8008458:	4618      	mov	r0, r3
 800845a:	f7fb f9c7 	bl	80037ec <HAL_PCD_EP_Close>
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	4618      	mov	r0, r3
 8008466:	f000 f8fd 	bl	8008664 <USBD_Get_USB_Status>
 800846a:	4603      	mov	r3, r0
 800846c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800846e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008492:	78fa      	ldrb	r2, [r7, #3]
 8008494:	4611      	mov	r1, r2
 8008496:	4618      	mov	r0, r3
 8008498:	f7fb fa9f 	bl	80039da <HAL_PCD_EP_SetStall>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f8de 	bl	8008664 <USBD_Get_USB_Status>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084d0:	78fa      	ldrb	r2, [r7, #3]
 80084d2:	4611      	mov	r1, r2
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fb fae4 	bl	8003aa2 <HAL_PCD_EP_ClrStall>
 80084da:	4603      	mov	r3, r0
 80084dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 f8bf 	bl	8008664 <USBD_Get_USB_Status>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008506:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800850c:	2b00      	cmp	r3, #0
 800850e:	da0b      	bge.n	8008528 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008516:	68f9      	ldr	r1, [r7, #12]
 8008518:	4613      	mov	r3, r2
 800851a:	00db      	lsls	r3, r3, #3
 800851c:	1a9b      	subs	r3, r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	333e      	adds	r3, #62	; 0x3e
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	e00b      	b.n	8008540 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008528:	78fb      	ldrb	r3, [r7, #3]
 800852a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800852e:	68f9      	ldr	r1, [r7, #12]
 8008530:	4613      	mov	r3, r2
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	1a9b      	subs	r3, r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800853e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	4611      	mov	r1, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f7fb f8b1 	bl	80036d2 <HAL_PCD_SetAddress>
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 f874 	bl	8008664 <USBD_Get_USB_Status>
 800857c:	4603      	mov	r3, r0
 800857e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008580:	7bbb      	ldrb	r3, [r7, #14]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b086      	sub	sp, #24
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	460b      	mov	r3, r1
 8008598:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085a8:	7af9      	ldrb	r1, [r7, #11]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	f7fb f9ca 	bl	8003946 <HAL_PCD_EP_Transmit>
 80085b2:	4603      	mov	r3, r0
 80085b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f853 	bl	8008664 <USBD_Get_USB_Status>
 80085be:	4603      	mov	r3, r0
 80085c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	460b      	mov	r3, r1
 80085da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085ea:	7af9      	ldrb	r1, [r7, #11]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	f7fb f946 	bl	8003880 <HAL_PCD_EP_Receive>
 80085f4:	4603      	mov	r3, r0
 80085f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f832 	bl	8008664 <USBD_Get_USB_Status>
 8008600:	4603      	mov	r3, r0
 8008602:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008604:	7dbb      	ldrb	r3, [r7, #22]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008620:	78fa      	ldrb	r2, [r7, #3]
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f7fb f976 	bl	8003916 <HAL_PCD_EP_GetRxCount>
 800862a:	4603      	mov	r3, r0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800863c:	4b03      	ldr	r3, [pc, #12]	; (800864c <USBD_static_malloc+0x18>)
}
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	20000208 	.word	0x20000208

08008650 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]

}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d817      	bhi.n	80086a8 <USBD_Get_USB_Status+0x44>
 8008678:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <USBD_Get_USB_Status+0x1c>)
 800867a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867e:	bf00      	nop
 8008680:	08008691 	.word	0x08008691
 8008684:	08008697 	.word	0x08008697
 8008688:	0800869d 	.word	0x0800869d
 800868c:	080086a3 	.word	0x080086a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
    break;
 8008694:	e00b      	b.n	80086ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008696:	2303      	movs	r3, #3
 8008698:	73fb      	strb	r3, [r7, #15]
    break;
 800869a:	e008      	b.n	80086ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800869c:	2301      	movs	r3, #1
 800869e:	73fb      	strb	r3, [r7, #15]
    break;
 80086a0:	e005      	b.n	80086ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086a2:	2303      	movs	r3, #3
 80086a4:	73fb      	strb	r3, [r7, #15]
    break;
 80086a6:	e002      	b.n	80086ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086a8:	2303      	movs	r3, #3
 80086aa:	73fb      	strb	r3, [r7, #15]
    break;
 80086ac:	bf00      	nop
  }
  return usb_status;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <__errno>:
 80086bc:	4b01      	ldr	r3, [pc, #4]	; (80086c4 <__errno+0x8>)
 80086be:	6818      	ldr	r0, [r3, #0]
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	20000180 	.word	0x20000180

080086c8 <__libc_init_array>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	4d0d      	ldr	r5, [pc, #52]	; (8008700 <__libc_init_array+0x38>)
 80086cc:	4c0d      	ldr	r4, [pc, #52]	; (8008704 <__libc_init_array+0x3c>)
 80086ce:	1b64      	subs	r4, r4, r5
 80086d0:	10a4      	asrs	r4, r4, #2
 80086d2:	2600      	movs	r6, #0
 80086d4:	42a6      	cmp	r6, r4
 80086d6:	d109      	bne.n	80086ec <__libc_init_array+0x24>
 80086d8:	4d0b      	ldr	r5, [pc, #44]	; (8008708 <__libc_init_array+0x40>)
 80086da:	4c0c      	ldr	r4, [pc, #48]	; (800870c <__libc_init_array+0x44>)
 80086dc:	f001 f852 	bl	8009784 <_init>
 80086e0:	1b64      	subs	r4, r4, r5
 80086e2:	10a4      	asrs	r4, r4, #2
 80086e4:	2600      	movs	r6, #0
 80086e6:	42a6      	cmp	r6, r4
 80086e8:	d105      	bne.n	80086f6 <__libc_init_array+0x2e>
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f0:	4798      	blx	r3
 80086f2:	3601      	adds	r6, #1
 80086f4:	e7ee      	b.n	80086d4 <__libc_init_array+0xc>
 80086f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086fa:	4798      	blx	r3
 80086fc:	3601      	adds	r6, #1
 80086fe:	e7f2      	b.n	80086e6 <__libc_init_array+0x1e>
 8008700:	08009b50 	.word	0x08009b50
 8008704:	08009b50 	.word	0x08009b50
 8008708:	08009b50 	.word	0x08009b50
 800870c:	08009b54 	.word	0x08009b54

08008710 <memcpy>:
 8008710:	440a      	add	r2, r1
 8008712:	4291      	cmp	r1, r2
 8008714:	f100 33ff 	add.w	r3, r0, #4294967295
 8008718:	d100      	bne.n	800871c <memcpy+0xc>
 800871a:	4770      	bx	lr
 800871c:	b510      	push	{r4, lr}
 800871e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008726:	4291      	cmp	r1, r2
 8008728:	d1f9      	bne.n	800871e <memcpy+0xe>
 800872a:	bd10      	pop	{r4, pc}

0800872c <memset>:
 800872c:	4402      	add	r2, r0
 800872e:	4603      	mov	r3, r0
 8008730:	4293      	cmp	r3, r2
 8008732:	d100      	bne.n	8008736 <memset+0xa>
 8008734:	4770      	bx	lr
 8008736:	f803 1b01 	strb.w	r1, [r3], #1
 800873a:	e7f9      	b.n	8008730 <memset+0x4>

0800873c <swapfunc>:
 800873c:	2b02      	cmp	r3, #2
 800873e:	b510      	push	{r4, lr}
 8008740:	d00a      	beq.n	8008758 <swapfunc+0x1c>
 8008742:	0892      	lsrs	r2, r2, #2
 8008744:	3a01      	subs	r2, #1
 8008746:	6803      	ldr	r3, [r0, #0]
 8008748:	680c      	ldr	r4, [r1, #0]
 800874a:	f840 4b04 	str.w	r4, [r0], #4
 800874e:	2a00      	cmp	r2, #0
 8008750:	f841 3b04 	str.w	r3, [r1], #4
 8008754:	dcf6      	bgt.n	8008744 <swapfunc+0x8>
 8008756:	bd10      	pop	{r4, pc}
 8008758:	4402      	add	r2, r0
 800875a:	780c      	ldrb	r4, [r1, #0]
 800875c:	7803      	ldrb	r3, [r0, #0]
 800875e:	f800 4b01 	strb.w	r4, [r0], #1
 8008762:	f801 3b01 	strb.w	r3, [r1], #1
 8008766:	1a13      	subs	r3, r2, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	dcf6      	bgt.n	800875a <swapfunc+0x1e>
 800876c:	e7f3      	b.n	8008756 <swapfunc+0x1a>

0800876e <med3.isra.0>:
 800876e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008770:	460f      	mov	r7, r1
 8008772:	4614      	mov	r4, r2
 8008774:	4606      	mov	r6, r0
 8008776:	461d      	mov	r5, r3
 8008778:	4798      	blx	r3
 800877a:	2800      	cmp	r0, #0
 800877c:	4621      	mov	r1, r4
 800877e:	4638      	mov	r0, r7
 8008780:	da0c      	bge.n	800879c <med3.isra.0+0x2e>
 8008782:	47a8      	blx	r5
 8008784:	2800      	cmp	r0, #0
 8008786:	da02      	bge.n	800878e <med3.isra.0+0x20>
 8008788:	463c      	mov	r4, r7
 800878a:	4620      	mov	r0, r4
 800878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800878e:	4621      	mov	r1, r4
 8008790:	4630      	mov	r0, r6
 8008792:	47a8      	blx	r5
 8008794:	2800      	cmp	r0, #0
 8008796:	dbf8      	blt.n	800878a <med3.isra.0+0x1c>
 8008798:	4634      	mov	r4, r6
 800879a:	e7f6      	b.n	800878a <med3.isra.0+0x1c>
 800879c:	47a8      	blx	r5
 800879e:	2800      	cmp	r0, #0
 80087a0:	dcf2      	bgt.n	8008788 <med3.isra.0+0x1a>
 80087a2:	4621      	mov	r1, r4
 80087a4:	4630      	mov	r0, r6
 80087a6:	47a8      	blx	r5
 80087a8:	2800      	cmp	r0, #0
 80087aa:	daee      	bge.n	800878a <med3.isra.0+0x1c>
 80087ac:	e7f4      	b.n	8008798 <med3.isra.0+0x2a>

080087ae <qsort>:
 80087ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b2:	469a      	mov	sl, r3
 80087b4:	ea40 0302 	orr.w	r3, r0, r2
 80087b8:	079b      	lsls	r3, r3, #30
 80087ba:	b097      	sub	sp, #92	; 0x5c
 80087bc:	4606      	mov	r6, r0
 80087be:	4614      	mov	r4, r2
 80087c0:	d11a      	bne.n	80087f8 <qsort+0x4a>
 80087c2:	f1b2 0804 	subs.w	r8, r2, #4
 80087c6:	bf18      	it	ne
 80087c8:	f04f 0801 	movne.w	r8, #1
 80087cc:	2300      	movs	r3, #0
 80087ce:	9302      	str	r3, [sp, #8]
 80087d0:	1933      	adds	r3, r6, r4
 80087d2:	fb04 f701 	mul.w	r7, r4, r1
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	2906      	cmp	r1, #6
 80087da:	eb06 0307 	add.w	r3, r6, r7
 80087de:	9303      	str	r3, [sp, #12]
 80087e0:	d82a      	bhi.n	8008838 <qsort+0x8a>
 80087e2:	9b01      	ldr	r3, [sp, #4]
 80087e4:	9a03      	ldr	r2, [sp, #12]
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d310      	bcc.n	800880c <qsort+0x5e>
 80087ea:	9b02      	ldr	r3, [sp, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f040 811f 	bne.w	8008a30 <qsort+0x282>
 80087f2:	b017      	add	sp, #92	; 0x5c
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f8:	f04f 0802 	mov.w	r8, #2
 80087fc:	e7e6      	b.n	80087cc <qsort+0x1e>
 80087fe:	4643      	mov	r3, r8
 8008800:	4622      	mov	r2, r4
 8008802:	4639      	mov	r1, r7
 8008804:	4628      	mov	r0, r5
 8008806:	f7ff ff99 	bl	800873c <swapfunc>
 800880a:	e00e      	b.n	800882a <qsort+0x7c>
 800880c:	9d01      	ldr	r5, [sp, #4]
 800880e:	e00d      	b.n	800882c <qsort+0x7e>
 8008810:	1b2f      	subs	r7, r5, r4
 8008812:	4629      	mov	r1, r5
 8008814:	4638      	mov	r0, r7
 8008816:	47d0      	blx	sl
 8008818:	2800      	cmp	r0, #0
 800881a:	dd09      	ble.n	8008830 <qsort+0x82>
 800881c:	f1b8 0f00 	cmp.w	r8, #0
 8008820:	d1ed      	bne.n	80087fe <qsort+0x50>
 8008822:	682b      	ldr	r3, [r5, #0]
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	602a      	str	r2, [r5, #0]
 8008828:	603b      	str	r3, [r7, #0]
 800882a:	463d      	mov	r5, r7
 800882c:	42ae      	cmp	r6, r5
 800882e:	d3ef      	bcc.n	8008810 <qsort+0x62>
 8008830:	9b01      	ldr	r3, [sp, #4]
 8008832:	4423      	add	r3, r4
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	e7d4      	b.n	80087e2 <qsort+0x34>
 8008838:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800883c:	1b3f      	subs	r7, r7, r4
 800883e:	2907      	cmp	r1, #7
 8008840:	fb04 6909 	mla	r9, r4, r9, r6
 8008844:	4437      	add	r7, r6
 8008846:	d022      	beq.n	800888e <qsort+0xe0>
 8008848:	2928      	cmp	r1, #40	; 0x28
 800884a:	d945      	bls.n	80088d8 <qsort+0x12a>
 800884c:	08c9      	lsrs	r1, r1, #3
 800884e:	fb04 f501 	mul.w	r5, r4, r1
 8008852:	4653      	mov	r3, sl
 8008854:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8008858:	1971      	adds	r1, r6, r5
 800885a:	4630      	mov	r0, r6
 800885c:	f7ff ff87 	bl	800876e <med3.isra.0>
 8008860:	4649      	mov	r1, r9
 8008862:	eb09 0205 	add.w	r2, r9, r5
 8008866:	4653      	mov	r3, sl
 8008868:	4683      	mov	fp, r0
 800886a:	1b48      	subs	r0, r1, r5
 800886c:	f7ff ff7f 	bl	800876e <med3.isra.0>
 8008870:	463a      	mov	r2, r7
 8008872:	4681      	mov	r9, r0
 8008874:	4653      	mov	r3, sl
 8008876:	1b79      	subs	r1, r7, r5
 8008878:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800887c:	f7ff ff77 	bl	800876e <med3.isra.0>
 8008880:	4602      	mov	r2, r0
 8008882:	4649      	mov	r1, r9
 8008884:	4653      	mov	r3, sl
 8008886:	4658      	mov	r0, fp
 8008888:	f7ff ff71 	bl	800876e <med3.isra.0>
 800888c:	4681      	mov	r9, r0
 800888e:	f1b8 0f00 	cmp.w	r8, #0
 8008892:	d124      	bne.n	80088de <qsort+0x130>
 8008894:	6833      	ldr	r3, [r6, #0]
 8008896:	f8d9 2000 	ldr.w	r2, [r9]
 800889a:	6032      	str	r2, [r6, #0]
 800889c:	f8c9 3000 	str.w	r3, [r9]
 80088a0:	eb06 0b04 	add.w	fp, r6, r4
 80088a4:	46b9      	mov	r9, r7
 80088a6:	465d      	mov	r5, fp
 80088a8:	2300      	movs	r3, #0
 80088aa:	45bb      	cmp	fp, r7
 80088ac:	d835      	bhi.n	800891a <qsort+0x16c>
 80088ae:	4631      	mov	r1, r6
 80088b0:	4658      	mov	r0, fp
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	47d0      	blx	sl
 80088b6:	2800      	cmp	r0, #0
 80088b8:	9b04      	ldr	r3, [sp, #16]
 80088ba:	dc3e      	bgt.n	800893a <qsort+0x18c>
 80088bc:	d10a      	bne.n	80088d4 <qsort+0x126>
 80088be:	f1b8 0f00 	cmp.w	r8, #0
 80088c2:	d113      	bne.n	80088ec <qsort+0x13e>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	f8db 2000 	ldr.w	r2, [fp]
 80088ca:	602a      	str	r2, [r5, #0]
 80088cc:	f8cb 3000 	str.w	r3, [fp]
 80088d0:	4425      	add	r5, r4
 80088d2:	2301      	movs	r3, #1
 80088d4:	44a3      	add	fp, r4
 80088d6:	e7e8      	b.n	80088aa <qsort+0xfc>
 80088d8:	463a      	mov	r2, r7
 80088da:	46b3      	mov	fp, r6
 80088dc:	e7d1      	b.n	8008882 <qsort+0xd4>
 80088de:	4643      	mov	r3, r8
 80088e0:	4622      	mov	r2, r4
 80088e2:	4649      	mov	r1, r9
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff ff29 	bl	800873c <swapfunc>
 80088ea:	e7d9      	b.n	80088a0 <qsort+0xf2>
 80088ec:	4643      	mov	r3, r8
 80088ee:	4622      	mov	r2, r4
 80088f0:	4659      	mov	r1, fp
 80088f2:	4628      	mov	r0, r5
 80088f4:	f7ff ff22 	bl	800873c <swapfunc>
 80088f8:	e7ea      	b.n	80088d0 <qsort+0x122>
 80088fa:	d10b      	bne.n	8008914 <qsort+0x166>
 80088fc:	f1b8 0f00 	cmp.w	r8, #0
 8008900:	d114      	bne.n	800892c <qsort+0x17e>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	f8d9 2000 	ldr.w	r2, [r9]
 8008908:	603a      	str	r2, [r7, #0]
 800890a:	f8c9 3000 	str.w	r3, [r9]
 800890e:	eba9 0904 	sub.w	r9, r9, r4
 8008912:	2301      	movs	r3, #1
 8008914:	9f04      	ldr	r7, [sp, #16]
 8008916:	45bb      	cmp	fp, r7
 8008918:	d90f      	bls.n	800893a <qsort+0x18c>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d143      	bne.n	80089a6 <qsort+0x1f8>
 800891e:	9b01      	ldr	r3, [sp, #4]
 8008920:	9a03      	ldr	r2, [sp, #12]
 8008922:	4293      	cmp	r3, r2
 8008924:	f4bf af61 	bcs.w	80087ea <qsort+0x3c>
 8008928:	9d01      	ldr	r5, [sp, #4]
 800892a:	e036      	b.n	800899a <qsort+0x1ec>
 800892c:	4643      	mov	r3, r8
 800892e:	4622      	mov	r2, r4
 8008930:	4649      	mov	r1, r9
 8008932:	4638      	mov	r0, r7
 8008934:	f7ff ff02 	bl	800873c <swapfunc>
 8008938:	e7e9      	b.n	800890e <qsort+0x160>
 800893a:	4631      	mov	r1, r6
 800893c:	4638      	mov	r0, r7
 800893e:	9305      	str	r3, [sp, #20]
 8008940:	47d0      	blx	sl
 8008942:	1b3b      	subs	r3, r7, r4
 8008944:	2800      	cmp	r0, #0
 8008946:	9304      	str	r3, [sp, #16]
 8008948:	9b05      	ldr	r3, [sp, #20]
 800894a:	dad6      	bge.n	80088fa <qsort+0x14c>
 800894c:	f1b8 0f00 	cmp.w	r8, #0
 8008950:	d006      	beq.n	8008960 <qsort+0x1b2>
 8008952:	4643      	mov	r3, r8
 8008954:	4622      	mov	r2, r4
 8008956:	4639      	mov	r1, r7
 8008958:	4658      	mov	r0, fp
 800895a:	f7ff feef 	bl	800873c <swapfunc>
 800895e:	e005      	b.n	800896c <qsort+0x1be>
 8008960:	f8db 3000 	ldr.w	r3, [fp]
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	f8cb 2000 	str.w	r2, [fp]
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	9f04      	ldr	r7, [sp, #16]
 800896e:	e7b0      	b.n	80088d2 <qsort+0x124>
 8008970:	4643      	mov	r3, r8
 8008972:	4622      	mov	r2, r4
 8008974:	4639      	mov	r1, r7
 8008976:	4628      	mov	r0, r5
 8008978:	f7ff fee0 	bl	800873c <swapfunc>
 800897c:	e00c      	b.n	8008998 <qsort+0x1ea>
 800897e:	1b2f      	subs	r7, r5, r4
 8008980:	4629      	mov	r1, r5
 8008982:	4638      	mov	r0, r7
 8008984:	47d0      	blx	sl
 8008986:	2800      	cmp	r0, #0
 8008988:	dd09      	ble.n	800899e <qsort+0x1f0>
 800898a:	f1b8 0f00 	cmp.w	r8, #0
 800898e:	d1ef      	bne.n	8008970 <qsort+0x1c2>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	602a      	str	r2, [r5, #0]
 8008996:	603b      	str	r3, [r7, #0]
 8008998:	463d      	mov	r5, r7
 800899a:	42ae      	cmp	r6, r5
 800899c:	d3ef      	bcc.n	800897e <qsort+0x1d0>
 800899e:	9b01      	ldr	r3, [sp, #4]
 80089a0:	4423      	add	r3, r4
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	e7bb      	b.n	800891e <qsort+0x170>
 80089a6:	ebab 0305 	sub.w	r3, fp, r5
 80089aa:	1baa      	subs	r2, r5, r6
 80089ac:	429a      	cmp	r2, r3
 80089ae:	bfa8      	it	ge
 80089b0:	461a      	movge	r2, r3
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	b12a      	cbz	r2, 80089c2 <qsort+0x214>
 80089b6:	4643      	mov	r3, r8
 80089b8:	ebab 0102 	sub.w	r1, fp, r2
 80089bc:	4630      	mov	r0, r6
 80089be:	f7ff febd 	bl	800873c <swapfunc>
 80089c2:	9b03      	ldr	r3, [sp, #12]
 80089c4:	eba3 0209 	sub.w	r2, r3, r9
 80089c8:	eba9 0707 	sub.w	r7, r9, r7
 80089cc:	1b12      	subs	r2, r2, r4
 80089ce:	42ba      	cmp	r2, r7
 80089d0:	bf28      	it	cs
 80089d2:	463a      	movcs	r2, r7
 80089d4:	b12a      	cbz	r2, 80089e2 <qsort+0x234>
 80089d6:	9903      	ldr	r1, [sp, #12]
 80089d8:	4643      	mov	r3, r8
 80089da:	1a89      	subs	r1, r1, r2
 80089dc:	4658      	mov	r0, fp
 80089de:	f7ff fead 	bl	800873c <swapfunc>
 80089e2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	454f      	cmp	r7, r9
 80089ea:	eba3 0007 	sub.w	r0, r3, r7
 80089ee:	d904      	bls.n	80089fa <qsort+0x24c>
 80089f0:	4633      	mov	r3, r6
 80089f2:	46b9      	mov	r9, r7
 80089f4:	9f01      	ldr	r7, [sp, #4]
 80089f6:	4606      	mov	r6, r0
 80089f8:	4618      	mov	r0, r3
 80089fa:	42a7      	cmp	r7, r4
 80089fc:	d921      	bls.n	8008a42 <qsort+0x294>
 80089fe:	fbb7 f1f4 	udiv	r1, r7, r4
 8008a02:	9b02      	ldr	r3, [sp, #8]
 8008a04:	2b07      	cmp	r3, #7
 8008a06:	d80d      	bhi.n	8008a24 <qsort+0x276>
 8008a08:	fbb9 f7f4 	udiv	r7, r9, r4
 8008a0c:	aa16      	add	r2, sp, #88	; 0x58
 8008a0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a12:	f843 6c40 	str.w	r6, [r3, #-64]
 8008a16:	f843 7c3c 	str.w	r7, [r3, #-60]
 8008a1a:	9b02      	ldr	r3, [sp, #8]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	9302      	str	r3, [sp, #8]
 8008a20:	4606      	mov	r6, r0
 8008a22:	e6d5      	b.n	80087d0 <qsort+0x22>
 8008a24:	4653      	mov	r3, sl
 8008a26:	4622      	mov	r2, r4
 8008a28:	f7ff fec1 	bl	80087ae <qsort>
 8008a2c:	45a1      	cmp	r9, r4
 8008a2e:	d80b      	bhi.n	8008a48 <qsort+0x29a>
 8008a30:	9b02      	ldr	r3, [sp, #8]
 8008a32:	aa16      	add	r2, sp, #88	; 0x58
 8008a34:	3b01      	subs	r3, #1
 8008a36:	9302      	str	r3, [sp, #8]
 8008a38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a3c:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8008a40:	e7ee      	b.n	8008a20 <qsort+0x272>
 8008a42:	45a1      	cmp	r9, r4
 8008a44:	f67f aed1 	bls.w	80087ea <qsort+0x3c>
 8008a48:	fbb9 f1f4 	udiv	r1, r9, r4
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	e7e7      	b.n	8008a20 <qsort+0x272>

08008a50 <siprintf>:
 8008a50:	b40e      	push	{r1, r2, r3}
 8008a52:	b500      	push	{lr}
 8008a54:	b09c      	sub	sp, #112	; 0x70
 8008a56:	ab1d      	add	r3, sp, #116	; 0x74
 8008a58:	9002      	str	r0, [sp, #8]
 8008a5a:	9006      	str	r0, [sp, #24]
 8008a5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a60:	4809      	ldr	r0, [pc, #36]	; (8008a88 <siprintf+0x38>)
 8008a62:	9107      	str	r1, [sp, #28]
 8008a64:	9104      	str	r1, [sp, #16]
 8008a66:	4909      	ldr	r1, [pc, #36]	; (8008a8c <siprintf+0x3c>)
 8008a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a6c:	9105      	str	r1, [sp, #20]
 8008a6e:	6800      	ldr	r0, [r0, #0]
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	a902      	add	r1, sp, #8
 8008a74:	f000 f868 	bl	8008b48 <_svfiprintf_r>
 8008a78:	9b02      	ldr	r3, [sp, #8]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	701a      	strb	r2, [r3, #0]
 8008a7e:	b01c      	add	sp, #112	; 0x70
 8008a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a84:	b003      	add	sp, #12
 8008a86:	4770      	bx	lr
 8008a88:	20000180 	.word	0x20000180
 8008a8c:	ffff0208 	.word	0xffff0208

08008a90 <__ssputs_r>:
 8008a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	688e      	ldr	r6, [r1, #8]
 8008a96:	429e      	cmp	r6, r3
 8008a98:	4682      	mov	sl, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	4690      	mov	r8, r2
 8008a9e:	461f      	mov	r7, r3
 8008aa0:	d838      	bhi.n	8008b14 <__ssputs_r+0x84>
 8008aa2:	898a      	ldrh	r2, [r1, #12]
 8008aa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008aa8:	d032      	beq.n	8008b10 <__ssputs_r+0x80>
 8008aaa:	6825      	ldr	r5, [r4, #0]
 8008aac:	6909      	ldr	r1, [r1, #16]
 8008aae:	eba5 0901 	sub.w	r9, r5, r1
 8008ab2:	6965      	ldr	r5, [r4, #20]
 8008ab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ab8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008abc:	3301      	adds	r3, #1
 8008abe:	444b      	add	r3, r9
 8008ac0:	106d      	asrs	r5, r5, #1
 8008ac2:	429d      	cmp	r5, r3
 8008ac4:	bf38      	it	cc
 8008ac6:	461d      	movcc	r5, r3
 8008ac8:	0553      	lsls	r3, r2, #21
 8008aca:	d531      	bpl.n	8008b30 <__ssputs_r+0xa0>
 8008acc:	4629      	mov	r1, r5
 8008ace:	f000 fb39 	bl	8009144 <_malloc_r>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	b950      	cbnz	r0, 8008aec <__ssputs_r+0x5c>
 8008ad6:	230c      	movs	r3, #12
 8008ad8:	f8ca 3000 	str.w	r3, [sl]
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ae2:	81a3      	strh	r3, [r4, #12]
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aec:	6921      	ldr	r1, [r4, #16]
 8008aee:	464a      	mov	r2, r9
 8008af0:	f7ff fe0e 	bl	8008710 <memcpy>
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afe:	81a3      	strh	r3, [r4, #12]
 8008b00:	6126      	str	r6, [r4, #16]
 8008b02:	6165      	str	r5, [r4, #20]
 8008b04:	444e      	add	r6, r9
 8008b06:	eba5 0509 	sub.w	r5, r5, r9
 8008b0a:	6026      	str	r6, [r4, #0]
 8008b0c:	60a5      	str	r5, [r4, #8]
 8008b0e:	463e      	mov	r6, r7
 8008b10:	42be      	cmp	r6, r7
 8008b12:	d900      	bls.n	8008b16 <__ssputs_r+0x86>
 8008b14:	463e      	mov	r6, r7
 8008b16:	4632      	mov	r2, r6
 8008b18:	6820      	ldr	r0, [r4, #0]
 8008b1a:	4641      	mov	r1, r8
 8008b1c:	f000 faa8 	bl	8009070 <memmove>
 8008b20:	68a3      	ldr	r3, [r4, #8]
 8008b22:	6822      	ldr	r2, [r4, #0]
 8008b24:	1b9b      	subs	r3, r3, r6
 8008b26:	4432      	add	r2, r6
 8008b28:	60a3      	str	r3, [r4, #8]
 8008b2a:	6022      	str	r2, [r4, #0]
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e7db      	b.n	8008ae8 <__ssputs_r+0x58>
 8008b30:	462a      	mov	r2, r5
 8008b32:	f000 fb61 	bl	80091f8 <_realloc_r>
 8008b36:	4606      	mov	r6, r0
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d1e1      	bne.n	8008b00 <__ssputs_r+0x70>
 8008b3c:	6921      	ldr	r1, [r4, #16]
 8008b3e:	4650      	mov	r0, sl
 8008b40:	f000 fab0 	bl	80090a4 <_free_r>
 8008b44:	e7c7      	b.n	8008ad6 <__ssputs_r+0x46>
	...

08008b48 <_svfiprintf_r>:
 8008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	4698      	mov	r8, r3
 8008b4e:	898b      	ldrh	r3, [r1, #12]
 8008b50:	061b      	lsls	r3, r3, #24
 8008b52:	b09d      	sub	sp, #116	; 0x74
 8008b54:	4607      	mov	r7, r0
 8008b56:	460d      	mov	r5, r1
 8008b58:	4614      	mov	r4, r2
 8008b5a:	d50e      	bpl.n	8008b7a <_svfiprintf_r+0x32>
 8008b5c:	690b      	ldr	r3, [r1, #16]
 8008b5e:	b963      	cbnz	r3, 8008b7a <_svfiprintf_r+0x32>
 8008b60:	2140      	movs	r1, #64	; 0x40
 8008b62:	f000 faef 	bl	8009144 <_malloc_r>
 8008b66:	6028      	str	r0, [r5, #0]
 8008b68:	6128      	str	r0, [r5, #16]
 8008b6a:	b920      	cbnz	r0, 8008b76 <_svfiprintf_r+0x2e>
 8008b6c:	230c      	movs	r3, #12
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295
 8008b74:	e0d1      	b.n	8008d1a <_svfiprintf_r+0x1d2>
 8008b76:	2340      	movs	r3, #64	; 0x40
 8008b78:	616b      	str	r3, [r5, #20]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7e:	2320      	movs	r3, #32
 8008b80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b88:	2330      	movs	r3, #48	; 0x30
 8008b8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d34 <_svfiprintf_r+0x1ec>
 8008b8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b92:	f04f 0901 	mov.w	r9, #1
 8008b96:	4623      	mov	r3, r4
 8008b98:	469a      	mov	sl, r3
 8008b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b9e:	b10a      	cbz	r2, 8008ba4 <_svfiprintf_r+0x5c>
 8008ba0:	2a25      	cmp	r2, #37	; 0x25
 8008ba2:	d1f9      	bne.n	8008b98 <_svfiprintf_r+0x50>
 8008ba4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ba8:	d00b      	beq.n	8008bc2 <_svfiprintf_r+0x7a>
 8008baa:	465b      	mov	r3, fp
 8008bac:	4622      	mov	r2, r4
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7ff ff6d 	bl	8008a90 <__ssputs_r>
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	f000 80aa 	beq.w	8008d10 <_svfiprintf_r+0x1c8>
 8008bbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bbe:	445a      	add	r2, fp
 8008bc0:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 80a2 	beq.w	8008d10 <_svfiprintf_r+0x1c8>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bd6:	f10a 0a01 	add.w	sl, sl, #1
 8008bda:	9304      	str	r3, [sp, #16]
 8008bdc:	9307      	str	r3, [sp, #28]
 8008bde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008be2:	931a      	str	r3, [sp, #104]	; 0x68
 8008be4:	4654      	mov	r4, sl
 8008be6:	2205      	movs	r2, #5
 8008be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bec:	4851      	ldr	r0, [pc, #324]	; (8008d34 <_svfiprintf_r+0x1ec>)
 8008bee:	f7f7 faf7 	bl	80001e0 <memchr>
 8008bf2:	9a04      	ldr	r2, [sp, #16]
 8008bf4:	b9d8      	cbnz	r0, 8008c2e <_svfiprintf_r+0xe6>
 8008bf6:	06d0      	lsls	r0, r2, #27
 8008bf8:	bf44      	itt	mi
 8008bfa:	2320      	movmi	r3, #32
 8008bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c00:	0711      	lsls	r1, r2, #28
 8008c02:	bf44      	itt	mi
 8008c04:	232b      	movmi	r3, #43	; 0x2b
 8008c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c10:	d015      	beq.n	8008c3e <_svfiprintf_r+0xf6>
 8008c12:	9a07      	ldr	r2, [sp, #28]
 8008c14:	4654      	mov	r4, sl
 8008c16:	2000      	movs	r0, #0
 8008c18:	f04f 0c0a 	mov.w	ip, #10
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c22:	3b30      	subs	r3, #48	; 0x30
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	d94e      	bls.n	8008cc6 <_svfiprintf_r+0x17e>
 8008c28:	b1b0      	cbz	r0, 8008c58 <_svfiprintf_r+0x110>
 8008c2a:	9207      	str	r2, [sp, #28]
 8008c2c:	e014      	b.n	8008c58 <_svfiprintf_r+0x110>
 8008c2e:	eba0 0308 	sub.w	r3, r0, r8
 8008c32:	fa09 f303 	lsl.w	r3, r9, r3
 8008c36:	4313      	orrs	r3, r2
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	46a2      	mov	sl, r4
 8008c3c:	e7d2      	b.n	8008be4 <_svfiprintf_r+0x9c>
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	1d19      	adds	r1, r3, #4
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	9103      	str	r1, [sp, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bfbb      	ittet	lt
 8008c4a:	425b      	neglt	r3, r3
 8008c4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c50:	9307      	strge	r3, [sp, #28]
 8008c52:	9307      	strlt	r3, [sp, #28]
 8008c54:	bfb8      	it	lt
 8008c56:	9204      	strlt	r2, [sp, #16]
 8008c58:	7823      	ldrb	r3, [r4, #0]
 8008c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c5c:	d10c      	bne.n	8008c78 <_svfiprintf_r+0x130>
 8008c5e:	7863      	ldrb	r3, [r4, #1]
 8008c60:	2b2a      	cmp	r3, #42	; 0x2a
 8008c62:	d135      	bne.n	8008cd0 <_svfiprintf_r+0x188>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	1d1a      	adds	r2, r3, #4
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	9203      	str	r2, [sp, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bfb8      	it	lt
 8008c70:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c74:	3402      	adds	r4, #2
 8008c76:	9305      	str	r3, [sp, #20]
 8008c78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d44 <_svfiprintf_r+0x1fc>
 8008c7c:	7821      	ldrb	r1, [r4, #0]
 8008c7e:	2203      	movs	r2, #3
 8008c80:	4650      	mov	r0, sl
 8008c82:	f7f7 faad 	bl	80001e0 <memchr>
 8008c86:	b140      	cbz	r0, 8008c9a <_svfiprintf_r+0x152>
 8008c88:	2340      	movs	r3, #64	; 0x40
 8008c8a:	eba0 000a 	sub.w	r0, r0, sl
 8008c8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008c92:	9b04      	ldr	r3, [sp, #16]
 8008c94:	4303      	orrs	r3, r0
 8008c96:	3401      	adds	r4, #1
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9e:	4826      	ldr	r0, [pc, #152]	; (8008d38 <_svfiprintf_r+0x1f0>)
 8008ca0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ca4:	2206      	movs	r2, #6
 8008ca6:	f7f7 fa9b 	bl	80001e0 <memchr>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d038      	beq.n	8008d20 <_svfiprintf_r+0x1d8>
 8008cae:	4b23      	ldr	r3, [pc, #140]	; (8008d3c <_svfiprintf_r+0x1f4>)
 8008cb0:	bb1b      	cbnz	r3, 8008cfa <_svfiprintf_r+0x1b2>
 8008cb2:	9b03      	ldr	r3, [sp, #12]
 8008cb4:	3307      	adds	r3, #7
 8008cb6:	f023 0307 	bic.w	r3, r3, #7
 8008cba:	3308      	adds	r3, #8
 8008cbc:	9303      	str	r3, [sp, #12]
 8008cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc0:	4433      	add	r3, r6
 8008cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc4:	e767      	b.n	8008b96 <_svfiprintf_r+0x4e>
 8008cc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cca:	460c      	mov	r4, r1
 8008ccc:	2001      	movs	r0, #1
 8008cce:	e7a5      	b.n	8008c1c <_svfiprintf_r+0xd4>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	3401      	adds	r4, #1
 8008cd4:	9305      	str	r3, [sp, #20]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	f04f 0c0a 	mov.w	ip, #10
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ce2:	3a30      	subs	r2, #48	; 0x30
 8008ce4:	2a09      	cmp	r2, #9
 8008ce6:	d903      	bls.n	8008cf0 <_svfiprintf_r+0x1a8>
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d0c5      	beq.n	8008c78 <_svfiprintf_r+0x130>
 8008cec:	9105      	str	r1, [sp, #20]
 8008cee:	e7c3      	b.n	8008c78 <_svfiprintf_r+0x130>
 8008cf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e7f0      	b.n	8008cdc <_svfiprintf_r+0x194>
 8008cfa:	ab03      	add	r3, sp, #12
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	462a      	mov	r2, r5
 8008d00:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <_svfiprintf_r+0x1f8>)
 8008d02:	a904      	add	r1, sp, #16
 8008d04:	4638      	mov	r0, r7
 8008d06:	f3af 8000 	nop.w
 8008d0a:	1c42      	adds	r2, r0, #1
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	d1d6      	bne.n	8008cbe <_svfiprintf_r+0x176>
 8008d10:	89ab      	ldrh	r3, [r5, #12]
 8008d12:	065b      	lsls	r3, r3, #25
 8008d14:	f53f af2c 	bmi.w	8008b70 <_svfiprintf_r+0x28>
 8008d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d1a:	b01d      	add	sp, #116	; 0x74
 8008d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d20:	ab03      	add	r3, sp, #12
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	462a      	mov	r2, r5
 8008d26:	4b06      	ldr	r3, [pc, #24]	; (8008d40 <_svfiprintf_r+0x1f8>)
 8008d28:	a904      	add	r1, sp, #16
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	f000 f87a 	bl	8008e24 <_printf_i>
 8008d30:	e7eb      	b.n	8008d0a <_svfiprintf_r+0x1c2>
 8008d32:	bf00      	nop
 8008d34:	08009aa0 	.word	0x08009aa0
 8008d38:	08009aaa 	.word	0x08009aaa
 8008d3c:	00000000 	.word	0x00000000
 8008d40:	08008a91 	.word	0x08008a91
 8008d44:	08009aa6 	.word	0x08009aa6

08008d48 <_printf_common>:
 8008d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4c:	4616      	mov	r6, r2
 8008d4e:	4699      	mov	r9, r3
 8008d50:	688a      	ldr	r2, [r1, #8]
 8008d52:	690b      	ldr	r3, [r1, #16]
 8008d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	bfb8      	it	lt
 8008d5c:	4613      	movlt	r3, r2
 8008d5e:	6033      	str	r3, [r6, #0]
 8008d60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d64:	4607      	mov	r7, r0
 8008d66:	460c      	mov	r4, r1
 8008d68:	b10a      	cbz	r2, 8008d6e <_printf_common+0x26>
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	6033      	str	r3, [r6, #0]
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	0699      	lsls	r1, r3, #26
 8008d72:	bf42      	ittt	mi
 8008d74:	6833      	ldrmi	r3, [r6, #0]
 8008d76:	3302      	addmi	r3, #2
 8008d78:	6033      	strmi	r3, [r6, #0]
 8008d7a:	6825      	ldr	r5, [r4, #0]
 8008d7c:	f015 0506 	ands.w	r5, r5, #6
 8008d80:	d106      	bne.n	8008d90 <_printf_common+0x48>
 8008d82:	f104 0a19 	add.w	sl, r4, #25
 8008d86:	68e3      	ldr	r3, [r4, #12]
 8008d88:	6832      	ldr	r2, [r6, #0]
 8008d8a:	1a9b      	subs	r3, r3, r2
 8008d8c:	42ab      	cmp	r3, r5
 8008d8e:	dc26      	bgt.n	8008dde <_printf_common+0x96>
 8008d90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d94:	1e13      	subs	r3, r2, #0
 8008d96:	6822      	ldr	r2, [r4, #0]
 8008d98:	bf18      	it	ne
 8008d9a:	2301      	movne	r3, #1
 8008d9c:	0692      	lsls	r2, r2, #26
 8008d9e:	d42b      	bmi.n	8008df8 <_printf_common+0xb0>
 8008da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008da4:	4649      	mov	r1, r9
 8008da6:	4638      	mov	r0, r7
 8008da8:	47c0      	blx	r8
 8008daa:	3001      	adds	r0, #1
 8008dac:	d01e      	beq.n	8008dec <_printf_common+0xa4>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	68e5      	ldr	r5, [r4, #12]
 8008db2:	6832      	ldr	r2, [r6, #0]
 8008db4:	f003 0306 	and.w	r3, r3, #6
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	bf08      	it	eq
 8008dbc:	1aad      	subeq	r5, r5, r2
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	6922      	ldr	r2, [r4, #16]
 8008dc2:	bf0c      	ite	eq
 8008dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dc8:	2500      	movne	r5, #0
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	bfc4      	itt	gt
 8008dce:	1a9b      	subgt	r3, r3, r2
 8008dd0:	18ed      	addgt	r5, r5, r3
 8008dd2:	2600      	movs	r6, #0
 8008dd4:	341a      	adds	r4, #26
 8008dd6:	42b5      	cmp	r5, r6
 8008dd8:	d11a      	bne.n	8008e10 <_printf_common+0xc8>
 8008dda:	2000      	movs	r0, #0
 8008ddc:	e008      	b.n	8008df0 <_printf_common+0xa8>
 8008dde:	2301      	movs	r3, #1
 8008de0:	4652      	mov	r2, sl
 8008de2:	4649      	mov	r1, r9
 8008de4:	4638      	mov	r0, r7
 8008de6:	47c0      	blx	r8
 8008de8:	3001      	adds	r0, #1
 8008dea:	d103      	bne.n	8008df4 <_printf_common+0xac>
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295
 8008df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df4:	3501      	adds	r5, #1
 8008df6:	e7c6      	b.n	8008d86 <_printf_common+0x3e>
 8008df8:	18e1      	adds	r1, r4, r3
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	2030      	movs	r0, #48	; 0x30
 8008dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e02:	4422      	add	r2, r4
 8008e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e0c:	3302      	adds	r3, #2
 8008e0e:	e7c7      	b.n	8008da0 <_printf_common+0x58>
 8008e10:	2301      	movs	r3, #1
 8008e12:	4622      	mov	r2, r4
 8008e14:	4649      	mov	r1, r9
 8008e16:	4638      	mov	r0, r7
 8008e18:	47c0      	blx	r8
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	d0e6      	beq.n	8008dec <_printf_common+0xa4>
 8008e1e:	3601      	adds	r6, #1
 8008e20:	e7d9      	b.n	8008dd6 <_printf_common+0x8e>
	...

08008e24 <_printf_i>:
 8008e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	460c      	mov	r4, r1
 8008e2a:	4691      	mov	r9, r2
 8008e2c:	7e27      	ldrb	r7, [r4, #24]
 8008e2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e30:	2f78      	cmp	r7, #120	; 0x78
 8008e32:	4680      	mov	r8, r0
 8008e34:	469a      	mov	sl, r3
 8008e36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e3a:	d807      	bhi.n	8008e4c <_printf_i+0x28>
 8008e3c:	2f62      	cmp	r7, #98	; 0x62
 8008e3e:	d80a      	bhi.n	8008e56 <_printf_i+0x32>
 8008e40:	2f00      	cmp	r7, #0
 8008e42:	f000 80d8 	beq.w	8008ff6 <_printf_i+0x1d2>
 8008e46:	2f58      	cmp	r7, #88	; 0x58
 8008e48:	f000 80a3 	beq.w	8008f92 <_printf_i+0x16e>
 8008e4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e54:	e03a      	b.n	8008ecc <_printf_i+0xa8>
 8008e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e5a:	2b15      	cmp	r3, #21
 8008e5c:	d8f6      	bhi.n	8008e4c <_printf_i+0x28>
 8008e5e:	a001      	add	r0, pc, #4	; (adr r0, 8008e64 <_printf_i+0x40>)
 8008e60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008e64:	08008ebd 	.word	0x08008ebd
 8008e68:	08008ed1 	.word	0x08008ed1
 8008e6c:	08008e4d 	.word	0x08008e4d
 8008e70:	08008e4d 	.word	0x08008e4d
 8008e74:	08008e4d 	.word	0x08008e4d
 8008e78:	08008e4d 	.word	0x08008e4d
 8008e7c:	08008ed1 	.word	0x08008ed1
 8008e80:	08008e4d 	.word	0x08008e4d
 8008e84:	08008e4d 	.word	0x08008e4d
 8008e88:	08008e4d 	.word	0x08008e4d
 8008e8c:	08008e4d 	.word	0x08008e4d
 8008e90:	08008fdd 	.word	0x08008fdd
 8008e94:	08008f01 	.word	0x08008f01
 8008e98:	08008fbf 	.word	0x08008fbf
 8008e9c:	08008e4d 	.word	0x08008e4d
 8008ea0:	08008e4d 	.word	0x08008e4d
 8008ea4:	08008fff 	.word	0x08008fff
 8008ea8:	08008e4d 	.word	0x08008e4d
 8008eac:	08008f01 	.word	0x08008f01
 8008eb0:	08008e4d 	.word	0x08008e4d
 8008eb4:	08008e4d 	.word	0x08008e4d
 8008eb8:	08008fc7 	.word	0x08008fc7
 8008ebc:	680b      	ldr	r3, [r1, #0]
 8008ebe:	1d1a      	adds	r2, r3, #4
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	600a      	str	r2, [r1, #0]
 8008ec4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e0a3      	b.n	8009018 <_printf_i+0x1f4>
 8008ed0:	6825      	ldr	r5, [r4, #0]
 8008ed2:	6808      	ldr	r0, [r1, #0]
 8008ed4:	062e      	lsls	r6, r5, #24
 8008ed6:	f100 0304 	add.w	r3, r0, #4
 8008eda:	d50a      	bpl.n	8008ef2 <_printf_i+0xce>
 8008edc:	6805      	ldr	r5, [r0, #0]
 8008ede:	600b      	str	r3, [r1, #0]
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	da03      	bge.n	8008eec <_printf_i+0xc8>
 8008ee4:	232d      	movs	r3, #45	; 0x2d
 8008ee6:	426d      	negs	r5, r5
 8008ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eec:	485e      	ldr	r0, [pc, #376]	; (8009068 <_printf_i+0x244>)
 8008eee:	230a      	movs	r3, #10
 8008ef0:	e019      	b.n	8008f26 <_printf_i+0x102>
 8008ef2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ef6:	6805      	ldr	r5, [r0, #0]
 8008ef8:	600b      	str	r3, [r1, #0]
 8008efa:	bf18      	it	ne
 8008efc:	b22d      	sxthne	r5, r5
 8008efe:	e7ef      	b.n	8008ee0 <_printf_i+0xbc>
 8008f00:	680b      	ldr	r3, [r1, #0]
 8008f02:	6825      	ldr	r5, [r4, #0]
 8008f04:	1d18      	adds	r0, r3, #4
 8008f06:	6008      	str	r0, [r1, #0]
 8008f08:	0628      	lsls	r0, r5, #24
 8008f0a:	d501      	bpl.n	8008f10 <_printf_i+0xec>
 8008f0c:	681d      	ldr	r5, [r3, #0]
 8008f0e:	e002      	b.n	8008f16 <_printf_i+0xf2>
 8008f10:	0669      	lsls	r1, r5, #25
 8008f12:	d5fb      	bpl.n	8008f0c <_printf_i+0xe8>
 8008f14:	881d      	ldrh	r5, [r3, #0]
 8008f16:	4854      	ldr	r0, [pc, #336]	; (8009068 <_printf_i+0x244>)
 8008f18:	2f6f      	cmp	r7, #111	; 0x6f
 8008f1a:	bf0c      	ite	eq
 8008f1c:	2308      	moveq	r3, #8
 8008f1e:	230a      	movne	r3, #10
 8008f20:	2100      	movs	r1, #0
 8008f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f26:	6866      	ldr	r6, [r4, #4]
 8008f28:	60a6      	str	r6, [r4, #8]
 8008f2a:	2e00      	cmp	r6, #0
 8008f2c:	bfa2      	ittt	ge
 8008f2e:	6821      	ldrge	r1, [r4, #0]
 8008f30:	f021 0104 	bicge.w	r1, r1, #4
 8008f34:	6021      	strge	r1, [r4, #0]
 8008f36:	b90d      	cbnz	r5, 8008f3c <_printf_i+0x118>
 8008f38:	2e00      	cmp	r6, #0
 8008f3a:	d04d      	beq.n	8008fd8 <_printf_i+0x1b4>
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f42:	fb03 5711 	mls	r7, r3, r1, r5
 8008f46:	5dc7      	ldrb	r7, [r0, r7]
 8008f48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f4c:	462f      	mov	r7, r5
 8008f4e:	42bb      	cmp	r3, r7
 8008f50:	460d      	mov	r5, r1
 8008f52:	d9f4      	bls.n	8008f3e <_printf_i+0x11a>
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d10b      	bne.n	8008f70 <_printf_i+0x14c>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	07df      	lsls	r7, r3, #31
 8008f5c:	d508      	bpl.n	8008f70 <_printf_i+0x14c>
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	6861      	ldr	r1, [r4, #4]
 8008f62:	4299      	cmp	r1, r3
 8008f64:	bfde      	ittt	le
 8008f66:	2330      	movle	r3, #48	; 0x30
 8008f68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f70:	1b92      	subs	r2, r2, r6
 8008f72:	6122      	str	r2, [r4, #16]
 8008f74:	f8cd a000 	str.w	sl, [sp]
 8008f78:	464b      	mov	r3, r9
 8008f7a:	aa03      	add	r2, sp, #12
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	4640      	mov	r0, r8
 8008f80:	f7ff fee2 	bl	8008d48 <_printf_common>
 8008f84:	3001      	adds	r0, #1
 8008f86:	d14c      	bne.n	8009022 <_printf_i+0x1fe>
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	b004      	add	sp, #16
 8008f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f92:	4835      	ldr	r0, [pc, #212]	; (8009068 <_printf_i+0x244>)
 8008f94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	680e      	ldr	r6, [r1, #0]
 8008f9c:	061f      	lsls	r7, r3, #24
 8008f9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008fa2:	600e      	str	r6, [r1, #0]
 8008fa4:	d514      	bpl.n	8008fd0 <_printf_i+0x1ac>
 8008fa6:	07d9      	lsls	r1, r3, #31
 8008fa8:	bf44      	itt	mi
 8008faa:	f043 0320 	orrmi.w	r3, r3, #32
 8008fae:	6023      	strmi	r3, [r4, #0]
 8008fb0:	b91d      	cbnz	r5, 8008fba <_printf_i+0x196>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	f023 0320 	bic.w	r3, r3, #32
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	2310      	movs	r3, #16
 8008fbc:	e7b0      	b.n	8008f20 <_printf_i+0xfc>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	f043 0320 	orr.w	r3, r3, #32
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	2378      	movs	r3, #120	; 0x78
 8008fc8:	4828      	ldr	r0, [pc, #160]	; (800906c <_printf_i+0x248>)
 8008fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fce:	e7e3      	b.n	8008f98 <_printf_i+0x174>
 8008fd0:	065e      	lsls	r6, r3, #25
 8008fd2:	bf48      	it	mi
 8008fd4:	b2ad      	uxthmi	r5, r5
 8008fd6:	e7e6      	b.n	8008fa6 <_printf_i+0x182>
 8008fd8:	4616      	mov	r6, r2
 8008fda:	e7bb      	b.n	8008f54 <_printf_i+0x130>
 8008fdc:	680b      	ldr	r3, [r1, #0]
 8008fde:	6826      	ldr	r6, [r4, #0]
 8008fe0:	6960      	ldr	r0, [r4, #20]
 8008fe2:	1d1d      	adds	r5, r3, #4
 8008fe4:	600d      	str	r5, [r1, #0]
 8008fe6:	0635      	lsls	r5, r6, #24
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	d501      	bpl.n	8008ff0 <_printf_i+0x1cc>
 8008fec:	6018      	str	r0, [r3, #0]
 8008fee:	e002      	b.n	8008ff6 <_printf_i+0x1d2>
 8008ff0:	0671      	lsls	r1, r6, #25
 8008ff2:	d5fb      	bpl.n	8008fec <_printf_i+0x1c8>
 8008ff4:	8018      	strh	r0, [r3, #0]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	6123      	str	r3, [r4, #16]
 8008ffa:	4616      	mov	r6, r2
 8008ffc:	e7ba      	b.n	8008f74 <_printf_i+0x150>
 8008ffe:	680b      	ldr	r3, [r1, #0]
 8009000:	1d1a      	adds	r2, r3, #4
 8009002:	600a      	str	r2, [r1, #0]
 8009004:	681e      	ldr	r6, [r3, #0]
 8009006:	6862      	ldr	r2, [r4, #4]
 8009008:	2100      	movs	r1, #0
 800900a:	4630      	mov	r0, r6
 800900c:	f7f7 f8e8 	bl	80001e0 <memchr>
 8009010:	b108      	cbz	r0, 8009016 <_printf_i+0x1f2>
 8009012:	1b80      	subs	r0, r0, r6
 8009014:	6060      	str	r0, [r4, #4]
 8009016:	6863      	ldr	r3, [r4, #4]
 8009018:	6123      	str	r3, [r4, #16]
 800901a:	2300      	movs	r3, #0
 800901c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009020:	e7a8      	b.n	8008f74 <_printf_i+0x150>
 8009022:	6923      	ldr	r3, [r4, #16]
 8009024:	4632      	mov	r2, r6
 8009026:	4649      	mov	r1, r9
 8009028:	4640      	mov	r0, r8
 800902a:	47d0      	blx	sl
 800902c:	3001      	adds	r0, #1
 800902e:	d0ab      	beq.n	8008f88 <_printf_i+0x164>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	079b      	lsls	r3, r3, #30
 8009034:	d413      	bmi.n	800905e <_printf_i+0x23a>
 8009036:	68e0      	ldr	r0, [r4, #12]
 8009038:	9b03      	ldr	r3, [sp, #12]
 800903a:	4298      	cmp	r0, r3
 800903c:	bfb8      	it	lt
 800903e:	4618      	movlt	r0, r3
 8009040:	e7a4      	b.n	8008f8c <_printf_i+0x168>
 8009042:	2301      	movs	r3, #1
 8009044:	4632      	mov	r2, r6
 8009046:	4649      	mov	r1, r9
 8009048:	4640      	mov	r0, r8
 800904a:	47d0      	blx	sl
 800904c:	3001      	adds	r0, #1
 800904e:	d09b      	beq.n	8008f88 <_printf_i+0x164>
 8009050:	3501      	adds	r5, #1
 8009052:	68e3      	ldr	r3, [r4, #12]
 8009054:	9903      	ldr	r1, [sp, #12]
 8009056:	1a5b      	subs	r3, r3, r1
 8009058:	42ab      	cmp	r3, r5
 800905a:	dcf2      	bgt.n	8009042 <_printf_i+0x21e>
 800905c:	e7eb      	b.n	8009036 <_printf_i+0x212>
 800905e:	2500      	movs	r5, #0
 8009060:	f104 0619 	add.w	r6, r4, #25
 8009064:	e7f5      	b.n	8009052 <_printf_i+0x22e>
 8009066:	bf00      	nop
 8009068:	08009ab1 	.word	0x08009ab1
 800906c:	08009ac2 	.word	0x08009ac2

08009070 <memmove>:
 8009070:	4288      	cmp	r0, r1
 8009072:	b510      	push	{r4, lr}
 8009074:	eb01 0402 	add.w	r4, r1, r2
 8009078:	d902      	bls.n	8009080 <memmove+0x10>
 800907a:	4284      	cmp	r4, r0
 800907c:	4623      	mov	r3, r4
 800907e:	d807      	bhi.n	8009090 <memmove+0x20>
 8009080:	1e43      	subs	r3, r0, #1
 8009082:	42a1      	cmp	r1, r4
 8009084:	d008      	beq.n	8009098 <memmove+0x28>
 8009086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800908a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800908e:	e7f8      	b.n	8009082 <memmove+0x12>
 8009090:	4402      	add	r2, r0
 8009092:	4601      	mov	r1, r0
 8009094:	428a      	cmp	r2, r1
 8009096:	d100      	bne.n	800909a <memmove+0x2a>
 8009098:	bd10      	pop	{r4, pc}
 800909a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800909e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090a2:	e7f7      	b.n	8009094 <memmove+0x24>

080090a4 <_free_r>:
 80090a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090a6:	2900      	cmp	r1, #0
 80090a8:	d048      	beq.n	800913c <_free_r+0x98>
 80090aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ae:	9001      	str	r0, [sp, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f1a1 0404 	sub.w	r4, r1, #4
 80090b6:	bfb8      	it	lt
 80090b8:	18e4      	addlt	r4, r4, r3
 80090ba:	f000 f8d3 	bl	8009264 <__malloc_lock>
 80090be:	4a20      	ldr	r2, [pc, #128]	; (8009140 <_free_r+0x9c>)
 80090c0:	9801      	ldr	r0, [sp, #4]
 80090c2:	6813      	ldr	r3, [r2, #0]
 80090c4:	4615      	mov	r5, r2
 80090c6:	b933      	cbnz	r3, 80090d6 <_free_r+0x32>
 80090c8:	6063      	str	r3, [r4, #4]
 80090ca:	6014      	str	r4, [r2, #0]
 80090cc:	b003      	add	sp, #12
 80090ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090d2:	f000 b8cd 	b.w	8009270 <__malloc_unlock>
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	d90b      	bls.n	80090f2 <_free_r+0x4e>
 80090da:	6821      	ldr	r1, [r4, #0]
 80090dc:	1862      	adds	r2, r4, r1
 80090de:	4293      	cmp	r3, r2
 80090e0:	bf04      	itt	eq
 80090e2:	681a      	ldreq	r2, [r3, #0]
 80090e4:	685b      	ldreq	r3, [r3, #4]
 80090e6:	6063      	str	r3, [r4, #4]
 80090e8:	bf04      	itt	eq
 80090ea:	1852      	addeq	r2, r2, r1
 80090ec:	6022      	streq	r2, [r4, #0]
 80090ee:	602c      	str	r4, [r5, #0]
 80090f0:	e7ec      	b.n	80090cc <_free_r+0x28>
 80090f2:	461a      	mov	r2, r3
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	b10b      	cbz	r3, 80090fc <_free_r+0x58>
 80090f8:	42a3      	cmp	r3, r4
 80090fa:	d9fa      	bls.n	80090f2 <_free_r+0x4e>
 80090fc:	6811      	ldr	r1, [r2, #0]
 80090fe:	1855      	adds	r5, r2, r1
 8009100:	42a5      	cmp	r5, r4
 8009102:	d10b      	bne.n	800911c <_free_r+0x78>
 8009104:	6824      	ldr	r4, [r4, #0]
 8009106:	4421      	add	r1, r4
 8009108:	1854      	adds	r4, r2, r1
 800910a:	42a3      	cmp	r3, r4
 800910c:	6011      	str	r1, [r2, #0]
 800910e:	d1dd      	bne.n	80090cc <_free_r+0x28>
 8009110:	681c      	ldr	r4, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	6053      	str	r3, [r2, #4]
 8009116:	4421      	add	r1, r4
 8009118:	6011      	str	r1, [r2, #0]
 800911a:	e7d7      	b.n	80090cc <_free_r+0x28>
 800911c:	d902      	bls.n	8009124 <_free_r+0x80>
 800911e:	230c      	movs	r3, #12
 8009120:	6003      	str	r3, [r0, #0]
 8009122:	e7d3      	b.n	80090cc <_free_r+0x28>
 8009124:	6825      	ldr	r5, [r4, #0]
 8009126:	1961      	adds	r1, r4, r5
 8009128:	428b      	cmp	r3, r1
 800912a:	bf04      	itt	eq
 800912c:	6819      	ldreq	r1, [r3, #0]
 800912e:	685b      	ldreq	r3, [r3, #4]
 8009130:	6063      	str	r3, [r4, #4]
 8009132:	bf04      	itt	eq
 8009134:	1949      	addeq	r1, r1, r5
 8009136:	6021      	streq	r1, [r4, #0]
 8009138:	6054      	str	r4, [r2, #4]
 800913a:	e7c7      	b.n	80090cc <_free_r+0x28>
 800913c:	b003      	add	sp, #12
 800913e:	bd30      	pop	{r4, r5, pc}
 8009140:	20000428 	.word	0x20000428

08009144 <_malloc_r>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	1ccd      	adds	r5, r1, #3
 8009148:	f025 0503 	bic.w	r5, r5, #3
 800914c:	3508      	adds	r5, #8
 800914e:	2d0c      	cmp	r5, #12
 8009150:	bf38      	it	cc
 8009152:	250c      	movcc	r5, #12
 8009154:	2d00      	cmp	r5, #0
 8009156:	4606      	mov	r6, r0
 8009158:	db01      	blt.n	800915e <_malloc_r+0x1a>
 800915a:	42a9      	cmp	r1, r5
 800915c:	d903      	bls.n	8009166 <_malloc_r+0x22>
 800915e:	230c      	movs	r3, #12
 8009160:	6033      	str	r3, [r6, #0]
 8009162:	2000      	movs	r0, #0
 8009164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009166:	f000 f87d 	bl	8009264 <__malloc_lock>
 800916a:	4921      	ldr	r1, [pc, #132]	; (80091f0 <_malloc_r+0xac>)
 800916c:	680a      	ldr	r2, [r1, #0]
 800916e:	4614      	mov	r4, r2
 8009170:	b99c      	cbnz	r4, 800919a <_malloc_r+0x56>
 8009172:	4f20      	ldr	r7, [pc, #128]	; (80091f4 <_malloc_r+0xb0>)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	b923      	cbnz	r3, 8009182 <_malloc_r+0x3e>
 8009178:	4621      	mov	r1, r4
 800917a:	4630      	mov	r0, r6
 800917c:	f000 f862 	bl	8009244 <_sbrk_r>
 8009180:	6038      	str	r0, [r7, #0]
 8009182:	4629      	mov	r1, r5
 8009184:	4630      	mov	r0, r6
 8009186:	f000 f85d 	bl	8009244 <_sbrk_r>
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	d123      	bne.n	80091d6 <_malloc_r+0x92>
 800918e:	230c      	movs	r3, #12
 8009190:	6033      	str	r3, [r6, #0]
 8009192:	4630      	mov	r0, r6
 8009194:	f000 f86c 	bl	8009270 <__malloc_unlock>
 8009198:	e7e3      	b.n	8009162 <_malloc_r+0x1e>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	1b5b      	subs	r3, r3, r5
 800919e:	d417      	bmi.n	80091d0 <_malloc_r+0x8c>
 80091a0:	2b0b      	cmp	r3, #11
 80091a2:	d903      	bls.n	80091ac <_malloc_r+0x68>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	441c      	add	r4, r3
 80091a8:	6025      	str	r5, [r4, #0]
 80091aa:	e004      	b.n	80091b6 <_malloc_r+0x72>
 80091ac:	6863      	ldr	r3, [r4, #4]
 80091ae:	42a2      	cmp	r2, r4
 80091b0:	bf0c      	ite	eq
 80091b2:	600b      	streq	r3, [r1, #0]
 80091b4:	6053      	strne	r3, [r2, #4]
 80091b6:	4630      	mov	r0, r6
 80091b8:	f000 f85a 	bl	8009270 <__malloc_unlock>
 80091bc:	f104 000b 	add.w	r0, r4, #11
 80091c0:	1d23      	adds	r3, r4, #4
 80091c2:	f020 0007 	bic.w	r0, r0, #7
 80091c6:	1ac2      	subs	r2, r0, r3
 80091c8:	d0cc      	beq.n	8009164 <_malloc_r+0x20>
 80091ca:	1a1b      	subs	r3, r3, r0
 80091cc:	50a3      	str	r3, [r4, r2]
 80091ce:	e7c9      	b.n	8009164 <_malloc_r+0x20>
 80091d0:	4622      	mov	r2, r4
 80091d2:	6864      	ldr	r4, [r4, #4]
 80091d4:	e7cc      	b.n	8009170 <_malloc_r+0x2c>
 80091d6:	1cc4      	adds	r4, r0, #3
 80091d8:	f024 0403 	bic.w	r4, r4, #3
 80091dc:	42a0      	cmp	r0, r4
 80091de:	d0e3      	beq.n	80091a8 <_malloc_r+0x64>
 80091e0:	1a21      	subs	r1, r4, r0
 80091e2:	4630      	mov	r0, r6
 80091e4:	f000 f82e 	bl	8009244 <_sbrk_r>
 80091e8:	3001      	adds	r0, #1
 80091ea:	d1dd      	bne.n	80091a8 <_malloc_r+0x64>
 80091ec:	e7cf      	b.n	800918e <_malloc_r+0x4a>
 80091ee:	bf00      	nop
 80091f0:	20000428 	.word	0x20000428
 80091f4:	2000042c 	.word	0x2000042c

080091f8 <_realloc_r>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	4607      	mov	r7, r0
 80091fc:	4614      	mov	r4, r2
 80091fe:	460e      	mov	r6, r1
 8009200:	b921      	cbnz	r1, 800920c <_realloc_r+0x14>
 8009202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009206:	4611      	mov	r1, r2
 8009208:	f7ff bf9c 	b.w	8009144 <_malloc_r>
 800920c:	b922      	cbnz	r2, 8009218 <_realloc_r+0x20>
 800920e:	f7ff ff49 	bl	80090a4 <_free_r>
 8009212:	4625      	mov	r5, r4
 8009214:	4628      	mov	r0, r5
 8009216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009218:	f000 f830 	bl	800927c <_malloc_usable_size_r>
 800921c:	42a0      	cmp	r0, r4
 800921e:	d20f      	bcs.n	8009240 <_realloc_r+0x48>
 8009220:	4621      	mov	r1, r4
 8009222:	4638      	mov	r0, r7
 8009224:	f7ff ff8e 	bl	8009144 <_malloc_r>
 8009228:	4605      	mov	r5, r0
 800922a:	2800      	cmp	r0, #0
 800922c:	d0f2      	beq.n	8009214 <_realloc_r+0x1c>
 800922e:	4631      	mov	r1, r6
 8009230:	4622      	mov	r2, r4
 8009232:	f7ff fa6d 	bl	8008710 <memcpy>
 8009236:	4631      	mov	r1, r6
 8009238:	4638      	mov	r0, r7
 800923a:	f7ff ff33 	bl	80090a4 <_free_r>
 800923e:	e7e9      	b.n	8009214 <_realloc_r+0x1c>
 8009240:	4635      	mov	r5, r6
 8009242:	e7e7      	b.n	8009214 <_realloc_r+0x1c>

08009244 <_sbrk_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d06      	ldr	r5, [pc, #24]	; (8009260 <_sbrk_r+0x1c>)
 8009248:	2300      	movs	r3, #0
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	f7f9 f96c 	bl	800252c <_sbrk>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_sbrk_r+0x1a>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_sbrk_r+0x1a>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20001d64 	.word	0x20001d64

08009264 <__malloc_lock>:
 8009264:	4801      	ldr	r0, [pc, #4]	; (800926c <__malloc_lock+0x8>)
 8009266:	f000 b811 	b.w	800928c <__retarget_lock_acquire_recursive>
 800926a:	bf00      	nop
 800926c:	20001d6c 	.word	0x20001d6c

08009270 <__malloc_unlock>:
 8009270:	4801      	ldr	r0, [pc, #4]	; (8009278 <__malloc_unlock+0x8>)
 8009272:	f000 b80c 	b.w	800928e <__retarget_lock_release_recursive>
 8009276:	bf00      	nop
 8009278:	20001d6c 	.word	0x20001d6c

0800927c <_malloc_usable_size_r>:
 800927c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009280:	1f18      	subs	r0, r3, #4
 8009282:	2b00      	cmp	r3, #0
 8009284:	bfbc      	itt	lt
 8009286:	580b      	ldrlt	r3, [r1, r0]
 8009288:	18c0      	addlt	r0, r0, r3
 800928a:	4770      	bx	lr

0800928c <__retarget_lock_acquire_recursive>:
 800928c:	4770      	bx	lr

0800928e <__retarget_lock_release_recursive>:
 800928e:	4770      	bx	lr

08009290 <atan2>:
 8009290:	f000 b802 	b.w	8009298 <__ieee754_atan2>
 8009294:	0000      	movs	r0, r0
	...

08009298 <__ieee754_atan2>:
 8009298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800929c:	ec57 6b11 	vmov	r6, r7, d1
 80092a0:	4273      	negs	r3, r6
 80092a2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009428 <__ieee754_atan2+0x190>
 80092a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80092aa:	4333      	orrs	r3, r6
 80092ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80092b0:	4573      	cmp	r3, lr
 80092b2:	ec51 0b10 	vmov	r0, r1, d0
 80092b6:	ee11 8a10 	vmov	r8, s2
 80092ba:	d80a      	bhi.n	80092d2 <__ieee754_atan2+0x3a>
 80092bc:	4244      	negs	r4, r0
 80092be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80092c2:	4304      	orrs	r4, r0
 80092c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80092c8:	4574      	cmp	r4, lr
 80092ca:	ee10 9a10 	vmov	r9, s0
 80092ce:	468c      	mov	ip, r1
 80092d0:	d907      	bls.n	80092e2 <__ieee754_atan2+0x4a>
 80092d2:	4632      	mov	r2, r6
 80092d4:	463b      	mov	r3, r7
 80092d6:	f7f6 ffd9 	bl	800028c <__adddf3>
 80092da:	ec41 0b10 	vmov	d0, r0, r1
 80092de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80092e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80092ea:	4334      	orrs	r4, r6
 80092ec:	d103      	bne.n	80092f6 <__ieee754_atan2+0x5e>
 80092ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f2:	f000 b89d 	b.w	8009430 <atan>
 80092f6:	17bc      	asrs	r4, r7, #30
 80092f8:	f004 0402 	and.w	r4, r4, #2
 80092fc:	ea53 0909 	orrs.w	r9, r3, r9
 8009300:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009304:	d107      	bne.n	8009316 <__ieee754_atan2+0x7e>
 8009306:	2c02      	cmp	r4, #2
 8009308:	d060      	beq.n	80093cc <__ieee754_atan2+0x134>
 800930a:	2c03      	cmp	r4, #3
 800930c:	d1e5      	bne.n	80092da <__ieee754_atan2+0x42>
 800930e:	a142      	add	r1, pc, #264	; (adr r1, 8009418 <__ieee754_atan2+0x180>)
 8009310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009314:	e7e1      	b.n	80092da <__ieee754_atan2+0x42>
 8009316:	ea52 0808 	orrs.w	r8, r2, r8
 800931a:	d106      	bne.n	800932a <__ieee754_atan2+0x92>
 800931c:	f1bc 0f00 	cmp.w	ip, #0
 8009320:	da5f      	bge.n	80093e2 <__ieee754_atan2+0x14a>
 8009322:	a13f      	add	r1, pc, #252	; (adr r1, 8009420 <__ieee754_atan2+0x188>)
 8009324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009328:	e7d7      	b.n	80092da <__ieee754_atan2+0x42>
 800932a:	4572      	cmp	r2, lr
 800932c:	d10f      	bne.n	800934e <__ieee754_atan2+0xb6>
 800932e:	4293      	cmp	r3, r2
 8009330:	f104 34ff 	add.w	r4, r4, #4294967295
 8009334:	d107      	bne.n	8009346 <__ieee754_atan2+0xae>
 8009336:	2c02      	cmp	r4, #2
 8009338:	d84c      	bhi.n	80093d4 <__ieee754_atan2+0x13c>
 800933a:	4b35      	ldr	r3, [pc, #212]	; (8009410 <__ieee754_atan2+0x178>)
 800933c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009340:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009344:	e7c9      	b.n	80092da <__ieee754_atan2+0x42>
 8009346:	2c02      	cmp	r4, #2
 8009348:	d848      	bhi.n	80093dc <__ieee754_atan2+0x144>
 800934a:	4b32      	ldr	r3, [pc, #200]	; (8009414 <__ieee754_atan2+0x17c>)
 800934c:	e7f6      	b.n	800933c <__ieee754_atan2+0xa4>
 800934e:	4573      	cmp	r3, lr
 8009350:	d0e4      	beq.n	800931c <__ieee754_atan2+0x84>
 8009352:	1a9b      	subs	r3, r3, r2
 8009354:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009358:	ea4f 5223 	mov.w	r2, r3, asr #20
 800935c:	da1e      	bge.n	800939c <__ieee754_atan2+0x104>
 800935e:	2f00      	cmp	r7, #0
 8009360:	da01      	bge.n	8009366 <__ieee754_atan2+0xce>
 8009362:	323c      	adds	r2, #60	; 0x3c
 8009364:	db1e      	blt.n	80093a4 <__ieee754_atan2+0x10c>
 8009366:	4632      	mov	r2, r6
 8009368:	463b      	mov	r3, r7
 800936a:	f7f7 fa6f 	bl	800084c <__aeabi_ddiv>
 800936e:	ec41 0b10 	vmov	d0, r0, r1
 8009372:	f000 f9fd 	bl	8009770 <fabs>
 8009376:	f000 f85b 	bl	8009430 <atan>
 800937a:	ec51 0b10 	vmov	r0, r1, d0
 800937e:	2c01      	cmp	r4, #1
 8009380:	d013      	beq.n	80093aa <__ieee754_atan2+0x112>
 8009382:	2c02      	cmp	r4, #2
 8009384:	d015      	beq.n	80093b2 <__ieee754_atan2+0x11a>
 8009386:	2c00      	cmp	r4, #0
 8009388:	d0a7      	beq.n	80092da <__ieee754_atan2+0x42>
 800938a:	a319      	add	r3, pc, #100	; (adr r3, 80093f0 <__ieee754_atan2+0x158>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f7f6 ff7a 	bl	8000288 <__aeabi_dsub>
 8009394:	a318      	add	r3, pc, #96	; (adr r3, 80093f8 <__ieee754_atan2+0x160>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	e014      	b.n	80093c6 <__ieee754_atan2+0x12e>
 800939c:	a118      	add	r1, pc, #96	; (adr r1, 8009400 <__ieee754_atan2+0x168>)
 800939e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093a2:	e7ec      	b.n	800937e <__ieee754_atan2+0xe6>
 80093a4:	2000      	movs	r0, #0
 80093a6:	2100      	movs	r1, #0
 80093a8:	e7e9      	b.n	800937e <__ieee754_atan2+0xe6>
 80093aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093ae:	4619      	mov	r1, r3
 80093b0:	e793      	b.n	80092da <__ieee754_atan2+0x42>
 80093b2:	a30f      	add	r3, pc, #60	; (adr r3, 80093f0 <__ieee754_atan2+0x158>)
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	f7f6 ff66 	bl	8000288 <__aeabi_dsub>
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	a10d      	add	r1, pc, #52	; (adr r1, 80093f8 <__ieee754_atan2+0x160>)
 80093c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093c6:	f7f6 ff5f 	bl	8000288 <__aeabi_dsub>
 80093ca:	e786      	b.n	80092da <__ieee754_atan2+0x42>
 80093cc:	a10a      	add	r1, pc, #40	; (adr r1, 80093f8 <__ieee754_atan2+0x160>)
 80093ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093d2:	e782      	b.n	80092da <__ieee754_atan2+0x42>
 80093d4:	a10c      	add	r1, pc, #48	; (adr r1, 8009408 <__ieee754_atan2+0x170>)
 80093d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093da:	e77e      	b.n	80092da <__ieee754_atan2+0x42>
 80093dc:	2000      	movs	r0, #0
 80093de:	2100      	movs	r1, #0
 80093e0:	e77b      	b.n	80092da <__ieee754_atan2+0x42>
 80093e2:	a107      	add	r1, pc, #28	; (adr r1, 8009400 <__ieee754_atan2+0x168>)
 80093e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093e8:	e777      	b.n	80092da <__ieee754_atan2+0x42>
 80093ea:	bf00      	nop
 80093ec:	f3af 8000 	nop.w
 80093f0:	33145c07 	.word	0x33145c07
 80093f4:	3ca1a626 	.word	0x3ca1a626
 80093f8:	54442d18 	.word	0x54442d18
 80093fc:	400921fb 	.word	0x400921fb
 8009400:	54442d18 	.word	0x54442d18
 8009404:	3ff921fb 	.word	0x3ff921fb
 8009408:	54442d18 	.word	0x54442d18
 800940c:	3fe921fb 	.word	0x3fe921fb
 8009410:	08009ad8 	.word	0x08009ad8
 8009414:	08009af0 	.word	0x08009af0
 8009418:	54442d18 	.word	0x54442d18
 800941c:	c00921fb 	.word	0xc00921fb
 8009420:	54442d18 	.word	0x54442d18
 8009424:	bff921fb 	.word	0xbff921fb
 8009428:	7ff00000 	.word	0x7ff00000
 800942c:	00000000 	.word	0x00000000

08009430 <atan>:
 8009430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	ec55 4b10 	vmov	r4, r5, d0
 8009438:	4bc3      	ldr	r3, [pc, #780]	; (8009748 <atan+0x318>)
 800943a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800943e:	429e      	cmp	r6, r3
 8009440:	46ab      	mov	fp, r5
 8009442:	dd18      	ble.n	8009476 <atan+0x46>
 8009444:	4bc1      	ldr	r3, [pc, #772]	; (800974c <atan+0x31c>)
 8009446:	429e      	cmp	r6, r3
 8009448:	dc01      	bgt.n	800944e <atan+0x1e>
 800944a:	d109      	bne.n	8009460 <atan+0x30>
 800944c:	b144      	cbz	r4, 8009460 <atan+0x30>
 800944e:	4622      	mov	r2, r4
 8009450:	462b      	mov	r3, r5
 8009452:	4620      	mov	r0, r4
 8009454:	4629      	mov	r1, r5
 8009456:	f7f6 ff19 	bl	800028c <__adddf3>
 800945a:	4604      	mov	r4, r0
 800945c:	460d      	mov	r5, r1
 800945e:	e006      	b.n	800946e <atan+0x3e>
 8009460:	f1bb 0f00 	cmp.w	fp, #0
 8009464:	f300 8131 	bgt.w	80096ca <atan+0x29a>
 8009468:	a59b      	add	r5, pc, #620	; (adr r5, 80096d8 <atan+0x2a8>)
 800946a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800946e:	ec45 4b10 	vmov	d0, r4, r5
 8009472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009476:	4bb6      	ldr	r3, [pc, #728]	; (8009750 <atan+0x320>)
 8009478:	429e      	cmp	r6, r3
 800947a:	dc14      	bgt.n	80094a6 <atan+0x76>
 800947c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009480:	429e      	cmp	r6, r3
 8009482:	dc0d      	bgt.n	80094a0 <atan+0x70>
 8009484:	a396      	add	r3, pc, #600	; (adr r3, 80096e0 <atan+0x2b0>)
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	ee10 0a10 	vmov	r0, s0
 800948e:	4629      	mov	r1, r5
 8009490:	f7f6 fefc 	bl	800028c <__adddf3>
 8009494:	4baf      	ldr	r3, [pc, #700]	; (8009754 <atan+0x324>)
 8009496:	2200      	movs	r2, #0
 8009498:	f7f7 fb3e 	bl	8000b18 <__aeabi_dcmpgt>
 800949c:	2800      	cmp	r0, #0
 800949e:	d1e6      	bne.n	800946e <atan+0x3e>
 80094a0:	f04f 3aff 	mov.w	sl, #4294967295
 80094a4:	e02b      	b.n	80094fe <atan+0xce>
 80094a6:	f000 f963 	bl	8009770 <fabs>
 80094aa:	4bab      	ldr	r3, [pc, #684]	; (8009758 <atan+0x328>)
 80094ac:	429e      	cmp	r6, r3
 80094ae:	ec55 4b10 	vmov	r4, r5, d0
 80094b2:	f300 80bf 	bgt.w	8009634 <atan+0x204>
 80094b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80094ba:	429e      	cmp	r6, r3
 80094bc:	f300 80a0 	bgt.w	8009600 <atan+0x1d0>
 80094c0:	ee10 2a10 	vmov	r2, s0
 80094c4:	ee10 0a10 	vmov	r0, s0
 80094c8:	462b      	mov	r3, r5
 80094ca:	4629      	mov	r1, r5
 80094cc:	f7f6 fede 	bl	800028c <__adddf3>
 80094d0:	4ba0      	ldr	r3, [pc, #640]	; (8009754 <atan+0x324>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	f7f6 fed8 	bl	8000288 <__aeabi_dsub>
 80094d8:	2200      	movs	r2, #0
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094e2:	4620      	mov	r0, r4
 80094e4:	4629      	mov	r1, r5
 80094e6:	f7f6 fed1 	bl	800028c <__adddf3>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4630      	mov	r0, r6
 80094f0:	4639      	mov	r1, r7
 80094f2:	f7f7 f9ab 	bl	800084c <__aeabi_ddiv>
 80094f6:	f04f 0a00 	mov.w	sl, #0
 80094fa:	4604      	mov	r4, r0
 80094fc:	460d      	mov	r5, r1
 80094fe:	4622      	mov	r2, r4
 8009500:	462b      	mov	r3, r5
 8009502:	4620      	mov	r0, r4
 8009504:	4629      	mov	r1, r5
 8009506:	f7f7 f877 	bl	80005f8 <__aeabi_dmul>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4680      	mov	r8, r0
 8009510:	4689      	mov	r9, r1
 8009512:	f7f7 f871 	bl	80005f8 <__aeabi_dmul>
 8009516:	a374      	add	r3, pc, #464	; (adr r3, 80096e8 <atan+0x2b8>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	4606      	mov	r6, r0
 800951e:	460f      	mov	r7, r1
 8009520:	f7f7 f86a 	bl	80005f8 <__aeabi_dmul>
 8009524:	a372      	add	r3, pc, #456	; (adr r3, 80096f0 <atan+0x2c0>)
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f7f6 feaf 	bl	800028c <__adddf3>
 800952e:	4632      	mov	r2, r6
 8009530:	463b      	mov	r3, r7
 8009532:	f7f7 f861 	bl	80005f8 <__aeabi_dmul>
 8009536:	a370      	add	r3, pc, #448	; (adr r3, 80096f8 <atan+0x2c8>)
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	f7f6 fea6 	bl	800028c <__adddf3>
 8009540:	4632      	mov	r2, r6
 8009542:	463b      	mov	r3, r7
 8009544:	f7f7 f858 	bl	80005f8 <__aeabi_dmul>
 8009548:	a36d      	add	r3, pc, #436	; (adr r3, 8009700 <atan+0x2d0>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f7f6 fe9d 	bl	800028c <__adddf3>
 8009552:	4632      	mov	r2, r6
 8009554:	463b      	mov	r3, r7
 8009556:	f7f7 f84f 	bl	80005f8 <__aeabi_dmul>
 800955a:	a36b      	add	r3, pc, #428	; (adr r3, 8009708 <atan+0x2d8>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f6 fe94 	bl	800028c <__adddf3>
 8009564:	4632      	mov	r2, r6
 8009566:	463b      	mov	r3, r7
 8009568:	f7f7 f846 	bl	80005f8 <__aeabi_dmul>
 800956c:	a368      	add	r3, pc, #416	; (adr r3, 8009710 <atan+0x2e0>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f6 fe8b 	bl	800028c <__adddf3>
 8009576:	4642      	mov	r2, r8
 8009578:	464b      	mov	r3, r9
 800957a:	f7f7 f83d 	bl	80005f8 <__aeabi_dmul>
 800957e:	a366      	add	r3, pc, #408	; (adr r3, 8009718 <atan+0x2e8>)
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	4680      	mov	r8, r0
 8009586:	4689      	mov	r9, r1
 8009588:	4630      	mov	r0, r6
 800958a:	4639      	mov	r1, r7
 800958c:	f7f7 f834 	bl	80005f8 <__aeabi_dmul>
 8009590:	a363      	add	r3, pc, #396	; (adr r3, 8009720 <atan+0x2f0>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f7f6 fe77 	bl	8000288 <__aeabi_dsub>
 800959a:	4632      	mov	r2, r6
 800959c:	463b      	mov	r3, r7
 800959e:	f7f7 f82b 	bl	80005f8 <__aeabi_dmul>
 80095a2:	a361      	add	r3, pc, #388	; (adr r3, 8009728 <atan+0x2f8>)
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f7f6 fe6e 	bl	8000288 <__aeabi_dsub>
 80095ac:	4632      	mov	r2, r6
 80095ae:	463b      	mov	r3, r7
 80095b0:	f7f7 f822 	bl	80005f8 <__aeabi_dmul>
 80095b4:	a35e      	add	r3, pc, #376	; (adr r3, 8009730 <atan+0x300>)
 80095b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ba:	f7f6 fe65 	bl	8000288 <__aeabi_dsub>
 80095be:	4632      	mov	r2, r6
 80095c0:	463b      	mov	r3, r7
 80095c2:	f7f7 f819 	bl	80005f8 <__aeabi_dmul>
 80095c6:	a35c      	add	r3, pc, #368	; (adr r3, 8009738 <atan+0x308>)
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	f7f6 fe5c 	bl	8000288 <__aeabi_dsub>
 80095d0:	4632      	mov	r2, r6
 80095d2:	463b      	mov	r3, r7
 80095d4:	f7f7 f810 	bl	80005f8 <__aeabi_dmul>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	4640      	mov	r0, r8
 80095de:	4649      	mov	r1, r9
 80095e0:	f7f6 fe54 	bl	800028c <__adddf3>
 80095e4:	4622      	mov	r2, r4
 80095e6:	462b      	mov	r3, r5
 80095e8:	f7f7 f806 	bl	80005f8 <__aeabi_dmul>
 80095ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	d14b      	bne.n	800968e <atan+0x25e>
 80095f6:	4620      	mov	r0, r4
 80095f8:	4629      	mov	r1, r5
 80095fa:	f7f6 fe45 	bl	8000288 <__aeabi_dsub>
 80095fe:	e72c      	b.n	800945a <atan+0x2a>
 8009600:	ee10 0a10 	vmov	r0, s0
 8009604:	4b53      	ldr	r3, [pc, #332]	; (8009754 <atan+0x324>)
 8009606:	2200      	movs	r2, #0
 8009608:	4629      	mov	r1, r5
 800960a:	f7f6 fe3d 	bl	8000288 <__aeabi_dsub>
 800960e:	4b51      	ldr	r3, [pc, #324]	; (8009754 <atan+0x324>)
 8009610:	4606      	mov	r6, r0
 8009612:	460f      	mov	r7, r1
 8009614:	2200      	movs	r2, #0
 8009616:	4620      	mov	r0, r4
 8009618:	4629      	mov	r1, r5
 800961a:	f7f6 fe37 	bl	800028c <__adddf3>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4630      	mov	r0, r6
 8009624:	4639      	mov	r1, r7
 8009626:	f7f7 f911 	bl	800084c <__aeabi_ddiv>
 800962a:	f04f 0a01 	mov.w	sl, #1
 800962e:	4604      	mov	r4, r0
 8009630:	460d      	mov	r5, r1
 8009632:	e764      	b.n	80094fe <atan+0xce>
 8009634:	4b49      	ldr	r3, [pc, #292]	; (800975c <atan+0x32c>)
 8009636:	429e      	cmp	r6, r3
 8009638:	da1d      	bge.n	8009676 <atan+0x246>
 800963a:	ee10 0a10 	vmov	r0, s0
 800963e:	4b48      	ldr	r3, [pc, #288]	; (8009760 <atan+0x330>)
 8009640:	2200      	movs	r2, #0
 8009642:	4629      	mov	r1, r5
 8009644:	f7f6 fe20 	bl	8000288 <__aeabi_dsub>
 8009648:	4b45      	ldr	r3, [pc, #276]	; (8009760 <atan+0x330>)
 800964a:	4606      	mov	r6, r0
 800964c:	460f      	mov	r7, r1
 800964e:	2200      	movs	r2, #0
 8009650:	4620      	mov	r0, r4
 8009652:	4629      	mov	r1, r5
 8009654:	f7f6 ffd0 	bl	80005f8 <__aeabi_dmul>
 8009658:	4b3e      	ldr	r3, [pc, #248]	; (8009754 <atan+0x324>)
 800965a:	2200      	movs	r2, #0
 800965c:	f7f6 fe16 	bl	800028c <__adddf3>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4630      	mov	r0, r6
 8009666:	4639      	mov	r1, r7
 8009668:	f7f7 f8f0 	bl	800084c <__aeabi_ddiv>
 800966c:	f04f 0a02 	mov.w	sl, #2
 8009670:	4604      	mov	r4, r0
 8009672:	460d      	mov	r5, r1
 8009674:	e743      	b.n	80094fe <atan+0xce>
 8009676:	462b      	mov	r3, r5
 8009678:	ee10 2a10 	vmov	r2, s0
 800967c:	4939      	ldr	r1, [pc, #228]	; (8009764 <atan+0x334>)
 800967e:	2000      	movs	r0, #0
 8009680:	f7f7 f8e4 	bl	800084c <__aeabi_ddiv>
 8009684:	f04f 0a03 	mov.w	sl, #3
 8009688:	4604      	mov	r4, r0
 800968a:	460d      	mov	r5, r1
 800968c:	e737      	b.n	80094fe <atan+0xce>
 800968e:	4b36      	ldr	r3, [pc, #216]	; (8009768 <atan+0x338>)
 8009690:	4e36      	ldr	r6, [pc, #216]	; (800976c <atan+0x33c>)
 8009692:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009696:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800969a:	e9da 2300 	ldrd	r2, r3, [sl]
 800969e:	f7f6 fdf3 	bl	8000288 <__aeabi_dsub>
 80096a2:	4622      	mov	r2, r4
 80096a4:	462b      	mov	r3, r5
 80096a6:	f7f6 fdef 	bl	8000288 <__aeabi_dsub>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 80096b2:	f7f6 fde9 	bl	8000288 <__aeabi_dsub>
 80096b6:	f1bb 0f00 	cmp.w	fp, #0
 80096ba:	4604      	mov	r4, r0
 80096bc:	460d      	mov	r5, r1
 80096be:	f6bf aed6 	bge.w	800946e <atan+0x3e>
 80096c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096c6:	461d      	mov	r5, r3
 80096c8:	e6d1      	b.n	800946e <atan+0x3e>
 80096ca:	a51d      	add	r5, pc, #116	; (adr r5, 8009740 <atan+0x310>)
 80096cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80096d0:	e6cd      	b.n	800946e <atan+0x3e>
 80096d2:	bf00      	nop
 80096d4:	f3af 8000 	nop.w
 80096d8:	54442d18 	.word	0x54442d18
 80096dc:	bff921fb 	.word	0xbff921fb
 80096e0:	8800759c 	.word	0x8800759c
 80096e4:	7e37e43c 	.word	0x7e37e43c
 80096e8:	e322da11 	.word	0xe322da11
 80096ec:	3f90ad3a 	.word	0x3f90ad3a
 80096f0:	24760deb 	.word	0x24760deb
 80096f4:	3fa97b4b 	.word	0x3fa97b4b
 80096f8:	a0d03d51 	.word	0xa0d03d51
 80096fc:	3fb10d66 	.word	0x3fb10d66
 8009700:	c54c206e 	.word	0xc54c206e
 8009704:	3fb745cd 	.word	0x3fb745cd
 8009708:	920083ff 	.word	0x920083ff
 800970c:	3fc24924 	.word	0x3fc24924
 8009710:	5555550d 	.word	0x5555550d
 8009714:	3fd55555 	.word	0x3fd55555
 8009718:	2c6a6c2f 	.word	0x2c6a6c2f
 800971c:	bfa2b444 	.word	0xbfa2b444
 8009720:	52defd9a 	.word	0x52defd9a
 8009724:	3fadde2d 	.word	0x3fadde2d
 8009728:	af749a6d 	.word	0xaf749a6d
 800972c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009730:	fe231671 	.word	0xfe231671
 8009734:	3fbc71c6 	.word	0x3fbc71c6
 8009738:	9998ebc4 	.word	0x9998ebc4
 800973c:	3fc99999 	.word	0x3fc99999
 8009740:	54442d18 	.word	0x54442d18
 8009744:	3ff921fb 	.word	0x3ff921fb
 8009748:	440fffff 	.word	0x440fffff
 800974c:	7ff00000 	.word	0x7ff00000
 8009750:	3fdbffff 	.word	0x3fdbffff
 8009754:	3ff00000 	.word	0x3ff00000
 8009758:	3ff2ffff 	.word	0x3ff2ffff
 800975c:	40038000 	.word	0x40038000
 8009760:	3ff80000 	.word	0x3ff80000
 8009764:	bff00000 	.word	0xbff00000
 8009768:	08009b28 	.word	0x08009b28
 800976c:	08009b08 	.word	0x08009b08

08009770 <fabs>:
 8009770:	ec51 0b10 	vmov	r0, r1, d0
 8009774:	ee10 2a10 	vmov	r2, s0
 8009778:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800977c:	ec43 2b10 	vmov	d0, r2, r3
 8009780:	4770      	bx	lr
	...

08009784 <_init>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr

08009790 <_fini>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	bf00      	nop
 8009794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009796:	bc08      	pop	{r3}
 8009798:	469e      	mov	lr, r3
 800979a:	4770      	bx	lr
