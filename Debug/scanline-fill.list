
scanline-fill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007114  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  080072b8  080072b8  000172b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a18  08007a18  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a20  08007a20  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  200001dc  08007c04  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08007c04  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcb7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002352  00000000  00000000  0002bec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002e218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002ea80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172b3  00000000  00000000  0002f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad03  00000000  00000000  0004645b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000877c5  00000000  00000000  0005115e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000319c  00000000  00000000  000d8978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800729c 	.word	0x0800729c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800729c 	.word	0x0800729c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <Artist_ClearCanvas>:
#include "font.h"
#include "scanline_fill.h"
#include "constants.h"

void Artist_ClearCanvas(Canvas *canvas, const color_t color)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
	for(size_t iRow = 0; iRow < canvas->numRows; ++iRow)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	e01a      	b.n	8000f98 <Artist_ClearCanvas+0x48>
	{
		for(size_t iCol = 0; iCol < canvas->numCols; ++iCol)
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	e00f      	b.n	8000f88 <Artist_ClearCanvas+0x38>
		{
			canvas->data[iRow * canvas->numCols + iCol] = color;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	68f9      	ldr	r1, [r7, #12]
 8000f72:	fb01 f103 	mul.w	r1, r1, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	440b      	add	r3, r1
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	801a      	strh	r2, [r3, #0]
		for(size_t iCol = 0; iCol < canvas->numCols; ++iCol)
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3ea      	bcc.n	8000f68 <Artist_ClearCanvas+0x18>
	for(size_t iRow = 0; iRow < canvas->numRows; ++iRow)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3301      	adds	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d3df      	bcc.n	8000f62 <Artist_ClearCanvas+0x12>
		}
	}
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <Artist_DrawText>:

void Artist_DrawText(Canvas *canvas, const char *txt, const Point pos, const color_t color)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	4639      	mov	r1, r7
 8000fbc:	e881 000c 	stmia.w	r1, {r2, r3}
	Point currentPos = pos;
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	463a      	mov	r2, r7
 8000fc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fca:	e883 0003 	stmia.w	r3, {r0, r1}
	for (const char *c = txt; *c != '\0'; ++c)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e041      	b.n	8001058 <Artist_DrawText+0xa8>
	{
		// get character bytes from font array and write in data array
		for(uint8_t x = 0; x < FONT_WIDTH; ++x)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	76fb      	strb	r3, [r7, #27]
 8000fd8:	e038      	b.n	800104c <Artist_DrawText+0x9c>
		{
			currentPos.y = pos.y;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	617b      	str	r3, [r7, #20]
			uint8_t fontCol = font6x8[(*c - 32)*FONT_WIDTH + x];
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f1a3 0220 	sub.w	r2, r3, #32
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	461a      	mov	r2, r3
 8000ff0:	7efb      	ldrb	r3, [r7, #27]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <Artist_DrawText+0xc0>)
 8000ff6:	5cd3      	ldrb	r3, [r2, r3]
 8000ff8:	767b      	strb	r3, [r7, #25]
			for(uint8_t y = 0; y < FONT_HEIGHT; ++y)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	76bb      	strb	r3, [r7, #26]
 8000ffe:	e01c      	b.n	800103a <Artist_DrawText+0x8a>
			{
				if(fontCol & (1 << y))
 8001000:	7e7a      	ldrb	r2, [r7, #25]
 8001002:	7ebb      	ldrb	r3, [r7, #26]
 8001004:	fa42 f303 	asr.w	r3, r2, r3
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00e      	beq.n	800102e <Artist_DrawText+0x7e>
				{
					canvas->data[currentPos.x + currentPos.y * canvas->numCols] = color;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4619      	mov	r1, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	4618      	mov	r0, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	fb03 f300 	mul.w	r3, r3, r0
 8001024:	440b      	add	r3, r1
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800102c:	801a      	strh	r2, [r3, #0]
				}
				currentPos.y += 1;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
			for(uint8_t y = 0; y < FONT_HEIGHT; ++y)
 8001034:	7ebb      	ldrb	r3, [r7, #26]
 8001036:	3301      	adds	r3, #1
 8001038:	76bb      	strb	r3, [r7, #26]
 800103a:	7ebb      	ldrb	r3, [r7, #26]
 800103c:	2b07      	cmp	r3, #7
 800103e:	d9df      	bls.n	8001000 <Artist_DrawText+0x50>
			}
			currentPos.x += 1;
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	3301      	adds	r3, #1
 8001044:	613b      	str	r3, [r7, #16]
		for(uint8_t x = 0; x < FONT_WIDTH; ++x)
 8001046:	7efb      	ldrb	r3, [r7, #27]
 8001048:	3301      	adds	r3, #1
 800104a:	76fb      	strb	r3, [r7, #27]
 800104c:	7efb      	ldrb	r3, [r7, #27]
 800104e:	2b05      	cmp	r3, #5
 8001050:	d9c3      	bls.n	8000fda <Artist_DrawText+0x2a>
	for (const char *c = txt; *c != '\0'; ++c)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1b9      	bne.n	8000fd4 <Artist_DrawText+0x24>
		}
	}
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	08007370 	.word	0x08007370

08001074 <Artist_FillPolygon>:

void Artist_FillPolygon(Canvas *canvas, Point *points, const size_t numPoints, const color_t color)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	f6ad 6d04 	subw	sp, sp, #3588	; 0xe04
 800107a:	af02      	add	r7, sp, #8
 800107c:	f107 040c 	add.w	r4, r7, #12
 8001080:	6020      	str	r0, [r4, #0]
 8001082:	f107 0008 	add.w	r0, r7, #8
 8001086:	6001      	str	r1, [r0, #0]
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	600a      	str	r2, [r1, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	1cbb      	adds	r3, r7, #2
 8001090:	801a      	strh	r2, [r3, #0]
	//1. Sort points anti-clockwise
	Point_SortAntiClockwise(points, numPoints);
 8001092:	1d3a      	adds	r2, r7, #4
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	6811      	ldr	r1, [r2, #0]
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f001 f832 	bl	8002104 <Point_SortAntiClockwise>
	//2. Find ymin and ymax for the polygon
	int32_t ymin = points[0].y, ymax = points[1].y;
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f8c7 3df4 	str.w	r3, [r7, #3572]	; 0xdf4
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3308      	adds	r3, #8
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f8c7 3df0 	str.w	r3, [r7, #3568]	; 0xdf0
	for(const Point *p = points + 1; p != (points + numPoints); ++p)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3308      	adds	r3, #8
 80010c2:	f8c7 3dec 	str.w	r3, [r7, #3564]	; 0xdec
 80010c6:	e01c      	b.n	8001102 <Artist_FillPolygon+0x8e>
	{
		if(p->y < ymin) ymin = p->y;
 80010c8:	f8d7 3dec 	ldr.w	r3, [r7, #3564]	; 0xdec
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f8d7 2df4 	ldr.w	r2, [r7, #3572]	; 0xdf4
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dd04      	ble.n	80010e0 <Artist_FillPolygon+0x6c>
 80010d6:	f8d7 3dec 	ldr.w	r3, [r7, #3564]	; 0xdec
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f8c7 3df4 	str.w	r3, [r7, #3572]	; 0xdf4
		if(p->y > ymax) ymax = p->y;
 80010e0:	f8d7 3dec 	ldr.w	r3, [r7, #3564]	; 0xdec
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f8d7 2df0 	ldr.w	r2, [r7, #3568]	; 0xdf0
 80010ea:	429a      	cmp	r2, r3
 80010ec:	da04      	bge.n	80010f8 <Artist_FillPolygon+0x84>
 80010ee:	f8d7 3dec 	ldr.w	r3, [r7, #3564]	; 0xdec
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f8c7 3df0 	str.w	r3, [r7, #3568]	; 0xdf0
	for(const Point *p = points + 1; p != (points + numPoints); ++p)
 80010f8:	f8d7 3dec 	ldr.w	r3, [r7, #3564]	; 0xdec
 80010fc:	3308      	adds	r3, #8
 80010fe:	f8c7 3dec 	str.w	r3, [r7, #3564]	; 0xdec
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	4413      	add	r3, r2
 8001110:	f8d7 2dec 	ldr.w	r2, [r7, #3564]	; 0xdec
 8001114:	429a      	cmp	r2, r3
 8001116:	d1d7      	bne.n	80010c8 <Artist_FillPolygon+0x54>
	}
	// Create required lists
	Edge table[SCANLINE_FILL_TABLE_SIZE] = {};
 8001118:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800111c:	4618      	mov	r0, r3
 800111e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001122:	461a      	mov	r2, r3
 8001124:	2100      	movs	r1, #0
 8001126:	f002 fe27 	bl	8003d78 <memset>
	Edge edges[SCANLINE_FILL_EDGES_MAX_NUM] = {};
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4618      	mov	r0, r3
 8001130:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001134:	461a      	mov	r2, r3
 8001136:	2100      	movs	r1, #0
 8001138:	f002 fe1e 	bl	8003d78 <memset>
	Edge active = {}; // head of list of active edges
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	461a      	mov	r2, r3
 8001142:	2300      	movs	r3, #0
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	6053      	str	r3, [r2, #4]
 8001148:	6093      	str	r3, [r2, #8]
 800114a:	60d3      	str	r3, [r2, #12]
	//3. Build edge table
	ScanlineFill_BuildEdgeTable(table, SCANLINE_FILL_TABLE_SIZE, edges, SCANLINE_FILL_EDGES_MAX_NUM, points, numPoints);
 800114c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001150:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2314      	movs	r3, #20
 8001164:	21c8      	movs	r1, #200	; 0xc8
 8001166:	f001 f879 	bl	800225c <ScanlineFill_BuildEdgeTable>
	//4. Iterate through each scanline, applying scanline fill
	for(int32_t yScanline = ymin; yScanline <= ymax; ++yScanline)
 800116a:	f8d7 3df4 	ldr.w	r3, [r7, #3572]	; 0xdf4
 800116e:	f8c7 3de8 	str.w	r3, [r7, #3560]	; 0xde8
 8001172:	e031      	b.n	80011d8 <Artist_FillPolygon+0x164>
	{
		//4.1. Build list of active edges
		ScanlineFill_BuildActiveEdgeList(table, SCANLINE_FILL_TABLE_SIZE, &active, yScanline);
 8001174:	f107 0214 	add.w	r2, r7, #20
 8001178:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 800117c:	f8d7 3de8 	ldr.w	r3, [r7, #3560]	; 0xde8
 8001180:	21c8      	movs	r1, #200	; 0xc8
 8001182:	f001 f8d3 	bl	800232c <ScanlineFill_BuildActiveEdgeList>
		if(active.next)
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d01e      	beq.n	80011ce <Artist_FillPolygon+0x15a>
		{
			//4.2. Fill the pixels inside the polygon on the given scanline
			ScanlineFill_FillScanline(&active, yScanline, canvas->data, canvas->numCols, canvas->numRows, color);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689c      	ldr	r4, [r3, #8]
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f107 0014 	add.w	r0, r7, #20
 80011ac:	1cba      	adds	r2, r7, #2
 80011ae:	8812      	ldrh	r2, [r2, #0]
 80011b0:	9201      	str	r2, [sp, #4]
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	4623      	mov	r3, r4
 80011b6:	460a      	mov	r2, r1
 80011b8:	f8d7 1de8 	ldr.w	r1, [r7, #3560]	; 0xde8
 80011bc:	f001 f919 	bl	80023f2 <ScanlineFill_FillScanline>
			//4.3. Update active edges list
			ScanlineFill_UpdateActiveEdgeList(&active, yScanline);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	f8d7 1de8 	ldr.w	r1, [r7, #3560]	; 0xde8
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 f8ce 	bl	800236a <ScanlineFill_UpdateActiveEdgeList>
	for(int32_t yScanline = ymin; yScanline <= ymax; ++yScanline)
 80011ce:	f8d7 3de8 	ldr.w	r3, [r7, #3560]	; 0xde8
 80011d2:	3301      	adds	r3, #1
 80011d4:	f8c7 3de8 	str.w	r3, [r7, #3560]	; 0xde8
 80011d8:	f8d7 2de8 	ldr.w	r2, [r7, #3560]	; 0xde8
 80011dc:	f8d7 3df0 	ldr.w	r3, [r7, #3568]	; 0xdf0
 80011e0:	429a      	cmp	r2, r3
 80011e2:	ddc7      	ble.n	8001174 <Artist_FillPolygon+0x100>
		}
	}
	//5. Color polygon points
	for(const Point *p = points; p != (points + numPoints); ++p)
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f8c7 3de4 	str.w	r3, [r7, #3556]	; 0xde4
 80011ee:	e01b      	b.n	8001228 <Artist_FillPolygon+0x1b4>
	{
		canvas->data[p->y * canvas->numCols + p->x] = YELLOW;
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	f8d7 3de4 	ldr.w	r3, [r7, #3556]	; 0xde4
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4619      	mov	r1, r3
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	fb03 f301 	mul.w	r3, r3, r1
 800120c:	f8d7 1de4 	ldr.w	r1, [r7, #3556]	; 0xde4
 8001210:	6809      	ldr	r1, [r1, #0]
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800121c:	801a      	strh	r2, [r3, #0]
	for(const Point *p = points; p != (points + numPoints); ++p)
 800121e:	f8d7 3de4 	ldr.w	r3, [r7, #3556]	; 0xde4
 8001222:	3308      	adds	r3, #8
 8001224:	f8c7 3de4 	str.w	r3, [r7, #3556]	; 0xde4
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	4413      	add	r3, r2
 8001236:	f8d7 2de4 	ldr.w	r2, [r7, #3556]	; 0xde4
 800123a:	429a      	cmp	r2, r3
 800123c:	d1d8      	bne.n	80011f0 <Artist_FillPolygon+0x17c>
	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	f607 57fc 	addw	r7, r7, #3580	; 0xdfc
 8001246:	46bd      	mov	sp, r7
 8001248:	bd90      	pop	{r4, r7, pc}
	...

0800124c <CycleCounter_GetValue>:
/**
 * @brief Get the current cycle counter value
 * @retval current cycle counter value
 */
inline uint32_t CycleCounter_GetValue(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	return DWT->CYCCNT;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <CycleCounter_GetValue+0x14>)
 8001252:	685b      	ldr	r3, [r3, #4]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e0001000 	.word	0xe0001000

08001264 <CycleCounter_Init>:
 */

#include "cycle_counter.h"

void CycleCounter_Init(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <CycleCounter_Init+0x38>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <CycleCounter_Init+0x38>)
 800126e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001272:	60d3      	str	r3, [r2, #12]
	ITM->LAR = 0xc5acce55;
 8001274:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001278:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <CycleCounter_Init+0x3c>)
 800127a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	DWT->CYCCNT = 0;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <CycleCounter_Init+0x40>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <CycleCounter_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <CycleCounter_Init+0x40>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000edf0 	.word	0xe000edf0
 80012a0:	c5acce55 	.word	0xc5acce55
 80012a4:	e0001000 	.word	0xe0001000

080012a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b42      	ldr	r3, [pc, #264]	; (80013cc <MX_GPIO_Init+0x124>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a41      	ldr	r2, [pc, #260]	; (80013cc <MX_GPIO_Init+0x124>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <MX_GPIO_Init+0x124>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <MX_GPIO_Init+0x124>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a3a      	ldr	r2, [pc, #232]	; (80013cc <MX_GPIO_Init+0x124>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <MX_GPIO_Init+0x124>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <MX_GPIO_Init+0x124>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a33      	ldr	r2, [pc, #204]	; (80013cc <MX_GPIO_Init+0x124>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <MX_GPIO_Init+0x124>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_GPIO_Init+0x124>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <MX_GPIO_Init+0x124>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <MX_GPIO_Init+0x124>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001334:	4826      	ldr	r0, [pc, #152]	; (80013d0 <MX_GPIO_Init+0x128>)
 8001336:	f001 fe0f 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2110      	movs	r1, #16
 800133e:	4825      	ldr	r0, [pc, #148]	; (80013d4 <MX_GPIO_Init+0x12c>)
 8001340:	f001 fe0a 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BACKLIGHT_Pin|LCD_DC_Pin|LCD_RESET_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 7160 	mov.w	r1, #896	; 0x380
 800134a:	4823      	ldr	r0, [pc, #140]	; (80013d8 <MX_GPIO_Init+0x130>)
 800134c:	f001 fe04 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4819      	ldr	r0, [pc, #100]	; (80013d0 <MX_GPIO_Init+0x128>)
 800136a:	f001 fc71 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800136e:	2310      	movs	r3, #16
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_GPIO_Init+0x12c>)
 8001386:	f001 fc63 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_GPIO_Init+0x130>)
 80013a2:	f001 fc55 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RESET_Pin;
 80013a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <MX_GPIO_Init+0x130>)
 80013c0:	f001 fc46 	bl	8002c50 <HAL_GPIO_Init>

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400

080013dc <LCD_StartCom>:

// Private functions declarations

// helper functions
static inline void LCD_StartCom(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	// set CS low
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2110      	movs	r1, #16
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <LCD_StartCom+0x14>)
 80013e6:	f001 fdb7 	bl	8002f58 <HAL_GPIO_WritePin>
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40020000 	.word	0x40020000

080013f4 <LCD_StopCom>:

static inline void LCD_StopCom(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	// set CS high
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2110      	movs	r1, #16
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <LCD_StopCom+0x14>)
 80013fe:	f001 fdab 	bl	8002f58 <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40020000 	.word	0x40020000

0800140c <LCD_SetDataWrite>:

static inline void LCD_SetDataWrite(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	// set DC pin high (data)
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001416:	4802      	ldr	r0, [pc, #8]	; (8001420 <LCD_SetDataWrite+0x14>)
 8001418:	f001 fd9e 	bl	8002f58 <HAL_GPIO_WritePin>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40020400 	.word	0x40020400

08001424 <LCD_SetCmdWrite>:

static inline void LCD_SetCmdWrite(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	// set DC pin low (command)
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142e:	4802      	ldr	r0, [pc, #8]	; (8001438 <LCD_SetCmdWrite+0x14>)
 8001430:	f001 fd92 	bl	8002f58 <HAL_GPIO_WritePin>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40020400 	.word	0x40020400

0800143c <LCD_Reset>:
 */
static void LCD_PrepareGRAMWrite(void);

// Private functions definitions
void LCD_Reset(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	// set reset pin low
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <LCD_Reset+0x2c>)
 8001448:	f001 fd86 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800144c:	2064      	movs	r0, #100	; 0x64
 800144e:	f001 faf5 	bl	8002a3c <HAL_Delay>
	// set reset pin high
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001458:	4803      	ldr	r0, [pc, #12]	; (8001468 <LCD_Reset+0x2c>)
 800145a:	f001 fd7d 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800145e:	2032      	movs	r0, #50	; 0x32
 8001460:	f001 faec 	bl	8002a3c <HAL_Delay>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40020400 	.word	0x40020400

0800146c <LCD_WriteCmd>:

void LCD_WriteCmd(uint8_t cmd)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	LCD_StartCom();
 8001476:	f7ff ffb1 	bl	80013dc <LCD_StartCom>
	LCD_SetCmdWrite();
 800147a:	f7ff ffd3 	bl	8001424 <LCD_SetCmdWrite>
	// send command via SPI
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800147e:	1df9      	adds	r1, r7, #7
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	2201      	movs	r2, #1
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <LCD_WriteCmd+0x2c>)
 8001488:	f002 fa37 	bl	80038fa <HAL_SPI_Transmit>
	LCD_StopCom();
 800148c:	f7ff ffb2 	bl	80013f4 <LCD_StopCom>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000204 	.word	0x20000204

0800149c <LCD_WriteData8>:

void LCD_WriteData8(uint8_t data)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	LCD_StartCom();
 80014a6:	f7ff ff99 	bl	80013dc <LCD_StartCom>
	LCD_SetDataWrite();
 80014aa:	f7ff ffaf 	bl	800140c <LCD_SetDataWrite>
	// send data via SPI
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80014ae:	1df9      	adds	r1, r7, #7
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	2201      	movs	r2, #1
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <LCD_WriteData8+0x2c>)
 80014b8:	f002 fa1f 	bl	80038fa <HAL_SPI_Transmit>
	LCD_StopCom();
 80014bc:	f7ff ff9a 	bl	80013f4 <LCD_StopCom>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000204 	.word	0x20000204

080014cc <LCD_WriteDataColor>:

void LCD_WriteDataColor(const color_t color)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	80fb      	strh	r3, [r7, #6]
	// send red data
	LCD_WriteData8(((color >> 8) & 0xF8) | 0x8);
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	b29b      	uxth	r3, r3
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	f023 030f 	bic.w	r3, r3, #15
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ffd5 	bl	800149c <LCD_WriteData8>
	// send green data
	LCD_WriteData8((color >> 3) & 0xFC);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	08db      	lsrs	r3, r3, #3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ffcb 	bl	800149c <LCD_WriteData8>
	// send blue data
	LCD_WriteData8((color << 3) | 0x8);
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	b25b      	sxtb	r3, r3
 800150c:	f043 0308 	orr.w	r3, r3, #8
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ffc1 	bl	800149c <LCD_WriteData8>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <LCD_PrepareGRAMWrite>:

void LCD_PrepareGRAMWrite(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
	LCD_WriteCmd(0x2C);
 8001526:	202c      	movs	r0, #44	; 0x2c
 8001528:	f7ff ffa0 	bl	800146c <LCD_WriteCmd>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <LCD_Init>:

// Public function definitions
void LCD_Init(Lcd *lcd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	// reset the LCD
 	LCD_Reset();
 8001538:	f7ff ff80 	bl	800143c <LCD_Reset>

 	// send initialization sequence
	LCD_WriteCmd(0XF7);
 800153c:	20f7      	movs	r0, #247	; 0xf7
 800153e:	f7ff ff95 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0xA9);
 8001542:	20a9      	movs	r0, #169	; 0xa9
 8001544:	f7ff ffaa 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x51);
 8001548:	2051      	movs	r0, #81	; 0x51
 800154a:	f7ff ffa7 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x2C);
 800154e:	202c      	movs	r0, #44	; 0x2c
 8001550:	f7ff ffa4 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x82);
 8001554:	2082      	movs	r0, #130	; 0x82
 8001556:	f7ff ffa1 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xC0);
 800155a:	20c0      	movs	r0, #192	; 0xc0
 800155c:	f7ff ff86 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x11);
 8001560:	2011      	movs	r0, #17
 8001562:	f7ff ff9b 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x09);
 8001566:	2009      	movs	r0, #9
 8001568:	f7ff ff98 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xC1);
 800156c:	20c1      	movs	r0, #193	; 0xc1
 800156e:	f7ff ff7d 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x41);
 8001572:	2041      	movs	r0, #65	; 0x41
 8001574:	f7ff ff92 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0XC5);
 8001578:	20c5      	movs	r0, #197	; 0xc5
 800157a:	f7ff ff77 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff ff8c 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 8001584:	200a      	movs	r0, #10
 8001586:	f7ff ff89 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x80);
 800158a:	2080      	movs	r0, #128	; 0x80
 800158c:	f7ff ff86 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xB1);
 8001590:	20b1      	movs	r0, #177	; 0xb1
 8001592:	f7ff ff6b 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0xB0);
 8001596:	20b0      	movs	r0, #176	; 0xb0
 8001598:	f7ff ff80 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x11);
 800159c:	2011      	movs	r0, #17
 800159e:	f7ff ff7d 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xB4);
 80015a2:	20b4      	movs	r0, #180	; 0xb4
 80015a4:	f7ff ff62 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x02);
 80015a8:	2002      	movs	r0, #2
 80015aa:	f7ff ff77 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xB6);
 80015ae:	20b6      	movs	r0, #182	; 0xb6
 80015b0:	f7ff ff5c 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x02);
 80015b4:	2002      	movs	r0, #2
 80015b6:	f7ff ff71 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x42);
 80015ba:	2042      	movs	r0, #66	; 0x42
 80015bc:	f7ff ff6e 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xB7);
 80015c0:	20b7      	movs	r0, #183	; 0xb7
 80015c2:	f7ff ff53 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0xc6);
 80015c6:	20c6      	movs	r0, #198	; 0xc6
 80015c8:	f7ff ff68 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xBE);
 80015cc:	20be      	movs	r0, #190	; 0xbe
 80015ce:	f7ff ff4d 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff ff62 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x04);
 80015d8:	2004      	movs	r0, #4
 80015da:	f7ff ff5f 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xE9);
 80015de:	20e9      	movs	r0, #233	; 0xe9
 80015e0:	f7ff ff44 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff ff59 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0x36);
 80015ea:	2036      	movs	r0, #54	; 0x36
 80015ec:	f7ff ff3e 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8((1<<3)|(0<<7)|(1<<6)|(1<<5));
 80015f0:	2068      	movs	r0, #104	; 0x68
 80015f2:	f7ff ff53 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0x3A);
 80015f6:	203a      	movs	r0, #58	; 0x3a
 80015f8:	f7ff ff38 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x66);
 80015fc:	2066      	movs	r0, #102	; 0x66
 80015fe:	f7ff ff4d 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0xE0);
 8001602:	20e0      	movs	r0, #224	; 0xe0
 8001604:	f7ff ff32 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff ff47 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x07);
 800160e:	2007      	movs	r0, #7
 8001610:	f7ff ff44 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x10);
 8001614:	2010      	movs	r0, #16
 8001616:	f7ff ff41 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x09);
 800161a:	2009      	movs	r0, #9
 800161c:	f7ff ff3e 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x17);
 8001620:	2017      	movs	r0, #23
 8001622:	f7ff ff3b 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0B);
 8001626:	200b      	movs	r0, #11
 8001628:	f7ff ff38 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x41);
 800162c:	2041      	movs	r0, #65	; 0x41
 800162e:	f7ff ff35 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x89);
 8001632:	2089      	movs	r0, #137	; 0x89
 8001634:	f7ff ff32 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x4B);
 8001638:	204b      	movs	r0, #75	; 0x4b
 800163a:	f7ff ff2f 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 800163e:	200a      	movs	r0, #10
 8001640:	f7ff ff2c 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0C);
 8001644:	200c      	movs	r0, #12
 8001646:	f7ff ff29 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0E);
 800164a:	200e      	movs	r0, #14
 800164c:	f7ff ff26 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x18);
 8001650:	2018      	movs	r0, #24
 8001652:	f7ff ff23 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x1B);
 8001656:	201b      	movs	r0, #27
 8001658:	f7ff ff20 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0F);
 800165c:	200f      	movs	r0, #15
 800165e:	f7ff ff1d 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0XE1);
 8001662:	20e1      	movs	r0, #225	; 0xe1
 8001664:	f7ff ff02 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(0x00);
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff ff17 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x17);
 800166e:	2017      	movs	r0, #23
 8001670:	f7ff ff14 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x1A);
 8001674:	201a      	movs	r0, #26
 8001676:	f7ff ff11 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x04);
 800167a:	2004      	movs	r0, #4
 800167c:	f7ff ff0e 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0E);
 8001680:	200e      	movs	r0, #14
 8001682:	f7ff ff0b 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x06);
 8001686:	2006      	movs	r0, #6
 8001688:	f7ff ff08 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x2F);
 800168c:	202f      	movs	r0, #47	; 0x2f
 800168e:	f7ff ff05 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x45);
 8001692:	2045      	movs	r0, #69	; 0x45
 8001694:	f7ff ff02 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x43);
 8001698:	2043      	movs	r0, #67	; 0x43
 800169a:	f7ff feff 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x02);
 800169e:	2002      	movs	r0, #2
 80016a0:	f7ff fefc 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0A);
 80016a4:	200a      	movs	r0, #10
 80016a6:	f7ff fef9 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x09);
 80016aa:	2009      	movs	r0, #9
 80016ac:	f7ff fef6 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x32);
 80016b0:	2032      	movs	r0, #50	; 0x32
 80016b2:	f7ff fef3 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x36);
 80016b6:	2036      	movs	r0, #54	; 0x36
 80016b8:	f7ff fef0 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(0x0F);
 80016bc:	200f      	movs	r0, #15
 80016be:	f7ff feed 	bl	800149c <LCD_WriteData8>
	LCD_WriteCmd(0x11);
 80016c2:	2011      	movs	r0, #17
 80016c4:	f7ff fed2 	bl	800146c <LCD_WriteCmd>
	HAL_Delay(120);
 80016c8:	2078      	movs	r0, #120	; 0x78
 80016ca:	f001 f9b7 	bl	8002a3c <HAL_Delay>
	LCD_WriteCmd(0x29);
 80016ce:	2029      	movs	r0, #41	; 0x29
 80016d0:	f7ff fecc 	bl	800146c <LCD_WriteCmd>

  	// set orientation
	LCD_SetOrientation(lcd, 0);
 80016d4:	2100      	movs	r1, #0
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f864 	bl	80017a4 <LCD_SetOrientation>

	// turn on backlight
	HAL_GPIO_WritePin(LCD_BACKLIGHT_GPIO_Port, LCD_BACKLIGHT_Pin, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	4808      	ldr	r0, [pc, #32]	; (8001704 <LCD_Init+0x1d4>)
 80016e2:	f001 fc39 	bl	8002f58 <HAL_GPIO_WritePin>

	// clear display with black color
	LCD_Clear(lcd, BLACK);
 80016e6:	2100      	movs	r1, #0
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f8ad 	bl	8001848 <LCD_Clear>

	// set cursor to (x, y)
	lcd->cursor.x = lcd->cursor.y = 0;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40020400 	.word	0x40020400

08001708 <LCD_SetArea>:
{
	LCD_SetArea(lcd, p, p);
}

void LCD_SetArea(Lcd *lcd, const Point *startPoint, const Point *endPoint)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	LCD_WriteCmd(0x2A);
 8001714:	202a      	movs	r0, #42	; 0x2a
 8001716:	f7ff fea9 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(startPoint->x >> 8);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	121b      	asrs	r3, r3, #8
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff feba 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(startPoint->x & 0x00FF);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff feb4 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(endPoint->x >> 8);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	121b      	asrs	r3, r3, #8
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fead 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(endPoint->x & 0x00FF);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fea7 	bl	800149c <LCD_WriteData8>

	LCD_WriteCmd(0x2B);
 800174e:	202b      	movs	r0, #43	; 0x2b
 8001750:	f7ff fe8c 	bl	800146c <LCD_WriteCmd>
	LCD_WriteData8(startPoint->y >> 8);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	121b      	asrs	r3, r3, #8
 800175a:	b2db      	uxtb	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fe9d 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(startPoint->y & 0x00FF);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fe97 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(endPoint->y >> 8);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	121b      	asrs	r3, r3, #8
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fe90 	bl	800149c <LCD_WriteData8>
	LCD_WriteData8(endPoint->y & 0x00FF);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fe8a 	bl	800149c <LCD_WriteData8>

	lcd->cursor.x = startPoint->x;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	601a      	str	r2, [r3, #0]
	lcd->cursor.y = startPoint->y;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	605a      	str	r2, [r3, #4]

	LCD_PrepareGRAMWrite();
 8001798:	f7ff fec3 	bl	8001522 <LCD_PrepareGRAMWrite>
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <LCD_SetOrientation>:

void LCD_SetOrientation(Lcd *lcd, const uint8_t rotation)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
	uint8_t memAccReg = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]
	switch(rotation){
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d836      	bhi.n	8001828 <LCD_SetOrientation+0x84>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <LCD_SetOrientation+0x1c>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	080017d1 	.word	0x080017d1
 80017c4:	080017e7 	.word	0x080017e7
 80017c8:	080017fd 	.word	0x080017fd
 80017cc:	08001813 	.word	0x08001813
		case 0:
			lcd->width = LCD_WIDTH;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017d6:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_HEIGHT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017de:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (0 << 6) | (0 << 7);
 80017e0:	2308      	movs	r3, #8
 80017e2:	73fb      	strb	r3, [r7, #15]
		break;
 80017e4:	e021      	b.n	800182a <LCD_SetOrientation+0x86>
		case 1:
			lcd->width = LCD_HEIGHT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017ec:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_WIDTH;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017f4:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (0 << 7) | (1 << 6) | (1 << 5);
 80017f6:	2368      	movs	r3, #104	; 0x68
 80017f8:	73fb      	strb	r3, [r7, #15]
		break;
 80017fa:	e016      	b.n	800182a <LCD_SetOrientation+0x86>
		case 2:
			lcd->width = LCD_WIDTH;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001802:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_HEIGHT;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800180a:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (1 << 6) | (1 << 7);
 800180c:	23c8      	movs	r3, #200	; 0xc8
 800180e:	73fb      	strb	r3, [r7, #15]
		break;
 8001810:	e00b      	b.n	800182a <LCD_SetOrientation+0x86>
		case 3:
			lcd->width = LCD_HEIGHT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001818:	811a      	strh	r2, [r3, #8]
			lcd->height = LCD_WIDTH;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001820:	815a      	strh	r2, [r3, #10]
			memAccReg = (1 << 3) | (1 << 7) | (1 << 5);
 8001822:	23a8      	movs	r3, #168	; 0xa8
 8001824:	73fb      	strb	r3, [r7, #15]
		break;
 8001826:	e000      	b.n	800182a <LCD_SetOrientation+0x86>
		default:
		break;
 8001828:	bf00      	nop
	}
	if(memAccReg != 0)
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <LCD_SetOrientation+0x9a>
	{
		LCD_WriteCmd(0x36);
 8001830:	2036      	movs	r0, #54	; 0x36
 8001832:	f7ff fe1b 	bl	800146c <LCD_WriteCmd>
		LCD_WriteData8(memAccReg);
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fe2f 	bl	800149c <LCD_WriteData8>
	}
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop

08001848 <LCD_Clear>:

void LCD_Clear(Lcd *lcd, const color_t color)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
	Point startPoint = {0, 0}, endPoint = {lcd->width - 1, lcd->height - 1};
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	891b      	ldrh	r3, [r3, #8]
 8001860:	3b01      	subs	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	895b      	ldrh	r3, [r3, #10]
 8001868:	3b01      	subs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
	LCD_SetArea(lcd, &startPoint, &endPoint);
 800186c:	f107 020c 	add.w	r2, r7, #12
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ff46 	bl	8001708 <LCD_SetArea>

	LCD_StartCom();
 800187c:	f7ff fdae 	bl	80013dc <LCD_StartCom>
	LCD_SetDataWrite();
 8001880:	f7ff fdc4 	bl	800140c <LCD_SetDataWrite>

	for(uint16_t y = 0; y < lcd->height; ++y)
 8001884:	2300      	movs	r3, #0
 8001886:	83fb      	strh	r3, [r7, #30]
 8001888:	e011      	b.n	80018ae <LCD_Clear+0x66>
	{
		for(uint16_t x = 0; x < lcd->width; ++x)
 800188a:	2300      	movs	r3, #0
 800188c:	83bb      	strh	r3, [r7, #28]
 800188e:	e006      	b.n	800189e <LCD_Clear+0x56>
		{
			LCD_WriteDataColor(color);
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fe1a 	bl	80014cc <LCD_WriteDataColor>
		for(uint16_t x = 0; x < lcd->width; ++x)
 8001898:	8bbb      	ldrh	r3, [r7, #28]
 800189a:	3301      	adds	r3, #1
 800189c:	83bb      	strh	r3, [r7, #28]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	891b      	ldrh	r3, [r3, #8]
 80018a2:	8bba      	ldrh	r2, [r7, #28]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3f3      	bcc.n	8001890 <LCD_Clear+0x48>
	for(uint16_t y = 0; y < lcd->height; ++y)
 80018a8:	8bfb      	ldrh	r3, [r7, #30]
 80018aa:	3301      	adds	r3, #1
 80018ac:	83fb      	strh	r3, [r7, #30]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	895b      	ldrh	r3, [r3, #10]
 80018b2:	8bfa      	ldrh	r2, [r7, #30]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d3e8      	bcc.n	800188a <LCD_Clear+0x42>
		}
	}

	LCD_StopCom();
 80018b8:	f7ff fd9c 	bl	80013f4 <LCD_StopCom>
}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <LCD_DrawArea>:
	LCD_SetCursor(lcd, p);
	LCD_WriteDataColor(color);
}

void LCD_DrawArea(Lcd *lcd, const color_t *data, const size_t numRows, const size_t numCols)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
	LCD_StartCom();
 80018d2:	f7ff fd83 	bl	80013dc <LCD_StartCom>
	LCD_SetDataWrite();
 80018d6:	f7ff fd99 	bl	800140c <LCD_SetDataWrite>

	for(uint16_t y = 0; y < numRows; ++y)
 80018da:	2300      	movs	r3, #0
 80018dc:	82fb      	strh	r3, [r7, #22]
 80018de:	e019      	b.n	8001914 <LCD_DrawArea+0x50>
	{
		for(uint16_t x = 0; x < numCols; ++x)
 80018e0:	2300      	movs	r3, #0
 80018e2:	82bb      	strh	r3, [r7, #20]
 80018e4:	e00f      	b.n	8001906 <LCD_DrawArea+0x42>
		{
			LCD_WriteDataColor(data[x + y * numCols]);
 80018e6:	8aba      	ldrh	r2, [r7, #20]
 80018e8:	8afb      	ldrh	r3, [r7, #22]
 80018ea:	6839      	ldr	r1, [r7, #0]
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	4413      	add	r3, r2
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fde6 	bl	80014cc <LCD_WriteDataColor>
		for(uint16_t x = 0; x < numCols; ++x)
 8001900:	8abb      	ldrh	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	82bb      	strh	r3, [r7, #20]
 8001906:	8abb      	ldrh	r3, [r7, #20]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d8eb      	bhi.n	80018e6 <LCD_DrawArea+0x22>
	for(uint16_t y = 0; y < numRows; ++y)
 800190e:	8afb      	ldrh	r3, [r7, #22]
 8001910:	3301      	adds	r3, #1
 8001912:	82fb      	strh	r3, [r7, #22]
 8001914:	8afb      	ldrh	r3, [r7, #22]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8e1      	bhi.n	80018e0 <LCD_DrawArea+0x1c>
		}
	}

	LCD_StopCom();
 800191c:	f7ff fd6a 	bl	80013f4 <LCD_StopCom>
}
 8001920:	bf00      	nop
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	f5ad 3da6 	sub.w	sp, sp, #84992	; 0x14c00
 800192e:	b0e4      	sub	sp, #400	; 0x190
 8001930:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char buf[100] = {};
 8001932:	2300      	movs	r3, #0
 8001934:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001938:	f502 728a 	add.w	r2, r2, #276	; 0x114
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001942:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001946:	2260      	movs	r2, #96	; 0x60
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f002 fa14 	bl	8003d78 <memset>
  Lcd lcd = {};
 8001950:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001954:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
  color_t textBuf[FONT_HEIGHT][LCD_WIDTH] = {};
 8001960:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001964:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001968:	4618      	mov	r0, r3
 800196a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800196e:	461a      	mov	r2, r3
 8001970:	2100      	movs	r1, #0
 8001972:	f002 fa01 	bl	8003d78 <memset>
  Canvas textCanvas = {
 8001976:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 800197a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800197e:	3b0c      	subs	r3, #12
 8001980:	f507 329c 	add.w	r2, r7, #79872	; 0x13800
 8001984:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 800198e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001992:	3b0c      	subs	r3, #12
 8001994:	2208      	movs	r2, #8
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 800199c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80019a0:	3b0c      	subs	r3, #12
 80019a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019a6:	609a      	str	r2, [r3, #8]
		  .data = (color_t*)textBuf,
		  .numRows = FONT_HEIGHT,
		  .numCols = LCD_WIDTH
  };
  color_t polygonBuf[POLYGON_BUF_HEIGHT][POLYGON_BUF_WIDTH] = {};
 80019a8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80019ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019b0:	4618      	mov	r0, r3
 80019b2:	4be2      	ldr	r3, [pc, #904]	; (8001d3c <main+0x414>)
 80019b4:	461a      	mov	r2, r3
 80019b6:	2100      	movs	r1, #0
 80019b8:	f002 f9de 	bl	8003d78 <memset>
  Canvas polygonCanvas = {
 80019bc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80019c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019c4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80019c8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80019d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019d6:	22c8      	movs	r2, #200	; 0xc8
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80019de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019e2:	22c8      	movs	r2, #200	; 0xc8
 80019e4:	609a      	str	r2, [r3, #8]
//		  {40, 60},
//		  {50, 20},
//		  {20, 90},
//		  {1, 1}
//  };
  Point polygonPoints[] = {
 80019e6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80019ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019ee:	4ad4      	ldr	r2, [pc, #848]	; (8001d40 <main+0x418>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	4611      	mov	r1, r2
 80019f4:	2358      	movs	r3, #88	; 0x58
 80019f6:	461a      	mov	r2, r3
 80019f8:	f002 f9b0 	bl	8003d5c <memcpy>
		  {120, 180},
		  {80, 120},
		  {40, 160},
		  {20, 100}
  };
  const size_t numPolygonPoints = sizeof(polygonPoints)/sizeof(polygonPoints[0]);
 80019fc:	230b      	movs	r3, #11
 80019fe:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001a02:	f502 72c2 	add.w	r2, r2, #388	; 0x184
 8001a06:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a08:	f000 ffa6 	bl	8002958 <HAL_Init>

  /* USER CODE BEGIN Init */
  CycleCounter_Init();
 8001a0c:	f7ff fc2a 	bl	8001264 <CycleCounter_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a10:	f000 fa2c 	bl	8001e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a14:	f7ff fc48 	bl	80012a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a18:	f000 fdcc 	bl	80025b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&lcd);
 8001a1c:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001a20:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fd83 	bl	8001530 <LCD_Init>

  // Draw header text
  strcpy(buf, "Scanline Fill Algorithm Benchmark");
 8001a2a:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001a2e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001a32:	4ac4      	ldr	r2, [pc, #784]	; (8001d44 <main+0x41c>)
 8001a34:	461c      	mov	r4, r3
 8001a36:	4615      	mov	r5, r2
 8001a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	8023      	strh	r3, [r4, #0]
  Point bufPos = {0, 0}, screenStartPos = {0, 0}, screenEndPos = {LCD_WIDTH - 1, FONT_HEIGHT - 1};
 8001a44:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a48:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a54:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a60:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a6c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a78:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a7c:	4ab2      	ldr	r2, [pc, #712]	; (8001d48 <main+0x420>)
 8001a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a82:	e883 0003 	stmia.w	r3, {r0, r1}
  Artist_ClearCanvas(&textCanvas, BLACK);
 8001a86:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001a8a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001a8e:	3b0c      	subs	r3, #12
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fa5c 	bl	8000f50 <Artist_ClearCanvas>
  Artist_DrawText(&textCanvas, buf, bufPos, GREEN);
 8001a98:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a9c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001aa0:	f507 31a6 	add.w	r1, r7, #84992	; 0x14c00
 8001aa4:	f501 718a 	add.w	r1, r1, #276	; 0x114
 8001aa8:	f507 309c 	add.w	r0, r7, #79872	; 0x13800
 8001aac:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001ab0:	380c      	subs	r0, #12
 8001ab2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001ab6:	9200      	str	r2, [sp, #0]
 8001ab8:	cb0c      	ldmia	r3, {r2, r3}
 8001aba:	f7ff fa79 	bl	8000fb0 <Artist_DrawText>
  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001abe:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001ac2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001ac6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001aca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ace:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001ad2:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff fe16 	bl	8001708 <LCD_SetArea>
  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 8001adc:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001ae0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001ae4:	3b0c      	subs	r3, #12
 8001ae6:	6819      	ldr	r1, [r3, #0]
 8001ae8:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001aec:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001af0:	3b0c      	subs	r3, #12
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001af8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001afc:	3b0c      	subs	r3, #12
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001b04:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001b08:	f7ff fedc 	bl	80018c4 <LCD_DrawArea>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8001b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b10:	488e      	ldr	r0, [pc, #568]	; (8001d4c <main+0x424>)
 8001b12:	f001 fa3a 	bl	8002f8a <HAL_GPIO_TogglePin>

	  Artist_ClearCanvas(&polygonCanvas, BLACK);
 8001b16:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001b1a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fa15 	bl	8000f50 <Artist_ClearCanvas>
	  uint32_t start_ticks = CycleCounter_GetValue();
 8001b26:	f7ff fb91 	bl	800124c <CycleCounter_GetValue>
 8001b2a:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001b2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b32:	6018      	str	r0, [r3, #0]
	  Artist_FillPolygon(&polygonCanvas, polygonPoints, numPolygonPoints, BLUE);
 8001b34:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8001b38:	f5a1 71b8 	sub.w	r1, r1, #368	; 0x170
 8001b3c:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 8001b40:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8001b44:	231f      	movs	r3, #31
 8001b46:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001b4a:	f502 72c2 	add.w	r2, r2, #388	; 0x184
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	f7ff fa90 	bl	8001074 <Artist_FillPolygon>
	  uint32_t duration_ticks = CycleCounter_GetValue() - start_ticks;
 8001b54:	f7ff fb7a 	bl	800124c <CycleCounter_GetValue>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001b5e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001b6a:	f502 72be 	add.w	r2, r2, #380	; 0x17c
 8001b6e:	6013      	str	r3, [r2, #0]
	  float execution_time = (float)(duration_ticks) / (SystemCoreClock/1000000);
 8001b70:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001b74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b82:	4b73      	ldr	r3, [pc, #460]	; (8001d50 <main+0x428>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a73      	ldr	r2, [pc, #460]	; (8001d54 <main+0x42c>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	0c9b      	lsrs	r3, r3, #18
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9a:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001b9e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ba2:	edc3 7a00 	vstr	s15, [r3]

	  screenStartPos.x = 60; screenStartPos.y = 100;
 8001ba6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001baa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bae:	223c      	movs	r2, #60	; 0x3c
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bb6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bba:	2264      	movs	r2, #100	; 0x64
 8001bbc:	605a      	str	r2, [r3, #4]
	  screenEndPos.x = screenStartPos.x + POLYGON_BUF_WIDTH - 1; screenEndPos.y = screenStartPos.y + POLYGON_BUF_HEIGHT - 1;
 8001bbe:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bc2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f103 02c7 	add.w	r2, r3, #199	; 0xc7
 8001bcc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bd0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bda:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f103 02c7 	add.w	r2, r3, #199	; 0xc7
 8001be4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001be8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bec:	605a      	str	r2, [r3, #4]
	  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001bee:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001bf2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001bf6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bfa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bfe:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001c02:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001c06:	4619      	mov	r1, r3
 8001c08:	f7ff fd7e 	bl	8001708 <LCD_SetArea>
	  LCD_DrawArea(&lcd, polygonCanvas.data, polygonCanvas.numRows, polygonCanvas.numCols);
 8001c0c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c1a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001c2e:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001c32:	f7ff fe47 	bl	80018c4 <LCD_DrawArea>

	  sprintf(buf, "Execution ticks: %lu", duration_ticks);
 8001c36:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001c3a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001c3e:	f507 32a6 	add.w	r2, r7, #84992	; 0x14c00
 8001c42:	f502 72be 	add.w	r2, r2, #380	; 0x17c
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	4943      	ldr	r1, [pc, #268]	; (8001d58 <main+0x430>)
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 fe90 	bl	8004970 <siprintf>
	  bufPos.x = 0; bufPos.y = 0;
 8001c50:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c54:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c60:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001c64:	2200      	movs	r2, #0
 8001c66:	605a      	str	r2, [r3, #4]
	  screenStartPos.x = 0; screenStartPos.y = 3*LCD_HEIGHT/4;
 8001c68:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c6c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c78:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c7c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001c80:	605a      	str	r2, [r3, #4]
	  screenEndPos.x = screenStartPos.x + LCD_WIDTH - 1; screenEndPos.y = screenStartPos.y + FONT_HEIGHT - 1;
 8001c82:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c86:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f203 123f 	addw	r2, r3, #319	; 0x13f
 8001c90:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c9e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	1dda      	adds	r2, r3, #7
 8001ca6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001caa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001cae:	605a      	str	r2, [r3, #4]
	  Artist_ClearCanvas(&textCanvas, BLACK);
 8001cb0:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001cb4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001cb8:	3b0c      	subs	r3, #12
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f947 	bl	8000f50 <Artist_ClearCanvas>
	  Artist_DrawText(&textCanvas, buf, bufPos, RED);
 8001cc2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001cc6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001cca:	f507 31a6 	add.w	r1, r7, #84992	; 0x14c00
 8001cce:	f501 718a 	add.w	r1, r1, #276	; 0x114
 8001cd2:	f507 309c 	add.w	r0, r7, #79872	; 0x13800
 8001cd6:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001cda:	380c      	subs	r0, #12
 8001cdc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001ce0:	9200      	str	r2, [sp, #0]
 8001ce2:	cb0c      	ldmia	r3, {r2, r3}
 8001ce4:	f7ff f964 	bl	8000fb0 <Artist_DrawText>
	  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001ce8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001cec:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001cf0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001cf4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001cf8:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001cfc:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7ff fd01 	bl	8001708 <LCD_SetArea>
	  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 8001d06:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001d0a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001d0e:	3b0c      	subs	r3, #12
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001d16:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001d1a:	3b0c      	subs	r3, #12
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001d22:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001d26:	3b0c      	subs	r3, #12
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001d2e:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001d32:	f7ff fdc7 	bl	80018c4 <LCD_DrawArea>

	  sprintf(buf, "Execution time : %.3f us", execution_time);
 8001d36:	f507 33a6 	add.w	r3, r7, #84992	; 0x14c00
 8001d3a:	e00f      	b.n	8001d5c <main+0x434>
 8001d3c:	00013880 	.word	0x00013880
 8001d40:	08007310 	.word	0x08007310
 8001d44:	080072b8 	.word	0x080072b8
 8001d48:	08007368 	.word	0x08007368
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	20000000 	.word	0x20000000
 8001d54:	431bde83 	.word	0x431bde83
 8001d58:	080072dc 	.word	0x080072dc
 8001d5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	f7fe fbf9 	bl	8000558 <__aeabi_f2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001d6e:	f500 708a 	add.w	r0, r0, #276	; 0x114
 8001d72:	493d      	ldr	r1, [pc, #244]	; (8001e68 <main+0x540>)
 8001d74:	f002 fdfc 	bl	8004970 <siprintf>
	  bufPos.x = 0; bufPos.y = 0;
 8001d78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d7c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d88:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	605a      	str	r2, [r3, #4]
	  screenStartPos.x = 0; screenStartPos.y = 3*LCD_HEIGHT/4 + FONT_HEIGHT;
 8001d90:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d94:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001da0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001da4:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8001da8:	605a      	str	r2, [r3, #4]
	  screenEndPos.x = screenStartPos.x + LCD_WIDTH - 1; screenEndPos.y = screenStartPos.y + FONT_HEIGHT - 1;
 8001daa:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f203 123f 	addw	r2, r3, #319	; 0x13f
 8001db8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dbc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dc6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	1dda      	adds	r2, r3, #7
 8001dce:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dd2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dd6:	605a      	str	r2, [r3, #4]
	  Artist_ClearCanvas(&textCanvas, BLACK);
 8001dd8:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001ddc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001de0:	3b0c      	subs	r3, #12
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f8b3 	bl	8000f50 <Artist_ClearCanvas>
	  Artist_DrawText(&textCanvas, buf, bufPos, YELLOW);
 8001dea:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dee:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001df2:	f507 31a6 	add.w	r1, r7, #84992	; 0x14c00
 8001df6:	f501 718a 	add.w	r1, r1, #276	; 0x114
 8001dfa:	f507 309c 	add.w	r0, r7, #79872	; 0x13800
 8001dfe:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001e02:	380c      	subs	r0, #12
 8001e04:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e08:	9200      	str	r2, [sp, #0]
 8001e0a:	cb0c      	ldmia	r3, {r2, r3}
 8001e0c:	f7ff f8d0 	bl	8000fb0 <Artist_DrawText>
	  LCD_SetArea(&lcd, &screenStartPos, &screenEndPos);
 8001e10:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001e14:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001e18:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e1c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001e20:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001e24:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7ff fc6d 	bl	8001708 <LCD_SetArea>
	  LCD_DrawArea(&lcd, textCanvas.data, textCanvas.numRows, textCanvas.numCols);
 8001e2e:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001e32:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001e36:	3b0c      	subs	r3, #12
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001e3e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001e42:	3b0c      	subs	r3, #12
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	f507 339c 	add.w	r3, r7, #79872	; 0x13800
 8001e4a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001e4e:	3b0c      	subs	r3, #12
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f507 30a6 	add.w	r0, r7, #84992	; 0x14c00
 8001e56:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001e5a:	f7ff fd33 	bl	80018c4 <LCD_DrawArea>
	  HAL_Delay(500);
 8001e5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e62:	f000 fdeb 	bl	8002a3c <HAL_Delay>
  {
 8001e66:	e651      	b.n	8001b0c <main+0x1e4>
 8001e68:	080072f4 	.word	0x080072f4

08001e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b094      	sub	sp, #80	; 0x50
 8001e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	2230      	movs	r2, #48	; 0x30
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 ff7c 	bl	8003d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <SystemClock_Config+0xc8>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <SystemClock_Config+0xc8>)
 8001e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <SystemClock_Config+0xc8>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <SystemClock_Config+0xcc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a20      	ldr	r2, [pc, #128]	; (8001f38 <SystemClock_Config+0xcc>)
 8001eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <SystemClock_Config+0xcc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ed6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001edc:	2319      	movs	r3, #25
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ee0:	23c0      	movs	r3, #192	; 0xc0
 8001ee2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f001 f865 	bl	8002fc0 <HAL_RCC_OscConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001efc:	f000 f81e 	bl	8001f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f00:	230f      	movs	r3, #15
 8001f02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f04:	2302      	movs	r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 fac7 	bl	80034b0 <HAL_RCC_ClockConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f28:	f000 f808 	bl	8001f3c <Error_Handler>
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	3750      	adds	r7, #80	; 0x50
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40007000 	.word	0x40007000

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
}
 8001f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <Error_Handler+0x8>
	...

08001f48 <PolarPointWithIndex_compare>:
	size_t index;
} PolarPointWithIndex;

// compare polar points based on angle and radius
static int PolarPointWithIndex_compare(const void *a, const void *b)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
	static const float eps = 1e-5f;
	const float angleDiff = ((PolarPointWithIndex*)a)->point.angle - ((PolarPointWithIndex*)b)->point.angle;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f62:	edc7 7a03 	vstr	s15, [r7, #12]
	if (fabsf(angleDiff) < eps)
 8001f66:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f6a:	eeb0 7ae7 	vabs.f32	s14, s15
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <PolarPointWithIndex_compare+0x74>)
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7c:	d50d      	bpl.n	8001f9a <PolarPointWithIndex_compare+0x52>
	{
		const uint32_t radiusDiff = ((PolarPointWithIndex*)a)->point.radiusSquared - ((PolarPointWithIndex*)b)->point.radiusSquared;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	60bb      	str	r3, [r7, #8]
		if (radiusDiff < 0)
		{
			return 1;
		}
		else if (radiusDiff > 0)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <PolarPointWithIndex_compare+0x4e>
		{
			return -1;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	e00c      	b.n	8001fb0 <PolarPointWithIndex_compare+0x68>
		}
		else
		{
			return 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e00a      	b.n	8001fb0 <PolarPointWithIndex_compare+0x68>
		}
	}
	else if (angleDiff > 0)
 8001f9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa6:	dd01      	ble.n	8001fac <PolarPointWithIndex_compare+0x64>
	{
		return 1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e001      	b.n	8001fb0 <PolarPointWithIndex_compare+0x68>
	}
	else
	{
		return -1;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	080075b0 	.word	0x080075b0

08001fc0 <Point_CartesianToPolar>:

PointPolar Point_CartesianToPolar(const Point *point)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
	PointPolar polar = {};
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
	polar.radiusSquared = point->x * point->x + point->y * point->y;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	fb02 f203 	mul.w	r2, r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	6849      	ldr	r1, [r1, #4]
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	60bb      	str	r3, [r7, #8]
	polar.angle = atan2(point->y, point->x);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa9d 	bl	8000534 <__aeabi_i2d>
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	460d      	mov	r5, r1
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fa96 	bl	8000534 <__aeabi_i2d>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	ec43 2b11 	vmov	d1, r2, r3
 8002010:	ec45 4b10 	vmov	d0, r4, r5
 8002014:	f004 fec8 	bl	8006da8 <atan2>
 8002018:	ec53 2b10 	vmov	r2, r3, d0
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f7fe fdca 	bl	8000bb8 <__aeabi_d2f>
 8002024:	4603      	mov	r3, r0
 8002026:	60fb      	str	r3, [r7, #12]
	return polar;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	461a      	mov	r2, r3
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002034:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bdb0      	pop	{r4, r5, r7, pc}

08002040 <Point_FindMassCenter>:

Point Point_FindMassCenter(const Point *points, const size_t numPoints)
{
 8002040:	b480      	push	{r7}
 8002042:	b08b      	sub	sp, #44	; 0x2c
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
	int32_t xSum = 0, ySum = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
	for(const Point *p = points; p != (points + numPoints); ++p)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	e00c      	b.n	8002074 <Point_FindMassCenter+0x34>
	{
		xSum += p->x;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	4413      	add	r3, r2
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
		ySum += p->y;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	6a3a      	ldr	r2, [r7, #32]
 800206a:	4413      	add	r3, r2
 800206c:	623b      	str	r3, [r7, #32]
	for(const Point *p = points; p != (points + numPoints); ++p)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3308      	adds	r3, #8
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	4413      	add	r3, r2
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	429a      	cmp	r2, r3
 8002080:	d1eb      	bne.n	800205a <Point_FindMassCenter+0x1a>
	}

	Point massCenter = {
			.x = xSum / numPoints,
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
	Point massCenter = {
 800208a:	617b      	str	r3, [r7, #20]
			.y = ySum / numPoints
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
	Point massCenter = {
 8002094:	61bb      	str	r3, [r7, #24]
	};

	return massCenter;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	461a      	mov	r2, r3
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020a2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	372c      	adds	r7, #44	; 0x2c
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <Point_MoveOrigin>:

void Point_MoveOrigin(Point *points, const size_t numPoints, const Point *origin)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b087      	sub	sp, #28
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
	for(Point *p = points; p != (points + numPoints); ++p)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e010      	b.n	80020e6 <Point_MoveOrigin+0x34>
	{
		p->x -= origin->x;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	1ad2      	subs	r2, r2, r3
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	601a      	str	r2, [r3, #0]
		p->y -= origin->y;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	1ad2      	subs	r2, r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	605a      	str	r2, [r3, #4]
	for(Point *p = points; p != (points + numPoints); ++p)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3308      	adds	r3, #8
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4413      	add	r3, r2
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1e7      	bne.n	80020c4 <Point_MoveOrigin+0x12>
	}
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <Point_SortAntiClockwise>:

void Point_SortAntiClockwise(Point *points, const size_t numPoints)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b0ed      	sub	sp, #436	; 0x1b4
 8002108:	af00      	add	r7, sp, #0
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	6018      	str	r0, [r3, #0]
 8002110:	f107 0308 	add.w	r3, r7, #8
 8002114:	6019      	str	r1, [r3, #0]
	// Make a copy of the points
	Point pointsOriginal[POINT_MAX_NUM] = {};
 8002116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800211a:	22a0      	movs	r2, #160	; 0xa0
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f001 fe2a 	bl	8003d78 <memset>
	memcpy(pointsOriginal, points, numPoints*sizeof(points[0]));
 8002124:	f107 0308 	add.w	r3, r7, #8
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	00da      	lsls	r2, r3, #3
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8002134:	6819      	ldr	r1, [r3, #0]
 8002136:	f001 fe11 	bl	8003d5c <memcpy>
	// 1. Find mass center
	Point massCenter = Point_FindMassCenter(points, numPoints);
 800213a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 800213e:	f107 0208 	add.w	r2, r7, #8
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	6819      	ldr	r1, [r3, #0]
 800214a:	f7ff ff79 	bl	8002040 <Point_FindMassCenter>
	// 2. Shift points origin to mass center
	Point_MoveOrigin(points, numPoints, &massCenter);
 800214e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8002152:	f107 0108 	add.w	r1, r7, #8
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	6809      	ldr	r1, [r1, #0]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	f7ff ffa8 	bl	80020b2 <Point_MoveOrigin>
	// 3. Convert to polar coordinates
	PolarPointWithIndex polarPointsWithIndex[POINT_MAX_NUM] = {};
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	4618      	mov	r0, r3
 8002168:	23f0      	movs	r3, #240	; 0xf0
 800216a:	461a      	mov	r2, r3
 800216c:	2100      	movs	r1, #0
 800216e:	f001 fe03 	bl	8003d78 <memset>
	for (size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002178:	e02c      	b.n	80021d4 <Point_SortAntiClockwise+0xd0>
	{
		polarPointsWithIndex[iPoint].point = Point_CartesianToPolar(points + iPoint);
 800217a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	f107 020c 	add.w	r2, r7, #12
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	18d0      	adds	r0, r2, r3
 8002188:	f107 0110 	add.w	r1, r7, #16
 800218c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	18cc      	adds	r4, r1, r3
 800219a:	463b      	mov	r3, r7
 800219c:	4601      	mov	r1, r0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff0e 	bl	8001fc0 <Point_CartesianToPolar>
 80021a4:	463a      	mov	r2, r7
 80021a6:	4623      	mov	r3, r4
 80021a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021ac:	e883 0003 	stmia.w	r3, {r0, r1}
		polarPointsWithIndex[iPoint].index = iPoint;
 80021b0:	f107 0110 	add.w	r1, r7, #16
 80021b4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3308      	adds	r3, #8
 80021c4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80021c8:	601a      	str	r2, [r3, #0]
	for (size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 80021ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80021ce:	3301      	adds	r3, #1
 80021d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d3cb      	bcc.n	800217a <Point_SortAntiClockwise+0x76>
	}
	// 4. Sort points based on polar coordinates
	qsort(polarPointsWithIndex, numPoints, sizeof(PolarPointWithIndex), PolarPointWithIndex_compare);
 80021e2:	f107 0108 	add.w	r1, r7, #8
 80021e6:	f107 0010 	add.w	r0, r7, #16
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <Point_SortAntiClockwise+0x154>)
 80021ec:	220c      	movs	r2, #12
 80021ee:	6809      	ldr	r1, [r1, #0]
 80021f0:	f002 fa6d 	bl	80046ce <qsort>
	// 5. Reorder original points based on the sorted order of polar points
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80021fa:	e01f      	b.n	800223c <Point_SortAntiClockwise+0x138>
	{
		points[iPoint] = pointsOriginal[polarPointsWithIndex[iPoint].index];
 80021fc:	f107 0110 	add.w	r1, r7, #16
 8002200:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	3308      	adds	r3, #8
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002216:	00d2      	lsls	r2, r2, #3
 8002218:	f107 010c 	add.w	r1, r7, #12
 800221c:	6809      	ldr	r1, [r1, #0]
 800221e:	440a      	add	r2, r1
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 8002226:	440b      	add	r3, r1
 8002228:	3ba8      	subs	r3, #168	; 0xa8
 800222a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800222e:	e882 0003 	stmia.w	r2, {r0, r1}
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8002232:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002236:	3301      	adds	r3, #1
 8002238:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d3d8      	bcc.n	80021fc <Point_SortAntiClockwise+0xf8>
	}
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}
 8002256:	bf00      	nop
 8002258:	08001f49 	.word	0x08001f49

0800225c <ScanlineFill_BuildEdgeTable>:
 * if y-coordinates are monotonic or not
 */
static void ScanlineFill_FillEdgeData(Edge *table, const size_t maxTableSize, Edge *edge, const Point *lower, const Point *upper, int32_t yComp);

void ScanlineFill_BuildEdgeTable(Edge *table, const size_t maxTableSize, Edge *edges, const size_t maxNumEdges, const Point *points, const size_t numPoints)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b08d      	sub	sp, #52	; 0x34
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
	// Iterate through every pair of points and create edges info
	const Point *p1 = points + (numPoints - 1);  // First edge point
 800226a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800226c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002270:	3b01      	subs	r3, #1
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002276:	4413      	add	r3, r2
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
	const Point *p2 = NULL;  // Second point
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
	int32_t yPrev = points[numPoints - 2].y;
 800227e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002280:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002284:	3b02      	subs	r3, #2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800228a:	4413      	add	r3, r2
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	623b      	str	r3, [r7, #32]
	size_t iEdge = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8002294:	2300      	movs	r3, #0
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	e03f      	b.n	800231a <ScanlineFill_BuildEdgeTable+0xbe>
	{
		p2 = points + iPoint;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022a0:	4413      	add	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
		// Find lower and upper points of non-horizontal edge
		if(p1->y < p2->y)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	da16      	bge.n	80022de <ScanlineFill_BuildEdgeTable+0x82>
		{
			// p1 is lower, p2 is upper point, edge is going upwards
			ScanlineFill_FillEdgeData(table, maxTableSize, edges + iEdge, p1, p2, ScanlineFill_yNext(points, numPoints, iPoint));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	18d4      	adds	r4, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80022bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80022be:	f000 f8d7 	bl	8002470 <ScanlineFill_yNext>
 80022c2:	4603      	mov	r3, r0
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	4622      	mov	r2, r4
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f92d 	bl	8002530 <ScanlineFill_FillEdgeData>
			++iEdge;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	e015      	b.n	800230a <ScanlineFill_BuildEdgeTable+0xae>
		}
		else if(p1->y > p2->y)
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	dd0f      	ble.n	800230a <ScanlineFill_BuildEdgeTable+0xae>
		{
			// p2 is lower, p1 is upper point, edge is going downwards
			ScanlineFill_FillEdgeData(table, maxTableSize, edges + iEdge, p2, p1, yPrev);
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	441a      	add	r2, r3
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f916 	bl	8002530 <ScanlineFill_FillEdgeData>
			++iEdge;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	3301      	adds	r3, #1
 8002308:	61fb      	str	r3, [r7, #28]
		}
		yPrev = p1->y;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	623b      	str	r3, [r7, #32]
		p1 = p2;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
	for(size_t iPoint = 0; iPoint < numPoints; ++iPoint)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	3301      	adds	r3, #1
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231e:	429a      	cmp	r2, r3
 8002320:	d3bb      	bcc.n	800229a <ScanlineFill_BuildEdgeTable+0x3e>
	}
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	372c      	adds	r7, #44	; 0x2c
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}

0800232c <ScanlineFill_BuildActiveEdgeList>:

void ScanlineFill_BuildActiveEdgeList(Edge *table, const size_t maxTableSize, Edge *active, int32_t yScanline)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
	Edge *scanlineEdge = table[yScanline].next, *nextScanlineEdge;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4413      	add	r3, r2
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	617b      	str	r3, [r7, #20]
	// insert edges related to current scanline in the active edges list
	while(scanlineEdge)
 8002346:	e008      	b.n	800235a <ScanlineFill_BuildActiveEdgeList+0x2e>
	{
		nextScanlineEdge = scanlineEdge->next;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	613b      	str	r3, [r7, #16]
		ScanlineFill_InsertEdge(active, scanlineEdge);
 800234e:	6979      	ldr	r1, [r7, #20]
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f8bf 	bl	80024d4 <ScanlineFill_InsertEdge>
		scanlineEdge = nextScanlineEdge;
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	617b      	str	r3, [r7, #20]
	while(scanlineEdge)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f3      	bne.n	8002348 <ScanlineFill_BuildActiveEdgeList+0x1c>
	}
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <ScanlineFill_UpdateActiveEdgeList>:

void ScanlineFill_UpdateActiveEdgeList(Edge *active, int32_t yScanline)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
	//1. Update edges x-coordinates
	Edge *currentEdge = active->next, *edgeBefore = active;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	613b      	str	r3, [r7, #16]
	while(currentEdge)
 800237e:	e01d      	b.n	80023bc <ScanlineFill_UpdateActiveEdgeList+0x52>
	{
		if(yScanline >= currentEdge->yu)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	db08      	blt.n	800239c <ScanlineFill_UpdateActiveEdgeList+0x32>
		{
			// remove completed edges
			currentEdge = currentEdge->next;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	617b      	str	r3, [r7, #20]
			edgeBefore->next = edgeBefore->next->next;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	e00f      	b.n	80023bc <ScanlineFill_UpdateActiveEdgeList+0x52>
		}
		else
		{
			// update edges in-progress
			currentEdge->xl = currentEdge->xl + currentEdge->dx;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	ed93 7a00 	vldr	s14, [r3]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80023a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	edc3 7a00 	vstr	s15, [r3]
			edgeBefore = currentEdge;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	613b      	str	r3, [r7, #16]
			currentEdge = currentEdge->next;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	617b      	str	r3, [r7, #20]
	while(currentEdge)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1de      	bne.n	8002380 <ScanlineFill_UpdateActiveEdgeList+0x16>
		}
	}
	//2. Resort list of active edges by rebuilding it
	Edge *nextEdge;
	currentEdge = active->next;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	617b      	str	r3, [r7, #20]
	active->next = NULL;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
	while(currentEdge)
 80023ce:	e008      	b.n	80023e2 <ScanlineFill_UpdateActiveEdgeList+0x78>
	{
		nextEdge = currentEdge->next;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60fb      	str	r3, [r7, #12]
		ScanlineFill_InsertEdge(active, currentEdge);
 80023d6:	6979      	ldr	r1, [r7, #20]
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f87b 	bl	80024d4 <ScanlineFill_InsertEdge>
		currentEdge = nextEdge;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	617b      	str	r3, [r7, #20]
	while(currentEdge)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f3      	bne.n	80023d0 <ScanlineFill_UpdateActiveEdgeList+0x66>
	}
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <ScanlineFill_FillScanline>:

void ScanlineFill_FillScanline(Edge *active, int32_t yScanline, color_t *data, const size_t dataWidth, const size_t dataHeight, const color_t color)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b089      	sub	sp, #36	; 0x24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	603b      	str	r3, [r7, #0]
	Edge *e1, *e2;
	e1 = active->next;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61fb      	str	r3, [r7, #28]
	while(e1)
 8002406:	e029      	b.n	800245c <ScanlineFill_FillScanline+0x6a>
	{
		e2 = e1->next;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	617b      	str	r3, [r7, #20]
		// fill pixels between the pair of edge points
		for(int32_t x = e1->xl; x < e2->xl; ++x)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002418:	ee17 3a90 	vmov	r3, s15
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	e00d      	b.n	800243c <ScanlineFill_FillScanline+0x4a>
		{
			data[dataWidth * yScanline + x] = color;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	fb02 f203 	mul.w	r2, r2, r3
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	4413      	add	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002434:	801a      	strh	r2, [r3, #0]
		for(int32_t x = e1->xl; x < e2->xl; ++x)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	3301      	adds	r3, #1
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	d4e4      	bmi.n	8002420 <ScanlineFill_FillScanline+0x2e>
		}
		e1 = e2->next;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	61fb      	str	r3, [r7, #28]
	while(e1)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1d2      	bne.n	8002408 <ScanlineFill_FillScanline+0x16>
	}
}
 8002462:	bf00      	nop
 8002464:	bf00      	nop
 8002466:	3724      	adds	r7, #36	; 0x24
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <ScanlineFill_yNext>:

int32_t ScanlineFill_yNext(const Point *points, const size_t numPoints, const size_t iCurrentPoint)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
	size_t iNextPoint = (iCurrentPoint + 1) % numPoints;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3301      	adds	r3, #1
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	fbb3 f2f2 	udiv	r2, r3, r2
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	fb01 f202 	mul.w	r2, r1, r2
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	617b      	str	r3, [r7, #20]
	while (points[iNextPoint].y == points[iCurrentPoint].y)
 8002490:	e009      	b.n	80024a6 <ScanlineFill_yNext+0x36>
	{
		iNextPoint = (iNextPoint + 1) % numPoints;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3301      	adds	r3, #1
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	fbb3 f2f2 	udiv	r2, r3, r2
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	fb01 f202 	mul.w	r2, r1, r2
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
	while (points[iNextPoint].y == points[iCurrentPoint].y)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4413      	add	r3, r2
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	440b      	add	r3, r1
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d0e9      	beq.n	8002492 <ScanlineFill_yNext+0x22>
	}
	return points[iNextPoint].y;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4413      	add	r3, r2
 80024c6:	685b      	ldr	r3, [r3, #4]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <ScanlineFill_InsertEdge>:

void ScanlineFill_InsertEdge(Edge *list, Edge *edge)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
	Edge *currentEdge = list->next, *edgeBefore = list;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60bb      	str	r3, [r7, #8]
	while(currentEdge)
 80024e8:	e012      	b.n	8002510 <ScanlineFill_InsertEdge+0x3c>
	{
		if(edge->xl < currentEdge->xl)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	ed93 7a00 	vldr	s14, [r3]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fe:	d502      	bpl.n	8002506 <ScanlineFill_InsertEdge+0x32>
		{
			currentEdge = NULL;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e004      	b.n	8002510 <ScanlineFill_InsertEdge+0x3c>
		}
		else
		{
			edgeBefore = currentEdge;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	60bb      	str	r3, [r7, #8]
			currentEdge = currentEdge->next;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	60fb      	str	r3, [r7, #12]
	while(currentEdge)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e9      	bne.n	80024ea <ScanlineFill_InsertEdge+0x16>
		}
	}
	// insert the new edge in the linked list
	edge->next = edgeBefore->next;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	60da      	str	r2, [r3, #12]
	edgeBefore->next = edge;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	60da      	str	r2, [r3, #12]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <ScanlineFill_FillEdgeData>:

void ScanlineFill_FillEdgeData(Edge *table, const size_t maxTableSize, Edge *edge, const Point *lower, const Point *upper, int32_t yComp)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
	// Fill edge info
	edge->xl = lower->x;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	edc3 7a00 	vstr	s15, [r3]
	edge->yu = (upper->y < yComp) ? upper->y - 1 : upper->y;  // adjust if edge is monotonically increasing or decreasing
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	429a      	cmp	r2, r3
 8002558:	dd03      	ble.n	8002562 <ScanlineFill_FillEdgeData+0x32>
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	e001      	b.n	8002566 <ScanlineFill_FillEdgeData+0x36>
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6053      	str	r3, [r2, #4]
	edge->dx = ((float)(upper->x - lower->x)) / (upper->y - lower->y);
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800258e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	edc3 7a02 	vstr	s15, [r3, #8]
	// Insert edge in edge table
	ScanlineFill_InsertEdge(table + lower->y, edge);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4413      	add	r3, r2
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff95 	bl	80024d4 <ScanlineFill_InsertEdge>
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <MX_SPI1_Init+0x64>)
 80025ba:	4a18      	ldr	r2, [pc, #96]	; (800261c <MX_SPI1_Init+0x68>)
 80025bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <MX_SPI1_Init+0x64>)
 80025c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <MX_SPI1_Init+0x64>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <MX_SPI1_Init+0x64>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <MX_SPI1_Init+0x64>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <MX_SPI1_Init+0x64>)
 80025da:	2200      	movs	r2, #0
 80025dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <MX_SPI1_Init+0x64>)
 80025e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <MX_SPI1_Init+0x64>)
 80025e8:	2208      	movs	r2, #8
 80025ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <MX_SPI1_Init+0x64>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <MX_SPI1_Init+0x64>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f8:	4b07      	ldr	r3, [pc, #28]	; (8002618 <MX_SPI1_Init+0x64>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <MX_SPI1_Init+0x64>)
 8002600:	220a      	movs	r2, #10
 8002602:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002604:	4804      	ldr	r0, [pc, #16]	; (8002618 <MX_SPI1_Init+0x64>)
 8002606:	f001 f8ef 	bl	80037e8 <HAL_SPI_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002610:	f7ff fc94 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000204 	.word	0x20000204
 800261c:	40013000 	.word	0x40013000

08002620 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_SPI_MspInit+0x84>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d12b      	bne.n	800269a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_SPI_MspInit+0x88>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <HAL_SPI_MspInit+0x88>)
 800264c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002650:	6453      	str	r3, [r2, #68]	; 0x44
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_SPI_MspInit+0x88>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_SPI_MspInit+0x88>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <HAL_SPI_MspInit+0x88>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <HAL_SPI_MspInit+0x88>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800267a:	23e0      	movs	r3, #224	; 0xe0
 800267c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002686:	2303      	movs	r3, #3
 8002688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800268a:	2305      	movs	r3, #5
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	4805      	ldr	r0, [pc, #20]	; (80026ac <HAL_SPI_MspInit+0x8c>)
 8002696:	f000 fadb 	bl	8002c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800269a:	bf00      	nop
 800269c:	3728      	adds	r7, #40	; 0x28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40013000 	.word	0x40013000
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40020000 	.word	0x40020000

080026b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_MspInit+0x4c>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_MspInit+0x4c>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_MspInit+0x4c>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_MspInit+0x4c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a08      	ldr	r2, [pc, #32]	; (80026fc <HAL_MspInit+0x4c>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_MspInit+0x4c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800

08002700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002704:	e7fe      	b.n	8002704 <NMI_Handler+0x4>

08002706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270a:	e7fe      	b.n	800270a <HardFault_Handler+0x4>

0800270c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002710:	e7fe      	b.n	8002710 <MemManage_Handler+0x4>

08002712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002716:	e7fe      	b.n	8002716 <BusFault_Handler+0x4>

08002718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800271c:	e7fe      	b.n	800271c <UsageFault_Handler+0x4>

0800271e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800274c:	f000 f956 	bl	80029fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
	return 1;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_kill>:

int _kill(int pid, int sig)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800276e:	f001 facb 	bl	8003d08 <__errno>
 8002772:	4603      	mov	r3, r0
 8002774:	2216      	movs	r2, #22
 8002776:	601a      	str	r2, [r3, #0]
	return -1;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <_exit>:

void _exit (int status)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800278c:	f04f 31ff 	mov.w	r1, #4294967295
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ffe7 	bl	8002764 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002796:	e7fe      	b.n	8002796 <_exit+0x12>

08002798 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	e00a      	b.n	80027c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027aa:	f3af 8000 	nop.w
 80027ae:	4601      	mov	r1, r0
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	60ba      	str	r2, [r7, #8]
 80027b6:	b2ca      	uxtb	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	dbf0      	blt.n	80027aa <_read+0x12>
	}

return len;
 80027c8:	687b      	ldr	r3, [r7, #4]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	e009      	b.n	80027f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	60ba      	str	r2, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3301      	adds	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	dbf1      	blt.n	80027e4 <_write+0x12>
	}
	return len;
 8002800:	687b      	ldr	r3, [r7, #4]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <_close>:

int _close(int file)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	return -1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002832:	605a      	str	r2, [r3, #4]
	return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <_isatty>:

int _isatty(int file)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	return 1;
 800284a:	2301      	movs	r3, #1
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
	return 0;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800287c:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <_sbrk+0x5c>)
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <_sbrk+0x60>)
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <_sbrk+0x64>)
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <_sbrk+0x68>)
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d207      	bcs.n	80028b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028a4:	f001 fa30 	bl	8003d08 <__errno>
 80028a8:	4603      	mov	r3, r0
 80028aa:	220c      	movs	r2, #12
 80028ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	e009      	b.n	80028c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <_sbrk+0x64>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <_sbrk+0x64>)
 80028c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028c6:	68fb      	ldr	r3, [r7, #12]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20020000 	.word	0x20020000
 80028d4:	00000400 	.word	0x00000400
 80028d8:	200001f8 	.word	0x200001f8
 80028dc:	20000270 	.word	0x20000270

080028e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <SystemInit+0x20>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <SystemInit+0x20>)
 80028ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800293c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800290a:	490e      	ldr	r1, [pc, #56]	; (8002944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002910:	e002      	b.n	8002918 <LoopCopyDataInit>

08002912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002916:	3304      	adds	r3, #4

08002918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800291c:	d3f9      	bcc.n	8002912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002920:	4c0b      	ldr	r4, [pc, #44]	; (8002950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002924:	e001      	b.n	800292a <LoopFillZerobss>

08002926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002928:	3204      	adds	r2, #4

0800292a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800292c:	d3fb      	bcc.n	8002926 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800292e:	f7ff ffd7 	bl	80028e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002932:	f001 f9ef 	bl	8003d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002936:	f7fe fff7 	bl	8001928 <main>
  bx  lr    
 800293a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800293c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002944:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002948:	08007a28 	.word	0x08007a28
  ldr r2, =_sbss
 800294c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002950:	20000270 	.word	0x20000270

08002954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002954:	e7fe      	b.n	8002954 <ADC_IRQHandler>
	...

08002958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800295c:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_Init+0x40>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <HAL_Init+0x40>)
 8002962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_Init+0x40>)
 800296e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a07      	ldr	r2, [pc, #28]	; (8002998 <HAL_Init+0x40>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002980:	2003      	movs	r0, #3
 8002982:	f000 f931 	bl	8002be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002986:	200f      	movs	r0, #15
 8002988:	f000 f808 	bl	800299c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800298c:	f7ff fe90 	bl	80026b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40023c00 	.word	0x40023c00

0800299c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_InitTick+0x54>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_InitTick+0x58>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4619      	mov	r1, r3
 80029ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f93b 	bl	8002c36 <HAL_SYSTICK_Config>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00e      	b.n	80029e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b0f      	cmp	r3, #15
 80029ce:	d80a      	bhi.n	80029e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d0:	2200      	movs	r2, #0
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	f000 f911 	bl	8002bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029dc:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <HAL_InitTick+0x5c>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e000      	b.n	80029e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000000 	.word	0x20000000
 80029f4:	20000008 	.word	0x20000008
 80029f8:	20000004 	.word	0x20000004

080029fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_IncTick+0x20>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_IncTick+0x24>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <HAL_IncTick+0x24>)
 8002a0e:	6013      	str	r3, [r2, #0]
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000008 	.word	0x20000008
 8002a20:	2000025c 	.word	0x2000025c

08002a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return uwTick;
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_GetTick+0x14>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	2000025c 	.word	0x2000025c

08002a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff ffee 	bl	8002a24 <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d005      	beq.n	8002a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_Delay+0x44>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a62:	bf00      	nop
 8002a64:	f7ff ffde 	bl	8002a24 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d8f7      	bhi.n	8002a64 <HAL_Delay+0x28>
  {
  }
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000008 	.word	0x20000008

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	60d3      	str	r3, [r2, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db0a      	blt.n	8002b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	490c      	ldr	r1, [pc, #48]	; (8002b34 <__NVIC_SetPriority+0x4c>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	0112      	lsls	r2, r2, #4
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b10:	e00a      	b.n	8002b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4908      	ldr	r1, [pc, #32]	; (8002b38 <__NVIC_SetPriority+0x50>)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	3b04      	subs	r3, #4
 8002b20:	0112      	lsls	r2, r2, #4
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	440b      	add	r3, r1
 8002b26:	761a      	strb	r2, [r3, #24]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000e100 	.word	0xe000e100
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b089      	sub	sp, #36	; 0x24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f1c3 0307 	rsb	r3, r3, #7
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	bf28      	it	cs
 8002b5a:	2304      	movcs	r3, #4
 8002b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d902      	bls.n	8002b6c <NVIC_EncodePriority+0x30>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3b03      	subs	r3, #3
 8002b6a:	e000      	b.n	8002b6e <NVIC_EncodePriority+0x32>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	401a      	ands	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b84:	f04f 31ff 	mov.w	r1, #4294967295
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43d9      	mvns	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	4313      	orrs	r3, r2
         );
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3724      	adds	r7, #36	; 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb4:	d301      	bcc.n	8002bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00f      	b.n	8002bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <SysTick_Config+0x40>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc2:	210f      	movs	r1, #15
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	f7ff ff8e 	bl	8002ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <SysTick_Config+0x40>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <SysTick_Config+0x40>)
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000e010 	.word	0xe000e010

08002be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff47 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c10:	f7ff ff5c 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f7ff ff8e 	bl	8002b3c <NVIC_EncodePriority>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff5d 	bl	8002ae8 <__NVIC_SetPriority>
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffb0 	bl	8002ba4 <SysTick_Config>
 8002c44:	4603      	mov	r3, r0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e159      	b.n	8002f20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	f040 8148 	bne.w	8002f1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d005      	beq.n	8002ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d130      	bne.n	8002d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd8:	2201      	movs	r2, #1
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 0201 	and.w	r2, r3, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d017      	beq.n	8002d40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d123      	bne.n	8002d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	08da      	lsrs	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3208      	adds	r2, #8
 8002d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	220f      	movs	r2, #15
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	08da      	lsrs	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3208      	adds	r2, #8
 8002d8e:	69b9      	ldr	r1, [r7, #24]
 8002d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0203 	and.w	r2, r3, #3
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80a2 	beq.w	8002f1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	4b57      	ldr	r3, [pc, #348]	; (8002f38 <HAL_GPIO_Init+0x2e8>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	4a56      	ldr	r2, [pc, #344]	; (8002f38 <HAL_GPIO_Init+0x2e8>)
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de4:	6453      	str	r3, [r2, #68]	; 0x44
 8002de6:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <HAL_GPIO_Init+0x2e8>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df2:	4a52      	ldr	r2, [pc, #328]	; (8002f3c <HAL_GPIO_Init+0x2ec>)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	089b      	lsrs	r3, r3, #2
 8002df8:	3302      	adds	r3, #2
 8002dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	220f      	movs	r2, #15
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a49      	ldr	r2, [pc, #292]	; (8002f40 <HAL_GPIO_Init+0x2f0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d019      	beq.n	8002e52 <HAL_GPIO_Init+0x202>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a48      	ldr	r2, [pc, #288]	; (8002f44 <HAL_GPIO_Init+0x2f4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_GPIO_Init+0x1fe>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a47      	ldr	r2, [pc, #284]	; (8002f48 <HAL_GPIO_Init+0x2f8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00d      	beq.n	8002e4a <HAL_GPIO_Init+0x1fa>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a46      	ldr	r2, [pc, #280]	; (8002f4c <HAL_GPIO_Init+0x2fc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d007      	beq.n	8002e46 <HAL_GPIO_Init+0x1f6>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a45      	ldr	r2, [pc, #276]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d101      	bne.n	8002e42 <HAL_GPIO_Init+0x1f2>
 8002e3e:	2304      	movs	r3, #4
 8002e40:	e008      	b.n	8002e54 <HAL_GPIO_Init+0x204>
 8002e42:	2307      	movs	r3, #7
 8002e44:	e006      	b.n	8002e54 <HAL_GPIO_Init+0x204>
 8002e46:	2303      	movs	r3, #3
 8002e48:	e004      	b.n	8002e54 <HAL_GPIO_Init+0x204>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e002      	b.n	8002e54 <HAL_GPIO_Init+0x204>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <HAL_GPIO_Init+0x204>
 8002e52:	2300      	movs	r3, #0
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	f002 0203 	and.w	r2, r2, #3
 8002e5a:	0092      	lsls	r2, r2, #2
 8002e5c:	4093      	lsls	r3, r2
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e64:	4935      	ldr	r1, [pc, #212]	; (8002f3c <HAL_GPIO_Init+0x2ec>)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	089b      	lsrs	r3, r3, #2
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e72:	4b38      	ldr	r3, [pc, #224]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e96:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e9c:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ec0:	4a24      	ldr	r2, [pc, #144]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eea:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f14:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b0f      	cmp	r3, #15
 8002f24:	f67f aea2 	bls.w	8002c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	3724      	adds	r7, #36	; 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40013800 	.word	0x40013800
 8002f40:	40020000 	.word	0x40020000
 8002f44:	40020400 	.word	0x40020400
 8002f48:	40020800 	.word	0x40020800
 8002f4c:	40020c00 	.word	0x40020c00
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40013c00 	.word	0x40013c00

08002f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
 8002f64:	4613      	mov	r3, r2
 8002f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f68:	787b      	ldrb	r3, [r7, #1]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f74:	e003      	b.n	8002f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	041a      	lsls	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	619a      	str	r2, [r3, #24]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f9c:	887a      	ldrh	r2, [r7, #2]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	041a      	lsls	r2, r3, #16
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	43d9      	mvns	r1, r3
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	400b      	ands	r3, r1
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	619a      	str	r2, [r3, #24]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e264      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d075      	beq.n	80030ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fde:	4ba3      	ldr	r3, [pc, #652]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d00c      	beq.n	8003004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fea:	4ba0      	ldr	r3, [pc, #640]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d112      	bne.n	800301c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff6:	4b9d      	ldr	r3, [pc, #628]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003002:	d10b      	bne.n	800301c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	4b99      	ldr	r3, [pc, #612]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d05b      	beq.n	80030c8 <HAL_RCC_OscConfig+0x108>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d157      	bne.n	80030c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e23f      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003024:	d106      	bne.n	8003034 <HAL_RCC_OscConfig+0x74>
 8003026:	4b91      	ldr	r3, [pc, #580]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a90      	ldr	r2, [pc, #576]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e01d      	b.n	8003070 <HAL_RCC_OscConfig+0xb0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0x98>
 800303e:	4b8b      	ldr	r3, [pc, #556]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a8a      	ldr	r2, [pc, #552]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b88      	ldr	r3, [pc, #544]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a87      	ldr	r2, [pc, #540]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0xb0>
 8003058:	4b84      	ldr	r3, [pc, #528]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a83      	ldr	r2, [pc, #524]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 800305e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b81      	ldr	r3, [pc, #516]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a80      	ldr	r2, [pc, #512]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 800306a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d013      	beq.n	80030a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7ff fcd4 	bl	8002a24 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003080:	f7ff fcd0 	bl	8002a24 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e204      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b76      	ldr	r3, [pc, #472]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0xc0>
 800309e:	e014      	b.n	80030ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7ff fcc0 	bl	8002a24 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a8:	f7ff fcbc 	bl	8002a24 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1f0      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	4b6c      	ldr	r3, [pc, #432]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0xe8>
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d063      	beq.n	800319e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d6:	4b65      	ldr	r3, [pc, #404]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e2:	4b62      	ldr	r3, [pc, #392]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d11c      	bne.n	8003128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ee:	4b5f      	ldr	r3, [pc, #380]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	4b5c      	ldr	r3, [pc, #368]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x152>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e1c4      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003112:	4b56      	ldr	r3, [pc, #344]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4952      	ldr	r1, [pc, #328]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	e03a      	b.n	800319e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003130:	4b4f      	ldr	r3, [pc, #316]	; (8003270 <HAL_RCC_OscConfig+0x2b0>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7ff fc75 	bl	8002a24 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313e:	f7ff fc71 	bl	8002a24 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1a5      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	4b46      	ldr	r3, [pc, #280]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	4b43      	ldr	r3, [pc, #268]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4940      	ldr	r1, [pc, #256]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 800316c:	4313      	orrs	r3, r2
 800316e:	600b      	str	r3, [r1, #0]
 8003170:	e015      	b.n	800319e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003172:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <HAL_RCC_OscConfig+0x2b0>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7ff fc54 	bl	8002a24 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003180:	f7ff fc50 	bl	8002a24 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e184      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	4b36      	ldr	r3, [pc, #216]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d030      	beq.n	800320c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b2:	4b30      	ldr	r3, [pc, #192]	; (8003274 <HAL_RCC_OscConfig+0x2b4>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7ff fc34 	bl	8002a24 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c0:	f7ff fc30 	bl	8002a24 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e164      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x200>
 80031de:	e015      	b.n	800320c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e0:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_RCC_OscConfig+0x2b4>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e6:	f7ff fc1d 	bl	8002a24 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ee:	f7ff fc19 	bl	8002a24 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e14d      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80a0 	beq.w	800335a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a0e      	ldr	r2, [pc, #56]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_RCC_OscConfig+0x2ac>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_OscConfig+0x2b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d121      	bne.n	800329a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003256:	4b08      	ldr	r3, [pc, #32]	; (8003278 <HAL_RCC_OscConfig+0x2b8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a07      	ldr	r2, [pc, #28]	; (8003278 <HAL_RCC_OscConfig+0x2b8>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003262:	f7ff fbdf 	bl	8002a24 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	e011      	b.n	800328e <HAL_RCC_OscConfig+0x2ce>
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	42470000 	.word	0x42470000
 8003274:	42470e80 	.word	0x42470e80
 8003278:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327c:	f7ff fbd2 	bl	8002a24 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e106      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b85      	ldr	r3, [pc, #532]	; (80034a4 <HAL_RCC_OscConfig+0x4e4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d106      	bne.n	80032b0 <HAL_RCC_OscConfig+0x2f0>
 80032a2:	4b81      	ldr	r3, [pc, #516]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4a80      	ldr	r2, [pc, #512]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70
 80032ae:	e01c      	b.n	80032ea <HAL_RCC_OscConfig+0x32a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b05      	cmp	r3, #5
 80032b6:	d10c      	bne.n	80032d2 <HAL_RCC_OscConfig+0x312>
 80032b8:	4b7b      	ldr	r3, [pc, #492]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	4a7a      	ldr	r2, [pc, #488]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80032be:	f043 0304 	orr.w	r3, r3, #4
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
 80032c4:	4b78      	ldr	r3, [pc, #480]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a77      	ldr	r2, [pc, #476]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
 80032d0:	e00b      	b.n	80032ea <HAL_RCC_OscConfig+0x32a>
 80032d2:	4b75      	ldr	r3, [pc, #468]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	4a74      	ldr	r2, [pc, #464]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6713      	str	r3, [r2, #112]	; 0x70
 80032de:	4b72      	ldr	r3, [pc, #456]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e2:	4a71      	ldr	r2, [pc, #452]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d015      	beq.n	800331e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7ff fb97 	bl	8002a24 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	e00a      	b.n	8003310 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7ff fb93 	bl	8002a24 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	; 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e0c5      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003310:	4b65      	ldr	r3, [pc, #404]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ee      	beq.n	80032fa <HAL_RCC_OscConfig+0x33a>
 800331c:	e014      	b.n	8003348 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331e:	f7ff fb81 	bl	8002a24 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003324:	e00a      	b.n	800333c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003326:	f7ff fb7d 	bl	8002a24 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f241 3288 	movw	r2, #5000	; 0x1388
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e0af      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333c:	4b5a      	ldr	r3, [pc, #360]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ee      	bne.n	8003326 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d105      	bne.n	800335a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334e:	4b56      	ldr	r3, [pc, #344]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a55      	ldr	r2, [pc, #340]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 8003354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 809b 	beq.w	800349a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003364:	4b50      	ldr	r3, [pc, #320]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b08      	cmp	r3, #8
 800336e:	d05c      	beq.n	800342a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d141      	bne.n	80033fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003378:	4b4c      	ldr	r3, [pc, #304]	; (80034ac <HAL_RCC_OscConfig+0x4ec>)
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337e:	f7ff fb51 	bl	8002a24 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003386:	f7ff fb4d 	bl	8002a24 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e081      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003398:	4b43      	ldr	r3, [pc, #268]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f0      	bne.n	8003386 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69da      	ldr	r2, [r3, #28]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	019b      	lsls	r3, r3, #6
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	3b01      	subs	r3, #1
 80033be:	041b      	lsls	r3, r3, #16
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	061b      	lsls	r3, r3, #24
 80033c8:	4937      	ldr	r1, [pc, #220]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ce:	4b37      	ldr	r3, [pc, #220]	; (80034ac <HAL_RCC_OscConfig+0x4ec>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7ff fb26 	bl	8002a24 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033dc:	f7ff fb22 	bl	8002a24 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e056      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ee:	4b2e      	ldr	r3, [pc, #184]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0x41c>
 80033fa:	e04e      	b.n	800349a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <HAL_RCC_OscConfig+0x4ec>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7ff fb0f 	bl	8002a24 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340a:	f7ff fb0b 	bl	8002a24 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e03f      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341c:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x44a>
 8003428:	e037      	b.n	800349a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e032      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003436:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <HAL_RCC_OscConfig+0x4e8>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d028      	beq.n	8003496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d121      	bne.n	8003496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d11a      	bne.n	8003496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003466:	4013      	ands	r3, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800346c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800346e:	4293      	cmp	r3, r2
 8003470:	d111      	bne.n	8003496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d107      	bne.n	8003496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40007000 	.word	0x40007000
 80034a8:	40023800 	.word	0x40023800
 80034ac:	42470060 	.word	0x42470060

080034b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0cc      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b68      	ldr	r3, [pc, #416]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d90c      	bls.n	80034ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b63      	ldr	r3, [pc, #396]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0b8      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003504:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a58      	ldr	r2, [pc, #352]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800350e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800351c:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a52      	ldr	r2, [pc, #328]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003528:	4b50      	ldr	r3, [pc, #320]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	494d      	ldr	r1, [pc, #308]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d044      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d119      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e07f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d003      	beq.n	800356e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356a:	2b03      	cmp	r3, #3
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	4b3f      	ldr	r3, [pc, #252]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	4b3b      	ldr	r3, [pc, #236]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e067      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b37      	ldr	r3, [pc, #220]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4934      	ldr	r1, [pc, #208]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a0:	f7ff fa40 	bl	8002a24 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7ff fa3c 	bl	8002a24 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e04f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d0:	4b25      	ldr	r3, [pc, #148]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d20c      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e032      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4916      	ldr	r1, [pc, #88]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	490e      	ldr	r1, [pc, #56]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003636:	f000 f821 	bl	800367c <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	490a      	ldr	r1, [pc, #40]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_RCC_ClockConfig+0x1c8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff f9a0 	bl	800299c <HAL_InitTick>

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023c00 	.word	0x40023c00
 800366c:	40023800 	.word	0x40023800
 8003670:	080075b4 	.word	0x080075b4
 8003674:	20000000 	.word	0x20000000
 8003678:	20000004 	.word	0x20000004

0800367c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800367c:	b5b0      	push	{r4, r5, r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003682:	2100      	movs	r1, #0
 8003684:	6079      	str	r1, [r7, #4]
 8003686:	2100      	movs	r1, #0
 8003688:	60f9      	str	r1, [r7, #12]
 800368a:	2100      	movs	r1, #0
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800368e:	2100      	movs	r1, #0
 8003690:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003692:	4952      	ldr	r1, [pc, #328]	; (80037dc <HAL_RCC_GetSysClockFreq+0x160>)
 8003694:	6889      	ldr	r1, [r1, #8]
 8003696:	f001 010c 	and.w	r1, r1, #12
 800369a:	2908      	cmp	r1, #8
 800369c:	d00d      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x3e>
 800369e:	2908      	cmp	r1, #8
 80036a0:	f200 8094 	bhi.w	80037cc <HAL_RCC_GetSysClockFreq+0x150>
 80036a4:	2900      	cmp	r1, #0
 80036a6:	d002      	beq.n	80036ae <HAL_RCC_GetSysClockFreq+0x32>
 80036a8:	2904      	cmp	r1, #4
 80036aa:	d003      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x38>
 80036ac:	e08e      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ae:	4b4c      	ldr	r3, [pc, #304]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80036b0:	60bb      	str	r3, [r7, #8]
       break;
 80036b2:	e08e      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80036b6:	60bb      	str	r3, [r7, #8]
      break;
 80036b8:	e08b      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ba:	4948      	ldr	r1, [pc, #288]	; (80037dc <HAL_RCC_GetSysClockFreq+0x160>)
 80036bc:	6849      	ldr	r1, [r1, #4]
 80036be:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80036c2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c4:	4945      	ldr	r1, [pc, #276]	; (80037dc <HAL_RCC_GetSysClockFreq+0x160>)
 80036c6:	6849      	ldr	r1, [r1, #4]
 80036c8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80036cc:	2900      	cmp	r1, #0
 80036ce:	d024      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d0:	4942      	ldr	r1, [pc, #264]	; (80037dc <HAL_RCC_GetSysClockFreq+0x160>)
 80036d2:	6849      	ldr	r1, [r1, #4]
 80036d4:	0989      	lsrs	r1, r1, #6
 80036d6:	4608      	mov	r0, r1
 80036d8:	f04f 0100 	mov.w	r1, #0
 80036dc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80036e0:	f04f 0500 	mov.w	r5, #0
 80036e4:	ea00 0204 	and.w	r2, r0, r4
 80036e8:	ea01 0305 	and.w	r3, r1, r5
 80036ec:	493d      	ldr	r1, [pc, #244]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80036ee:	fb01 f003 	mul.w	r0, r1, r3
 80036f2:	2100      	movs	r1, #0
 80036f4:	fb01 f102 	mul.w	r1, r1, r2
 80036f8:	1844      	adds	r4, r0, r1
 80036fa:	493a      	ldr	r1, [pc, #232]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80036fc:	fba2 0101 	umull	r0, r1, r2, r1
 8003700:	1863      	adds	r3, r4, r1
 8003702:	4619      	mov	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	461a      	mov	r2, r3
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	f7fd faa4 	bl	8000c58 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4613      	mov	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	e04a      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_RCC_GetSysClockFreq+0x160>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	461a      	mov	r2, r3
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	f240 10ff 	movw	r0, #511	; 0x1ff
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	ea02 0400 	and.w	r4, r2, r0
 8003732:	ea03 0501 	and.w	r5, r3, r1
 8003736:	4620      	mov	r0, r4
 8003738:	4629      	mov	r1, r5
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	014b      	lsls	r3, r1, #5
 8003744:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003748:	0142      	lsls	r2, r0, #5
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	1b00      	subs	r0, r0, r4
 8003750:	eb61 0105 	sbc.w	r1, r1, r5
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	018b      	lsls	r3, r1, #6
 800375e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003762:	0182      	lsls	r2, r0, #6
 8003764:	1a12      	subs	r2, r2, r0
 8003766:	eb63 0301 	sbc.w	r3, r3, r1
 800376a:	f04f 0000 	mov.w	r0, #0
 800376e:	f04f 0100 	mov.w	r1, #0
 8003772:	00d9      	lsls	r1, r3, #3
 8003774:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003778:	00d0      	lsls	r0, r2, #3
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	1912      	adds	r2, r2, r4
 8003780:	eb45 0303 	adc.w	r3, r5, r3
 8003784:	f04f 0000 	mov.w	r0, #0
 8003788:	f04f 0100 	mov.w	r1, #0
 800378c:	0299      	lsls	r1, r3, #10
 800378e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003792:	0290      	lsls	r0, r2, #10
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4610      	mov	r0, r2
 800379a:	4619      	mov	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	461a      	mov	r2, r3
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	f7fd fa58 	bl	8000c58 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4613      	mov	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <HAL_RCC_GetSysClockFreq+0x160>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	3301      	adds	r3, #1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	60bb      	str	r3, [r7, #8]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80037ce:	60bb      	str	r3, [r7, #8]
      break;
 80037d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d2:	68bb      	ldr	r3, [r7, #8]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bdb0      	pop	{r4, r5, r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	00f42400 	.word	0x00f42400
 80037e4:	017d7840 	.word	0x017d7840

080037e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07b      	b.n	80038f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d108      	bne.n	8003814 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800380a:	d009      	beq.n	8003820 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	61da      	str	r2, [r3, #28]
 8003812:	e005      	b.n	8003820 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe fef0 	bl	8002620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003856:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	ea42 0103 	orr.w	r1, r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	f003 0104 	and.w	r1, r3, #4
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0210 	and.w	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b088      	sub	sp, #32
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_SPI_Transmit+0x22>
 8003918:	2302      	movs	r3, #2
 800391a:	e126      	b.n	8003b6a <HAL_SPI_Transmit+0x270>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003924:	f7ff f87e 	bl	8002a24 <HAL_GetTick>
 8003928:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	d002      	beq.n	8003940 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800393a:	2302      	movs	r3, #2
 800393c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800393e:	e10b      	b.n	8003b58 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_SPI_Transmit+0x52>
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003950:	e102      	b.n	8003b58 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2203      	movs	r2, #3
 8003956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	88fa      	ldrh	r2, [r7, #6]
 800396a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003998:	d10f      	bne.n	80039ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d007      	beq.n	80039d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e0:	d14b      	bne.n	8003a7a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_SPI_Transmit+0xf6>
 80039ea:	8afb      	ldrh	r3, [r7, #22]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d13e      	bne.n	8003a6e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	881a      	ldrh	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	1c9a      	adds	r2, r3, #2
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a14:	e02b      	b.n	8003a6e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d112      	bne.n	8003a4a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	881a      	ldrh	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	1c9a      	adds	r2, r3, #2
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a48:	e011      	b.n	8003a6e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a4a:	f7fe ffeb 	bl	8002a24 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d803      	bhi.n	8003a62 <HAL_SPI_Transmit+0x168>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d102      	bne.n	8003a68 <HAL_SPI_Transmit+0x16e>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a6c:	e074      	b.n	8003b58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ce      	bne.n	8003a16 <HAL_SPI_Transmit+0x11c>
 8003a78:	e04c      	b.n	8003b14 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_SPI_Transmit+0x18e>
 8003a82:	8afb      	ldrh	r3, [r7, #22]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d140      	bne.n	8003b0a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	7812      	ldrb	r2, [r2, #0]
 8003a94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003aae:	e02c      	b.n	8003b0a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d113      	bne.n	8003ae6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	7812      	ldrb	r2, [r2, #0]
 8003aca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ae4:	e011      	b.n	8003b0a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ae6:	f7fe ff9d 	bl	8002a24 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d803      	bhi.n	8003afe <HAL_SPI_Transmit+0x204>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d102      	bne.n	8003b04 <HAL_SPI_Transmit+0x20a>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b08:	e026      	b.n	8003b58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1cd      	bne.n	8003ab0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	6839      	ldr	r1, [r7, #0]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f8b3 	bl	8003c84 <SPI_EndRxTxTransaction>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e000      	b.n	8003b58 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b68:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b84:	f7fe ff4e 	bl	8002a24 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	4413      	add	r3, r2
 8003b92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b94:	f7fe ff46 	bl	8002a24 <HAL_GetTick>
 8003b98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b9a:	4b39      	ldr	r3, [pc, #228]	; (8003c80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	015b      	lsls	r3, r3, #5
 8003ba0:	0d1b      	lsrs	r3, r3, #20
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	fb02 f303 	mul.w	r3, r2, r3
 8003ba8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003baa:	e054      	b.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d050      	beq.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bb4:	f7fe ff36 	bl	8002a24 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d902      	bls.n	8003bca <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d13d      	bne.n	8003c46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be2:	d111      	bne.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bec:	d004      	beq.n	8003bf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf6:	d107      	bne.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c10:	d10f      	bne.n	8003c32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e017      	b.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	bf0c      	ite	eq
 8003c66:	2301      	moveq	r3, #1
 8003c68:	2300      	movne	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d19b      	bne.n	8003bac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000000 	.word	0x20000000

08003c84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <SPI_EndRxTxTransaction+0x7c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <SPI_EndRxTxTransaction+0x80>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0d5b      	lsrs	r3, r3, #21
 8003c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cae:	d112      	bne.n	8003cd6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff ff5a 	bl	8003b74 <SPI_WaitFlagStateUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f043 0220 	orr.w	r2, r3, #32
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e00f      	b.n	8003cf6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d0f2      	beq.n	8003cd6 <SPI_EndRxTxTransaction+0x52>
 8003cf0:	e000      	b.n	8003cf4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003cf2:	bf00      	nop
  }

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000
 8003d04:	165e9f81 	.word	0x165e9f81

08003d08 <__errno>:
 8003d08:	4b01      	ldr	r3, [pc, #4]	; (8003d10 <__errno+0x8>)
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	2000000c 	.word	0x2000000c

08003d14 <__libc_init_array>:
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	4d0d      	ldr	r5, [pc, #52]	; (8003d4c <__libc_init_array+0x38>)
 8003d18:	4c0d      	ldr	r4, [pc, #52]	; (8003d50 <__libc_init_array+0x3c>)
 8003d1a:	1b64      	subs	r4, r4, r5
 8003d1c:	10a4      	asrs	r4, r4, #2
 8003d1e:	2600      	movs	r6, #0
 8003d20:	42a6      	cmp	r6, r4
 8003d22:	d109      	bne.n	8003d38 <__libc_init_array+0x24>
 8003d24:	4d0b      	ldr	r5, [pc, #44]	; (8003d54 <__libc_init_array+0x40>)
 8003d26:	4c0c      	ldr	r4, [pc, #48]	; (8003d58 <__libc_init_array+0x44>)
 8003d28:	f003 fab8 	bl	800729c <_init>
 8003d2c:	1b64      	subs	r4, r4, r5
 8003d2e:	10a4      	asrs	r4, r4, #2
 8003d30:	2600      	movs	r6, #0
 8003d32:	42a6      	cmp	r6, r4
 8003d34:	d105      	bne.n	8003d42 <__libc_init_array+0x2e>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3c:	4798      	blx	r3
 8003d3e:	3601      	adds	r6, #1
 8003d40:	e7ee      	b.n	8003d20 <__libc_init_array+0xc>
 8003d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d46:	4798      	blx	r3
 8003d48:	3601      	adds	r6, #1
 8003d4a:	e7f2      	b.n	8003d32 <__libc_init_array+0x1e>
 8003d4c:	08007a20 	.word	0x08007a20
 8003d50:	08007a20 	.word	0x08007a20
 8003d54:	08007a20 	.word	0x08007a20
 8003d58:	08007a24 	.word	0x08007a24

08003d5c <memcpy>:
 8003d5c:	440a      	add	r2, r1
 8003d5e:	4291      	cmp	r1, r2
 8003d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d64:	d100      	bne.n	8003d68 <memcpy+0xc>
 8003d66:	4770      	bx	lr
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d72:	4291      	cmp	r1, r2
 8003d74:	d1f9      	bne.n	8003d6a <memcpy+0xe>
 8003d76:	bd10      	pop	{r4, pc}

08003d78 <memset>:
 8003d78:	4402      	add	r2, r0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d100      	bne.n	8003d82 <memset+0xa>
 8003d80:	4770      	bx	lr
 8003d82:	f803 1b01 	strb.w	r1, [r3], #1
 8003d86:	e7f9      	b.n	8003d7c <memset+0x4>

08003d88 <__cvt>:
 8003d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	ec55 4b10 	vmov	r4, r5, d0
 8003d90:	2d00      	cmp	r5, #0
 8003d92:	460e      	mov	r6, r1
 8003d94:	4619      	mov	r1, r3
 8003d96:	462b      	mov	r3, r5
 8003d98:	bfbb      	ittet	lt
 8003d9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d9e:	461d      	movlt	r5, r3
 8003da0:	2300      	movge	r3, #0
 8003da2:	232d      	movlt	r3, #45	; 0x2d
 8003da4:	700b      	strb	r3, [r1, #0]
 8003da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003da8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003dac:	4691      	mov	r9, r2
 8003dae:	f023 0820 	bic.w	r8, r3, #32
 8003db2:	bfbc      	itt	lt
 8003db4:	4622      	movlt	r2, r4
 8003db6:	4614      	movlt	r4, r2
 8003db8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dbc:	d005      	beq.n	8003dca <__cvt+0x42>
 8003dbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003dc2:	d100      	bne.n	8003dc6 <__cvt+0x3e>
 8003dc4:	3601      	adds	r6, #1
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	e000      	b.n	8003dcc <__cvt+0x44>
 8003dca:	2103      	movs	r1, #3
 8003dcc:	ab03      	add	r3, sp, #12
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	ab02      	add	r3, sp, #8
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	ec45 4b10 	vmov	d0, r4, r5
 8003dd8:	4653      	mov	r3, sl
 8003dda:	4632      	mov	r2, r6
 8003ddc:	f000 fe74 	bl	8004ac8 <_dtoa_r>
 8003de0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003de4:	4607      	mov	r7, r0
 8003de6:	d102      	bne.n	8003dee <__cvt+0x66>
 8003de8:	f019 0f01 	tst.w	r9, #1
 8003dec:	d022      	beq.n	8003e34 <__cvt+0xac>
 8003dee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003df2:	eb07 0906 	add.w	r9, r7, r6
 8003df6:	d110      	bne.n	8003e1a <__cvt+0x92>
 8003df8:	783b      	ldrb	r3, [r7, #0]
 8003dfa:	2b30      	cmp	r3, #48	; 0x30
 8003dfc:	d10a      	bne.n	8003e14 <__cvt+0x8c>
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2300      	movs	r3, #0
 8003e02:	4620      	mov	r0, r4
 8003e04:	4629      	mov	r1, r5
 8003e06:	f7fc fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e0a:	b918      	cbnz	r0, 8003e14 <__cvt+0x8c>
 8003e0c:	f1c6 0601 	rsb	r6, r6, #1
 8003e10:	f8ca 6000 	str.w	r6, [sl]
 8003e14:	f8da 3000 	ldr.w	r3, [sl]
 8003e18:	4499      	add	r9, r3
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4629      	mov	r1, r5
 8003e22:	f7fc fe59 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e26:	b108      	cbz	r0, 8003e2c <__cvt+0xa4>
 8003e28:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e2c:	2230      	movs	r2, #48	; 0x30
 8003e2e:	9b03      	ldr	r3, [sp, #12]
 8003e30:	454b      	cmp	r3, r9
 8003e32:	d307      	bcc.n	8003e44 <__cvt+0xbc>
 8003e34:	9b03      	ldr	r3, [sp, #12]
 8003e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e38:	1bdb      	subs	r3, r3, r7
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	b004      	add	sp, #16
 8003e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e44:	1c59      	adds	r1, r3, #1
 8003e46:	9103      	str	r1, [sp, #12]
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e7f0      	b.n	8003e2e <__cvt+0xa6>

08003e4c <__exponent>:
 8003e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2900      	cmp	r1, #0
 8003e52:	bfb8      	it	lt
 8003e54:	4249      	neglt	r1, r1
 8003e56:	f803 2b02 	strb.w	r2, [r3], #2
 8003e5a:	bfb4      	ite	lt
 8003e5c:	222d      	movlt	r2, #45	; 0x2d
 8003e5e:	222b      	movge	r2, #43	; 0x2b
 8003e60:	2909      	cmp	r1, #9
 8003e62:	7042      	strb	r2, [r0, #1]
 8003e64:	dd2a      	ble.n	8003ebc <__exponent+0x70>
 8003e66:	f10d 0407 	add.w	r4, sp, #7
 8003e6a:	46a4      	mov	ip, r4
 8003e6c:	270a      	movs	r7, #10
 8003e6e:	46a6      	mov	lr, r4
 8003e70:	460a      	mov	r2, r1
 8003e72:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e76:	fb07 1516 	mls	r5, r7, r6, r1
 8003e7a:	3530      	adds	r5, #48	; 0x30
 8003e7c:	2a63      	cmp	r2, #99	; 0x63
 8003e7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003e82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003e86:	4631      	mov	r1, r6
 8003e88:	dcf1      	bgt.n	8003e6e <__exponent+0x22>
 8003e8a:	3130      	adds	r1, #48	; 0x30
 8003e8c:	f1ae 0502 	sub.w	r5, lr, #2
 8003e90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e94:	1c44      	adds	r4, r0, #1
 8003e96:	4629      	mov	r1, r5
 8003e98:	4561      	cmp	r1, ip
 8003e9a:	d30a      	bcc.n	8003eb2 <__exponent+0x66>
 8003e9c:	f10d 0209 	add.w	r2, sp, #9
 8003ea0:	eba2 020e 	sub.w	r2, r2, lr
 8003ea4:	4565      	cmp	r5, ip
 8003ea6:	bf88      	it	hi
 8003ea8:	2200      	movhi	r2, #0
 8003eaa:	4413      	add	r3, r2
 8003eac:	1a18      	subs	r0, r3, r0
 8003eae:	b003      	add	sp, #12
 8003eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003eba:	e7ed      	b.n	8003e98 <__exponent+0x4c>
 8003ebc:	2330      	movs	r3, #48	; 0x30
 8003ebe:	3130      	adds	r1, #48	; 0x30
 8003ec0:	7083      	strb	r3, [r0, #2]
 8003ec2:	70c1      	strb	r1, [r0, #3]
 8003ec4:	1d03      	adds	r3, r0, #4
 8003ec6:	e7f1      	b.n	8003eac <__exponent+0x60>

08003ec8 <_printf_float>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	ed2d 8b02 	vpush	{d8}
 8003ed0:	b08d      	sub	sp, #52	; 0x34
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003ed8:	4616      	mov	r6, r2
 8003eda:	461f      	mov	r7, r3
 8003edc:	4605      	mov	r5, r0
 8003ede:	f001 fbdf 	bl	80056a0 <_localeconv_r>
 8003ee2:	f8d0 a000 	ldr.w	sl, [r0]
 8003ee6:	4650      	mov	r0, sl
 8003ee8:	f7fc f97a 	bl	80001e0 <strlen>
 8003eec:	2300      	movs	r3, #0
 8003eee:	930a      	str	r3, [sp, #40]	; 0x28
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	9305      	str	r3, [sp, #20]
 8003ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003efc:	3307      	adds	r3, #7
 8003efe:	f023 0307 	bic.w	r3, r3, #7
 8003f02:	f103 0208 	add.w	r2, r3, #8
 8003f06:	f8c8 2000 	str.w	r2, [r8]
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003f16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f1a:	9307      	str	r3, [sp, #28]
 8003f1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f20:	ee08 0a10 	vmov	s16, r0
 8003f24:	4b9f      	ldr	r3, [pc, #636]	; (80041a4 <_printf_float+0x2dc>)
 8003f26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2e:	f7fc fe05 	bl	8000b3c <__aeabi_dcmpun>
 8003f32:	bb88      	cbnz	r0, 8003f98 <_printf_float+0xd0>
 8003f34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f38:	4b9a      	ldr	r3, [pc, #616]	; (80041a4 <_printf_float+0x2dc>)
 8003f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3e:	f7fc fddf 	bl	8000b00 <__aeabi_dcmple>
 8003f42:	bb48      	cbnz	r0, 8003f98 <_printf_float+0xd0>
 8003f44:	2200      	movs	r2, #0
 8003f46:	2300      	movs	r3, #0
 8003f48:	4640      	mov	r0, r8
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	f7fc fdce 	bl	8000aec <__aeabi_dcmplt>
 8003f50:	b110      	cbz	r0, 8003f58 <_printf_float+0x90>
 8003f52:	232d      	movs	r3, #45	; 0x2d
 8003f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f58:	4b93      	ldr	r3, [pc, #588]	; (80041a8 <_printf_float+0x2e0>)
 8003f5a:	4894      	ldr	r0, [pc, #592]	; (80041ac <_printf_float+0x2e4>)
 8003f5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f60:	bf94      	ite	ls
 8003f62:	4698      	movls	r8, r3
 8003f64:	4680      	movhi	r8, r0
 8003f66:	2303      	movs	r3, #3
 8003f68:	6123      	str	r3, [r4, #16]
 8003f6a:	9b05      	ldr	r3, [sp, #20]
 8003f6c:	f023 0204 	bic.w	r2, r3, #4
 8003f70:	6022      	str	r2, [r4, #0]
 8003f72:	f04f 0900 	mov.w	r9, #0
 8003f76:	9700      	str	r7, [sp, #0]
 8003f78:	4633      	mov	r3, r6
 8003f7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f000 f9d8 	bl	8004334 <_printf_common>
 8003f84:	3001      	adds	r0, #1
 8003f86:	f040 8090 	bne.w	80040aa <_printf_float+0x1e2>
 8003f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8e:	b00d      	add	sp, #52	; 0x34
 8003f90:	ecbd 8b02 	vpop	{d8}
 8003f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	f7fc fdcc 	bl	8000b3c <__aeabi_dcmpun>
 8003fa4:	b140      	cbz	r0, 8003fb8 <_printf_float+0xf0>
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bfbc      	itt	lt
 8003fac:	232d      	movlt	r3, #45	; 0x2d
 8003fae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fb2:	487f      	ldr	r0, [pc, #508]	; (80041b0 <_printf_float+0x2e8>)
 8003fb4:	4b7f      	ldr	r3, [pc, #508]	; (80041b4 <_printf_float+0x2ec>)
 8003fb6:	e7d1      	b.n	8003f5c <_printf_float+0x94>
 8003fb8:	6863      	ldr	r3, [r4, #4]
 8003fba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003fbe:	9206      	str	r2, [sp, #24]
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	d13f      	bne.n	8004044 <_printf_float+0x17c>
 8003fc4:	2306      	movs	r3, #6
 8003fc6:	6063      	str	r3, [r4, #4]
 8003fc8:	9b05      	ldr	r3, [sp, #20]
 8003fca:	6861      	ldr	r1, [r4, #4]
 8003fcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	9303      	str	r3, [sp, #12]
 8003fd4:	ab0a      	add	r3, sp, #40	; 0x28
 8003fd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003fda:	ab09      	add	r3, sp, #36	; 0x24
 8003fdc:	ec49 8b10 	vmov	d0, r8, r9
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	6022      	str	r2, [r4, #0]
 8003fe4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003fe8:	4628      	mov	r0, r5
 8003fea:	f7ff fecd 	bl	8003d88 <__cvt>
 8003fee:	9b06      	ldr	r3, [sp, #24]
 8003ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ff2:	2b47      	cmp	r3, #71	; 0x47
 8003ff4:	4680      	mov	r8, r0
 8003ff6:	d108      	bne.n	800400a <_printf_float+0x142>
 8003ff8:	1cc8      	adds	r0, r1, #3
 8003ffa:	db02      	blt.n	8004002 <_printf_float+0x13a>
 8003ffc:	6863      	ldr	r3, [r4, #4]
 8003ffe:	4299      	cmp	r1, r3
 8004000:	dd41      	ble.n	8004086 <_printf_float+0x1be>
 8004002:	f1ab 0b02 	sub.w	fp, fp, #2
 8004006:	fa5f fb8b 	uxtb.w	fp, fp
 800400a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800400e:	d820      	bhi.n	8004052 <_printf_float+0x18a>
 8004010:	3901      	subs	r1, #1
 8004012:	465a      	mov	r2, fp
 8004014:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004018:	9109      	str	r1, [sp, #36]	; 0x24
 800401a:	f7ff ff17 	bl	8003e4c <__exponent>
 800401e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004020:	1813      	adds	r3, r2, r0
 8004022:	2a01      	cmp	r2, #1
 8004024:	4681      	mov	r9, r0
 8004026:	6123      	str	r3, [r4, #16]
 8004028:	dc02      	bgt.n	8004030 <_printf_float+0x168>
 800402a:	6822      	ldr	r2, [r4, #0]
 800402c:	07d2      	lsls	r2, r2, #31
 800402e:	d501      	bpl.n	8004034 <_printf_float+0x16c>
 8004030:	3301      	adds	r3, #1
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004038:	2b00      	cmp	r3, #0
 800403a:	d09c      	beq.n	8003f76 <_printf_float+0xae>
 800403c:	232d      	movs	r3, #45	; 0x2d
 800403e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004042:	e798      	b.n	8003f76 <_printf_float+0xae>
 8004044:	9a06      	ldr	r2, [sp, #24]
 8004046:	2a47      	cmp	r2, #71	; 0x47
 8004048:	d1be      	bne.n	8003fc8 <_printf_float+0x100>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1bc      	bne.n	8003fc8 <_printf_float+0x100>
 800404e:	2301      	movs	r3, #1
 8004050:	e7b9      	b.n	8003fc6 <_printf_float+0xfe>
 8004052:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004056:	d118      	bne.n	800408a <_printf_float+0x1c2>
 8004058:	2900      	cmp	r1, #0
 800405a:	6863      	ldr	r3, [r4, #4]
 800405c:	dd0b      	ble.n	8004076 <_printf_float+0x1ae>
 800405e:	6121      	str	r1, [r4, #16]
 8004060:	b913      	cbnz	r3, 8004068 <_printf_float+0x1a0>
 8004062:	6822      	ldr	r2, [r4, #0]
 8004064:	07d0      	lsls	r0, r2, #31
 8004066:	d502      	bpl.n	800406e <_printf_float+0x1a6>
 8004068:	3301      	adds	r3, #1
 800406a:	440b      	add	r3, r1
 800406c:	6123      	str	r3, [r4, #16]
 800406e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004070:	f04f 0900 	mov.w	r9, #0
 8004074:	e7de      	b.n	8004034 <_printf_float+0x16c>
 8004076:	b913      	cbnz	r3, 800407e <_printf_float+0x1b6>
 8004078:	6822      	ldr	r2, [r4, #0]
 800407a:	07d2      	lsls	r2, r2, #31
 800407c:	d501      	bpl.n	8004082 <_printf_float+0x1ba>
 800407e:	3302      	adds	r3, #2
 8004080:	e7f4      	b.n	800406c <_printf_float+0x1a4>
 8004082:	2301      	movs	r3, #1
 8004084:	e7f2      	b.n	800406c <_printf_float+0x1a4>
 8004086:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800408a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800408c:	4299      	cmp	r1, r3
 800408e:	db05      	blt.n	800409c <_printf_float+0x1d4>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	6121      	str	r1, [r4, #16]
 8004094:	07d8      	lsls	r0, r3, #31
 8004096:	d5ea      	bpl.n	800406e <_printf_float+0x1a6>
 8004098:	1c4b      	adds	r3, r1, #1
 800409a:	e7e7      	b.n	800406c <_printf_float+0x1a4>
 800409c:	2900      	cmp	r1, #0
 800409e:	bfd4      	ite	le
 80040a0:	f1c1 0202 	rsble	r2, r1, #2
 80040a4:	2201      	movgt	r2, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	e7e0      	b.n	800406c <_printf_float+0x1a4>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	055a      	lsls	r2, r3, #21
 80040ae:	d407      	bmi.n	80040c0 <_printf_float+0x1f8>
 80040b0:	6923      	ldr	r3, [r4, #16]
 80040b2:	4642      	mov	r2, r8
 80040b4:	4631      	mov	r1, r6
 80040b6:	4628      	mov	r0, r5
 80040b8:	47b8      	blx	r7
 80040ba:	3001      	adds	r0, #1
 80040bc:	d12c      	bne.n	8004118 <_printf_float+0x250>
 80040be:	e764      	b.n	8003f8a <_printf_float+0xc2>
 80040c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040c4:	f240 80e0 	bls.w	8004288 <_printf_float+0x3c0>
 80040c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040cc:	2200      	movs	r2, #0
 80040ce:	2300      	movs	r3, #0
 80040d0:	f7fc fd02 	bl	8000ad8 <__aeabi_dcmpeq>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d034      	beq.n	8004142 <_printf_float+0x27a>
 80040d8:	4a37      	ldr	r2, [pc, #220]	; (80041b8 <_printf_float+0x2f0>)
 80040da:	2301      	movs	r3, #1
 80040dc:	4631      	mov	r1, r6
 80040de:	4628      	mov	r0, r5
 80040e0:	47b8      	blx	r7
 80040e2:	3001      	adds	r0, #1
 80040e4:	f43f af51 	beq.w	8003f8a <_printf_float+0xc2>
 80040e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040ec:	429a      	cmp	r2, r3
 80040ee:	db02      	blt.n	80040f6 <_printf_float+0x22e>
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	07d8      	lsls	r0, r3, #31
 80040f4:	d510      	bpl.n	8004118 <_printf_float+0x250>
 80040f6:	ee18 3a10 	vmov	r3, s16
 80040fa:	4652      	mov	r2, sl
 80040fc:	4631      	mov	r1, r6
 80040fe:	4628      	mov	r0, r5
 8004100:	47b8      	blx	r7
 8004102:	3001      	adds	r0, #1
 8004104:	f43f af41 	beq.w	8003f8a <_printf_float+0xc2>
 8004108:	f04f 0800 	mov.w	r8, #0
 800410c:	f104 091a 	add.w	r9, r4, #26
 8004110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004112:	3b01      	subs	r3, #1
 8004114:	4543      	cmp	r3, r8
 8004116:	dc09      	bgt.n	800412c <_printf_float+0x264>
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	079b      	lsls	r3, r3, #30
 800411c:	f100 8105 	bmi.w	800432a <_printf_float+0x462>
 8004120:	68e0      	ldr	r0, [r4, #12]
 8004122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004124:	4298      	cmp	r0, r3
 8004126:	bfb8      	it	lt
 8004128:	4618      	movlt	r0, r3
 800412a:	e730      	b.n	8003f8e <_printf_float+0xc6>
 800412c:	2301      	movs	r3, #1
 800412e:	464a      	mov	r2, r9
 8004130:	4631      	mov	r1, r6
 8004132:	4628      	mov	r0, r5
 8004134:	47b8      	blx	r7
 8004136:	3001      	adds	r0, #1
 8004138:	f43f af27 	beq.w	8003f8a <_printf_float+0xc2>
 800413c:	f108 0801 	add.w	r8, r8, #1
 8004140:	e7e6      	b.n	8004110 <_printf_float+0x248>
 8004142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	dc39      	bgt.n	80041bc <_printf_float+0x2f4>
 8004148:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <_printf_float+0x2f0>)
 800414a:	2301      	movs	r3, #1
 800414c:	4631      	mov	r1, r6
 800414e:	4628      	mov	r0, r5
 8004150:	47b8      	blx	r7
 8004152:	3001      	adds	r0, #1
 8004154:	f43f af19 	beq.w	8003f8a <_printf_float+0xc2>
 8004158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800415c:	4313      	orrs	r3, r2
 800415e:	d102      	bne.n	8004166 <_printf_float+0x29e>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	07d9      	lsls	r1, r3, #31
 8004164:	d5d8      	bpl.n	8004118 <_printf_float+0x250>
 8004166:	ee18 3a10 	vmov	r3, s16
 800416a:	4652      	mov	r2, sl
 800416c:	4631      	mov	r1, r6
 800416e:	4628      	mov	r0, r5
 8004170:	47b8      	blx	r7
 8004172:	3001      	adds	r0, #1
 8004174:	f43f af09 	beq.w	8003f8a <_printf_float+0xc2>
 8004178:	f04f 0900 	mov.w	r9, #0
 800417c:	f104 0a1a 	add.w	sl, r4, #26
 8004180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004182:	425b      	negs	r3, r3
 8004184:	454b      	cmp	r3, r9
 8004186:	dc01      	bgt.n	800418c <_printf_float+0x2c4>
 8004188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800418a:	e792      	b.n	80040b2 <_printf_float+0x1ea>
 800418c:	2301      	movs	r3, #1
 800418e:	4652      	mov	r2, sl
 8004190:	4631      	mov	r1, r6
 8004192:	4628      	mov	r0, r5
 8004194:	47b8      	blx	r7
 8004196:	3001      	adds	r0, #1
 8004198:	f43f aef7 	beq.w	8003f8a <_printf_float+0xc2>
 800419c:	f109 0901 	add.w	r9, r9, #1
 80041a0:	e7ee      	b.n	8004180 <_printf_float+0x2b8>
 80041a2:	bf00      	nop
 80041a4:	7fefffff 	.word	0x7fefffff
 80041a8:	080075c8 	.word	0x080075c8
 80041ac:	080075cc 	.word	0x080075cc
 80041b0:	080075d4 	.word	0x080075d4
 80041b4:	080075d0 	.word	0x080075d0
 80041b8:	080075d8 	.word	0x080075d8
 80041bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041c0:	429a      	cmp	r2, r3
 80041c2:	bfa8      	it	ge
 80041c4:	461a      	movge	r2, r3
 80041c6:	2a00      	cmp	r2, #0
 80041c8:	4691      	mov	r9, r2
 80041ca:	dc37      	bgt.n	800423c <_printf_float+0x374>
 80041cc:	f04f 0b00 	mov.w	fp, #0
 80041d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041d4:	f104 021a 	add.w	r2, r4, #26
 80041d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041da:	9305      	str	r3, [sp, #20]
 80041dc:	eba3 0309 	sub.w	r3, r3, r9
 80041e0:	455b      	cmp	r3, fp
 80041e2:	dc33      	bgt.n	800424c <_printf_float+0x384>
 80041e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041e8:	429a      	cmp	r2, r3
 80041ea:	db3b      	blt.n	8004264 <_printf_float+0x39c>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	07da      	lsls	r2, r3, #31
 80041f0:	d438      	bmi.n	8004264 <_printf_float+0x39c>
 80041f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041f4:	9b05      	ldr	r3, [sp, #20]
 80041f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	eba2 0901 	sub.w	r9, r2, r1
 80041fe:	4599      	cmp	r9, r3
 8004200:	bfa8      	it	ge
 8004202:	4699      	movge	r9, r3
 8004204:	f1b9 0f00 	cmp.w	r9, #0
 8004208:	dc35      	bgt.n	8004276 <_printf_float+0x3ae>
 800420a:	f04f 0800 	mov.w	r8, #0
 800420e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004212:	f104 0a1a 	add.w	sl, r4, #26
 8004216:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	eba3 0309 	sub.w	r3, r3, r9
 8004220:	4543      	cmp	r3, r8
 8004222:	f77f af79 	ble.w	8004118 <_printf_float+0x250>
 8004226:	2301      	movs	r3, #1
 8004228:	4652      	mov	r2, sl
 800422a:	4631      	mov	r1, r6
 800422c:	4628      	mov	r0, r5
 800422e:	47b8      	blx	r7
 8004230:	3001      	adds	r0, #1
 8004232:	f43f aeaa 	beq.w	8003f8a <_printf_float+0xc2>
 8004236:	f108 0801 	add.w	r8, r8, #1
 800423a:	e7ec      	b.n	8004216 <_printf_float+0x34e>
 800423c:	4613      	mov	r3, r2
 800423e:	4631      	mov	r1, r6
 8004240:	4642      	mov	r2, r8
 8004242:	4628      	mov	r0, r5
 8004244:	47b8      	blx	r7
 8004246:	3001      	adds	r0, #1
 8004248:	d1c0      	bne.n	80041cc <_printf_float+0x304>
 800424a:	e69e      	b.n	8003f8a <_printf_float+0xc2>
 800424c:	2301      	movs	r3, #1
 800424e:	4631      	mov	r1, r6
 8004250:	4628      	mov	r0, r5
 8004252:	9205      	str	r2, [sp, #20]
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	f43f ae97 	beq.w	8003f8a <_printf_float+0xc2>
 800425c:	9a05      	ldr	r2, [sp, #20]
 800425e:	f10b 0b01 	add.w	fp, fp, #1
 8004262:	e7b9      	b.n	80041d8 <_printf_float+0x310>
 8004264:	ee18 3a10 	vmov	r3, s16
 8004268:	4652      	mov	r2, sl
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	d1be      	bne.n	80041f2 <_printf_float+0x32a>
 8004274:	e689      	b.n	8003f8a <_printf_float+0xc2>
 8004276:	9a05      	ldr	r2, [sp, #20]
 8004278:	464b      	mov	r3, r9
 800427a:	4442      	add	r2, r8
 800427c:	4631      	mov	r1, r6
 800427e:	4628      	mov	r0, r5
 8004280:	47b8      	blx	r7
 8004282:	3001      	adds	r0, #1
 8004284:	d1c1      	bne.n	800420a <_printf_float+0x342>
 8004286:	e680      	b.n	8003f8a <_printf_float+0xc2>
 8004288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800428a:	2a01      	cmp	r2, #1
 800428c:	dc01      	bgt.n	8004292 <_printf_float+0x3ca>
 800428e:	07db      	lsls	r3, r3, #31
 8004290:	d538      	bpl.n	8004304 <_printf_float+0x43c>
 8004292:	2301      	movs	r3, #1
 8004294:	4642      	mov	r2, r8
 8004296:	4631      	mov	r1, r6
 8004298:	4628      	mov	r0, r5
 800429a:	47b8      	blx	r7
 800429c:	3001      	adds	r0, #1
 800429e:	f43f ae74 	beq.w	8003f8a <_printf_float+0xc2>
 80042a2:	ee18 3a10 	vmov	r3, s16
 80042a6:	4652      	mov	r2, sl
 80042a8:	4631      	mov	r1, r6
 80042aa:	4628      	mov	r0, r5
 80042ac:	47b8      	blx	r7
 80042ae:	3001      	adds	r0, #1
 80042b0:	f43f ae6b 	beq.w	8003f8a <_printf_float+0xc2>
 80042b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042b8:	2200      	movs	r2, #0
 80042ba:	2300      	movs	r3, #0
 80042bc:	f7fc fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80042c0:	b9d8      	cbnz	r0, 80042fa <_printf_float+0x432>
 80042c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042c4:	f108 0201 	add.w	r2, r8, #1
 80042c8:	3b01      	subs	r3, #1
 80042ca:	4631      	mov	r1, r6
 80042cc:	4628      	mov	r0, r5
 80042ce:	47b8      	blx	r7
 80042d0:	3001      	adds	r0, #1
 80042d2:	d10e      	bne.n	80042f2 <_printf_float+0x42a>
 80042d4:	e659      	b.n	8003f8a <_printf_float+0xc2>
 80042d6:	2301      	movs	r3, #1
 80042d8:	4652      	mov	r2, sl
 80042da:	4631      	mov	r1, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	47b8      	blx	r7
 80042e0:	3001      	adds	r0, #1
 80042e2:	f43f ae52 	beq.w	8003f8a <_printf_float+0xc2>
 80042e6:	f108 0801 	add.w	r8, r8, #1
 80042ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	4543      	cmp	r3, r8
 80042f0:	dcf1      	bgt.n	80042d6 <_printf_float+0x40e>
 80042f2:	464b      	mov	r3, r9
 80042f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042f8:	e6dc      	b.n	80040b4 <_printf_float+0x1ec>
 80042fa:	f04f 0800 	mov.w	r8, #0
 80042fe:	f104 0a1a 	add.w	sl, r4, #26
 8004302:	e7f2      	b.n	80042ea <_printf_float+0x422>
 8004304:	2301      	movs	r3, #1
 8004306:	4642      	mov	r2, r8
 8004308:	e7df      	b.n	80042ca <_printf_float+0x402>
 800430a:	2301      	movs	r3, #1
 800430c:	464a      	mov	r2, r9
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	f43f ae38 	beq.w	8003f8a <_printf_float+0xc2>
 800431a:	f108 0801 	add.w	r8, r8, #1
 800431e:	68e3      	ldr	r3, [r4, #12]
 8004320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004322:	1a5b      	subs	r3, r3, r1
 8004324:	4543      	cmp	r3, r8
 8004326:	dcf0      	bgt.n	800430a <_printf_float+0x442>
 8004328:	e6fa      	b.n	8004120 <_printf_float+0x258>
 800432a:	f04f 0800 	mov.w	r8, #0
 800432e:	f104 0919 	add.w	r9, r4, #25
 8004332:	e7f4      	b.n	800431e <_printf_float+0x456>

08004334 <_printf_common>:
 8004334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	4616      	mov	r6, r2
 800433a:	4699      	mov	r9, r3
 800433c:	688a      	ldr	r2, [r1, #8]
 800433e:	690b      	ldr	r3, [r1, #16]
 8004340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004344:	4293      	cmp	r3, r2
 8004346:	bfb8      	it	lt
 8004348:	4613      	movlt	r3, r2
 800434a:	6033      	str	r3, [r6, #0]
 800434c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004350:	4607      	mov	r7, r0
 8004352:	460c      	mov	r4, r1
 8004354:	b10a      	cbz	r2, 800435a <_printf_common+0x26>
 8004356:	3301      	adds	r3, #1
 8004358:	6033      	str	r3, [r6, #0]
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	0699      	lsls	r1, r3, #26
 800435e:	bf42      	ittt	mi
 8004360:	6833      	ldrmi	r3, [r6, #0]
 8004362:	3302      	addmi	r3, #2
 8004364:	6033      	strmi	r3, [r6, #0]
 8004366:	6825      	ldr	r5, [r4, #0]
 8004368:	f015 0506 	ands.w	r5, r5, #6
 800436c:	d106      	bne.n	800437c <_printf_common+0x48>
 800436e:	f104 0a19 	add.w	sl, r4, #25
 8004372:	68e3      	ldr	r3, [r4, #12]
 8004374:	6832      	ldr	r2, [r6, #0]
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	42ab      	cmp	r3, r5
 800437a:	dc26      	bgt.n	80043ca <_printf_common+0x96>
 800437c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004380:	1e13      	subs	r3, r2, #0
 8004382:	6822      	ldr	r2, [r4, #0]
 8004384:	bf18      	it	ne
 8004386:	2301      	movne	r3, #1
 8004388:	0692      	lsls	r2, r2, #26
 800438a:	d42b      	bmi.n	80043e4 <_printf_common+0xb0>
 800438c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004390:	4649      	mov	r1, r9
 8004392:	4638      	mov	r0, r7
 8004394:	47c0      	blx	r8
 8004396:	3001      	adds	r0, #1
 8004398:	d01e      	beq.n	80043d8 <_printf_common+0xa4>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	68e5      	ldr	r5, [r4, #12]
 800439e:	6832      	ldr	r2, [r6, #0]
 80043a0:	f003 0306 	and.w	r3, r3, #6
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	bf08      	it	eq
 80043a8:	1aad      	subeq	r5, r5, r2
 80043aa:	68a3      	ldr	r3, [r4, #8]
 80043ac:	6922      	ldr	r2, [r4, #16]
 80043ae:	bf0c      	ite	eq
 80043b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b4:	2500      	movne	r5, #0
 80043b6:	4293      	cmp	r3, r2
 80043b8:	bfc4      	itt	gt
 80043ba:	1a9b      	subgt	r3, r3, r2
 80043bc:	18ed      	addgt	r5, r5, r3
 80043be:	2600      	movs	r6, #0
 80043c0:	341a      	adds	r4, #26
 80043c2:	42b5      	cmp	r5, r6
 80043c4:	d11a      	bne.n	80043fc <_printf_common+0xc8>
 80043c6:	2000      	movs	r0, #0
 80043c8:	e008      	b.n	80043dc <_printf_common+0xa8>
 80043ca:	2301      	movs	r3, #1
 80043cc:	4652      	mov	r2, sl
 80043ce:	4649      	mov	r1, r9
 80043d0:	4638      	mov	r0, r7
 80043d2:	47c0      	blx	r8
 80043d4:	3001      	adds	r0, #1
 80043d6:	d103      	bne.n	80043e0 <_printf_common+0xac>
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e0:	3501      	adds	r5, #1
 80043e2:	e7c6      	b.n	8004372 <_printf_common+0x3e>
 80043e4:	18e1      	adds	r1, r4, r3
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	2030      	movs	r0, #48	; 0x30
 80043ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043ee:	4422      	add	r2, r4
 80043f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043f8:	3302      	adds	r3, #2
 80043fa:	e7c7      	b.n	800438c <_printf_common+0x58>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4622      	mov	r2, r4
 8004400:	4649      	mov	r1, r9
 8004402:	4638      	mov	r0, r7
 8004404:	47c0      	blx	r8
 8004406:	3001      	adds	r0, #1
 8004408:	d0e6      	beq.n	80043d8 <_printf_common+0xa4>
 800440a:	3601      	adds	r6, #1
 800440c:	e7d9      	b.n	80043c2 <_printf_common+0x8e>
	...

08004410 <_printf_i>:
 8004410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	460c      	mov	r4, r1
 8004416:	4691      	mov	r9, r2
 8004418:	7e27      	ldrb	r7, [r4, #24]
 800441a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800441c:	2f78      	cmp	r7, #120	; 0x78
 800441e:	4680      	mov	r8, r0
 8004420:	469a      	mov	sl, r3
 8004422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004426:	d807      	bhi.n	8004438 <_printf_i+0x28>
 8004428:	2f62      	cmp	r7, #98	; 0x62
 800442a:	d80a      	bhi.n	8004442 <_printf_i+0x32>
 800442c:	2f00      	cmp	r7, #0
 800442e:	f000 80d8 	beq.w	80045e2 <_printf_i+0x1d2>
 8004432:	2f58      	cmp	r7, #88	; 0x58
 8004434:	f000 80a3 	beq.w	800457e <_printf_i+0x16e>
 8004438:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800443c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004440:	e03a      	b.n	80044b8 <_printf_i+0xa8>
 8004442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004446:	2b15      	cmp	r3, #21
 8004448:	d8f6      	bhi.n	8004438 <_printf_i+0x28>
 800444a:	a001      	add	r0, pc, #4	; (adr r0, 8004450 <_printf_i+0x40>)
 800444c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004450:	080044a9 	.word	0x080044a9
 8004454:	080044bd 	.word	0x080044bd
 8004458:	08004439 	.word	0x08004439
 800445c:	08004439 	.word	0x08004439
 8004460:	08004439 	.word	0x08004439
 8004464:	08004439 	.word	0x08004439
 8004468:	080044bd 	.word	0x080044bd
 800446c:	08004439 	.word	0x08004439
 8004470:	08004439 	.word	0x08004439
 8004474:	08004439 	.word	0x08004439
 8004478:	08004439 	.word	0x08004439
 800447c:	080045c9 	.word	0x080045c9
 8004480:	080044ed 	.word	0x080044ed
 8004484:	080045ab 	.word	0x080045ab
 8004488:	08004439 	.word	0x08004439
 800448c:	08004439 	.word	0x08004439
 8004490:	080045eb 	.word	0x080045eb
 8004494:	08004439 	.word	0x08004439
 8004498:	080044ed 	.word	0x080044ed
 800449c:	08004439 	.word	0x08004439
 80044a0:	08004439 	.word	0x08004439
 80044a4:	080045b3 	.word	0x080045b3
 80044a8:	680b      	ldr	r3, [r1, #0]
 80044aa:	1d1a      	adds	r2, r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	600a      	str	r2, [r1, #0]
 80044b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0a3      	b.n	8004604 <_printf_i+0x1f4>
 80044bc:	6825      	ldr	r5, [r4, #0]
 80044be:	6808      	ldr	r0, [r1, #0]
 80044c0:	062e      	lsls	r6, r5, #24
 80044c2:	f100 0304 	add.w	r3, r0, #4
 80044c6:	d50a      	bpl.n	80044de <_printf_i+0xce>
 80044c8:	6805      	ldr	r5, [r0, #0]
 80044ca:	600b      	str	r3, [r1, #0]
 80044cc:	2d00      	cmp	r5, #0
 80044ce:	da03      	bge.n	80044d8 <_printf_i+0xc8>
 80044d0:	232d      	movs	r3, #45	; 0x2d
 80044d2:	426d      	negs	r5, r5
 80044d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044d8:	485e      	ldr	r0, [pc, #376]	; (8004654 <_printf_i+0x244>)
 80044da:	230a      	movs	r3, #10
 80044dc:	e019      	b.n	8004512 <_printf_i+0x102>
 80044de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80044e2:	6805      	ldr	r5, [r0, #0]
 80044e4:	600b      	str	r3, [r1, #0]
 80044e6:	bf18      	it	ne
 80044e8:	b22d      	sxthne	r5, r5
 80044ea:	e7ef      	b.n	80044cc <_printf_i+0xbc>
 80044ec:	680b      	ldr	r3, [r1, #0]
 80044ee:	6825      	ldr	r5, [r4, #0]
 80044f0:	1d18      	adds	r0, r3, #4
 80044f2:	6008      	str	r0, [r1, #0]
 80044f4:	0628      	lsls	r0, r5, #24
 80044f6:	d501      	bpl.n	80044fc <_printf_i+0xec>
 80044f8:	681d      	ldr	r5, [r3, #0]
 80044fa:	e002      	b.n	8004502 <_printf_i+0xf2>
 80044fc:	0669      	lsls	r1, r5, #25
 80044fe:	d5fb      	bpl.n	80044f8 <_printf_i+0xe8>
 8004500:	881d      	ldrh	r5, [r3, #0]
 8004502:	4854      	ldr	r0, [pc, #336]	; (8004654 <_printf_i+0x244>)
 8004504:	2f6f      	cmp	r7, #111	; 0x6f
 8004506:	bf0c      	ite	eq
 8004508:	2308      	moveq	r3, #8
 800450a:	230a      	movne	r3, #10
 800450c:	2100      	movs	r1, #0
 800450e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004512:	6866      	ldr	r6, [r4, #4]
 8004514:	60a6      	str	r6, [r4, #8]
 8004516:	2e00      	cmp	r6, #0
 8004518:	bfa2      	ittt	ge
 800451a:	6821      	ldrge	r1, [r4, #0]
 800451c:	f021 0104 	bicge.w	r1, r1, #4
 8004520:	6021      	strge	r1, [r4, #0]
 8004522:	b90d      	cbnz	r5, 8004528 <_printf_i+0x118>
 8004524:	2e00      	cmp	r6, #0
 8004526:	d04d      	beq.n	80045c4 <_printf_i+0x1b4>
 8004528:	4616      	mov	r6, r2
 800452a:	fbb5 f1f3 	udiv	r1, r5, r3
 800452e:	fb03 5711 	mls	r7, r3, r1, r5
 8004532:	5dc7      	ldrb	r7, [r0, r7]
 8004534:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004538:	462f      	mov	r7, r5
 800453a:	42bb      	cmp	r3, r7
 800453c:	460d      	mov	r5, r1
 800453e:	d9f4      	bls.n	800452a <_printf_i+0x11a>
 8004540:	2b08      	cmp	r3, #8
 8004542:	d10b      	bne.n	800455c <_printf_i+0x14c>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	07df      	lsls	r7, r3, #31
 8004548:	d508      	bpl.n	800455c <_printf_i+0x14c>
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	6861      	ldr	r1, [r4, #4]
 800454e:	4299      	cmp	r1, r3
 8004550:	bfde      	ittt	le
 8004552:	2330      	movle	r3, #48	; 0x30
 8004554:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004558:	f106 36ff 	addle.w	r6, r6, #4294967295
 800455c:	1b92      	subs	r2, r2, r6
 800455e:	6122      	str	r2, [r4, #16]
 8004560:	f8cd a000 	str.w	sl, [sp]
 8004564:	464b      	mov	r3, r9
 8004566:	aa03      	add	r2, sp, #12
 8004568:	4621      	mov	r1, r4
 800456a:	4640      	mov	r0, r8
 800456c:	f7ff fee2 	bl	8004334 <_printf_common>
 8004570:	3001      	adds	r0, #1
 8004572:	d14c      	bne.n	800460e <_printf_i+0x1fe>
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	b004      	add	sp, #16
 800457a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457e:	4835      	ldr	r0, [pc, #212]	; (8004654 <_printf_i+0x244>)
 8004580:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	680e      	ldr	r6, [r1, #0]
 8004588:	061f      	lsls	r7, r3, #24
 800458a:	f856 5b04 	ldr.w	r5, [r6], #4
 800458e:	600e      	str	r6, [r1, #0]
 8004590:	d514      	bpl.n	80045bc <_printf_i+0x1ac>
 8004592:	07d9      	lsls	r1, r3, #31
 8004594:	bf44      	itt	mi
 8004596:	f043 0320 	orrmi.w	r3, r3, #32
 800459a:	6023      	strmi	r3, [r4, #0]
 800459c:	b91d      	cbnz	r5, 80045a6 <_printf_i+0x196>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	f023 0320 	bic.w	r3, r3, #32
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	2310      	movs	r3, #16
 80045a8:	e7b0      	b.n	800450c <_printf_i+0xfc>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	f043 0320 	orr.w	r3, r3, #32
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	2378      	movs	r3, #120	; 0x78
 80045b4:	4828      	ldr	r0, [pc, #160]	; (8004658 <_printf_i+0x248>)
 80045b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ba:	e7e3      	b.n	8004584 <_printf_i+0x174>
 80045bc:	065e      	lsls	r6, r3, #25
 80045be:	bf48      	it	mi
 80045c0:	b2ad      	uxthmi	r5, r5
 80045c2:	e7e6      	b.n	8004592 <_printf_i+0x182>
 80045c4:	4616      	mov	r6, r2
 80045c6:	e7bb      	b.n	8004540 <_printf_i+0x130>
 80045c8:	680b      	ldr	r3, [r1, #0]
 80045ca:	6826      	ldr	r6, [r4, #0]
 80045cc:	6960      	ldr	r0, [r4, #20]
 80045ce:	1d1d      	adds	r5, r3, #4
 80045d0:	600d      	str	r5, [r1, #0]
 80045d2:	0635      	lsls	r5, r6, #24
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	d501      	bpl.n	80045dc <_printf_i+0x1cc>
 80045d8:	6018      	str	r0, [r3, #0]
 80045da:	e002      	b.n	80045e2 <_printf_i+0x1d2>
 80045dc:	0671      	lsls	r1, r6, #25
 80045de:	d5fb      	bpl.n	80045d8 <_printf_i+0x1c8>
 80045e0:	8018      	strh	r0, [r3, #0]
 80045e2:	2300      	movs	r3, #0
 80045e4:	6123      	str	r3, [r4, #16]
 80045e6:	4616      	mov	r6, r2
 80045e8:	e7ba      	b.n	8004560 <_printf_i+0x150>
 80045ea:	680b      	ldr	r3, [r1, #0]
 80045ec:	1d1a      	adds	r2, r3, #4
 80045ee:	600a      	str	r2, [r1, #0]
 80045f0:	681e      	ldr	r6, [r3, #0]
 80045f2:	6862      	ldr	r2, [r4, #4]
 80045f4:	2100      	movs	r1, #0
 80045f6:	4630      	mov	r0, r6
 80045f8:	f7fb fdfa 	bl	80001f0 <memchr>
 80045fc:	b108      	cbz	r0, 8004602 <_printf_i+0x1f2>
 80045fe:	1b80      	subs	r0, r0, r6
 8004600:	6060      	str	r0, [r4, #4]
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	6123      	str	r3, [r4, #16]
 8004606:	2300      	movs	r3, #0
 8004608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800460c:	e7a8      	b.n	8004560 <_printf_i+0x150>
 800460e:	6923      	ldr	r3, [r4, #16]
 8004610:	4632      	mov	r2, r6
 8004612:	4649      	mov	r1, r9
 8004614:	4640      	mov	r0, r8
 8004616:	47d0      	blx	sl
 8004618:	3001      	adds	r0, #1
 800461a:	d0ab      	beq.n	8004574 <_printf_i+0x164>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	079b      	lsls	r3, r3, #30
 8004620:	d413      	bmi.n	800464a <_printf_i+0x23a>
 8004622:	68e0      	ldr	r0, [r4, #12]
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	4298      	cmp	r0, r3
 8004628:	bfb8      	it	lt
 800462a:	4618      	movlt	r0, r3
 800462c:	e7a4      	b.n	8004578 <_printf_i+0x168>
 800462e:	2301      	movs	r3, #1
 8004630:	4632      	mov	r2, r6
 8004632:	4649      	mov	r1, r9
 8004634:	4640      	mov	r0, r8
 8004636:	47d0      	blx	sl
 8004638:	3001      	adds	r0, #1
 800463a:	d09b      	beq.n	8004574 <_printf_i+0x164>
 800463c:	3501      	adds	r5, #1
 800463e:	68e3      	ldr	r3, [r4, #12]
 8004640:	9903      	ldr	r1, [sp, #12]
 8004642:	1a5b      	subs	r3, r3, r1
 8004644:	42ab      	cmp	r3, r5
 8004646:	dcf2      	bgt.n	800462e <_printf_i+0x21e>
 8004648:	e7eb      	b.n	8004622 <_printf_i+0x212>
 800464a:	2500      	movs	r5, #0
 800464c:	f104 0619 	add.w	r6, r4, #25
 8004650:	e7f5      	b.n	800463e <_printf_i+0x22e>
 8004652:	bf00      	nop
 8004654:	080075da 	.word	0x080075da
 8004658:	080075eb 	.word	0x080075eb

0800465c <swapfunc>:
 800465c:	2b02      	cmp	r3, #2
 800465e:	b510      	push	{r4, lr}
 8004660:	d00a      	beq.n	8004678 <swapfunc+0x1c>
 8004662:	0892      	lsrs	r2, r2, #2
 8004664:	3a01      	subs	r2, #1
 8004666:	6803      	ldr	r3, [r0, #0]
 8004668:	680c      	ldr	r4, [r1, #0]
 800466a:	f840 4b04 	str.w	r4, [r0], #4
 800466e:	2a00      	cmp	r2, #0
 8004670:	f841 3b04 	str.w	r3, [r1], #4
 8004674:	dcf6      	bgt.n	8004664 <swapfunc+0x8>
 8004676:	bd10      	pop	{r4, pc}
 8004678:	4402      	add	r2, r0
 800467a:	780c      	ldrb	r4, [r1, #0]
 800467c:	7803      	ldrb	r3, [r0, #0]
 800467e:	f800 4b01 	strb.w	r4, [r0], #1
 8004682:	f801 3b01 	strb.w	r3, [r1], #1
 8004686:	1a13      	subs	r3, r2, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	dcf6      	bgt.n	800467a <swapfunc+0x1e>
 800468c:	e7f3      	b.n	8004676 <swapfunc+0x1a>

0800468e <med3.isra.0>:
 800468e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004690:	460f      	mov	r7, r1
 8004692:	4614      	mov	r4, r2
 8004694:	4606      	mov	r6, r0
 8004696:	461d      	mov	r5, r3
 8004698:	4798      	blx	r3
 800469a:	2800      	cmp	r0, #0
 800469c:	4621      	mov	r1, r4
 800469e:	4638      	mov	r0, r7
 80046a0:	da0c      	bge.n	80046bc <med3.isra.0+0x2e>
 80046a2:	47a8      	blx	r5
 80046a4:	2800      	cmp	r0, #0
 80046a6:	da02      	bge.n	80046ae <med3.isra.0+0x20>
 80046a8:	463c      	mov	r4, r7
 80046aa:	4620      	mov	r0, r4
 80046ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ae:	4621      	mov	r1, r4
 80046b0:	4630      	mov	r0, r6
 80046b2:	47a8      	blx	r5
 80046b4:	2800      	cmp	r0, #0
 80046b6:	dbf8      	blt.n	80046aa <med3.isra.0+0x1c>
 80046b8:	4634      	mov	r4, r6
 80046ba:	e7f6      	b.n	80046aa <med3.isra.0+0x1c>
 80046bc:	47a8      	blx	r5
 80046be:	2800      	cmp	r0, #0
 80046c0:	dcf2      	bgt.n	80046a8 <med3.isra.0+0x1a>
 80046c2:	4621      	mov	r1, r4
 80046c4:	4630      	mov	r0, r6
 80046c6:	47a8      	blx	r5
 80046c8:	2800      	cmp	r0, #0
 80046ca:	daee      	bge.n	80046aa <med3.isra.0+0x1c>
 80046cc:	e7f4      	b.n	80046b8 <med3.isra.0+0x2a>

080046ce <qsort>:
 80046ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d2:	469a      	mov	sl, r3
 80046d4:	ea40 0302 	orr.w	r3, r0, r2
 80046d8:	079b      	lsls	r3, r3, #30
 80046da:	b097      	sub	sp, #92	; 0x5c
 80046dc:	4606      	mov	r6, r0
 80046de:	4614      	mov	r4, r2
 80046e0:	d11a      	bne.n	8004718 <qsort+0x4a>
 80046e2:	f1b2 0804 	subs.w	r8, r2, #4
 80046e6:	bf18      	it	ne
 80046e8:	f04f 0801 	movne.w	r8, #1
 80046ec:	2300      	movs	r3, #0
 80046ee:	9302      	str	r3, [sp, #8]
 80046f0:	1933      	adds	r3, r6, r4
 80046f2:	fb04 f701 	mul.w	r7, r4, r1
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	2906      	cmp	r1, #6
 80046fa:	eb06 0307 	add.w	r3, r6, r7
 80046fe:	9303      	str	r3, [sp, #12]
 8004700:	d82a      	bhi.n	8004758 <qsort+0x8a>
 8004702:	9b01      	ldr	r3, [sp, #4]
 8004704:	9a03      	ldr	r2, [sp, #12]
 8004706:	4293      	cmp	r3, r2
 8004708:	d310      	bcc.n	800472c <qsort+0x5e>
 800470a:	9b02      	ldr	r3, [sp, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f040 811f 	bne.w	8004950 <qsort+0x282>
 8004712:	b017      	add	sp, #92	; 0x5c
 8004714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004718:	f04f 0802 	mov.w	r8, #2
 800471c:	e7e6      	b.n	80046ec <qsort+0x1e>
 800471e:	4643      	mov	r3, r8
 8004720:	4622      	mov	r2, r4
 8004722:	4639      	mov	r1, r7
 8004724:	4628      	mov	r0, r5
 8004726:	f7ff ff99 	bl	800465c <swapfunc>
 800472a:	e00e      	b.n	800474a <qsort+0x7c>
 800472c:	9d01      	ldr	r5, [sp, #4]
 800472e:	e00d      	b.n	800474c <qsort+0x7e>
 8004730:	1b2f      	subs	r7, r5, r4
 8004732:	4629      	mov	r1, r5
 8004734:	4638      	mov	r0, r7
 8004736:	47d0      	blx	sl
 8004738:	2800      	cmp	r0, #0
 800473a:	dd09      	ble.n	8004750 <qsort+0x82>
 800473c:	f1b8 0f00 	cmp.w	r8, #0
 8004740:	d1ed      	bne.n	800471e <qsort+0x50>
 8004742:	682b      	ldr	r3, [r5, #0]
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	602a      	str	r2, [r5, #0]
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	463d      	mov	r5, r7
 800474c:	42ae      	cmp	r6, r5
 800474e:	d3ef      	bcc.n	8004730 <qsort+0x62>
 8004750:	9b01      	ldr	r3, [sp, #4]
 8004752:	4423      	add	r3, r4
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	e7d4      	b.n	8004702 <qsort+0x34>
 8004758:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800475c:	1b3f      	subs	r7, r7, r4
 800475e:	2907      	cmp	r1, #7
 8004760:	fb04 6909 	mla	r9, r4, r9, r6
 8004764:	4437      	add	r7, r6
 8004766:	d022      	beq.n	80047ae <qsort+0xe0>
 8004768:	2928      	cmp	r1, #40	; 0x28
 800476a:	d945      	bls.n	80047f8 <qsort+0x12a>
 800476c:	08c9      	lsrs	r1, r1, #3
 800476e:	fb04 f501 	mul.w	r5, r4, r1
 8004772:	4653      	mov	r3, sl
 8004774:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8004778:	1971      	adds	r1, r6, r5
 800477a:	4630      	mov	r0, r6
 800477c:	f7ff ff87 	bl	800468e <med3.isra.0>
 8004780:	4649      	mov	r1, r9
 8004782:	eb09 0205 	add.w	r2, r9, r5
 8004786:	4653      	mov	r3, sl
 8004788:	4683      	mov	fp, r0
 800478a:	1b48      	subs	r0, r1, r5
 800478c:	f7ff ff7f 	bl	800468e <med3.isra.0>
 8004790:	463a      	mov	r2, r7
 8004792:	4681      	mov	r9, r0
 8004794:	4653      	mov	r3, sl
 8004796:	1b79      	subs	r1, r7, r5
 8004798:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800479c:	f7ff ff77 	bl	800468e <med3.isra.0>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4649      	mov	r1, r9
 80047a4:	4653      	mov	r3, sl
 80047a6:	4658      	mov	r0, fp
 80047a8:	f7ff ff71 	bl	800468e <med3.isra.0>
 80047ac:	4681      	mov	r9, r0
 80047ae:	f1b8 0f00 	cmp.w	r8, #0
 80047b2:	d124      	bne.n	80047fe <qsort+0x130>
 80047b4:	6833      	ldr	r3, [r6, #0]
 80047b6:	f8d9 2000 	ldr.w	r2, [r9]
 80047ba:	6032      	str	r2, [r6, #0]
 80047bc:	f8c9 3000 	str.w	r3, [r9]
 80047c0:	eb06 0b04 	add.w	fp, r6, r4
 80047c4:	46b9      	mov	r9, r7
 80047c6:	465d      	mov	r5, fp
 80047c8:	2300      	movs	r3, #0
 80047ca:	45bb      	cmp	fp, r7
 80047cc:	d835      	bhi.n	800483a <qsort+0x16c>
 80047ce:	4631      	mov	r1, r6
 80047d0:	4658      	mov	r0, fp
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	47d0      	blx	sl
 80047d6:	2800      	cmp	r0, #0
 80047d8:	9b04      	ldr	r3, [sp, #16]
 80047da:	dc3e      	bgt.n	800485a <qsort+0x18c>
 80047dc:	d10a      	bne.n	80047f4 <qsort+0x126>
 80047de:	f1b8 0f00 	cmp.w	r8, #0
 80047e2:	d113      	bne.n	800480c <qsort+0x13e>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	f8db 2000 	ldr.w	r2, [fp]
 80047ea:	602a      	str	r2, [r5, #0]
 80047ec:	f8cb 3000 	str.w	r3, [fp]
 80047f0:	4425      	add	r5, r4
 80047f2:	2301      	movs	r3, #1
 80047f4:	44a3      	add	fp, r4
 80047f6:	e7e8      	b.n	80047ca <qsort+0xfc>
 80047f8:	463a      	mov	r2, r7
 80047fa:	46b3      	mov	fp, r6
 80047fc:	e7d1      	b.n	80047a2 <qsort+0xd4>
 80047fe:	4643      	mov	r3, r8
 8004800:	4622      	mov	r2, r4
 8004802:	4649      	mov	r1, r9
 8004804:	4630      	mov	r0, r6
 8004806:	f7ff ff29 	bl	800465c <swapfunc>
 800480a:	e7d9      	b.n	80047c0 <qsort+0xf2>
 800480c:	4643      	mov	r3, r8
 800480e:	4622      	mov	r2, r4
 8004810:	4659      	mov	r1, fp
 8004812:	4628      	mov	r0, r5
 8004814:	f7ff ff22 	bl	800465c <swapfunc>
 8004818:	e7ea      	b.n	80047f0 <qsort+0x122>
 800481a:	d10b      	bne.n	8004834 <qsort+0x166>
 800481c:	f1b8 0f00 	cmp.w	r8, #0
 8004820:	d114      	bne.n	800484c <qsort+0x17e>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	f8d9 2000 	ldr.w	r2, [r9]
 8004828:	603a      	str	r2, [r7, #0]
 800482a:	f8c9 3000 	str.w	r3, [r9]
 800482e:	eba9 0904 	sub.w	r9, r9, r4
 8004832:	2301      	movs	r3, #1
 8004834:	9f04      	ldr	r7, [sp, #16]
 8004836:	45bb      	cmp	fp, r7
 8004838:	d90f      	bls.n	800485a <qsort+0x18c>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d143      	bne.n	80048c6 <qsort+0x1f8>
 800483e:	9b01      	ldr	r3, [sp, #4]
 8004840:	9a03      	ldr	r2, [sp, #12]
 8004842:	4293      	cmp	r3, r2
 8004844:	f4bf af61 	bcs.w	800470a <qsort+0x3c>
 8004848:	9d01      	ldr	r5, [sp, #4]
 800484a:	e036      	b.n	80048ba <qsort+0x1ec>
 800484c:	4643      	mov	r3, r8
 800484e:	4622      	mov	r2, r4
 8004850:	4649      	mov	r1, r9
 8004852:	4638      	mov	r0, r7
 8004854:	f7ff ff02 	bl	800465c <swapfunc>
 8004858:	e7e9      	b.n	800482e <qsort+0x160>
 800485a:	4631      	mov	r1, r6
 800485c:	4638      	mov	r0, r7
 800485e:	9305      	str	r3, [sp, #20]
 8004860:	47d0      	blx	sl
 8004862:	1b3b      	subs	r3, r7, r4
 8004864:	2800      	cmp	r0, #0
 8004866:	9304      	str	r3, [sp, #16]
 8004868:	9b05      	ldr	r3, [sp, #20]
 800486a:	dad6      	bge.n	800481a <qsort+0x14c>
 800486c:	f1b8 0f00 	cmp.w	r8, #0
 8004870:	d006      	beq.n	8004880 <qsort+0x1b2>
 8004872:	4643      	mov	r3, r8
 8004874:	4622      	mov	r2, r4
 8004876:	4639      	mov	r1, r7
 8004878:	4658      	mov	r0, fp
 800487a:	f7ff feef 	bl	800465c <swapfunc>
 800487e:	e005      	b.n	800488c <qsort+0x1be>
 8004880:	f8db 3000 	ldr.w	r3, [fp]
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	f8cb 2000 	str.w	r2, [fp]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	9f04      	ldr	r7, [sp, #16]
 800488e:	e7b0      	b.n	80047f2 <qsort+0x124>
 8004890:	4643      	mov	r3, r8
 8004892:	4622      	mov	r2, r4
 8004894:	4639      	mov	r1, r7
 8004896:	4628      	mov	r0, r5
 8004898:	f7ff fee0 	bl	800465c <swapfunc>
 800489c:	e00c      	b.n	80048b8 <qsort+0x1ea>
 800489e:	1b2f      	subs	r7, r5, r4
 80048a0:	4629      	mov	r1, r5
 80048a2:	4638      	mov	r0, r7
 80048a4:	47d0      	blx	sl
 80048a6:	2800      	cmp	r0, #0
 80048a8:	dd09      	ble.n	80048be <qsort+0x1f0>
 80048aa:	f1b8 0f00 	cmp.w	r8, #0
 80048ae:	d1ef      	bne.n	8004890 <qsort+0x1c2>
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	602a      	str	r2, [r5, #0]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	463d      	mov	r5, r7
 80048ba:	42ae      	cmp	r6, r5
 80048bc:	d3ef      	bcc.n	800489e <qsort+0x1d0>
 80048be:	9b01      	ldr	r3, [sp, #4]
 80048c0:	4423      	add	r3, r4
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	e7bb      	b.n	800483e <qsort+0x170>
 80048c6:	ebab 0305 	sub.w	r3, fp, r5
 80048ca:	1baa      	subs	r2, r5, r6
 80048cc:	429a      	cmp	r2, r3
 80048ce:	bfa8      	it	ge
 80048d0:	461a      	movge	r2, r3
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	b12a      	cbz	r2, 80048e2 <qsort+0x214>
 80048d6:	4643      	mov	r3, r8
 80048d8:	ebab 0102 	sub.w	r1, fp, r2
 80048dc:	4630      	mov	r0, r6
 80048de:	f7ff febd 	bl	800465c <swapfunc>
 80048e2:	9b03      	ldr	r3, [sp, #12]
 80048e4:	eba3 0209 	sub.w	r2, r3, r9
 80048e8:	eba9 0707 	sub.w	r7, r9, r7
 80048ec:	1b12      	subs	r2, r2, r4
 80048ee:	42ba      	cmp	r2, r7
 80048f0:	bf28      	it	cs
 80048f2:	463a      	movcs	r2, r7
 80048f4:	b12a      	cbz	r2, 8004902 <qsort+0x234>
 80048f6:	9903      	ldr	r1, [sp, #12]
 80048f8:	4643      	mov	r3, r8
 80048fa:	1a89      	subs	r1, r1, r2
 80048fc:	4658      	mov	r0, fp
 80048fe:	f7ff fead 	bl	800465c <swapfunc>
 8004902:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004906:	9b03      	ldr	r3, [sp, #12]
 8004908:	454f      	cmp	r7, r9
 800490a:	eba3 0007 	sub.w	r0, r3, r7
 800490e:	d904      	bls.n	800491a <qsort+0x24c>
 8004910:	4633      	mov	r3, r6
 8004912:	46b9      	mov	r9, r7
 8004914:	9f01      	ldr	r7, [sp, #4]
 8004916:	4606      	mov	r6, r0
 8004918:	4618      	mov	r0, r3
 800491a:	42a7      	cmp	r7, r4
 800491c:	d921      	bls.n	8004962 <qsort+0x294>
 800491e:	fbb7 f1f4 	udiv	r1, r7, r4
 8004922:	9b02      	ldr	r3, [sp, #8]
 8004924:	2b07      	cmp	r3, #7
 8004926:	d80d      	bhi.n	8004944 <qsort+0x276>
 8004928:	fbb9 f7f4 	udiv	r7, r9, r4
 800492c:	aa16      	add	r2, sp, #88	; 0x58
 800492e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004932:	f843 6c40 	str.w	r6, [r3, #-64]
 8004936:	f843 7c3c 	str.w	r7, [r3, #-60]
 800493a:	9b02      	ldr	r3, [sp, #8]
 800493c:	3301      	adds	r3, #1
 800493e:	9302      	str	r3, [sp, #8]
 8004940:	4606      	mov	r6, r0
 8004942:	e6d5      	b.n	80046f0 <qsort+0x22>
 8004944:	4653      	mov	r3, sl
 8004946:	4622      	mov	r2, r4
 8004948:	f7ff fec1 	bl	80046ce <qsort>
 800494c:	45a1      	cmp	r9, r4
 800494e:	d80b      	bhi.n	8004968 <qsort+0x29a>
 8004950:	9b02      	ldr	r3, [sp, #8]
 8004952:	aa16      	add	r2, sp, #88	; 0x58
 8004954:	3b01      	subs	r3, #1
 8004956:	9302      	str	r3, [sp, #8]
 8004958:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800495c:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8004960:	e7ee      	b.n	8004940 <qsort+0x272>
 8004962:	45a1      	cmp	r9, r4
 8004964:	f67f aed1 	bls.w	800470a <qsort+0x3c>
 8004968:	fbb9 f1f4 	udiv	r1, r9, r4
 800496c:	4630      	mov	r0, r6
 800496e:	e7e7      	b.n	8004940 <qsort+0x272>

08004970 <siprintf>:
 8004970:	b40e      	push	{r1, r2, r3}
 8004972:	b500      	push	{lr}
 8004974:	b09c      	sub	sp, #112	; 0x70
 8004976:	ab1d      	add	r3, sp, #116	; 0x74
 8004978:	9002      	str	r0, [sp, #8]
 800497a:	9006      	str	r0, [sp, #24]
 800497c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004980:	4809      	ldr	r0, [pc, #36]	; (80049a8 <siprintf+0x38>)
 8004982:	9107      	str	r1, [sp, #28]
 8004984:	9104      	str	r1, [sp, #16]
 8004986:	4909      	ldr	r1, [pc, #36]	; (80049ac <siprintf+0x3c>)
 8004988:	f853 2b04 	ldr.w	r2, [r3], #4
 800498c:	9105      	str	r1, [sp, #20]
 800498e:	6800      	ldr	r0, [r0, #0]
 8004990:	9301      	str	r3, [sp, #4]
 8004992:	a902      	add	r1, sp, #8
 8004994:	f001 fb24 	bl	8005fe0 <_svfiprintf_r>
 8004998:	9b02      	ldr	r3, [sp, #8]
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	b01c      	add	sp, #112	; 0x70
 80049a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049a4:	b003      	add	sp, #12
 80049a6:	4770      	bx	lr
 80049a8:	2000000c 	.word	0x2000000c
 80049ac:	ffff0208 	.word	0xffff0208

080049b0 <quorem>:
 80049b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b4:	6903      	ldr	r3, [r0, #16]
 80049b6:	690c      	ldr	r4, [r1, #16]
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	4607      	mov	r7, r0
 80049bc:	f2c0 8081 	blt.w	8004ac2 <quorem+0x112>
 80049c0:	3c01      	subs	r4, #1
 80049c2:	f101 0814 	add.w	r8, r1, #20
 80049c6:	f100 0514 	add.w	r5, r0, #20
 80049ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049d8:	3301      	adds	r3, #1
 80049da:	429a      	cmp	r2, r3
 80049dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80049e8:	d331      	bcc.n	8004a4e <quorem+0x9e>
 80049ea:	f04f 0e00 	mov.w	lr, #0
 80049ee:	4640      	mov	r0, r8
 80049f0:	46ac      	mov	ip, r5
 80049f2:	46f2      	mov	sl, lr
 80049f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80049f8:	b293      	uxth	r3, r2
 80049fa:	fb06 e303 	mla	r3, r6, r3, lr
 80049fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	ebaa 0303 	sub.w	r3, sl, r3
 8004a08:	0c12      	lsrs	r2, r2, #16
 8004a0a:	f8dc a000 	ldr.w	sl, [ip]
 8004a0e:	fb06 e202 	mla	r2, r6, r2, lr
 8004a12:	fa13 f38a 	uxtah	r3, r3, sl
 8004a16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a1a:	fa1f fa82 	uxth.w	sl, r2
 8004a1e:	f8dc 2000 	ldr.w	r2, [ip]
 8004a22:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004a26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a30:	4581      	cmp	r9, r0
 8004a32:	f84c 3b04 	str.w	r3, [ip], #4
 8004a36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a3a:	d2db      	bcs.n	80049f4 <quorem+0x44>
 8004a3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a40:	b92b      	cbnz	r3, 8004a4e <quorem+0x9e>
 8004a42:	9b01      	ldr	r3, [sp, #4]
 8004a44:	3b04      	subs	r3, #4
 8004a46:	429d      	cmp	r5, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	d32e      	bcc.n	8004aaa <quorem+0xfa>
 8004a4c:	613c      	str	r4, [r7, #16]
 8004a4e:	4638      	mov	r0, r7
 8004a50:	f001 f8b0 	bl	8005bb4 <__mcmp>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	db24      	blt.n	8004aa2 <quorem+0xf2>
 8004a58:	3601      	adds	r6, #1
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	f04f 0c00 	mov.w	ip, #0
 8004a60:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a64:	f8d0 e000 	ldr.w	lr, [r0]
 8004a68:	b293      	uxth	r3, r2
 8004a6a:	ebac 0303 	sub.w	r3, ip, r3
 8004a6e:	0c12      	lsrs	r2, r2, #16
 8004a70:	fa13 f38e 	uxtah	r3, r3, lr
 8004a74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a82:	45c1      	cmp	r9, r8
 8004a84:	f840 3b04 	str.w	r3, [r0], #4
 8004a88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a8c:	d2e8      	bcs.n	8004a60 <quorem+0xb0>
 8004a8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a96:	b922      	cbnz	r2, 8004aa2 <quorem+0xf2>
 8004a98:	3b04      	subs	r3, #4
 8004a9a:	429d      	cmp	r5, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	d30a      	bcc.n	8004ab6 <quorem+0x106>
 8004aa0:	613c      	str	r4, [r7, #16]
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	b003      	add	sp, #12
 8004aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	3b04      	subs	r3, #4
 8004aae:	2a00      	cmp	r2, #0
 8004ab0:	d1cc      	bne.n	8004a4c <quorem+0x9c>
 8004ab2:	3c01      	subs	r4, #1
 8004ab4:	e7c7      	b.n	8004a46 <quorem+0x96>
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	3b04      	subs	r3, #4
 8004aba:	2a00      	cmp	r2, #0
 8004abc:	d1f0      	bne.n	8004aa0 <quorem+0xf0>
 8004abe:	3c01      	subs	r4, #1
 8004ac0:	e7eb      	b.n	8004a9a <quorem+0xea>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e7ee      	b.n	8004aa4 <quorem+0xf4>
	...

08004ac8 <_dtoa_r>:
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	ed2d 8b02 	vpush	{d8}
 8004ad0:	ec57 6b10 	vmov	r6, r7, d0
 8004ad4:	b095      	sub	sp, #84	; 0x54
 8004ad6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ad8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004adc:	9105      	str	r1, [sp, #20]
 8004ade:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ae8:	b975      	cbnz	r5, 8004b08 <_dtoa_r+0x40>
 8004aea:	2010      	movs	r0, #16
 8004aec:	f000 fddc 	bl	80056a8 <malloc>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6260      	str	r0, [r4, #36]	; 0x24
 8004af4:	b920      	cbnz	r0, 8004b00 <_dtoa_r+0x38>
 8004af6:	4bb2      	ldr	r3, [pc, #712]	; (8004dc0 <_dtoa_r+0x2f8>)
 8004af8:	21ea      	movs	r1, #234	; 0xea
 8004afa:	48b2      	ldr	r0, [pc, #712]	; (8004dc4 <_dtoa_r+0x2fc>)
 8004afc:	f001 fb80 	bl	8006200 <__assert_func>
 8004b00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b04:	6005      	str	r5, [r0, #0]
 8004b06:	60c5      	str	r5, [r0, #12]
 8004b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	b151      	cbz	r1, 8004b24 <_dtoa_r+0x5c>
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	604a      	str	r2, [r1, #4]
 8004b12:	2301      	movs	r3, #1
 8004b14:	4093      	lsls	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f000 fe0d 	bl	8005738 <_Bfree>
 8004b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	1e3b      	subs	r3, r7, #0
 8004b26:	bfb9      	ittee	lt
 8004b28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b2c:	9303      	strlt	r3, [sp, #12]
 8004b2e:	2300      	movge	r3, #0
 8004b30:	f8c8 3000 	strge.w	r3, [r8]
 8004b34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004b38:	4ba3      	ldr	r3, [pc, #652]	; (8004dc8 <_dtoa_r+0x300>)
 8004b3a:	bfbc      	itt	lt
 8004b3c:	2201      	movlt	r2, #1
 8004b3e:	f8c8 2000 	strlt.w	r2, [r8]
 8004b42:	ea33 0309 	bics.w	r3, r3, r9
 8004b46:	d11b      	bne.n	8004b80 <_dtoa_r+0xb8>
 8004b48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b54:	4333      	orrs	r3, r6
 8004b56:	f000 857a 	beq.w	800564e <_dtoa_r+0xb86>
 8004b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b5c:	b963      	cbnz	r3, 8004b78 <_dtoa_r+0xb0>
 8004b5e:	4b9b      	ldr	r3, [pc, #620]	; (8004dcc <_dtoa_r+0x304>)
 8004b60:	e024      	b.n	8004bac <_dtoa_r+0xe4>
 8004b62:	4b9b      	ldr	r3, [pc, #620]	; (8004dd0 <_dtoa_r+0x308>)
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	9800      	ldr	r0, [sp, #0]
 8004b6e:	b015      	add	sp, #84	; 0x54
 8004b70:	ecbd 8b02 	vpop	{d8}
 8004b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b78:	4b94      	ldr	r3, [pc, #592]	; (8004dcc <_dtoa_r+0x304>)
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	3303      	adds	r3, #3
 8004b7e:	e7f3      	b.n	8004b68 <_dtoa_r+0xa0>
 8004b80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	ec51 0b17 	vmov	r0, r1, d7
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004b90:	f7fb ffa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b94:	4680      	mov	r8, r0
 8004b96:	b158      	cbz	r0, 8004bb0 <_dtoa_r+0xe8>
 8004b98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8551 	beq.w	8005648 <_dtoa_r+0xb80>
 8004ba6:	488b      	ldr	r0, [pc, #556]	; (8004dd4 <_dtoa_r+0x30c>)
 8004ba8:	6018      	str	r0, [r3, #0]
 8004baa:	1e43      	subs	r3, r0, #1
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	e7dd      	b.n	8004b6c <_dtoa_r+0xa4>
 8004bb0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004bb4:	aa12      	add	r2, sp, #72	; 0x48
 8004bb6:	a913      	add	r1, sp, #76	; 0x4c
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f001 f89f 	bl	8005cfc <__d2b>
 8004bbe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004bc2:	4683      	mov	fp, r0
 8004bc4:	2d00      	cmp	r5, #0
 8004bc6:	d07c      	beq.n	8004cc2 <_dtoa_r+0x1fa>
 8004bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004bce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004bd6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004bda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004bde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004be2:	4b7d      	ldr	r3, [pc, #500]	; (8004dd8 <_dtoa_r+0x310>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	4630      	mov	r0, r6
 8004be8:	4639      	mov	r1, r7
 8004bea:	f7fb fb55 	bl	8000298 <__aeabi_dsub>
 8004bee:	a36e      	add	r3, pc, #440	; (adr r3, 8004da8 <_dtoa_r+0x2e0>)
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f7fb fd08 	bl	8000608 <__aeabi_dmul>
 8004bf8:	a36d      	add	r3, pc, #436	; (adr r3, 8004db0 <_dtoa_r+0x2e8>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb fb4d 	bl	800029c <__adddf3>
 8004c02:	4606      	mov	r6, r0
 8004c04:	4628      	mov	r0, r5
 8004c06:	460f      	mov	r7, r1
 8004c08:	f7fb fc94 	bl	8000534 <__aeabi_i2d>
 8004c0c:	a36a      	add	r3, pc, #424	; (adr r3, 8004db8 <_dtoa_r+0x2f0>)
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	f7fb fcf9 	bl	8000608 <__aeabi_dmul>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	4639      	mov	r1, r7
 8004c1e:	f7fb fb3d 	bl	800029c <__adddf3>
 8004c22:	4606      	mov	r6, r0
 8004c24:	460f      	mov	r7, r1
 8004c26:	f7fb ff9f 	bl	8000b68 <__aeabi_d2iz>
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	4682      	mov	sl, r0
 8004c2e:	2300      	movs	r3, #0
 8004c30:	4630      	mov	r0, r6
 8004c32:	4639      	mov	r1, r7
 8004c34:	f7fb ff5a 	bl	8000aec <__aeabi_dcmplt>
 8004c38:	b148      	cbz	r0, 8004c4e <_dtoa_r+0x186>
 8004c3a:	4650      	mov	r0, sl
 8004c3c:	f7fb fc7a 	bl	8000534 <__aeabi_i2d>
 8004c40:	4632      	mov	r2, r6
 8004c42:	463b      	mov	r3, r7
 8004c44:	f7fb ff48 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c48:	b908      	cbnz	r0, 8004c4e <_dtoa_r+0x186>
 8004c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c4e:	f1ba 0f16 	cmp.w	sl, #22
 8004c52:	d854      	bhi.n	8004cfe <_dtoa_r+0x236>
 8004c54:	4b61      	ldr	r3, [pc, #388]	; (8004ddc <_dtoa_r+0x314>)
 8004c56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c62:	f7fb ff43 	bl	8000aec <__aeabi_dcmplt>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d04b      	beq.n	8004d02 <_dtoa_r+0x23a>
 8004c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c6e:	2300      	movs	r3, #0
 8004c70:	930e      	str	r3, [sp, #56]	; 0x38
 8004c72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c74:	1b5d      	subs	r5, r3, r5
 8004c76:	1e6b      	subs	r3, r5, #1
 8004c78:	9304      	str	r3, [sp, #16]
 8004c7a:	bf43      	ittte	mi
 8004c7c:	2300      	movmi	r3, #0
 8004c7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004c82:	9304      	strmi	r3, [sp, #16]
 8004c84:	f04f 0800 	movpl.w	r8, #0
 8004c88:	f1ba 0f00 	cmp.w	sl, #0
 8004c8c:	db3b      	blt.n	8004d06 <_dtoa_r+0x23e>
 8004c8e:	9b04      	ldr	r3, [sp, #16]
 8004c90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004c94:	4453      	add	r3, sl
 8004c96:	9304      	str	r3, [sp, #16]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	9306      	str	r3, [sp, #24]
 8004c9c:	9b05      	ldr	r3, [sp, #20]
 8004c9e:	2b09      	cmp	r3, #9
 8004ca0:	d869      	bhi.n	8004d76 <_dtoa_r+0x2ae>
 8004ca2:	2b05      	cmp	r3, #5
 8004ca4:	bfc4      	itt	gt
 8004ca6:	3b04      	subgt	r3, #4
 8004ca8:	9305      	strgt	r3, [sp, #20]
 8004caa:	9b05      	ldr	r3, [sp, #20]
 8004cac:	f1a3 0302 	sub.w	r3, r3, #2
 8004cb0:	bfcc      	ite	gt
 8004cb2:	2500      	movgt	r5, #0
 8004cb4:	2501      	movle	r5, #1
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d869      	bhi.n	8004d8e <_dtoa_r+0x2c6>
 8004cba:	e8df f003 	tbb	[pc, r3]
 8004cbe:	4e2c      	.short	0x4e2c
 8004cc0:	5a4c      	.short	0x5a4c
 8004cc2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004cc6:	441d      	add	r5, r3
 8004cc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	bfc1      	itttt	gt
 8004cd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004cd4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004cd8:	fa09 f303 	lslgt.w	r3, r9, r3
 8004cdc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004ce0:	bfda      	itte	le
 8004ce2:	f1c3 0320 	rsble	r3, r3, #32
 8004ce6:	fa06 f003 	lslle.w	r0, r6, r3
 8004cea:	4318      	orrgt	r0, r3
 8004cec:	f7fb fc12 	bl	8000514 <__aeabi_ui2d>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004cf8:	3d01      	subs	r5, #1
 8004cfa:	9310      	str	r3, [sp, #64]	; 0x40
 8004cfc:	e771      	b.n	8004be2 <_dtoa_r+0x11a>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e7b6      	b.n	8004c70 <_dtoa_r+0x1a8>
 8004d02:	900e      	str	r0, [sp, #56]	; 0x38
 8004d04:	e7b5      	b.n	8004c72 <_dtoa_r+0x1aa>
 8004d06:	f1ca 0300 	rsb	r3, sl, #0
 8004d0a:	9306      	str	r3, [sp, #24]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	eba8 080a 	sub.w	r8, r8, sl
 8004d12:	930d      	str	r3, [sp, #52]	; 0x34
 8004d14:	e7c2      	b.n	8004c9c <_dtoa_r+0x1d4>
 8004d16:	2300      	movs	r3, #0
 8004d18:	9308      	str	r3, [sp, #32]
 8004d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	dc39      	bgt.n	8004d94 <_dtoa_r+0x2cc>
 8004d20:	f04f 0901 	mov.w	r9, #1
 8004d24:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d28:	464b      	mov	r3, r9
 8004d2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004d2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d30:	2200      	movs	r2, #0
 8004d32:	6042      	str	r2, [r0, #4]
 8004d34:	2204      	movs	r2, #4
 8004d36:	f102 0614 	add.w	r6, r2, #20
 8004d3a:	429e      	cmp	r6, r3
 8004d3c:	6841      	ldr	r1, [r0, #4]
 8004d3e:	d92f      	bls.n	8004da0 <_dtoa_r+0x2d8>
 8004d40:	4620      	mov	r0, r4
 8004d42:	f000 fcb9 	bl	80056b8 <_Balloc>
 8004d46:	9000      	str	r0, [sp, #0]
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d14b      	bne.n	8004de4 <_dtoa_r+0x31c>
 8004d4c:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <_dtoa_r+0x318>)
 8004d4e:	4602      	mov	r2, r0
 8004d50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d54:	e6d1      	b.n	8004afa <_dtoa_r+0x32>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e7de      	b.n	8004d18 <_dtoa_r+0x250>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9308      	str	r3, [sp, #32]
 8004d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d60:	eb0a 0903 	add.w	r9, sl, r3
 8004d64:	f109 0301 	add.w	r3, r9, #1
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	bfb8      	it	lt
 8004d6e:	2301      	movlt	r3, #1
 8004d70:	e7dd      	b.n	8004d2e <_dtoa_r+0x266>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e7f2      	b.n	8004d5c <_dtoa_r+0x294>
 8004d76:	2501      	movs	r5, #1
 8004d78:	2300      	movs	r3, #0
 8004d7a:	9305      	str	r3, [sp, #20]
 8004d7c:	9508      	str	r5, [sp, #32]
 8004d7e:	f04f 39ff 	mov.w	r9, #4294967295
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d88:	2312      	movs	r3, #18
 8004d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d8c:	e7cf      	b.n	8004d2e <_dtoa_r+0x266>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	9308      	str	r3, [sp, #32]
 8004d92:	e7f4      	b.n	8004d7e <_dtoa_r+0x2b6>
 8004d94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004d98:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d9c:	464b      	mov	r3, r9
 8004d9e:	e7c6      	b.n	8004d2e <_dtoa_r+0x266>
 8004da0:	3101      	adds	r1, #1
 8004da2:	6041      	str	r1, [r0, #4]
 8004da4:	0052      	lsls	r2, r2, #1
 8004da6:	e7c6      	b.n	8004d36 <_dtoa_r+0x26e>
 8004da8:	636f4361 	.word	0x636f4361
 8004dac:	3fd287a7 	.word	0x3fd287a7
 8004db0:	8b60c8b3 	.word	0x8b60c8b3
 8004db4:	3fc68a28 	.word	0x3fc68a28
 8004db8:	509f79fb 	.word	0x509f79fb
 8004dbc:	3fd34413 	.word	0x3fd34413
 8004dc0:	08007609 	.word	0x08007609
 8004dc4:	08007620 	.word	0x08007620
 8004dc8:	7ff00000 	.word	0x7ff00000
 8004dcc:	08007605 	.word	0x08007605
 8004dd0:	080075fc 	.word	0x080075fc
 8004dd4:	080075d9 	.word	0x080075d9
 8004dd8:	3ff80000 	.word	0x3ff80000
 8004ddc:	08007718 	.word	0x08007718
 8004de0:	0800767f 	.word	0x0800767f
 8004de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004de6:	9a00      	ldr	r2, [sp, #0]
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	9b01      	ldr	r3, [sp, #4]
 8004dec:	2b0e      	cmp	r3, #14
 8004dee:	f200 80ad 	bhi.w	8004f4c <_dtoa_r+0x484>
 8004df2:	2d00      	cmp	r5, #0
 8004df4:	f000 80aa 	beq.w	8004f4c <_dtoa_r+0x484>
 8004df8:	f1ba 0f00 	cmp.w	sl, #0
 8004dfc:	dd36      	ble.n	8004e6c <_dtoa_r+0x3a4>
 8004dfe:	4ac3      	ldr	r2, [pc, #780]	; (800510c <_dtoa_r+0x644>)
 8004e00:	f00a 030f 	and.w	r3, sl, #15
 8004e04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e08:	ed93 7b00 	vldr	d7, [r3]
 8004e0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004e10:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004e14:	eeb0 8a47 	vmov.f32	s16, s14
 8004e18:	eef0 8a67 	vmov.f32	s17, s15
 8004e1c:	d016      	beq.n	8004e4c <_dtoa_r+0x384>
 8004e1e:	4bbc      	ldr	r3, [pc, #752]	; (8005110 <_dtoa_r+0x648>)
 8004e20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e28:	f7fb fd18 	bl	800085c <__aeabi_ddiv>
 8004e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e30:	f007 070f 	and.w	r7, r7, #15
 8004e34:	2503      	movs	r5, #3
 8004e36:	4eb6      	ldr	r6, [pc, #728]	; (8005110 <_dtoa_r+0x648>)
 8004e38:	b957      	cbnz	r7, 8004e50 <_dtoa_r+0x388>
 8004e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e3e:	ec53 2b18 	vmov	r2, r3, d8
 8004e42:	f7fb fd0b 	bl	800085c <__aeabi_ddiv>
 8004e46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e4a:	e029      	b.n	8004ea0 <_dtoa_r+0x3d8>
 8004e4c:	2502      	movs	r5, #2
 8004e4e:	e7f2      	b.n	8004e36 <_dtoa_r+0x36e>
 8004e50:	07f9      	lsls	r1, r7, #31
 8004e52:	d508      	bpl.n	8004e66 <_dtoa_r+0x39e>
 8004e54:	ec51 0b18 	vmov	r0, r1, d8
 8004e58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e5c:	f7fb fbd4 	bl	8000608 <__aeabi_dmul>
 8004e60:	ec41 0b18 	vmov	d8, r0, r1
 8004e64:	3501      	adds	r5, #1
 8004e66:	107f      	asrs	r7, r7, #1
 8004e68:	3608      	adds	r6, #8
 8004e6a:	e7e5      	b.n	8004e38 <_dtoa_r+0x370>
 8004e6c:	f000 80a6 	beq.w	8004fbc <_dtoa_r+0x4f4>
 8004e70:	f1ca 0600 	rsb	r6, sl, #0
 8004e74:	4ba5      	ldr	r3, [pc, #660]	; (800510c <_dtoa_r+0x644>)
 8004e76:	4fa6      	ldr	r7, [pc, #664]	; (8005110 <_dtoa_r+0x648>)
 8004e78:	f006 020f 	and.w	r2, r6, #15
 8004e7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e88:	f7fb fbbe 	bl	8000608 <__aeabi_dmul>
 8004e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e90:	1136      	asrs	r6, r6, #4
 8004e92:	2300      	movs	r3, #0
 8004e94:	2502      	movs	r5, #2
 8004e96:	2e00      	cmp	r6, #0
 8004e98:	f040 8085 	bne.w	8004fa6 <_dtoa_r+0x4de>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1d2      	bne.n	8004e46 <_dtoa_r+0x37e>
 8004ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 808c 	beq.w	8004fc0 <_dtoa_r+0x4f8>
 8004ea8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004eac:	4b99      	ldr	r3, [pc, #612]	; (8005114 <_dtoa_r+0x64c>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	f7fb fe1a 	bl	8000aec <__aeabi_dcmplt>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	f000 8081 	beq.w	8004fc0 <_dtoa_r+0x4f8>
 8004ebe:	9b01      	ldr	r3, [sp, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d07d      	beq.n	8004fc0 <_dtoa_r+0x4f8>
 8004ec4:	f1b9 0f00 	cmp.w	r9, #0
 8004ec8:	dd3c      	ble.n	8004f44 <_dtoa_r+0x47c>
 8004eca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004ece:	9307      	str	r3, [sp, #28]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	4b91      	ldr	r3, [pc, #580]	; (8005118 <_dtoa_r+0x650>)
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	4639      	mov	r1, r7
 8004ed8:	f7fb fb96 	bl	8000608 <__aeabi_dmul>
 8004edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ee0:	3501      	adds	r5, #1
 8004ee2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004ee6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004eea:	4628      	mov	r0, r5
 8004eec:	f7fb fb22 	bl	8000534 <__aeabi_i2d>
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	f7fb fb88 	bl	8000608 <__aeabi_dmul>
 8004ef8:	4b88      	ldr	r3, [pc, #544]	; (800511c <_dtoa_r+0x654>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	f7fb f9ce 	bl	800029c <__adddf3>
 8004f00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f08:	9303      	str	r3, [sp, #12]
 8004f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d15c      	bne.n	8004fca <_dtoa_r+0x502>
 8004f10:	4b83      	ldr	r3, [pc, #524]	; (8005120 <_dtoa_r+0x658>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	4630      	mov	r0, r6
 8004f16:	4639      	mov	r1, r7
 8004f18:	f7fb f9be 	bl	8000298 <__aeabi_dsub>
 8004f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f20:	4606      	mov	r6, r0
 8004f22:	460f      	mov	r7, r1
 8004f24:	f7fb fe00 	bl	8000b28 <__aeabi_dcmpgt>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	f040 8296 	bne.w	800545a <_dtoa_r+0x992>
 8004f2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004f32:	4630      	mov	r0, r6
 8004f34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f38:	4639      	mov	r1, r7
 8004f3a:	f7fb fdd7 	bl	8000aec <__aeabi_dcmplt>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	f040 8288 	bne.w	8005454 <_dtoa_r+0x98c>
 8004f44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f2c0 8158 	blt.w	8005204 <_dtoa_r+0x73c>
 8004f54:	f1ba 0f0e 	cmp.w	sl, #14
 8004f58:	f300 8154 	bgt.w	8005204 <_dtoa_r+0x73c>
 8004f5c:	4b6b      	ldr	r3, [pc, #428]	; (800510c <_dtoa_r+0x644>)
 8004f5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f280 80e3 	bge.w	8005134 <_dtoa_r+0x66c>
 8004f6e:	9b01      	ldr	r3, [sp, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f300 80df 	bgt.w	8005134 <_dtoa_r+0x66c>
 8004f76:	f040 826d 	bne.w	8005454 <_dtoa_r+0x98c>
 8004f7a:	4b69      	ldr	r3, [pc, #420]	; (8005120 <_dtoa_r+0x658>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4649      	mov	r1, r9
 8004f82:	f7fb fb41 	bl	8000608 <__aeabi_dmul>
 8004f86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f8a:	f7fb fdc3 	bl	8000b14 <__aeabi_dcmpge>
 8004f8e:	9e01      	ldr	r6, [sp, #4]
 8004f90:	4637      	mov	r7, r6
 8004f92:	2800      	cmp	r0, #0
 8004f94:	f040 8243 	bne.w	800541e <_dtoa_r+0x956>
 8004f98:	9d00      	ldr	r5, [sp, #0]
 8004f9a:	2331      	movs	r3, #49	; 0x31
 8004f9c:	f805 3b01 	strb.w	r3, [r5], #1
 8004fa0:	f10a 0a01 	add.w	sl, sl, #1
 8004fa4:	e23f      	b.n	8005426 <_dtoa_r+0x95e>
 8004fa6:	07f2      	lsls	r2, r6, #31
 8004fa8:	d505      	bpl.n	8004fb6 <_dtoa_r+0x4ee>
 8004faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fae:	f7fb fb2b 	bl	8000608 <__aeabi_dmul>
 8004fb2:	3501      	adds	r5, #1
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	1076      	asrs	r6, r6, #1
 8004fb8:	3708      	adds	r7, #8
 8004fba:	e76c      	b.n	8004e96 <_dtoa_r+0x3ce>
 8004fbc:	2502      	movs	r5, #2
 8004fbe:	e76f      	b.n	8004ea0 <_dtoa_r+0x3d8>
 8004fc0:	9b01      	ldr	r3, [sp, #4]
 8004fc2:	f8cd a01c 	str.w	sl, [sp, #28]
 8004fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8004fc8:	e78d      	b.n	8004ee6 <_dtoa_r+0x41e>
 8004fca:	9900      	ldr	r1, [sp, #0]
 8004fcc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fd0:	4b4e      	ldr	r3, [pc, #312]	; (800510c <_dtoa_r+0x644>)
 8004fd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fd6:	4401      	add	r1, r0
 8004fd8:	9102      	str	r1, [sp, #8]
 8004fda:	9908      	ldr	r1, [sp, #32]
 8004fdc:	eeb0 8a47 	vmov.f32	s16, s14
 8004fe0:	eef0 8a67 	vmov.f32	s17, s15
 8004fe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fe8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fec:	2900      	cmp	r1, #0
 8004fee:	d045      	beq.n	800507c <_dtoa_r+0x5b4>
 8004ff0:	494c      	ldr	r1, [pc, #304]	; (8005124 <_dtoa_r+0x65c>)
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	f7fb fc32 	bl	800085c <__aeabi_ddiv>
 8004ff8:	ec53 2b18 	vmov	r2, r3, d8
 8004ffc:	f7fb f94c 	bl	8000298 <__aeabi_dsub>
 8005000:	9d00      	ldr	r5, [sp, #0]
 8005002:	ec41 0b18 	vmov	d8, r0, r1
 8005006:	4639      	mov	r1, r7
 8005008:	4630      	mov	r0, r6
 800500a:	f7fb fdad 	bl	8000b68 <__aeabi_d2iz>
 800500e:	900c      	str	r0, [sp, #48]	; 0x30
 8005010:	f7fb fa90 	bl	8000534 <__aeabi_i2d>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4630      	mov	r0, r6
 800501a:	4639      	mov	r1, r7
 800501c:	f7fb f93c 	bl	8000298 <__aeabi_dsub>
 8005020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005022:	3330      	adds	r3, #48	; 0x30
 8005024:	f805 3b01 	strb.w	r3, [r5], #1
 8005028:	ec53 2b18 	vmov	r2, r3, d8
 800502c:	4606      	mov	r6, r0
 800502e:	460f      	mov	r7, r1
 8005030:	f7fb fd5c 	bl	8000aec <__aeabi_dcmplt>
 8005034:	2800      	cmp	r0, #0
 8005036:	d165      	bne.n	8005104 <_dtoa_r+0x63c>
 8005038:	4632      	mov	r2, r6
 800503a:	463b      	mov	r3, r7
 800503c:	4935      	ldr	r1, [pc, #212]	; (8005114 <_dtoa_r+0x64c>)
 800503e:	2000      	movs	r0, #0
 8005040:	f7fb f92a 	bl	8000298 <__aeabi_dsub>
 8005044:	ec53 2b18 	vmov	r2, r3, d8
 8005048:	f7fb fd50 	bl	8000aec <__aeabi_dcmplt>
 800504c:	2800      	cmp	r0, #0
 800504e:	f040 80b9 	bne.w	80051c4 <_dtoa_r+0x6fc>
 8005052:	9b02      	ldr	r3, [sp, #8]
 8005054:	429d      	cmp	r5, r3
 8005056:	f43f af75 	beq.w	8004f44 <_dtoa_r+0x47c>
 800505a:	4b2f      	ldr	r3, [pc, #188]	; (8005118 <_dtoa_r+0x650>)
 800505c:	ec51 0b18 	vmov	r0, r1, d8
 8005060:	2200      	movs	r2, #0
 8005062:	f7fb fad1 	bl	8000608 <__aeabi_dmul>
 8005066:	4b2c      	ldr	r3, [pc, #176]	; (8005118 <_dtoa_r+0x650>)
 8005068:	ec41 0b18 	vmov	d8, r0, r1
 800506c:	2200      	movs	r2, #0
 800506e:	4630      	mov	r0, r6
 8005070:	4639      	mov	r1, r7
 8005072:	f7fb fac9 	bl	8000608 <__aeabi_dmul>
 8005076:	4606      	mov	r6, r0
 8005078:	460f      	mov	r7, r1
 800507a:	e7c4      	b.n	8005006 <_dtoa_r+0x53e>
 800507c:	ec51 0b17 	vmov	r0, r1, d7
 8005080:	f7fb fac2 	bl	8000608 <__aeabi_dmul>
 8005084:	9b02      	ldr	r3, [sp, #8]
 8005086:	9d00      	ldr	r5, [sp, #0]
 8005088:	930c      	str	r3, [sp, #48]	; 0x30
 800508a:	ec41 0b18 	vmov	d8, r0, r1
 800508e:	4639      	mov	r1, r7
 8005090:	4630      	mov	r0, r6
 8005092:	f7fb fd69 	bl	8000b68 <__aeabi_d2iz>
 8005096:	9011      	str	r0, [sp, #68]	; 0x44
 8005098:	f7fb fa4c 	bl	8000534 <__aeabi_i2d>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4630      	mov	r0, r6
 80050a2:	4639      	mov	r1, r7
 80050a4:	f7fb f8f8 	bl	8000298 <__aeabi_dsub>
 80050a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050aa:	3330      	adds	r3, #48	; 0x30
 80050ac:	f805 3b01 	strb.w	r3, [r5], #1
 80050b0:	9b02      	ldr	r3, [sp, #8]
 80050b2:	429d      	cmp	r5, r3
 80050b4:	4606      	mov	r6, r0
 80050b6:	460f      	mov	r7, r1
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	d134      	bne.n	8005128 <_dtoa_r+0x660>
 80050be:	4b19      	ldr	r3, [pc, #100]	; (8005124 <_dtoa_r+0x65c>)
 80050c0:	ec51 0b18 	vmov	r0, r1, d8
 80050c4:	f7fb f8ea 	bl	800029c <__adddf3>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4630      	mov	r0, r6
 80050ce:	4639      	mov	r1, r7
 80050d0:	f7fb fd2a 	bl	8000b28 <__aeabi_dcmpgt>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d175      	bne.n	80051c4 <_dtoa_r+0x6fc>
 80050d8:	ec53 2b18 	vmov	r2, r3, d8
 80050dc:	4911      	ldr	r1, [pc, #68]	; (8005124 <_dtoa_r+0x65c>)
 80050de:	2000      	movs	r0, #0
 80050e0:	f7fb f8da 	bl	8000298 <__aeabi_dsub>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4630      	mov	r0, r6
 80050ea:	4639      	mov	r1, r7
 80050ec:	f7fb fcfe 	bl	8000aec <__aeabi_dcmplt>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	f43f af27 	beq.w	8004f44 <_dtoa_r+0x47c>
 80050f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050f8:	1e6b      	subs	r3, r5, #1
 80050fa:	930c      	str	r3, [sp, #48]	; 0x30
 80050fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005100:	2b30      	cmp	r3, #48	; 0x30
 8005102:	d0f8      	beq.n	80050f6 <_dtoa_r+0x62e>
 8005104:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005108:	e04a      	b.n	80051a0 <_dtoa_r+0x6d8>
 800510a:	bf00      	nop
 800510c:	08007718 	.word	0x08007718
 8005110:	080076f0 	.word	0x080076f0
 8005114:	3ff00000 	.word	0x3ff00000
 8005118:	40240000 	.word	0x40240000
 800511c:	401c0000 	.word	0x401c0000
 8005120:	40140000 	.word	0x40140000
 8005124:	3fe00000 	.word	0x3fe00000
 8005128:	4baf      	ldr	r3, [pc, #700]	; (80053e8 <_dtoa_r+0x920>)
 800512a:	f7fb fa6d 	bl	8000608 <__aeabi_dmul>
 800512e:	4606      	mov	r6, r0
 8005130:	460f      	mov	r7, r1
 8005132:	e7ac      	b.n	800508e <_dtoa_r+0x5c6>
 8005134:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005138:	9d00      	ldr	r5, [sp, #0]
 800513a:	4642      	mov	r2, r8
 800513c:	464b      	mov	r3, r9
 800513e:	4630      	mov	r0, r6
 8005140:	4639      	mov	r1, r7
 8005142:	f7fb fb8b 	bl	800085c <__aeabi_ddiv>
 8005146:	f7fb fd0f 	bl	8000b68 <__aeabi_d2iz>
 800514a:	9002      	str	r0, [sp, #8]
 800514c:	f7fb f9f2 	bl	8000534 <__aeabi_i2d>
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	f7fb fa58 	bl	8000608 <__aeabi_dmul>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4630      	mov	r0, r6
 800515e:	4639      	mov	r1, r7
 8005160:	f7fb f89a 	bl	8000298 <__aeabi_dsub>
 8005164:	9e02      	ldr	r6, [sp, #8]
 8005166:	9f01      	ldr	r7, [sp, #4]
 8005168:	3630      	adds	r6, #48	; 0x30
 800516a:	f805 6b01 	strb.w	r6, [r5], #1
 800516e:	9e00      	ldr	r6, [sp, #0]
 8005170:	1bae      	subs	r6, r5, r6
 8005172:	42b7      	cmp	r7, r6
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	d137      	bne.n	80051ea <_dtoa_r+0x722>
 800517a:	f7fb f88f 	bl	800029c <__adddf3>
 800517e:	4642      	mov	r2, r8
 8005180:	464b      	mov	r3, r9
 8005182:	4606      	mov	r6, r0
 8005184:	460f      	mov	r7, r1
 8005186:	f7fb fccf 	bl	8000b28 <__aeabi_dcmpgt>
 800518a:	b9c8      	cbnz	r0, 80051c0 <_dtoa_r+0x6f8>
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	4630      	mov	r0, r6
 8005192:	4639      	mov	r1, r7
 8005194:	f7fb fca0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005198:	b110      	cbz	r0, 80051a0 <_dtoa_r+0x6d8>
 800519a:	9b02      	ldr	r3, [sp, #8]
 800519c:	07d9      	lsls	r1, r3, #31
 800519e:	d40f      	bmi.n	80051c0 <_dtoa_r+0x6f8>
 80051a0:	4620      	mov	r0, r4
 80051a2:	4659      	mov	r1, fp
 80051a4:	f000 fac8 	bl	8005738 <_Bfree>
 80051a8:	2300      	movs	r3, #0
 80051aa:	702b      	strb	r3, [r5, #0]
 80051ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051ae:	f10a 0001 	add.w	r0, sl, #1
 80051b2:	6018      	str	r0, [r3, #0]
 80051b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f43f acd8 	beq.w	8004b6c <_dtoa_r+0xa4>
 80051bc:	601d      	str	r5, [r3, #0]
 80051be:	e4d5      	b.n	8004b6c <_dtoa_r+0xa4>
 80051c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80051c4:	462b      	mov	r3, r5
 80051c6:	461d      	mov	r5, r3
 80051c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051cc:	2a39      	cmp	r2, #57	; 0x39
 80051ce:	d108      	bne.n	80051e2 <_dtoa_r+0x71a>
 80051d0:	9a00      	ldr	r2, [sp, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d1f7      	bne.n	80051c6 <_dtoa_r+0x6fe>
 80051d6:	9a07      	ldr	r2, [sp, #28]
 80051d8:	9900      	ldr	r1, [sp, #0]
 80051da:	3201      	adds	r2, #1
 80051dc:	9207      	str	r2, [sp, #28]
 80051de:	2230      	movs	r2, #48	; 0x30
 80051e0:	700a      	strb	r2, [r1, #0]
 80051e2:	781a      	ldrb	r2, [r3, #0]
 80051e4:	3201      	adds	r2, #1
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e78c      	b.n	8005104 <_dtoa_r+0x63c>
 80051ea:	4b7f      	ldr	r3, [pc, #508]	; (80053e8 <_dtoa_r+0x920>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	f7fb fa0b 	bl	8000608 <__aeabi_dmul>
 80051f2:	2200      	movs	r2, #0
 80051f4:	2300      	movs	r3, #0
 80051f6:	4606      	mov	r6, r0
 80051f8:	460f      	mov	r7, r1
 80051fa:	f7fb fc6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d09b      	beq.n	800513a <_dtoa_r+0x672>
 8005202:	e7cd      	b.n	80051a0 <_dtoa_r+0x6d8>
 8005204:	9a08      	ldr	r2, [sp, #32]
 8005206:	2a00      	cmp	r2, #0
 8005208:	f000 80c4 	beq.w	8005394 <_dtoa_r+0x8cc>
 800520c:	9a05      	ldr	r2, [sp, #20]
 800520e:	2a01      	cmp	r2, #1
 8005210:	f300 80a8 	bgt.w	8005364 <_dtoa_r+0x89c>
 8005214:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005216:	2a00      	cmp	r2, #0
 8005218:	f000 80a0 	beq.w	800535c <_dtoa_r+0x894>
 800521c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005220:	9e06      	ldr	r6, [sp, #24]
 8005222:	4645      	mov	r5, r8
 8005224:	9a04      	ldr	r2, [sp, #16]
 8005226:	2101      	movs	r1, #1
 8005228:	441a      	add	r2, r3
 800522a:	4620      	mov	r0, r4
 800522c:	4498      	add	r8, r3
 800522e:	9204      	str	r2, [sp, #16]
 8005230:	f000 fb3e 	bl	80058b0 <__i2b>
 8005234:	4607      	mov	r7, r0
 8005236:	2d00      	cmp	r5, #0
 8005238:	dd0b      	ble.n	8005252 <_dtoa_r+0x78a>
 800523a:	9b04      	ldr	r3, [sp, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	dd08      	ble.n	8005252 <_dtoa_r+0x78a>
 8005240:	42ab      	cmp	r3, r5
 8005242:	9a04      	ldr	r2, [sp, #16]
 8005244:	bfa8      	it	ge
 8005246:	462b      	movge	r3, r5
 8005248:	eba8 0803 	sub.w	r8, r8, r3
 800524c:	1aed      	subs	r5, r5, r3
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	9b06      	ldr	r3, [sp, #24]
 8005254:	b1fb      	cbz	r3, 8005296 <_dtoa_r+0x7ce>
 8005256:	9b08      	ldr	r3, [sp, #32]
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 809f 	beq.w	800539c <_dtoa_r+0x8d4>
 800525e:	2e00      	cmp	r6, #0
 8005260:	dd11      	ble.n	8005286 <_dtoa_r+0x7be>
 8005262:	4639      	mov	r1, r7
 8005264:	4632      	mov	r2, r6
 8005266:	4620      	mov	r0, r4
 8005268:	f000 fbde 	bl	8005a28 <__pow5mult>
 800526c:	465a      	mov	r2, fp
 800526e:	4601      	mov	r1, r0
 8005270:	4607      	mov	r7, r0
 8005272:	4620      	mov	r0, r4
 8005274:	f000 fb32 	bl	80058dc <__multiply>
 8005278:	4659      	mov	r1, fp
 800527a:	9007      	str	r0, [sp, #28]
 800527c:	4620      	mov	r0, r4
 800527e:	f000 fa5b 	bl	8005738 <_Bfree>
 8005282:	9b07      	ldr	r3, [sp, #28]
 8005284:	469b      	mov	fp, r3
 8005286:	9b06      	ldr	r3, [sp, #24]
 8005288:	1b9a      	subs	r2, r3, r6
 800528a:	d004      	beq.n	8005296 <_dtoa_r+0x7ce>
 800528c:	4659      	mov	r1, fp
 800528e:	4620      	mov	r0, r4
 8005290:	f000 fbca 	bl	8005a28 <__pow5mult>
 8005294:	4683      	mov	fp, r0
 8005296:	2101      	movs	r1, #1
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fb09 	bl	80058b0 <__i2b>
 800529e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	4606      	mov	r6, r0
 80052a4:	dd7c      	ble.n	80053a0 <_dtoa_r+0x8d8>
 80052a6:	461a      	mov	r2, r3
 80052a8:	4601      	mov	r1, r0
 80052aa:	4620      	mov	r0, r4
 80052ac:	f000 fbbc 	bl	8005a28 <__pow5mult>
 80052b0:	9b05      	ldr	r3, [sp, #20]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	4606      	mov	r6, r0
 80052b6:	dd76      	ble.n	80053a6 <_dtoa_r+0x8de>
 80052b8:	2300      	movs	r3, #0
 80052ba:	9306      	str	r3, [sp, #24]
 80052bc:	6933      	ldr	r3, [r6, #16]
 80052be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80052c2:	6918      	ldr	r0, [r3, #16]
 80052c4:	f000 faa4 	bl	8005810 <__hi0bits>
 80052c8:	f1c0 0020 	rsb	r0, r0, #32
 80052cc:	9b04      	ldr	r3, [sp, #16]
 80052ce:	4418      	add	r0, r3
 80052d0:	f010 001f 	ands.w	r0, r0, #31
 80052d4:	f000 8086 	beq.w	80053e4 <_dtoa_r+0x91c>
 80052d8:	f1c0 0320 	rsb	r3, r0, #32
 80052dc:	2b04      	cmp	r3, #4
 80052de:	dd7f      	ble.n	80053e0 <_dtoa_r+0x918>
 80052e0:	f1c0 001c 	rsb	r0, r0, #28
 80052e4:	9b04      	ldr	r3, [sp, #16]
 80052e6:	4403      	add	r3, r0
 80052e8:	4480      	add	r8, r0
 80052ea:	4405      	add	r5, r0
 80052ec:	9304      	str	r3, [sp, #16]
 80052ee:	f1b8 0f00 	cmp.w	r8, #0
 80052f2:	dd05      	ble.n	8005300 <_dtoa_r+0x838>
 80052f4:	4659      	mov	r1, fp
 80052f6:	4642      	mov	r2, r8
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 fbef 	bl	8005adc <__lshift>
 80052fe:	4683      	mov	fp, r0
 8005300:	9b04      	ldr	r3, [sp, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	dd05      	ble.n	8005312 <_dtoa_r+0x84a>
 8005306:	4631      	mov	r1, r6
 8005308:	461a      	mov	r2, r3
 800530a:	4620      	mov	r0, r4
 800530c:	f000 fbe6 	bl	8005adc <__lshift>
 8005310:	4606      	mov	r6, r0
 8005312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005314:	2b00      	cmp	r3, #0
 8005316:	d069      	beq.n	80053ec <_dtoa_r+0x924>
 8005318:	4631      	mov	r1, r6
 800531a:	4658      	mov	r0, fp
 800531c:	f000 fc4a 	bl	8005bb4 <__mcmp>
 8005320:	2800      	cmp	r0, #0
 8005322:	da63      	bge.n	80053ec <_dtoa_r+0x924>
 8005324:	2300      	movs	r3, #0
 8005326:	4659      	mov	r1, fp
 8005328:	220a      	movs	r2, #10
 800532a:	4620      	mov	r0, r4
 800532c:	f000 fa26 	bl	800577c <__multadd>
 8005330:	9b08      	ldr	r3, [sp, #32]
 8005332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005336:	4683      	mov	fp, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 818f 	beq.w	800565c <_dtoa_r+0xb94>
 800533e:	4639      	mov	r1, r7
 8005340:	2300      	movs	r3, #0
 8005342:	220a      	movs	r2, #10
 8005344:	4620      	mov	r0, r4
 8005346:	f000 fa19 	bl	800577c <__multadd>
 800534a:	f1b9 0f00 	cmp.w	r9, #0
 800534e:	4607      	mov	r7, r0
 8005350:	f300 808e 	bgt.w	8005470 <_dtoa_r+0x9a8>
 8005354:	9b05      	ldr	r3, [sp, #20]
 8005356:	2b02      	cmp	r3, #2
 8005358:	dc50      	bgt.n	80053fc <_dtoa_r+0x934>
 800535a:	e089      	b.n	8005470 <_dtoa_r+0x9a8>
 800535c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800535e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005362:	e75d      	b.n	8005220 <_dtoa_r+0x758>
 8005364:	9b01      	ldr	r3, [sp, #4]
 8005366:	1e5e      	subs	r6, r3, #1
 8005368:	9b06      	ldr	r3, [sp, #24]
 800536a:	42b3      	cmp	r3, r6
 800536c:	bfbf      	itttt	lt
 800536e:	9b06      	ldrlt	r3, [sp, #24]
 8005370:	9606      	strlt	r6, [sp, #24]
 8005372:	1af2      	sublt	r2, r6, r3
 8005374:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005376:	bfb6      	itet	lt
 8005378:	189b      	addlt	r3, r3, r2
 800537a:	1b9e      	subge	r6, r3, r6
 800537c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800537e:	9b01      	ldr	r3, [sp, #4]
 8005380:	bfb8      	it	lt
 8005382:	2600      	movlt	r6, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	bfb5      	itete	lt
 8005388:	eba8 0503 	sublt.w	r5, r8, r3
 800538c:	9b01      	ldrge	r3, [sp, #4]
 800538e:	2300      	movlt	r3, #0
 8005390:	4645      	movge	r5, r8
 8005392:	e747      	b.n	8005224 <_dtoa_r+0x75c>
 8005394:	9e06      	ldr	r6, [sp, #24]
 8005396:	9f08      	ldr	r7, [sp, #32]
 8005398:	4645      	mov	r5, r8
 800539a:	e74c      	b.n	8005236 <_dtoa_r+0x76e>
 800539c:	9a06      	ldr	r2, [sp, #24]
 800539e:	e775      	b.n	800528c <_dtoa_r+0x7c4>
 80053a0:	9b05      	ldr	r3, [sp, #20]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	dc18      	bgt.n	80053d8 <_dtoa_r+0x910>
 80053a6:	9b02      	ldr	r3, [sp, #8]
 80053a8:	b9b3      	cbnz	r3, 80053d8 <_dtoa_r+0x910>
 80053aa:	9b03      	ldr	r3, [sp, #12]
 80053ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053b0:	b9a3      	cbnz	r3, 80053dc <_dtoa_r+0x914>
 80053b2:	9b03      	ldr	r3, [sp, #12]
 80053b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053b8:	0d1b      	lsrs	r3, r3, #20
 80053ba:	051b      	lsls	r3, r3, #20
 80053bc:	b12b      	cbz	r3, 80053ca <_dtoa_r+0x902>
 80053be:	9b04      	ldr	r3, [sp, #16]
 80053c0:	3301      	adds	r3, #1
 80053c2:	9304      	str	r3, [sp, #16]
 80053c4:	f108 0801 	add.w	r8, r8, #1
 80053c8:	2301      	movs	r3, #1
 80053ca:	9306      	str	r3, [sp, #24]
 80053cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f47f af74 	bne.w	80052bc <_dtoa_r+0x7f4>
 80053d4:	2001      	movs	r0, #1
 80053d6:	e779      	b.n	80052cc <_dtoa_r+0x804>
 80053d8:	2300      	movs	r3, #0
 80053da:	e7f6      	b.n	80053ca <_dtoa_r+0x902>
 80053dc:	9b02      	ldr	r3, [sp, #8]
 80053de:	e7f4      	b.n	80053ca <_dtoa_r+0x902>
 80053e0:	d085      	beq.n	80052ee <_dtoa_r+0x826>
 80053e2:	4618      	mov	r0, r3
 80053e4:	301c      	adds	r0, #28
 80053e6:	e77d      	b.n	80052e4 <_dtoa_r+0x81c>
 80053e8:	40240000 	.word	0x40240000
 80053ec:	9b01      	ldr	r3, [sp, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	dc38      	bgt.n	8005464 <_dtoa_r+0x99c>
 80053f2:	9b05      	ldr	r3, [sp, #20]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	dd35      	ble.n	8005464 <_dtoa_r+0x99c>
 80053f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80053fc:	f1b9 0f00 	cmp.w	r9, #0
 8005400:	d10d      	bne.n	800541e <_dtoa_r+0x956>
 8005402:	4631      	mov	r1, r6
 8005404:	464b      	mov	r3, r9
 8005406:	2205      	movs	r2, #5
 8005408:	4620      	mov	r0, r4
 800540a:	f000 f9b7 	bl	800577c <__multadd>
 800540e:	4601      	mov	r1, r0
 8005410:	4606      	mov	r6, r0
 8005412:	4658      	mov	r0, fp
 8005414:	f000 fbce 	bl	8005bb4 <__mcmp>
 8005418:	2800      	cmp	r0, #0
 800541a:	f73f adbd 	bgt.w	8004f98 <_dtoa_r+0x4d0>
 800541e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005420:	9d00      	ldr	r5, [sp, #0]
 8005422:	ea6f 0a03 	mvn.w	sl, r3
 8005426:	f04f 0800 	mov.w	r8, #0
 800542a:	4631      	mov	r1, r6
 800542c:	4620      	mov	r0, r4
 800542e:	f000 f983 	bl	8005738 <_Bfree>
 8005432:	2f00      	cmp	r7, #0
 8005434:	f43f aeb4 	beq.w	80051a0 <_dtoa_r+0x6d8>
 8005438:	f1b8 0f00 	cmp.w	r8, #0
 800543c:	d005      	beq.n	800544a <_dtoa_r+0x982>
 800543e:	45b8      	cmp	r8, r7
 8005440:	d003      	beq.n	800544a <_dtoa_r+0x982>
 8005442:	4641      	mov	r1, r8
 8005444:	4620      	mov	r0, r4
 8005446:	f000 f977 	bl	8005738 <_Bfree>
 800544a:	4639      	mov	r1, r7
 800544c:	4620      	mov	r0, r4
 800544e:	f000 f973 	bl	8005738 <_Bfree>
 8005452:	e6a5      	b.n	80051a0 <_dtoa_r+0x6d8>
 8005454:	2600      	movs	r6, #0
 8005456:	4637      	mov	r7, r6
 8005458:	e7e1      	b.n	800541e <_dtoa_r+0x956>
 800545a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800545c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005460:	4637      	mov	r7, r6
 8005462:	e599      	b.n	8004f98 <_dtoa_r+0x4d0>
 8005464:	9b08      	ldr	r3, [sp, #32]
 8005466:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80fd 	beq.w	800566a <_dtoa_r+0xba2>
 8005470:	2d00      	cmp	r5, #0
 8005472:	dd05      	ble.n	8005480 <_dtoa_r+0x9b8>
 8005474:	4639      	mov	r1, r7
 8005476:	462a      	mov	r2, r5
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fb2f 	bl	8005adc <__lshift>
 800547e:	4607      	mov	r7, r0
 8005480:	9b06      	ldr	r3, [sp, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d05c      	beq.n	8005540 <_dtoa_r+0xa78>
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4620      	mov	r0, r4
 800548a:	f000 f915 	bl	80056b8 <_Balloc>
 800548e:	4605      	mov	r5, r0
 8005490:	b928      	cbnz	r0, 800549e <_dtoa_r+0x9d6>
 8005492:	4b80      	ldr	r3, [pc, #512]	; (8005694 <_dtoa_r+0xbcc>)
 8005494:	4602      	mov	r2, r0
 8005496:	f240 21ea 	movw	r1, #746	; 0x2ea
 800549a:	f7ff bb2e 	b.w	8004afa <_dtoa_r+0x32>
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	3202      	adds	r2, #2
 80054a2:	0092      	lsls	r2, r2, #2
 80054a4:	f107 010c 	add.w	r1, r7, #12
 80054a8:	300c      	adds	r0, #12
 80054aa:	f7fe fc57 	bl	8003d5c <memcpy>
 80054ae:	2201      	movs	r2, #1
 80054b0:	4629      	mov	r1, r5
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 fb12 	bl	8005adc <__lshift>
 80054b8:	9b00      	ldr	r3, [sp, #0]
 80054ba:	3301      	adds	r3, #1
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	9b00      	ldr	r3, [sp, #0]
 80054c0:	444b      	add	r3, r9
 80054c2:	9307      	str	r3, [sp, #28]
 80054c4:	9b02      	ldr	r3, [sp, #8]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	46b8      	mov	r8, r7
 80054cc:	9306      	str	r3, [sp, #24]
 80054ce:	4607      	mov	r7, r0
 80054d0:	9b01      	ldr	r3, [sp, #4]
 80054d2:	4631      	mov	r1, r6
 80054d4:	3b01      	subs	r3, #1
 80054d6:	4658      	mov	r0, fp
 80054d8:	9302      	str	r3, [sp, #8]
 80054da:	f7ff fa69 	bl	80049b0 <quorem>
 80054de:	4603      	mov	r3, r0
 80054e0:	3330      	adds	r3, #48	; 0x30
 80054e2:	9004      	str	r0, [sp, #16]
 80054e4:	4641      	mov	r1, r8
 80054e6:	4658      	mov	r0, fp
 80054e8:	9308      	str	r3, [sp, #32]
 80054ea:	f000 fb63 	bl	8005bb4 <__mcmp>
 80054ee:	463a      	mov	r2, r7
 80054f0:	4681      	mov	r9, r0
 80054f2:	4631      	mov	r1, r6
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fb79 	bl	8005bec <__mdiff>
 80054fa:	68c2      	ldr	r2, [r0, #12]
 80054fc:	9b08      	ldr	r3, [sp, #32]
 80054fe:	4605      	mov	r5, r0
 8005500:	bb02      	cbnz	r2, 8005544 <_dtoa_r+0xa7c>
 8005502:	4601      	mov	r1, r0
 8005504:	4658      	mov	r0, fp
 8005506:	f000 fb55 	bl	8005bb4 <__mcmp>
 800550a:	9b08      	ldr	r3, [sp, #32]
 800550c:	4602      	mov	r2, r0
 800550e:	4629      	mov	r1, r5
 8005510:	4620      	mov	r0, r4
 8005512:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005516:	f000 f90f 	bl	8005738 <_Bfree>
 800551a:	9b05      	ldr	r3, [sp, #20]
 800551c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800551e:	9d01      	ldr	r5, [sp, #4]
 8005520:	ea43 0102 	orr.w	r1, r3, r2
 8005524:	9b06      	ldr	r3, [sp, #24]
 8005526:	430b      	orrs	r3, r1
 8005528:	9b08      	ldr	r3, [sp, #32]
 800552a:	d10d      	bne.n	8005548 <_dtoa_r+0xa80>
 800552c:	2b39      	cmp	r3, #57	; 0x39
 800552e:	d029      	beq.n	8005584 <_dtoa_r+0xabc>
 8005530:	f1b9 0f00 	cmp.w	r9, #0
 8005534:	dd01      	ble.n	800553a <_dtoa_r+0xa72>
 8005536:	9b04      	ldr	r3, [sp, #16]
 8005538:	3331      	adds	r3, #49	; 0x31
 800553a:	9a02      	ldr	r2, [sp, #8]
 800553c:	7013      	strb	r3, [r2, #0]
 800553e:	e774      	b.n	800542a <_dtoa_r+0x962>
 8005540:	4638      	mov	r0, r7
 8005542:	e7b9      	b.n	80054b8 <_dtoa_r+0x9f0>
 8005544:	2201      	movs	r2, #1
 8005546:	e7e2      	b.n	800550e <_dtoa_r+0xa46>
 8005548:	f1b9 0f00 	cmp.w	r9, #0
 800554c:	db06      	blt.n	800555c <_dtoa_r+0xa94>
 800554e:	9905      	ldr	r1, [sp, #20]
 8005550:	ea41 0909 	orr.w	r9, r1, r9
 8005554:	9906      	ldr	r1, [sp, #24]
 8005556:	ea59 0101 	orrs.w	r1, r9, r1
 800555a:	d120      	bne.n	800559e <_dtoa_r+0xad6>
 800555c:	2a00      	cmp	r2, #0
 800555e:	ddec      	ble.n	800553a <_dtoa_r+0xa72>
 8005560:	4659      	mov	r1, fp
 8005562:	2201      	movs	r2, #1
 8005564:	4620      	mov	r0, r4
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	f000 fab8 	bl	8005adc <__lshift>
 800556c:	4631      	mov	r1, r6
 800556e:	4683      	mov	fp, r0
 8005570:	f000 fb20 	bl	8005bb4 <__mcmp>
 8005574:	2800      	cmp	r0, #0
 8005576:	9b01      	ldr	r3, [sp, #4]
 8005578:	dc02      	bgt.n	8005580 <_dtoa_r+0xab8>
 800557a:	d1de      	bne.n	800553a <_dtoa_r+0xa72>
 800557c:	07da      	lsls	r2, r3, #31
 800557e:	d5dc      	bpl.n	800553a <_dtoa_r+0xa72>
 8005580:	2b39      	cmp	r3, #57	; 0x39
 8005582:	d1d8      	bne.n	8005536 <_dtoa_r+0xa6e>
 8005584:	9a02      	ldr	r2, [sp, #8]
 8005586:	2339      	movs	r3, #57	; 0x39
 8005588:	7013      	strb	r3, [r2, #0]
 800558a:	462b      	mov	r3, r5
 800558c:	461d      	mov	r5, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005594:	2a39      	cmp	r2, #57	; 0x39
 8005596:	d050      	beq.n	800563a <_dtoa_r+0xb72>
 8005598:	3201      	adds	r2, #1
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e745      	b.n	800542a <_dtoa_r+0x962>
 800559e:	2a00      	cmp	r2, #0
 80055a0:	dd03      	ble.n	80055aa <_dtoa_r+0xae2>
 80055a2:	2b39      	cmp	r3, #57	; 0x39
 80055a4:	d0ee      	beq.n	8005584 <_dtoa_r+0xabc>
 80055a6:	3301      	adds	r3, #1
 80055a8:	e7c7      	b.n	800553a <_dtoa_r+0xa72>
 80055aa:	9a01      	ldr	r2, [sp, #4]
 80055ac:	9907      	ldr	r1, [sp, #28]
 80055ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80055b2:	428a      	cmp	r2, r1
 80055b4:	d02a      	beq.n	800560c <_dtoa_r+0xb44>
 80055b6:	4659      	mov	r1, fp
 80055b8:	2300      	movs	r3, #0
 80055ba:	220a      	movs	r2, #10
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 f8dd 	bl	800577c <__multadd>
 80055c2:	45b8      	cmp	r8, r7
 80055c4:	4683      	mov	fp, r0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	f04f 020a 	mov.w	r2, #10
 80055ce:	4641      	mov	r1, r8
 80055d0:	4620      	mov	r0, r4
 80055d2:	d107      	bne.n	80055e4 <_dtoa_r+0xb1c>
 80055d4:	f000 f8d2 	bl	800577c <__multadd>
 80055d8:	4680      	mov	r8, r0
 80055da:	4607      	mov	r7, r0
 80055dc:	9b01      	ldr	r3, [sp, #4]
 80055de:	3301      	adds	r3, #1
 80055e0:	9301      	str	r3, [sp, #4]
 80055e2:	e775      	b.n	80054d0 <_dtoa_r+0xa08>
 80055e4:	f000 f8ca 	bl	800577c <__multadd>
 80055e8:	4639      	mov	r1, r7
 80055ea:	4680      	mov	r8, r0
 80055ec:	2300      	movs	r3, #0
 80055ee:	220a      	movs	r2, #10
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 f8c3 	bl	800577c <__multadd>
 80055f6:	4607      	mov	r7, r0
 80055f8:	e7f0      	b.n	80055dc <_dtoa_r+0xb14>
 80055fa:	f1b9 0f00 	cmp.w	r9, #0
 80055fe:	9a00      	ldr	r2, [sp, #0]
 8005600:	bfcc      	ite	gt
 8005602:	464d      	movgt	r5, r9
 8005604:	2501      	movle	r5, #1
 8005606:	4415      	add	r5, r2
 8005608:	f04f 0800 	mov.w	r8, #0
 800560c:	4659      	mov	r1, fp
 800560e:	2201      	movs	r2, #1
 8005610:	4620      	mov	r0, r4
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	f000 fa62 	bl	8005adc <__lshift>
 8005618:	4631      	mov	r1, r6
 800561a:	4683      	mov	fp, r0
 800561c:	f000 faca 	bl	8005bb4 <__mcmp>
 8005620:	2800      	cmp	r0, #0
 8005622:	dcb2      	bgt.n	800558a <_dtoa_r+0xac2>
 8005624:	d102      	bne.n	800562c <_dtoa_r+0xb64>
 8005626:	9b01      	ldr	r3, [sp, #4]
 8005628:	07db      	lsls	r3, r3, #31
 800562a:	d4ae      	bmi.n	800558a <_dtoa_r+0xac2>
 800562c:	462b      	mov	r3, r5
 800562e:	461d      	mov	r5, r3
 8005630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005634:	2a30      	cmp	r2, #48	; 0x30
 8005636:	d0fa      	beq.n	800562e <_dtoa_r+0xb66>
 8005638:	e6f7      	b.n	800542a <_dtoa_r+0x962>
 800563a:	9a00      	ldr	r2, [sp, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d1a5      	bne.n	800558c <_dtoa_r+0xac4>
 8005640:	f10a 0a01 	add.w	sl, sl, #1
 8005644:	2331      	movs	r3, #49	; 0x31
 8005646:	e779      	b.n	800553c <_dtoa_r+0xa74>
 8005648:	4b13      	ldr	r3, [pc, #76]	; (8005698 <_dtoa_r+0xbd0>)
 800564a:	f7ff baaf 	b.w	8004bac <_dtoa_r+0xe4>
 800564e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005650:	2b00      	cmp	r3, #0
 8005652:	f47f aa86 	bne.w	8004b62 <_dtoa_r+0x9a>
 8005656:	4b11      	ldr	r3, [pc, #68]	; (800569c <_dtoa_r+0xbd4>)
 8005658:	f7ff baa8 	b.w	8004bac <_dtoa_r+0xe4>
 800565c:	f1b9 0f00 	cmp.w	r9, #0
 8005660:	dc03      	bgt.n	800566a <_dtoa_r+0xba2>
 8005662:	9b05      	ldr	r3, [sp, #20]
 8005664:	2b02      	cmp	r3, #2
 8005666:	f73f aec9 	bgt.w	80053fc <_dtoa_r+0x934>
 800566a:	9d00      	ldr	r5, [sp, #0]
 800566c:	4631      	mov	r1, r6
 800566e:	4658      	mov	r0, fp
 8005670:	f7ff f99e 	bl	80049b0 <quorem>
 8005674:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005678:	f805 3b01 	strb.w	r3, [r5], #1
 800567c:	9a00      	ldr	r2, [sp, #0]
 800567e:	1aaa      	subs	r2, r5, r2
 8005680:	4591      	cmp	r9, r2
 8005682:	ddba      	ble.n	80055fa <_dtoa_r+0xb32>
 8005684:	4659      	mov	r1, fp
 8005686:	2300      	movs	r3, #0
 8005688:	220a      	movs	r2, #10
 800568a:	4620      	mov	r0, r4
 800568c:	f000 f876 	bl	800577c <__multadd>
 8005690:	4683      	mov	fp, r0
 8005692:	e7eb      	b.n	800566c <_dtoa_r+0xba4>
 8005694:	0800767f 	.word	0x0800767f
 8005698:	080075d8 	.word	0x080075d8
 800569c:	080075fc 	.word	0x080075fc

080056a0 <_localeconv_r>:
 80056a0:	4800      	ldr	r0, [pc, #0]	; (80056a4 <_localeconv_r+0x4>)
 80056a2:	4770      	bx	lr
 80056a4:	20000160 	.word	0x20000160

080056a8 <malloc>:
 80056a8:	4b02      	ldr	r3, [pc, #8]	; (80056b4 <malloc+0xc>)
 80056aa:	4601      	mov	r1, r0
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	f000 bbe1 	b.w	8005e74 <_malloc_r>
 80056b2:	bf00      	nop
 80056b4:	2000000c 	.word	0x2000000c

080056b8 <_Balloc>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056bc:	4604      	mov	r4, r0
 80056be:	460d      	mov	r5, r1
 80056c0:	b976      	cbnz	r6, 80056e0 <_Balloc+0x28>
 80056c2:	2010      	movs	r0, #16
 80056c4:	f7ff fff0 	bl	80056a8 <malloc>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6260      	str	r0, [r4, #36]	; 0x24
 80056cc:	b920      	cbnz	r0, 80056d8 <_Balloc+0x20>
 80056ce:	4b18      	ldr	r3, [pc, #96]	; (8005730 <_Balloc+0x78>)
 80056d0:	4818      	ldr	r0, [pc, #96]	; (8005734 <_Balloc+0x7c>)
 80056d2:	2166      	movs	r1, #102	; 0x66
 80056d4:	f000 fd94 	bl	8006200 <__assert_func>
 80056d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056dc:	6006      	str	r6, [r0, #0]
 80056de:	60c6      	str	r6, [r0, #12]
 80056e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056e2:	68f3      	ldr	r3, [r6, #12]
 80056e4:	b183      	cbz	r3, 8005708 <_Balloc+0x50>
 80056e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056ee:	b9b8      	cbnz	r0, 8005720 <_Balloc+0x68>
 80056f0:	2101      	movs	r1, #1
 80056f2:	fa01 f605 	lsl.w	r6, r1, r5
 80056f6:	1d72      	adds	r2, r6, #5
 80056f8:	0092      	lsls	r2, r2, #2
 80056fa:	4620      	mov	r0, r4
 80056fc:	f000 fb5a 	bl	8005db4 <_calloc_r>
 8005700:	b160      	cbz	r0, 800571c <_Balloc+0x64>
 8005702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005706:	e00e      	b.n	8005726 <_Balloc+0x6e>
 8005708:	2221      	movs	r2, #33	; 0x21
 800570a:	2104      	movs	r1, #4
 800570c:	4620      	mov	r0, r4
 800570e:	f000 fb51 	bl	8005db4 <_calloc_r>
 8005712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005714:	60f0      	str	r0, [r6, #12]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e4      	bne.n	80056e6 <_Balloc+0x2e>
 800571c:	2000      	movs	r0, #0
 800571e:	bd70      	pop	{r4, r5, r6, pc}
 8005720:	6802      	ldr	r2, [r0, #0]
 8005722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005726:	2300      	movs	r3, #0
 8005728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800572c:	e7f7      	b.n	800571e <_Balloc+0x66>
 800572e:	bf00      	nop
 8005730:	08007609 	.word	0x08007609
 8005734:	08007690 	.word	0x08007690

08005738 <_Bfree>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800573c:	4605      	mov	r5, r0
 800573e:	460c      	mov	r4, r1
 8005740:	b976      	cbnz	r6, 8005760 <_Bfree+0x28>
 8005742:	2010      	movs	r0, #16
 8005744:	f7ff ffb0 	bl	80056a8 <malloc>
 8005748:	4602      	mov	r2, r0
 800574a:	6268      	str	r0, [r5, #36]	; 0x24
 800574c:	b920      	cbnz	r0, 8005758 <_Bfree+0x20>
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <_Bfree+0x3c>)
 8005750:	4809      	ldr	r0, [pc, #36]	; (8005778 <_Bfree+0x40>)
 8005752:	218a      	movs	r1, #138	; 0x8a
 8005754:	f000 fd54 	bl	8006200 <__assert_func>
 8005758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800575c:	6006      	str	r6, [r0, #0]
 800575e:	60c6      	str	r6, [r0, #12]
 8005760:	b13c      	cbz	r4, 8005772 <_Bfree+0x3a>
 8005762:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005764:	6862      	ldr	r2, [r4, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800576c:	6021      	str	r1, [r4, #0]
 800576e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	08007609 	.word	0x08007609
 8005778:	08007690 	.word	0x08007690

0800577c <__multadd>:
 800577c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005780:	690e      	ldr	r6, [r1, #16]
 8005782:	4607      	mov	r7, r0
 8005784:	4698      	mov	r8, r3
 8005786:	460c      	mov	r4, r1
 8005788:	f101 0014 	add.w	r0, r1, #20
 800578c:	2300      	movs	r3, #0
 800578e:	6805      	ldr	r5, [r0, #0]
 8005790:	b2a9      	uxth	r1, r5
 8005792:	fb02 8101 	mla	r1, r2, r1, r8
 8005796:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800579a:	0c2d      	lsrs	r5, r5, #16
 800579c:	fb02 c505 	mla	r5, r2, r5, ip
 80057a0:	b289      	uxth	r1, r1
 80057a2:	3301      	adds	r3, #1
 80057a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80057a8:	429e      	cmp	r6, r3
 80057aa:	f840 1b04 	str.w	r1, [r0], #4
 80057ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80057b2:	dcec      	bgt.n	800578e <__multadd+0x12>
 80057b4:	f1b8 0f00 	cmp.w	r8, #0
 80057b8:	d022      	beq.n	8005800 <__multadd+0x84>
 80057ba:	68a3      	ldr	r3, [r4, #8]
 80057bc:	42b3      	cmp	r3, r6
 80057be:	dc19      	bgt.n	80057f4 <__multadd+0x78>
 80057c0:	6861      	ldr	r1, [r4, #4]
 80057c2:	4638      	mov	r0, r7
 80057c4:	3101      	adds	r1, #1
 80057c6:	f7ff ff77 	bl	80056b8 <_Balloc>
 80057ca:	4605      	mov	r5, r0
 80057cc:	b928      	cbnz	r0, 80057da <__multadd+0x5e>
 80057ce:	4602      	mov	r2, r0
 80057d0:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <__multadd+0x8c>)
 80057d2:	480e      	ldr	r0, [pc, #56]	; (800580c <__multadd+0x90>)
 80057d4:	21b5      	movs	r1, #181	; 0xb5
 80057d6:	f000 fd13 	bl	8006200 <__assert_func>
 80057da:	6922      	ldr	r2, [r4, #16]
 80057dc:	3202      	adds	r2, #2
 80057de:	f104 010c 	add.w	r1, r4, #12
 80057e2:	0092      	lsls	r2, r2, #2
 80057e4:	300c      	adds	r0, #12
 80057e6:	f7fe fab9 	bl	8003d5c <memcpy>
 80057ea:	4621      	mov	r1, r4
 80057ec:	4638      	mov	r0, r7
 80057ee:	f7ff ffa3 	bl	8005738 <_Bfree>
 80057f2:	462c      	mov	r4, r5
 80057f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80057f8:	3601      	adds	r6, #1
 80057fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80057fe:	6126      	str	r6, [r4, #16]
 8005800:	4620      	mov	r0, r4
 8005802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005806:	bf00      	nop
 8005808:	0800767f 	.word	0x0800767f
 800580c:	08007690 	.word	0x08007690

08005810 <__hi0bits>:
 8005810:	0c03      	lsrs	r3, r0, #16
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	b9d3      	cbnz	r3, 800584c <__hi0bits+0x3c>
 8005816:	0400      	lsls	r0, r0, #16
 8005818:	2310      	movs	r3, #16
 800581a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800581e:	bf04      	itt	eq
 8005820:	0200      	lsleq	r0, r0, #8
 8005822:	3308      	addeq	r3, #8
 8005824:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005828:	bf04      	itt	eq
 800582a:	0100      	lsleq	r0, r0, #4
 800582c:	3304      	addeq	r3, #4
 800582e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005832:	bf04      	itt	eq
 8005834:	0080      	lsleq	r0, r0, #2
 8005836:	3302      	addeq	r3, #2
 8005838:	2800      	cmp	r0, #0
 800583a:	db05      	blt.n	8005848 <__hi0bits+0x38>
 800583c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005840:	f103 0301 	add.w	r3, r3, #1
 8005844:	bf08      	it	eq
 8005846:	2320      	moveq	r3, #32
 8005848:	4618      	mov	r0, r3
 800584a:	4770      	bx	lr
 800584c:	2300      	movs	r3, #0
 800584e:	e7e4      	b.n	800581a <__hi0bits+0xa>

08005850 <__lo0bits>:
 8005850:	6803      	ldr	r3, [r0, #0]
 8005852:	f013 0207 	ands.w	r2, r3, #7
 8005856:	4601      	mov	r1, r0
 8005858:	d00b      	beq.n	8005872 <__lo0bits+0x22>
 800585a:	07da      	lsls	r2, r3, #31
 800585c:	d424      	bmi.n	80058a8 <__lo0bits+0x58>
 800585e:	0798      	lsls	r0, r3, #30
 8005860:	bf49      	itett	mi
 8005862:	085b      	lsrmi	r3, r3, #1
 8005864:	089b      	lsrpl	r3, r3, #2
 8005866:	2001      	movmi	r0, #1
 8005868:	600b      	strmi	r3, [r1, #0]
 800586a:	bf5c      	itt	pl
 800586c:	600b      	strpl	r3, [r1, #0]
 800586e:	2002      	movpl	r0, #2
 8005870:	4770      	bx	lr
 8005872:	b298      	uxth	r0, r3
 8005874:	b9b0      	cbnz	r0, 80058a4 <__lo0bits+0x54>
 8005876:	0c1b      	lsrs	r3, r3, #16
 8005878:	2010      	movs	r0, #16
 800587a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800587e:	bf04      	itt	eq
 8005880:	0a1b      	lsreq	r3, r3, #8
 8005882:	3008      	addeq	r0, #8
 8005884:	071a      	lsls	r2, r3, #28
 8005886:	bf04      	itt	eq
 8005888:	091b      	lsreq	r3, r3, #4
 800588a:	3004      	addeq	r0, #4
 800588c:	079a      	lsls	r2, r3, #30
 800588e:	bf04      	itt	eq
 8005890:	089b      	lsreq	r3, r3, #2
 8005892:	3002      	addeq	r0, #2
 8005894:	07da      	lsls	r2, r3, #31
 8005896:	d403      	bmi.n	80058a0 <__lo0bits+0x50>
 8005898:	085b      	lsrs	r3, r3, #1
 800589a:	f100 0001 	add.w	r0, r0, #1
 800589e:	d005      	beq.n	80058ac <__lo0bits+0x5c>
 80058a0:	600b      	str	r3, [r1, #0]
 80058a2:	4770      	bx	lr
 80058a4:	4610      	mov	r0, r2
 80058a6:	e7e8      	b.n	800587a <__lo0bits+0x2a>
 80058a8:	2000      	movs	r0, #0
 80058aa:	4770      	bx	lr
 80058ac:	2020      	movs	r0, #32
 80058ae:	4770      	bx	lr

080058b0 <__i2b>:
 80058b0:	b510      	push	{r4, lr}
 80058b2:	460c      	mov	r4, r1
 80058b4:	2101      	movs	r1, #1
 80058b6:	f7ff feff 	bl	80056b8 <_Balloc>
 80058ba:	4602      	mov	r2, r0
 80058bc:	b928      	cbnz	r0, 80058ca <__i2b+0x1a>
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <__i2b+0x24>)
 80058c0:	4805      	ldr	r0, [pc, #20]	; (80058d8 <__i2b+0x28>)
 80058c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058c6:	f000 fc9b 	bl	8006200 <__assert_func>
 80058ca:	2301      	movs	r3, #1
 80058cc:	6144      	str	r4, [r0, #20]
 80058ce:	6103      	str	r3, [r0, #16]
 80058d0:	bd10      	pop	{r4, pc}
 80058d2:	bf00      	nop
 80058d4:	0800767f 	.word	0x0800767f
 80058d8:	08007690 	.word	0x08007690

080058dc <__multiply>:
 80058dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e0:	4614      	mov	r4, r2
 80058e2:	690a      	ldr	r2, [r1, #16]
 80058e4:	6923      	ldr	r3, [r4, #16]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	bfb8      	it	lt
 80058ea:	460b      	movlt	r3, r1
 80058ec:	460d      	mov	r5, r1
 80058ee:	bfbc      	itt	lt
 80058f0:	4625      	movlt	r5, r4
 80058f2:	461c      	movlt	r4, r3
 80058f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80058f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80058fc:	68ab      	ldr	r3, [r5, #8]
 80058fe:	6869      	ldr	r1, [r5, #4]
 8005900:	eb0a 0709 	add.w	r7, sl, r9
 8005904:	42bb      	cmp	r3, r7
 8005906:	b085      	sub	sp, #20
 8005908:	bfb8      	it	lt
 800590a:	3101      	addlt	r1, #1
 800590c:	f7ff fed4 	bl	80056b8 <_Balloc>
 8005910:	b930      	cbnz	r0, 8005920 <__multiply+0x44>
 8005912:	4602      	mov	r2, r0
 8005914:	4b42      	ldr	r3, [pc, #264]	; (8005a20 <__multiply+0x144>)
 8005916:	4843      	ldr	r0, [pc, #268]	; (8005a24 <__multiply+0x148>)
 8005918:	f240 115d 	movw	r1, #349	; 0x15d
 800591c:	f000 fc70 	bl	8006200 <__assert_func>
 8005920:	f100 0614 	add.w	r6, r0, #20
 8005924:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005928:	4633      	mov	r3, r6
 800592a:	2200      	movs	r2, #0
 800592c:	4543      	cmp	r3, r8
 800592e:	d31e      	bcc.n	800596e <__multiply+0x92>
 8005930:	f105 0c14 	add.w	ip, r5, #20
 8005934:	f104 0314 	add.w	r3, r4, #20
 8005938:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800593c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005940:	9202      	str	r2, [sp, #8]
 8005942:	ebac 0205 	sub.w	r2, ip, r5
 8005946:	3a15      	subs	r2, #21
 8005948:	f022 0203 	bic.w	r2, r2, #3
 800594c:	3204      	adds	r2, #4
 800594e:	f105 0115 	add.w	r1, r5, #21
 8005952:	458c      	cmp	ip, r1
 8005954:	bf38      	it	cc
 8005956:	2204      	movcc	r2, #4
 8005958:	9201      	str	r2, [sp, #4]
 800595a:	9a02      	ldr	r2, [sp, #8]
 800595c:	9303      	str	r3, [sp, #12]
 800595e:	429a      	cmp	r2, r3
 8005960:	d808      	bhi.n	8005974 <__multiply+0x98>
 8005962:	2f00      	cmp	r7, #0
 8005964:	dc55      	bgt.n	8005a12 <__multiply+0x136>
 8005966:	6107      	str	r7, [r0, #16]
 8005968:	b005      	add	sp, #20
 800596a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596e:	f843 2b04 	str.w	r2, [r3], #4
 8005972:	e7db      	b.n	800592c <__multiply+0x50>
 8005974:	f8b3 a000 	ldrh.w	sl, [r3]
 8005978:	f1ba 0f00 	cmp.w	sl, #0
 800597c:	d020      	beq.n	80059c0 <__multiply+0xe4>
 800597e:	f105 0e14 	add.w	lr, r5, #20
 8005982:	46b1      	mov	r9, r6
 8005984:	2200      	movs	r2, #0
 8005986:	f85e 4b04 	ldr.w	r4, [lr], #4
 800598a:	f8d9 b000 	ldr.w	fp, [r9]
 800598e:	b2a1      	uxth	r1, r4
 8005990:	fa1f fb8b 	uxth.w	fp, fp
 8005994:	fb0a b101 	mla	r1, sl, r1, fp
 8005998:	4411      	add	r1, r2
 800599a:	f8d9 2000 	ldr.w	r2, [r9]
 800599e:	0c24      	lsrs	r4, r4, #16
 80059a0:	0c12      	lsrs	r2, r2, #16
 80059a2:	fb0a 2404 	mla	r4, sl, r4, r2
 80059a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80059aa:	b289      	uxth	r1, r1
 80059ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80059b0:	45f4      	cmp	ip, lr
 80059b2:	f849 1b04 	str.w	r1, [r9], #4
 80059b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80059ba:	d8e4      	bhi.n	8005986 <__multiply+0xaa>
 80059bc:	9901      	ldr	r1, [sp, #4]
 80059be:	5072      	str	r2, [r6, r1]
 80059c0:	9a03      	ldr	r2, [sp, #12]
 80059c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059c6:	3304      	adds	r3, #4
 80059c8:	f1b9 0f00 	cmp.w	r9, #0
 80059cc:	d01f      	beq.n	8005a0e <__multiply+0x132>
 80059ce:	6834      	ldr	r4, [r6, #0]
 80059d0:	f105 0114 	add.w	r1, r5, #20
 80059d4:	46b6      	mov	lr, r6
 80059d6:	f04f 0a00 	mov.w	sl, #0
 80059da:	880a      	ldrh	r2, [r1, #0]
 80059dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80059e0:	fb09 b202 	mla	r2, r9, r2, fp
 80059e4:	4492      	add	sl, r2
 80059e6:	b2a4      	uxth	r4, r4
 80059e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80059ec:	f84e 4b04 	str.w	r4, [lr], #4
 80059f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80059f4:	f8be 2000 	ldrh.w	r2, [lr]
 80059f8:	0c24      	lsrs	r4, r4, #16
 80059fa:	fb09 2404 	mla	r4, r9, r4, r2
 80059fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005a02:	458c      	cmp	ip, r1
 8005a04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005a08:	d8e7      	bhi.n	80059da <__multiply+0xfe>
 8005a0a:	9a01      	ldr	r2, [sp, #4]
 8005a0c:	50b4      	str	r4, [r6, r2]
 8005a0e:	3604      	adds	r6, #4
 8005a10:	e7a3      	b.n	800595a <__multiply+0x7e>
 8005a12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1a5      	bne.n	8005966 <__multiply+0x8a>
 8005a1a:	3f01      	subs	r7, #1
 8005a1c:	e7a1      	b.n	8005962 <__multiply+0x86>
 8005a1e:	bf00      	nop
 8005a20:	0800767f 	.word	0x0800767f
 8005a24:	08007690 	.word	0x08007690

08005a28 <__pow5mult>:
 8005a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a2c:	4615      	mov	r5, r2
 8005a2e:	f012 0203 	ands.w	r2, r2, #3
 8005a32:	4606      	mov	r6, r0
 8005a34:	460f      	mov	r7, r1
 8005a36:	d007      	beq.n	8005a48 <__pow5mult+0x20>
 8005a38:	4c25      	ldr	r4, [pc, #148]	; (8005ad0 <__pow5mult+0xa8>)
 8005a3a:	3a01      	subs	r2, #1
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a42:	f7ff fe9b 	bl	800577c <__multadd>
 8005a46:	4607      	mov	r7, r0
 8005a48:	10ad      	asrs	r5, r5, #2
 8005a4a:	d03d      	beq.n	8005ac8 <__pow5mult+0xa0>
 8005a4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a4e:	b97c      	cbnz	r4, 8005a70 <__pow5mult+0x48>
 8005a50:	2010      	movs	r0, #16
 8005a52:	f7ff fe29 	bl	80056a8 <malloc>
 8005a56:	4602      	mov	r2, r0
 8005a58:	6270      	str	r0, [r6, #36]	; 0x24
 8005a5a:	b928      	cbnz	r0, 8005a68 <__pow5mult+0x40>
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <__pow5mult+0xac>)
 8005a5e:	481e      	ldr	r0, [pc, #120]	; (8005ad8 <__pow5mult+0xb0>)
 8005a60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a64:	f000 fbcc 	bl	8006200 <__assert_func>
 8005a68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a6c:	6004      	str	r4, [r0, #0]
 8005a6e:	60c4      	str	r4, [r0, #12]
 8005a70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a78:	b94c      	cbnz	r4, 8005a8e <__pow5mult+0x66>
 8005a7a:	f240 2171 	movw	r1, #625	; 0x271
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7ff ff16 	bl	80058b0 <__i2b>
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	6003      	str	r3, [r0, #0]
 8005a8e:	f04f 0900 	mov.w	r9, #0
 8005a92:	07eb      	lsls	r3, r5, #31
 8005a94:	d50a      	bpl.n	8005aac <__pow5mult+0x84>
 8005a96:	4639      	mov	r1, r7
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	f7ff ff1e 	bl	80058dc <__multiply>
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	4680      	mov	r8, r0
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f7ff fe47 	bl	8005738 <_Bfree>
 8005aaa:	4647      	mov	r7, r8
 8005aac:	106d      	asrs	r5, r5, #1
 8005aae:	d00b      	beq.n	8005ac8 <__pow5mult+0xa0>
 8005ab0:	6820      	ldr	r0, [r4, #0]
 8005ab2:	b938      	cbnz	r0, 8005ac4 <__pow5mult+0x9c>
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f7ff ff0f 	bl	80058dc <__multiply>
 8005abe:	6020      	str	r0, [r4, #0]
 8005ac0:	f8c0 9000 	str.w	r9, [r0]
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	e7e4      	b.n	8005a92 <__pow5mult+0x6a>
 8005ac8:	4638      	mov	r0, r7
 8005aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ace:	bf00      	nop
 8005ad0:	080077e0 	.word	0x080077e0
 8005ad4:	08007609 	.word	0x08007609
 8005ad8:	08007690 	.word	0x08007690

08005adc <__lshift>:
 8005adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	6849      	ldr	r1, [r1, #4]
 8005ae4:	6923      	ldr	r3, [r4, #16]
 8005ae6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005aea:	68a3      	ldr	r3, [r4, #8]
 8005aec:	4607      	mov	r7, r0
 8005aee:	4691      	mov	r9, r2
 8005af0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005af4:	f108 0601 	add.w	r6, r8, #1
 8005af8:	42b3      	cmp	r3, r6
 8005afa:	db0b      	blt.n	8005b14 <__lshift+0x38>
 8005afc:	4638      	mov	r0, r7
 8005afe:	f7ff fddb 	bl	80056b8 <_Balloc>
 8005b02:	4605      	mov	r5, r0
 8005b04:	b948      	cbnz	r0, 8005b1a <__lshift+0x3e>
 8005b06:	4602      	mov	r2, r0
 8005b08:	4b28      	ldr	r3, [pc, #160]	; (8005bac <__lshift+0xd0>)
 8005b0a:	4829      	ldr	r0, [pc, #164]	; (8005bb0 <__lshift+0xd4>)
 8005b0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b10:	f000 fb76 	bl	8006200 <__assert_func>
 8005b14:	3101      	adds	r1, #1
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	e7ee      	b.n	8005af8 <__lshift+0x1c>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f100 0114 	add.w	r1, r0, #20
 8005b20:	f100 0210 	add.w	r2, r0, #16
 8005b24:	4618      	mov	r0, r3
 8005b26:	4553      	cmp	r3, sl
 8005b28:	db33      	blt.n	8005b92 <__lshift+0xb6>
 8005b2a:	6920      	ldr	r0, [r4, #16]
 8005b2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b30:	f104 0314 	add.w	r3, r4, #20
 8005b34:	f019 091f 	ands.w	r9, r9, #31
 8005b38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b40:	d02b      	beq.n	8005b9a <__lshift+0xbe>
 8005b42:	f1c9 0e20 	rsb	lr, r9, #32
 8005b46:	468a      	mov	sl, r1
 8005b48:	2200      	movs	r2, #0
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	fa00 f009 	lsl.w	r0, r0, r9
 8005b50:	4302      	orrs	r2, r0
 8005b52:	f84a 2b04 	str.w	r2, [sl], #4
 8005b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b5a:	459c      	cmp	ip, r3
 8005b5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b60:	d8f3      	bhi.n	8005b4a <__lshift+0x6e>
 8005b62:	ebac 0304 	sub.w	r3, ip, r4
 8005b66:	3b15      	subs	r3, #21
 8005b68:	f023 0303 	bic.w	r3, r3, #3
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	f104 0015 	add.w	r0, r4, #21
 8005b72:	4584      	cmp	ip, r0
 8005b74:	bf38      	it	cc
 8005b76:	2304      	movcc	r3, #4
 8005b78:	50ca      	str	r2, [r1, r3]
 8005b7a:	b10a      	cbz	r2, 8005b80 <__lshift+0xa4>
 8005b7c:	f108 0602 	add.w	r6, r8, #2
 8005b80:	3e01      	subs	r6, #1
 8005b82:	4638      	mov	r0, r7
 8005b84:	612e      	str	r6, [r5, #16]
 8005b86:	4621      	mov	r1, r4
 8005b88:	f7ff fdd6 	bl	8005738 <_Bfree>
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b92:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b96:	3301      	adds	r3, #1
 8005b98:	e7c5      	b.n	8005b26 <__lshift+0x4a>
 8005b9a:	3904      	subs	r1, #4
 8005b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ba4:	459c      	cmp	ip, r3
 8005ba6:	d8f9      	bhi.n	8005b9c <__lshift+0xc0>
 8005ba8:	e7ea      	b.n	8005b80 <__lshift+0xa4>
 8005baa:	bf00      	nop
 8005bac:	0800767f 	.word	0x0800767f
 8005bb0:	08007690 	.word	0x08007690

08005bb4 <__mcmp>:
 8005bb4:	b530      	push	{r4, r5, lr}
 8005bb6:	6902      	ldr	r2, [r0, #16]
 8005bb8:	690c      	ldr	r4, [r1, #16]
 8005bba:	1b12      	subs	r2, r2, r4
 8005bbc:	d10e      	bne.n	8005bdc <__mcmp+0x28>
 8005bbe:	f100 0314 	add.w	r3, r0, #20
 8005bc2:	3114      	adds	r1, #20
 8005bc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005bc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005bcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005bd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005bd4:	42a5      	cmp	r5, r4
 8005bd6:	d003      	beq.n	8005be0 <__mcmp+0x2c>
 8005bd8:	d305      	bcc.n	8005be6 <__mcmp+0x32>
 8005bda:	2201      	movs	r2, #1
 8005bdc:	4610      	mov	r0, r2
 8005bde:	bd30      	pop	{r4, r5, pc}
 8005be0:	4283      	cmp	r3, r0
 8005be2:	d3f3      	bcc.n	8005bcc <__mcmp+0x18>
 8005be4:	e7fa      	b.n	8005bdc <__mcmp+0x28>
 8005be6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bea:	e7f7      	b.n	8005bdc <__mcmp+0x28>

08005bec <__mdiff>:
 8005bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4617      	mov	r7, r2
 8005bfa:	f7ff ffdb 	bl	8005bb4 <__mcmp>
 8005bfe:	1e05      	subs	r5, r0, #0
 8005c00:	d110      	bne.n	8005c24 <__mdiff+0x38>
 8005c02:	4629      	mov	r1, r5
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff fd57 	bl	80056b8 <_Balloc>
 8005c0a:	b930      	cbnz	r0, 8005c1a <__mdiff+0x2e>
 8005c0c:	4b39      	ldr	r3, [pc, #228]	; (8005cf4 <__mdiff+0x108>)
 8005c0e:	4602      	mov	r2, r0
 8005c10:	f240 2132 	movw	r1, #562	; 0x232
 8005c14:	4838      	ldr	r0, [pc, #224]	; (8005cf8 <__mdiff+0x10c>)
 8005c16:	f000 faf3 	bl	8006200 <__assert_func>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c24:	bfa4      	itt	ge
 8005c26:	463b      	movge	r3, r7
 8005c28:	4627      	movge	r7, r4
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	bfa6      	itte	ge
 8005c30:	461c      	movge	r4, r3
 8005c32:	2500      	movge	r5, #0
 8005c34:	2501      	movlt	r5, #1
 8005c36:	f7ff fd3f 	bl	80056b8 <_Balloc>
 8005c3a:	b920      	cbnz	r0, 8005c46 <__mdiff+0x5a>
 8005c3c:	4b2d      	ldr	r3, [pc, #180]	; (8005cf4 <__mdiff+0x108>)
 8005c3e:	4602      	mov	r2, r0
 8005c40:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c44:	e7e6      	b.n	8005c14 <__mdiff+0x28>
 8005c46:	693e      	ldr	r6, [r7, #16]
 8005c48:	60c5      	str	r5, [r0, #12]
 8005c4a:	6925      	ldr	r5, [r4, #16]
 8005c4c:	f107 0114 	add.w	r1, r7, #20
 8005c50:	f104 0914 	add.w	r9, r4, #20
 8005c54:	f100 0e14 	add.w	lr, r0, #20
 8005c58:	f107 0210 	add.w	r2, r7, #16
 8005c5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005c60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005c64:	46f2      	mov	sl, lr
 8005c66:	2700      	movs	r7, #0
 8005c68:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005c70:	fa1f f883 	uxth.w	r8, r3
 8005c74:	fa17 f78b 	uxtah	r7, r7, fp
 8005c78:	0c1b      	lsrs	r3, r3, #16
 8005c7a:	eba7 0808 	sub.w	r8, r7, r8
 8005c7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005c86:	fa1f f888 	uxth.w	r8, r8
 8005c8a:	141f      	asrs	r7, r3, #16
 8005c8c:	454d      	cmp	r5, r9
 8005c8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005c92:	f84a 3b04 	str.w	r3, [sl], #4
 8005c96:	d8e7      	bhi.n	8005c68 <__mdiff+0x7c>
 8005c98:	1b2b      	subs	r3, r5, r4
 8005c9a:	3b15      	subs	r3, #21
 8005c9c:	f023 0303 	bic.w	r3, r3, #3
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	3415      	adds	r4, #21
 8005ca4:	42a5      	cmp	r5, r4
 8005ca6:	bf38      	it	cc
 8005ca8:	2304      	movcc	r3, #4
 8005caa:	4419      	add	r1, r3
 8005cac:	4473      	add	r3, lr
 8005cae:	469e      	mov	lr, r3
 8005cb0:	460d      	mov	r5, r1
 8005cb2:	4565      	cmp	r5, ip
 8005cb4:	d30e      	bcc.n	8005cd4 <__mdiff+0xe8>
 8005cb6:	f10c 0203 	add.w	r2, ip, #3
 8005cba:	1a52      	subs	r2, r2, r1
 8005cbc:	f022 0203 	bic.w	r2, r2, #3
 8005cc0:	3903      	subs	r1, #3
 8005cc2:	458c      	cmp	ip, r1
 8005cc4:	bf38      	it	cc
 8005cc6:	2200      	movcc	r2, #0
 8005cc8:	441a      	add	r2, r3
 8005cca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005cce:	b17b      	cbz	r3, 8005cf0 <__mdiff+0x104>
 8005cd0:	6106      	str	r6, [r0, #16]
 8005cd2:	e7a5      	b.n	8005c20 <__mdiff+0x34>
 8005cd4:	f855 8b04 	ldr.w	r8, [r5], #4
 8005cd8:	fa17 f488 	uxtah	r4, r7, r8
 8005cdc:	1422      	asrs	r2, r4, #16
 8005cde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005ce2:	b2a4      	uxth	r4, r4
 8005ce4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005ce8:	f84e 4b04 	str.w	r4, [lr], #4
 8005cec:	1417      	asrs	r7, r2, #16
 8005cee:	e7e0      	b.n	8005cb2 <__mdiff+0xc6>
 8005cf0:	3e01      	subs	r6, #1
 8005cf2:	e7ea      	b.n	8005cca <__mdiff+0xde>
 8005cf4:	0800767f 	.word	0x0800767f
 8005cf8:	08007690 	.word	0x08007690

08005cfc <__d2b>:
 8005cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d00:	4689      	mov	r9, r1
 8005d02:	2101      	movs	r1, #1
 8005d04:	ec57 6b10 	vmov	r6, r7, d0
 8005d08:	4690      	mov	r8, r2
 8005d0a:	f7ff fcd5 	bl	80056b8 <_Balloc>
 8005d0e:	4604      	mov	r4, r0
 8005d10:	b930      	cbnz	r0, 8005d20 <__d2b+0x24>
 8005d12:	4602      	mov	r2, r0
 8005d14:	4b25      	ldr	r3, [pc, #148]	; (8005dac <__d2b+0xb0>)
 8005d16:	4826      	ldr	r0, [pc, #152]	; (8005db0 <__d2b+0xb4>)
 8005d18:	f240 310a 	movw	r1, #778	; 0x30a
 8005d1c:	f000 fa70 	bl	8006200 <__assert_func>
 8005d20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005d24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d28:	bb35      	cbnz	r5, 8005d78 <__d2b+0x7c>
 8005d2a:	2e00      	cmp	r6, #0
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	d028      	beq.n	8005d82 <__d2b+0x86>
 8005d30:	4668      	mov	r0, sp
 8005d32:	9600      	str	r6, [sp, #0]
 8005d34:	f7ff fd8c 	bl	8005850 <__lo0bits>
 8005d38:	9900      	ldr	r1, [sp, #0]
 8005d3a:	b300      	cbz	r0, 8005d7e <__d2b+0x82>
 8005d3c:	9a01      	ldr	r2, [sp, #4]
 8005d3e:	f1c0 0320 	rsb	r3, r0, #32
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	430b      	orrs	r3, r1
 8005d48:	40c2      	lsrs	r2, r0
 8005d4a:	6163      	str	r3, [r4, #20]
 8005d4c:	9201      	str	r2, [sp, #4]
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	61a3      	str	r3, [r4, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bf14      	ite	ne
 8005d56:	2202      	movne	r2, #2
 8005d58:	2201      	moveq	r2, #1
 8005d5a:	6122      	str	r2, [r4, #16]
 8005d5c:	b1d5      	cbz	r5, 8005d94 <__d2b+0x98>
 8005d5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d62:	4405      	add	r5, r0
 8005d64:	f8c9 5000 	str.w	r5, [r9]
 8005d68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d6c:	f8c8 0000 	str.w	r0, [r8]
 8005d70:	4620      	mov	r0, r4
 8005d72:	b003      	add	sp, #12
 8005d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d7c:	e7d5      	b.n	8005d2a <__d2b+0x2e>
 8005d7e:	6161      	str	r1, [r4, #20]
 8005d80:	e7e5      	b.n	8005d4e <__d2b+0x52>
 8005d82:	a801      	add	r0, sp, #4
 8005d84:	f7ff fd64 	bl	8005850 <__lo0bits>
 8005d88:	9b01      	ldr	r3, [sp, #4]
 8005d8a:	6163      	str	r3, [r4, #20]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	6122      	str	r2, [r4, #16]
 8005d90:	3020      	adds	r0, #32
 8005d92:	e7e3      	b.n	8005d5c <__d2b+0x60>
 8005d94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d9c:	f8c9 0000 	str.w	r0, [r9]
 8005da0:	6918      	ldr	r0, [r3, #16]
 8005da2:	f7ff fd35 	bl	8005810 <__hi0bits>
 8005da6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005daa:	e7df      	b.n	8005d6c <__d2b+0x70>
 8005dac:	0800767f 	.word	0x0800767f
 8005db0:	08007690 	.word	0x08007690

08005db4 <_calloc_r>:
 8005db4:	b513      	push	{r0, r1, r4, lr}
 8005db6:	434a      	muls	r2, r1
 8005db8:	4611      	mov	r1, r2
 8005dba:	9201      	str	r2, [sp, #4]
 8005dbc:	f000 f85a 	bl	8005e74 <_malloc_r>
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	b118      	cbz	r0, 8005dcc <_calloc_r+0x18>
 8005dc4:	9a01      	ldr	r2, [sp, #4]
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	f7fd ffd6 	bl	8003d78 <memset>
 8005dcc:	4620      	mov	r0, r4
 8005dce:	b002      	add	sp, #8
 8005dd0:	bd10      	pop	{r4, pc}
	...

08005dd4 <_free_r>:
 8005dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dd6:	2900      	cmp	r1, #0
 8005dd8:	d048      	beq.n	8005e6c <_free_r+0x98>
 8005dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dde:	9001      	str	r0, [sp, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f1a1 0404 	sub.w	r4, r1, #4
 8005de6:	bfb8      	it	lt
 8005de8:	18e4      	addlt	r4, r4, r3
 8005dea:	f000 fa65 	bl	80062b8 <__malloc_lock>
 8005dee:	4a20      	ldr	r2, [pc, #128]	; (8005e70 <_free_r+0x9c>)
 8005df0:	9801      	ldr	r0, [sp, #4]
 8005df2:	6813      	ldr	r3, [r2, #0]
 8005df4:	4615      	mov	r5, r2
 8005df6:	b933      	cbnz	r3, 8005e06 <_free_r+0x32>
 8005df8:	6063      	str	r3, [r4, #4]
 8005dfa:	6014      	str	r4, [r2, #0]
 8005dfc:	b003      	add	sp, #12
 8005dfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e02:	f000 ba5f 	b.w	80062c4 <__malloc_unlock>
 8005e06:	42a3      	cmp	r3, r4
 8005e08:	d90b      	bls.n	8005e22 <_free_r+0x4e>
 8005e0a:	6821      	ldr	r1, [r4, #0]
 8005e0c:	1862      	adds	r2, r4, r1
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	bf04      	itt	eq
 8005e12:	681a      	ldreq	r2, [r3, #0]
 8005e14:	685b      	ldreq	r3, [r3, #4]
 8005e16:	6063      	str	r3, [r4, #4]
 8005e18:	bf04      	itt	eq
 8005e1a:	1852      	addeq	r2, r2, r1
 8005e1c:	6022      	streq	r2, [r4, #0]
 8005e1e:	602c      	str	r4, [r5, #0]
 8005e20:	e7ec      	b.n	8005dfc <_free_r+0x28>
 8005e22:	461a      	mov	r2, r3
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	b10b      	cbz	r3, 8005e2c <_free_r+0x58>
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	d9fa      	bls.n	8005e22 <_free_r+0x4e>
 8005e2c:	6811      	ldr	r1, [r2, #0]
 8005e2e:	1855      	adds	r5, r2, r1
 8005e30:	42a5      	cmp	r5, r4
 8005e32:	d10b      	bne.n	8005e4c <_free_r+0x78>
 8005e34:	6824      	ldr	r4, [r4, #0]
 8005e36:	4421      	add	r1, r4
 8005e38:	1854      	adds	r4, r2, r1
 8005e3a:	42a3      	cmp	r3, r4
 8005e3c:	6011      	str	r1, [r2, #0]
 8005e3e:	d1dd      	bne.n	8005dfc <_free_r+0x28>
 8005e40:	681c      	ldr	r4, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	6053      	str	r3, [r2, #4]
 8005e46:	4421      	add	r1, r4
 8005e48:	6011      	str	r1, [r2, #0]
 8005e4a:	e7d7      	b.n	8005dfc <_free_r+0x28>
 8005e4c:	d902      	bls.n	8005e54 <_free_r+0x80>
 8005e4e:	230c      	movs	r3, #12
 8005e50:	6003      	str	r3, [r0, #0]
 8005e52:	e7d3      	b.n	8005dfc <_free_r+0x28>
 8005e54:	6825      	ldr	r5, [r4, #0]
 8005e56:	1961      	adds	r1, r4, r5
 8005e58:	428b      	cmp	r3, r1
 8005e5a:	bf04      	itt	eq
 8005e5c:	6819      	ldreq	r1, [r3, #0]
 8005e5e:	685b      	ldreq	r3, [r3, #4]
 8005e60:	6063      	str	r3, [r4, #4]
 8005e62:	bf04      	itt	eq
 8005e64:	1949      	addeq	r1, r1, r5
 8005e66:	6021      	streq	r1, [r4, #0]
 8005e68:	6054      	str	r4, [r2, #4]
 8005e6a:	e7c7      	b.n	8005dfc <_free_r+0x28>
 8005e6c:	b003      	add	sp, #12
 8005e6e:	bd30      	pop	{r4, r5, pc}
 8005e70:	200001fc 	.word	0x200001fc

08005e74 <_malloc_r>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	1ccd      	adds	r5, r1, #3
 8005e78:	f025 0503 	bic.w	r5, r5, #3
 8005e7c:	3508      	adds	r5, #8
 8005e7e:	2d0c      	cmp	r5, #12
 8005e80:	bf38      	it	cc
 8005e82:	250c      	movcc	r5, #12
 8005e84:	2d00      	cmp	r5, #0
 8005e86:	4606      	mov	r6, r0
 8005e88:	db01      	blt.n	8005e8e <_malloc_r+0x1a>
 8005e8a:	42a9      	cmp	r1, r5
 8005e8c:	d903      	bls.n	8005e96 <_malloc_r+0x22>
 8005e8e:	230c      	movs	r3, #12
 8005e90:	6033      	str	r3, [r6, #0]
 8005e92:	2000      	movs	r0, #0
 8005e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e96:	f000 fa0f 	bl	80062b8 <__malloc_lock>
 8005e9a:	4921      	ldr	r1, [pc, #132]	; (8005f20 <_malloc_r+0xac>)
 8005e9c:	680a      	ldr	r2, [r1, #0]
 8005e9e:	4614      	mov	r4, r2
 8005ea0:	b99c      	cbnz	r4, 8005eca <_malloc_r+0x56>
 8005ea2:	4f20      	ldr	r7, [pc, #128]	; (8005f24 <_malloc_r+0xb0>)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	b923      	cbnz	r3, 8005eb2 <_malloc_r+0x3e>
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f000 f998 	bl	80061e0 <_sbrk_r>
 8005eb0:	6038      	str	r0, [r7, #0]
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f000 f993 	bl	80061e0 <_sbrk_r>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	d123      	bne.n	8005f06 <_malloc_r+0x92>
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	6033      	str	r3, [r6, #0]
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f000 f9fe 	bl	80062c4 <__malloc_unlock>
 8005ec8:	e7e3      	b.n	8005e92 <_malloc_r+0x1e>
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	1b5b      	subs	r3, r3, r5
 8005ece:	d417      	bmi.n	8005f00 <_malloc_r+0x8c>
 8005ed0:	2b0b      	cmp	r3, #11
 8005ed2:	d903      	bls.n	8005edc <_malloc_r+0x68>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	441c      	add	r4, r3
 8005ed8:	6025      	str	r5, [r4, #0]
 8005eda:	e004      	b.n	8005ee6 <_malloc_r+0x72>
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	42a2      	cmp	r2, r4
 8005ee0:	bf0c      	ite	eq
 8005ee2:	600b      	streq	r3, [r1, #0]
 8005ee4:	6053      	strne	r3, [r2, #4]
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f000 f9ec 	bl	80062c4 <__malloc_unlock>
 8005eec:	f104 000b 	add.w	r0, r4, #11
 8005ef0:	1d23      	adds	r3, r4, #4
 8005ef2:	f020 0007 	bic.w	r0, r0, #7
 8005ef6:	1ac2      	subs	r2, r0, r3
 8005ef8:	d0cc      	beq.n	8005e94 <_malloc_r+0x20>
 8005efa:	1a1b      	subs	r3, r3, r0
 8005efc:	50a3      	str	r3, [r4, r2]
 8005efe:	e7c9      	b.n	8005e94 <_malloc_r+0x20>
 8005f00:	4622      	mov	r2, r4
 8005f02:	6864      	ldr	r4, [r4, #4]
 8005f04:	e7cc      	b.n	8005ea0 <_malloc_r+0x2c>
 8005f06:	1cc4      	adds	r4, r0, #3
 8005f08:	f024 0403 	bic.w	r4, r4, #3
 8005f0c:	42a0      	cmp	r0, r4
 8005f0e:	d0e3      	beq.n	8005ed8 <_malloc_r+0x64>
 8005f10:	1a21      	subs	r1, r4, r0
 8005f12:	4630      	mov	r0, r6
 8005f14:	f000 f964 	bl	80061e0 <_sbrk_r>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d1dd      	bne.n	8005ed8 <_malloc_r+0x64>
 8005f1c:	e7cf      	b.n	8005ebe <_malloc_r+0x4a>
 8005f1e:	bf00      	nop
 8005f20:	200001fc 	.word	0x200001fc
 8005f24:	20000200 	.word	0x20000200

08005f28 <__ssputs_r>:
 8005f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	688e      	ldr	r6, [r1, #8]
 8005f2e:	429e      	cmp	r6, r3
 8005f30:	4682      	mov	sl, r0
 8005f32:	460c      	mov	r4, r1
 8005f34:	4690      	mov	r8, r2
 8005f36:	461f      	mov	r7, r3
 8005f38:	d838      	bhi.n	8005fac <__ssputs_r+0x84>
 8005f3a:	898a      	ldrh	r2, [r1, #12]
 8005f3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f40:	d032      	beq.n	8005fa8 <__ssputs_r+0x80>
 8005f42:	6825      	ldr	r5, [r4, #0]
 8005f44:	6909      	ldr	r1, [r1, #16]
 8005f46:	eba5 0901 	sub.w	r9, r5, r1
 8005f4a:	6965      	ldr	r5, [r4, #20]
 8005f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f54:	3301      	adds	r3, #1
 8005f56:	444b      	add	r3, r9
 8005f58:	106d      	asrs	r5, r5, #1
 8005f5a:	429d      	cmp	r5, r3
 8005f5c:	bf38      	it	cc
 8005f5e:	461d      	movcc	r5, r3
 8005f60:	0553      	lsls	r3, r2, #21
 8005f62:	d531      	bpl.n	8005fc8 <__ssputs_r+0xa0>
 8005f64:	4629      	mov	r1, r5
 8005f66:	f7ff ff85 	bl	8005e74 <_malloc_r>
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	b950      	cbnz	r0, 8005f84 <__ssputs_r+0x5c>
 8005f6e:	230c      	movs	r3, #12
 8005f70:	f8ca 3000 	str.w	r3, [sl]
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f7a:	81a3      	strh	r3, [r4, #12]
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f84:	6921      	ldr	r1, [r4, #16]
 8005f86:	464a      	mov	r2, r9
 8005f88:	f7fd fee8 	bl	8003d5c <memcpy>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	6126      	str	r6, [r4, #16]
 8005f9a:	6165      	str	r5, [r4, #20]
 8005f9c:	444e      	add	r6, r9
 8005f9e:	eba5 0509 	sub.w	r5, r5, r9
 8005fa2:	6026      	str	r6, [r4, #0]
 8005fa4:	60a5      	str	r5, [r4, #8]
 8005fa6:	463e      	mov	r6, r7
 8005fa8:	42be      	cmp	r6, r7
 8005faa:	d900      	bls.n	8005fae <__ssputs_r+0x86>
 8005fac:	463e      	mov	r6, r7
 8005fae:	4632      	mov	r2, r6
 8005fb0:	6820      	ldr	r0, [r4, #0]
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	f000 f966 	bl	8006284 <memmove>
 8005fb8:	68a3      	ldr	r3, [r4, #8]
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	1b9b      	subs	r3, r3, r6
 8005fbe:	4432      	add	r2, r6
 8005fc0:	60a3      	str	r3, [r4, #8]
 8005fc2:	6022      	str	r2, [r4, #0]
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	e7db      	b.n	8005f80 <__ssputs_r+0x58>
 8005fc8:	462a      	mov	r2, r5
 8005fca:	f000 f981 	bl	80062d0 <_realloc_r>
 8005fce:	4606      	mov	r6, r0
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d1e1      	bne.n	8005f98 <__ssputs_r+0x70>
 8005fd4:	6921      	ldr	r1, [r4, #16]
 8005fd6:	4650      	mov	r0, sl
 8005fd8:	f7ff fefc 	bl	8005dd4 <_free_r>
 8005fdc:	e7c7      	b.n	8005f6e <__ssputs_r+0x46>
	...

08005fe0 <_svfiprintf_r>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	4698      	mov	r8, r3
 8005fe6:	898b      	ldrh	r3, [r1, #12]
 8005fe8:	061b      	lsls	r3, r3, #24
 8005fea:	b09d      	sub	sp, #116	; 0x74
 8005fec:	4607      	mov	r7, r0
 8005fee:	460d      	mov	r5, r1
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	d50e      	bpl.n	8006012 <_svfiprintf_r+0x32>
 8005ff4:	690b      	ldr	r3, [r1, #16]
 8005ff6:	b963      	cbnz	r3, 8006012 <_svfiprintf_r+0x32>
 8005ff8:	2140      	movs	r1, #64	; 0x40
 8005ffa:	f7ff ff3b 	bl	8005e74 <_malloc_r>
 8005ffe:	6028      	str	r0, [r5, #0]
 8006000:	6128      	str	r0, [r5, #16]
 8006002:	b920      	cbnz	r0, 800600e <_svfiprintf_r+0x2e>
 8006004:	230c      	movs	r3, #12
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	f04f 30ff 	mov.w	r0, #4294967295
 800600c:	e0d1      	b.n	80061b2 <_svfiprintf_r+0x1d2>
 800600e:	2340      	movs	r3, #64	; 0x40
 8006010:	616b      	str	r3, [r5, #20]
 8006012:	2300      	movs	r3, #0
 8006014:	9309      	str	r3, [sp, #36]	; 0x24
 8006016:	2320      	movs	r3, #32
 8006018:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800601c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006020:	2330      	movs	r3, #48	; 0x30
 8006022:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061cc <_svfiprintf_r+0x1ec>
 8006026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800602a:	f04f 0901 	mov.w	r9, #1
 800602e:	4623      	mov	r3, r4
 8006030:	469a      	mov	sl, r3
 8006032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006036:	b10a      	cbz	r2, 800603c <_svfiprintf_r+0x5c>
 8006038:	2a25      	cmp	r2, #37	; 0x25
 800603a:	d1f9      	bne.n	8006030 <_svfiprintf_r+0x50>
 800603c:	ebba 0b04 	subs.w	fp, sl, r4
 8006040:	d00b      	beq.n	800605a <_svfiprintf_r+0x7a>
 8006042:	465b      	mov	r3, fp
 8006044:	4622      	mov	r2, r4
 8006046:	4629      	mov	r1, r5
 8006048:	4638      	mov	r0, r7
 800604a:	f7ff ff6d 	bl	8005f28 <__ssputs_r>
 800604e:	3001      	adds	r0, #1
 8006050:	f000 80aa 	beq.w	80061a8 <_svfiprintf_r+0x1c8>
 8006054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006056:	445a      	add	r2, fp
 8006058:	9209      	str	r2, [sp, #36]	; 0x24
 800605a:	f89a 3000 	ldrb.w	r3, [sl]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80a2 	beq.w	80061a8 <_svfiprintf_r+0x1c8>
 8006064:	2300      	movs	r3, #0
 8006066:	f04f 32ff 	mov.w	r2, #4294967295
 800606a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800606e:	f10a 0a01 	add.w	sl, sl, #1
 8006072:	9304      	str	r3, [sp, #16]
 8006074:	9307      	str	r3, [sp, #28]
 8006076:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800607a:	931a      	str	r3, [sp, #104]	; 0x68
 800607c:	4654      	mov	r4, sl
 800607e:	2205      	movs	r2, #5
 8006080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006084:	4851      	ldr	r0, [pc, #324]	; (80061cc <_svfiprintf_r+0x1ec>)
 8006086:	f7fa f8b3 	bl	80001f0 <memchr>
 800608a:	9a04      	ldr	r2, [sp, #16]
 800608c:	b9d8      	cbnz	r0, 80060c6 <_svfiprintf_r+0xe6>
 800608e:	06d0      	lsls	r0, r2, #27
 8006090:	bf44      	itt	mi
 8006092:	2320      	movmi	r3, #32
 8006094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006098:	0711      	lsls	r1, r2, #28
 800609a:	bf44      	itt	mi
 800609c:	232b      	movmi	r3, #43	; 0x2b
 800609e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060a2:	f89a 3000 	ldrb.w	r3, [sl]
 80060a6:	2b2a      	cmp	r3, #42	; 0x2a
 80060a8:	d015      	beq.n	80060d6 <_svfiprintf_r+0xf6>
 80060aa:	9a07      	ldr	r2, [sp, #28]
 80060ac:	4654      	mov	r4, sl
 80060ae:	2000      	movs	r0, #0
 80060b0:	f04f 0c0a 	mov.w	ip, #10
 80060b4:	4621      	mov	r1, r4
 80060b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ba:	3b30      	subs	r3, #48	; 0x30
 80060bc:	2b09      	cmp	r3, #9
 80060be:	d94e      	bls.n	800615e <_svfiprintf_r+0x17e>
 80060c0:	b1b0      	cbz	r0, 80060f0 <_svfiprintf_r+0x110>
 80060c2:	9207      	str	r2, [sp, #28]
 80060c4:	e014      	b.n	80060f0 <_svfiprintf_r+0x110>
 80060c6:	eba0 0308 	sub.w	r3, r0, r8
 80060ca:	fa09 f303 	lsl.w	r3, r9, r3
 80060ce:	4313      	orrs	r3, r2
 80060d0:	9304      	str	r3, [sp, #16]
 80060d2:	46a2      	mov	sl, r4
 80060d4:	e7d2      	b.n	800607c <_svfiprintf_r+0x9c>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	1d19      	adds	r1, r3, #4
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	9103      	str	r1, [sp, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bfbb      	ittet	lt
 80060e2:	425b      	neglt	r3, r3
 80060e4:	f042 0202 	orrlt.w	r2, r2, #2
 80060e8:	9307      	strge	r3, [sp, #28]
 80060ea:	9307      	strlt	r3, [sp, #28]
 80060ec:	bfb8      	it	lt
 80060ee:	9204      	strlt	r2, [sp, #16]
 80060f0:	7823      	ldrb	r3, [r4, #0]
 80060f2:	2b2e      	cmp	r3, #46	; 0x2e
 80060f4:	d10c      	bne.n	8006110 <_svfiprintf_r+0x130>
 80060f6:	7863      	ldrb	r3, [r4, #1]
 80060f8:	2b2a      	cmp	r3, #42	; 0x2a
 80060fa:	d135      	bne.n	8006168 <_svfiprintf_r+0x188>
 80060fc:	9b03      	ldr	r3, [sp, #12]
 80060fe:	1d1a      	adds	r2, r3, #4
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	9203      	str	r2, [sp, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	bfb8      	it	lt
 8006108:	f04f 33ff 	movlt.w	r3, #4294967295
 800610c:	3402      	adds	r4, #2
 800610e:	9305      	str	r3, [sp, #20]
 8006110:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061dc <_svfiprintf_r+0x1fc>
 8006114:	7821      	ldrb	r1, [r4, #0]
 8006116:	2203      	movs	r2, #3
 8006118:	4650      	mov	r0, sl
 800611a:	f7fa f869 	bl	80001f0 <memchr>
 800611e:	b140      	cbz	r0, 8006132 <_svfiprintf_r+0x152>
 8006120:	2340      	movs	r3, #64	; 0x40
 8006122:	eba0 000a 	sub.w	r0, r0, sl
 8006126:	fa03 f000 	lsl.w	r0, r3, r0
 800612a:	9b04      	ldr	r3, [sp, #16]
 800612c:	4303      	orrs	r3, r0
 800612e:	3401      	adds	r4, #1
 8006130:	9304      	str	r3, [sp, #16]
 8006132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006136:	4826      	ldr	r0, [pc, #152]	; (80061d0 <_svfiprintf_r+0x1f0>)
 8006138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800613c:	2206      	movs	r2, #6
 800613e:	f7fa f857 	bl	80001f0 <memchr>
 8006142:	2800      	cmp	r0, #0
 8006144:	d038      	beq.n	80061b8 <_svfiprintf_r+0x1d8>
 8006146:	4b23      	ldr	r3, [pc, #140]	; (80061d4 <_svfiprintf_r+0x1f4>)
 8006148:	bb1b      	cbnz	r3, 8006192 <_svfiprintf_r+0x1b2>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	3307      	adds	r3, #7
 800614e:	f023 0307 	bic.w	r3, r3, #7
 8006152:	3308      	adds	r3, #8
 8006154:	9303      	str	r3, [sp, #12]
 8006156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006158:	4433      	add	r3, r6
 800615a:	9309      	str	r3, [sp, #36]	; 0x24
 800615c:	e767      	b.n	800602e <_svfiprintf_r+0x4e>
 800615e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006162:	460c      	mov	r4, r1
 8006164:	2001      	movs	r0, #1
 8006166:	e7a5      	b.n	80060b4 <_svfiprintf_r+0xd4>
 8006168:	2300      	movs	r3, #0
 800616a:	3401      	adds	r4, #1
 800616c:	9305      	str	r3, [sp, #20]
 800616e:	4619      	mov	r1, r3
 8006170:	f04f 0c0a 	mov.w	ip, #10
 8006174:	4620      	mov	r0, r4
 8006176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800617a:	3a30      	subs	r2, #48	; 0x30
 800617c:	2a09      	cmp	r2, #9
 800617e:	d903      	bls.n	8006188 <_svfiprintf_r+0x1a8>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0c5      	beq.n	8006110 <_svfiprintf_r+0x130>
 8006184:	9105      	str	r1, [sp, #20]
 8006186:	e7c3      	b.n	8006110 <_svfiprintf_r+0x130>
 8006188:	fb0c 2101 	mla	r1, ip, r1, r2
 800618c:	4604      	mov	r4, r0
 800618e:	2301      	movs	r3, #1
 8006190:	e7f0      	b.n	8006174 <_svfiprintf_r+0x194>
 8006192:	ab03      	add	r3, sp, #12
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	462a      	mov	r2, r5
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <_svfiprintf_r+0x1f8>)
 800619a:	a904      	add	r1, sp, #16
 800619c:	4638      	mov	r0, r7
 800619e:	f7fd fe93 	bl	8003ec8 <_printf_float>
 80061a2:	1c42      	adds	r2, r0, #1
 80061a4:	4606      	mov	r6, r0
 80061a6:	d1d6      	bne.n	8006156 <_svfiprintf_r+0x176>
 80061a8:	89ab      	ldrh	r3, [r5, #12]
 80061aa:	065b      	lsls	r3, r3, #25
 80061ac:	f53f af2c 	bmi.w	8006008 <_svfiprintf_r+0x28>
 80061b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061b2:	b01d      	add	sp, #116	; 0x74
 80061b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b8:	ab03      	add	r3, sp, #12
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	462a      	mov	r2, r5
 80061be:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <_svfiprintf_r+0x1f8>)
 80061c0:	a904      	add	r1, sp, #16
 80061c2:	4638      	mov	r0, r7
 80061c4:	f7fe f924 	bl	8004410 <_printf_i>
 80061c8:	e7eb      	b.n	80061a2 <_svfiprintf_r+0x1c2>
 80061ca:	bf00      	nop
 80061cc:	080077ec 	.word	0x080077ec
 80061d0:	080077f6 	.word	0x080077f6
 80061d4:	08003ec9 	.word	0x08003ec9
 80061d8:	08005f29 	.word	0x08005f29
 80061dc:	080077f2 	.word	0x080077f2

080061e0 <_sbrk_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4d06      	ldr	r5, [pc, #24]	; (80061fc <_sbrk_r+0x1c>)
 80061e4:	2300      	movs	r3, #0
 80061e6:	4604      	mov	r4, r0
 80061e8:	4608      	mov	r0, r1
 80061ea:	602b      	str	r3, [r5, #0]
 80061ec:	f7fc fb42 	bl	8002874 <_sbrk>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d102      	bne.n	80061fa <_sbrk_r+0x1a>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	b103      	cbz	r3, 80061fa <_sbrk_r+0x1a>
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	20000260 	.word	0x20000260

08006200 <__assert_func>:
 8006200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006202:	4614      	mov	r4, r2
 8006204:	461a      	mov	r2, r3
 8006206:	4b09      	ldr	r3, [pc, #36]	; (800622c <__assert_func+0x2c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4605      	mov	r5, r0
 800620c:	68d8      	ldr	r0, [r3, #12]
 800620e:	b14c      	cbz	r4, 8006224 <__assert_func+0x24>
 8006210:	4b07      	ldr	r3, [pc, #28]	; (8006230 <__assert_func+0x30>)
 8006212:	9100      	str	r1, [sp, #0]
 8006214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006218:	4906      	ldr	r1, [pc, #24]	; (8006234 <__assert_func+0x34>)
 800621a:	462b      	mov	r3, r5
 800621c:	f000 f80e 	bl	800623c <fiprintf>
 8006220:	f000 faa4 	bl	800676c <abort>
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <__assert_func+0x38>)
 8006226:	461c      	mov	r4, r3
 8006228:	e7f3      	b.n	8006212 <__assert_func+0x12>
 800622a:	bf00      	nop
 800622c:	2000000c 	.word	0x2000000c
 8006230:	080077fd 	.word	0x080077fd
 8006234:	0800780a 	.word	0x0800780a
 8006238:	08007838 	.word	0x08007838

0800623c <fiprintf>:
 800623c:	b40e      	push	{r1, r2, r3}
 800623e:	b503      	push	{r0, r1, lr}
 8006240:	4601      	mov	r1, r0
 8006242:	ab03      	add	r3, sp, #12
 8006244:	4805      	ldr	r0, [pc, #20]	; (800625c <fiprintf+0x20>)
 8006246:	f853 2b04 	ldr.w	r2, [r3], #4
 800624a:	6800      	ldr	r0, [r0, #0]
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	f000 f88f 	bl	8006370 <_vfiprintf_r>
 8006252:	b002      	add	sp, #8
 8006254:	f85d eb04 	ldr.w	lr, [sp], #4
 8006258:	b003      	add	sp, #12
 800625a:	4770      	bx	lr
 800625c:	2000000c 	.word	0x2000000c

08006260 <__ascii_mbtowc>:
 8006260:	b082      	sub	sp, #8
 8006262:	b901      	cbnz	r1, 8006266 <__ascii_mbtowc+0x6>
 8006264:	a901      	add	r1, sp, #4
 8006266:	b142      	cbz	r2, 800627a <__ascii_mbtowc+0x1a>
 8006268:	b14b      	cbz	r3, 800627e <__ascii_mbtowc+0x1e>
 800626a:	7813      	ldrb	r3, [r2, #0]
 800626c:	600b      	str	r3, [r1, #0]
 800626e:	7812      	ldrb	r2, [r2, #0]
 8006270:	1e10      	subs	r0, r2, #0
 8006272:	bf18      	it	ne
 8006274:	2001      	movne	r0, #1
 8006276:	b002      	add	sp, #8
 8006278:	4770      	bx	lr
 800627a:	4610      	mov	r0, r2
 800627c:	e7fb      	b.n	8006276 <__ascii_mbtowc+0x16>
 800627e:	f06f 0001 	mvn.w	r0, #1
 8006282:	e7f8      	b.n	8006276 <__ascii_mbtowc+0x16>

08006284 <memmove>:
 8006284:	4288      	cmp	r0, r1
 8006286:	b510      	push	{r4, lr}
 8006288:	eb01 0402 	add.w	r4, r1, r2
 800628c:	d902      	bls.n	8006294 <memmove+0x10>
 800628e:	4284      	cmp	r4, r0
 8006290:	4623      	mov	r3, r4
 8006292:	d807      	bhi.n	80062a4 <memmove+0x20>
 8006294:	1e43      	subs	r3, r0, #1
 8006296:	42a1      	cmp	r1, r4
 8006298:	d008      	beq.n	80062ac <memmove+0x28>
 800629a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800629e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062a2:	e7f8      	b.n	8006296 <memmove+0x12>
 80062a4:	4402      	add	r2, r0
 80062a6:	4601      	mov	r1, r0
 80062a8:	428a      	cmp	r2, r1
 80062aa:	d100      	bne.n	80062ae <memmove+0x2a>
 80062ac:	bd10      	pop	{r4, pc}
 80062ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062b6:	e7f7      	b.n	80062a8 <memmove+0x24>

080062b8 <__malloc_lock>:
 80062b8:	4801      	ldr	r0, [pc, #4]	; (80062c0 <__malloc_lock+0x8>)
 80062ba:	f000 bc17 	b.w	8006aec <__retarget_lock_acquire_recursive>
 80062be:	bf00      	nop
 80062c0:	20000268 	.word	0x20000268

080062c4 <__malloc_unlock>:
 80062c4:	4801      	ldr	r0, [pc, #4]	; (80062cc <__malloc_unlock+0x8>)
 80062c6:	f000 bc12 	b.w	8006aee <__retarget_lock_release_recursive>
 80062ca:	bf00      	nop
 80062cc:	20000268 	.word	0x20000268

080062d0 <_realloc_r>:
 80062d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d2:	4607      	mov	r7, r0
 80062d4:	4614      	mov	r4, r2
 80062d6:	460e      	mov	r6, r1
 80062d8:	b921      	cbnz	r1, 80062e4 <_realloc_r+0x14>
 80062da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062de:	4611      	mov	r1, r2
 80062e0:	f7ff bdc8 	b.w	8005e74 <_malloc_r>
 80062e4:	b922      	cbnz	r2, 80062f0 <_realloc_r+0x20>
 80062e6:	f7ff fd75 	bl	8005dd4 <_free_r>
 80062ea:	4625      	mov	r5, r4
 80062ec:	4628      	mov	r0, r5
 80062ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f0:	f000 fc62 	bl	8006bb8 <_malloc_usable_size_r>
 80062f4:	42a0      	cmp	r0, r4
 80062f6:	d20f      	bcs.n	8006318 <_realloc_r+0x48>
 80062f8:	4621      	mov	r1, r4
 80062fa:	4638      	mov	r0, r7
 80062fc:	f7ff fdba 	bl	8005e74 <_malloc_r>
 8006300:	4605      	mov	r5, r0
 8006302:	2800      	cmp	r0, #0
 8006304:	d0f2      	beq.n	80062ec <_realloc_r+0x1c>
 8006306:	4631      	mov	r1, r6
 8006308:	4622      	mov	r2, r4
 800630a:	f7fd fd27 	bl	8003d5c <memcpy>
 800630e:	4631      	mov	r1, r6
 8006310:	4638      	mov	r0, r7
 8006312:	f7ff fd5f 	bl	8005dd4 <_free_r>
 8006316:	e7e9      	b.n	80062ec <_realloc_r+0x1c>
 8006318:	4635      	mov	r5, r6
 800631a:	e7e7      	b.n	80062ec <_realloc_r+0x1c>

0800631c <__sfputc_r>:
 800631c:	6893      	ldr	r3, [r2, #8]
 800631e:	3b01      	subs	r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	b410      	push	{r4}
 8006324:	6093      	str	r3, [r2, #8]
 8006326:	da08      	bge.n	800633a <__sfputc_r+0x1e>
 8006328:	6994      	ldr	r4, [r2, #24]
 800632a:	42a3      	cmp	r3, r4
 800632c:	db01      	blt.n	8006332 <__sfputc_r+0x16>
 800632e:	290a      	cmp	r1, #10
 8006330:	d103      	bne.n	800633a <__sfputc_r+0x1e>
 8006332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006336:	f000 b94b 	b.w	80065d0 <__swbuf_r>
 800633a:	6813      	ldr	r3, [r2, #0]
 800633c:	1c58      	adds	r0, r3, #1
 800633e:	6010      	str	r0, [r2, #0]
 8006340:	7019      	strb	r1, [r3, #0]
 8006342:	4608      	mov	r0, r1
 8006344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006348:	4770      	bx	lr

0800634a <__sfputs_r>:
 800634a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634c:	4606      	mov	r6, r0
 800634e:	460f      	mov	r7, r1
 8006350:	4614      	mov	r4, r2
 8006352:	18d5      	adds	r5, r2, r3
 8006354:	42ac      	cmp	r4, r5
 8006356:	d101      	bne.n	800635c <__sfputs_r+0x12>
 8006358:	2000      	movs	r0, #0
 800635a:	e007      	b.n	800636c <__sfputs_r+0x22>
 800635c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006360:	463a      	mov	r2, r7
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff ffda 	bl	800631c <__sfputc_r>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d1f3      	bne.n	8006354 <__sfputs_r+0xa>
 800636c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006370 <_vfiprintf_r>:
 8006370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006374:	460d      	mov	r5, r1
 8006376:	b09d      	sub	sp, #116	; 0x74
 8006378:	4614      	mov	r4, r2
 800637a:	4698      	mov	r8, r3
 800637c:	4606      	mov	r6, r0
 800637e:	b118      	cbz	r0, 8006388 <_vfiprintf_r+0x18>
 8006380:	6983      	ldr	r3, [r0, #24]
 8006382:	b90b      	cbnz	r3, 8006388 <_vfiprintf_r+0x18>
 8006384:	f000 fb14 	bl	80069b0 <__sinit>
 8006388:	4b89      	ldr	r3, [pc, #548]	; (80065b0 <_vfiprintf_r+0x240>)
 800638a:	429d      	cmp	r5, r3
 800638c:	d11b      	bne.n	80063c6 <_vfiprintf_r+0x56>
 800638e:	6875      	ldr	r5, [r6, #4]
 8006390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006392:	07d9      	lsls	r1, r3, #31
 8006394:	d405      	bmi.n	80063a2 <_vfiprintf_r+0x32>
 8006396:	89ab      	ldrh	r3, [r5, #12]
 8006398:	059a      	lsls	r2, r3, #22
 800639a:	d402      	bmi.n	80063a2 <_vfiprintf_r+0x32>
 800639c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800639e:	f000 fba5 	bl	8006aec <__retarget_lock_acquire_recursive>
 80063a2:	89ab      	ldrh	r3, [r5, #12]
 80063a4:	071b      	lsls	r3, r3, #28
 80063a6:	d501      	bpl.n	80063ac <_vfiprintf_r+0x3c>
 80063a8:	692b      	ldr	r3, [r5, #16]
 80063aa:	b9eb      	cbnz	r3, 80063e8 <_vfiprintf_r+0x78>
 80063ac:	4629      	mov	r1, r5
 80063ae:	4630      	mov	r0, r6
 80063b0:	f000 f96e 	bl	8006690 <__swsetup_r>
 80063b4:	b1c0      	cbz	r0, 80063e8 <_vfiprintf_r+0x78>
 80063b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063b8:	07dc      	lsls	r4, r3, #31
 80063ba:	d50e      	bpl.n	80063da <_vfiprintf_r+0x6a>
 80063bc:	f04f 30ff 	mov.w	r0, #4294967295
 80063c0:	b01d      	add	sp, #116	; 0x74
 80063c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c6:	4b7b      	ldr	r3, [pc, #492]	; (80065b4 <_vfiprintf_r+0x244>)
 80063c8:	429d      	cmp	r5, r3
 80063ca:	d101      	bne.n	80063d0 <_vfiprintf_r+0x60>
 80063cc:	68b5      	ldr	r5, [r6, #8]
 80063ce:	e7df      	b.n	8006390 <_vfiprintf_r+0x20>
 80063d0:	4b79      	ldr	r3, [pc, #484]	; (80065b8 <_vfiprintf_r+0x248>)
 80063d2:	429d      	cmp	r5, r3
 80063d4:	bf08      	it	eq
 80063d6:	68f5      	ldreq	r5, [r6, #12]
 80063d8:	e7da      	b.n	8006390 <_vfiprintf_r+0x20>
 80063da:	89ab      	ldrh	r3, [r5, #12]
 80063dc:	0598      	lsls	r0, r3, #22
 80063de:	d4ed      	bmi.n	80063bc <_vfiprintf_r+0x4c>
 80063e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063e2:	f000 fb84 	bl	8006aee <__retarget_lock_release_recursive>
 80063e6:	e7e9      	b.n	80063bc <_vfiprintf_r+0x4c>
 80063e8:	2300      	movs	r3, #0
 80063ea:	9309      	str	r3, [sp, #36]	; 0x24
 80063ec:	2320      	movs	r3, #32
 80063ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80063f6:	2330      	movs	r3, #48	; 0x30
 80063f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80065bc <_vfiprintf_r+0x24c>
 80063fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006400:	f04f 0901 	mov.w	r9, #1
 8006404:	4623      	mov	r3, r4
 8006406:	469a      	mov	sl, r3
 8006408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800640c:	b10a      	cbz	r2, 8006412 <_vfiprintf_r+0xa2>
 800640e:	2a25      	cmp	r2, #37	; 0x25
 8006410:	d1f9      	bne.n	8006406 <_vfiprintf_r+0x96>
 8006412:	ebba 0b04 	subs.w	fp, sl, r4
 8006416:	d00b      	beq.n	8006430 <_vfiprintf_r+0xc0>
 8006418:	465b      	mov	r3, fp
 800641a:	4622      	mov	r2, r4
 800641c:	4629      	mov	r1, r5
 800641e:	4630      	mov	r0, r6
 8006420:	f7ff ff93 	bl	800634a <__sfputs_r>
 8006424:	3001      	adds	r0, #1
 8006426:	f000 80aa 	beq.w	800657e <_vfiprintf_r+0x20e>
 800642a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800642c:	445a      	add	r2, fp
 800642e:	9209      	str	r2, [sp, #36]	; 0x24
 8006430:	f89a 3000 	ldrb.w	r3, [sl]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80a2 	beq.w	800657e <_vfiprintf_r+0x20e>
 800643a:	2300      	movs	r3, #0
 800643c:	f04f 32ff 	mov.w	r2, #4294967295
 8006440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006444:	f10a 0a01 	add.w	sl, sl, #1
 8006448:	9304      	str	r3, [sp, #16]
 800644a:	9307      	str	r3, [sp, #28]
 800644c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006450:	931a      	str	r3, [sp, #104]	; 0x68
 8006452:	4654      	mov	r4, sl
 8006454:	2205      	movs	r2, #5
 8006456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800645a:	4858      	ldr	r0, [pc, #352]	; (80065bc <_vfiprintf_r+0x24c>)
 800645c:	f7f9 fec8 	bl	80001f0 <memchr>
 8006460:	9a04      	ldr	r2, [sp, #16]
 8006462:	b9d8      	cbnz	r0, 800649c <_vfiprintf_r+0x12c>
 8006464:	06d1      	lsls	r1, r2, #27
 8006466:	bf44      	itt	mi
 8006468:	2320      	movmi	r3, #32
 800646a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800646e:	0713      	lsls	r3, r2, #28
 8006470:	bf44      	itt	mi
 8006472:	232b      	movmi	r3, #43	; 0x2b
 8006474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006478:	f89a 3000 	ldrb.w	r3, [sl]
 800647c:	2b2a      	cmp	r3, #42	; 0x2a
 800647e:	d015      	beq.n	80064ac <_vfiprintf_r+0x13c>
 8006480:	9a07      	ldr	r2, [sp, #28]
 8006482:	4654      	mov	r4, sl
 8006484:	2000      	movs	r0, #0
 8006486:	f04f 0c0a 	mov.w	ip, #10
 800648a:	4621      	mov	r1, r4
 800648c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006490:	3b30      	subs	r3, #48	; 0x30
 8006492:	2b09      	cmp	r3, #9
 8006494:	d94e      	bls.n	8006534 <_vfiprintf_r+0x1c4>
 8006496:	b1b0      	cbz	r0, 80064c6 <_vfiprintf_r+0x156>
 8006498:	9207      	str	r2, [sp, #28]
 800649a:	e014      	b.n	80064c6 <_vfiprintf_r+0x156>
 800649c:	eba0 0308 	sub.w	r3, r0, r8
 80064a0:	fa09 f303 	lsl.w	r3, r9, r3
 80064a4:	4313      	orrs	r3, r2
 80064a6:	9304      	str	r3, [sp, #16]
 80064a8:	46a2      	mov	sl, r4
 80064aa:	e7d2      	b.n	8006452 <_vfiprintf_r+0xe2>
 80064ac:	9b03      	ldr	r3, [sp, #12]
 80064ae:	1d19      	adds	r1, r3, #4
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	9103      	str	r1, [sp, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bfbb      	ittet	lt
 80064b8:	425b      	neglt	r3, r3
 80064ba:	f042 0202 	orrlt.w	r2, r2, #2
 80064be:	9307      	strge	r3, [sp, #28]
 80064c0:	9307      	strlt	r3, [sp, #28]
 80064c2:	bfb8      	it	lt
 80064c4:	9204      	strlt	r2, [sp, #16]
 80064c6:	7823      	ldrb	r3, [r4, #0]
 80064c8:	2b2e      	cmp	r3, #46	; 0x2e
 80064ca:	d10c      	bne.n	80064e6 <_vfiprintf_r+0x176>
 80064cc:	7863      	ldrb	r3, [r4, #1]
 80064ce:	2b2a      	cmp	r3, #42	; 0x2a
 80064d0:	d135      	bne.n	800653e <_vfiprintf_r+0x1ce>
 80064d2:	9b03      	ldr	r3, [sp, #12]
 80064d4:	1d1a      	adds	r2, r3, #4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	9203      	str	r2, [sp, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bfb8      	it	lt
 80064de:	f04f 33ff 	movlt.w	r3, #4294967295
 80064e2:	3402      	adds	r4, #2
 80064e4:	9305      	str	r3, [sp, #20]
 80064e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80065cc <_vfiprintf_r+0x25c>
 80064ea:	7821      	ldrb	r1, [r4, #0]
 80064ec:	2203      	movs	r2, #3
 80064ee:	4650      	mov	r0, sl
 80064f0:	f7f9 fe7e 	bl	80001f0 <memchr>
 80064f4:	b140      	cbz	r0, 8006508 <_vfiprintf_r+0x198>
 80064f6:	2340      	movs	r3, #64	; 0x40
 80064f8:	eba0 000a 	sub.w	r0, r0, sl
 80064fc:	fa03 f000 	lsl.w	r0, r3, r0
 8006500:	9b04      	ldr	r3, [sp, #16]
 8006502:	4303      	orrs	r3, r0
 8006504:	3401      	adds	r4, #1
 8006506:	9304      	str	r3, [sp, #16]
 8006508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650c:	482c      	ldr	r0, [pc, #176]	; (80065c0 <_vfiprintf_r+0x250>)
 800650e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006512:	2206      	movs	r2, #6
 8006514:	f7f9 fe6c 	bl	80001f0 <memchr>
 8006518:	2800      	cmp	r0, #0
 800651a:	d03f      	beq.n	800659c <_vfiprintf_r+0x22c>
 800651c:	4b29      	ldr	r3, [pc, #164]	; (80065c4 <_vfiprintf_r+0x254>)
 800651e:	bb1b      	cbnz	r3, 8006568 <_vfiprintf_r+0x1f8>
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	3307      	adds	r3, #7
 8006524:	f023 0307 	bic.w	r3, r3, #7
 8006528:	3308      	adds	r3, #8
 800652a:	9303      	str	r3, [sp, #12]
 800652c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652e:	443b      	add	r3, r7
 8006530:	9309      	str	r3, [sp, #36]	; 0x24
 8006532:	e767      	b.n	8006404 <_vfiprintf_r+0x94>
 8006534:	fb0c 3202 	mla	r2, ip, r2, r3
 8006538:	460c      	mov	r4, r1
 800653a:	2001      	movs	r0, #1
 800653c:	e7a5      	b.n	800648a <_vfiprintf_r+0x11a>
 800653e:	2300      	movs	r3, #0
 8006540:	3401      	adds	r4, #1
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	4619      	mov	r1, r3
 8006546:	f04f 0c0a 	mov.w	ip, #10
 800654a:	4620      	mov	r0, r4
 800654c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006550:	3a30      	subs	r2, #48	; 0x30
 8006552:	2a09      	cmp	r2, #9
 8006554:	d903      	bls.n	800655e <_vfiprintf_r+0x1ee>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0c5      	beq.n	80064e6 <_vfiprintf_r+0x176>
 800655a:	9105      	str	r1, [sp, #20]
 800655c:	e7c3      	b.n	80064e6 <_vfiprintf_r+0x176>
 800655e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006562:	4604      	mov	r4, r0
 8006564:	2301      	movs	r3, #1
 8006566:	e7f0      	b.n	800654a <_vfiprintf_r+0x1da>
 8006568:	ab03      	add	r3, sp, #12
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	462a      	mov	r2, r5
 800656e:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <_vfiprintf_r+0x258>)
 8006570:	a904      	add	r1, sp, #16
 8006572:	4630      	mov	r0, r6
 8006574:	f7fd fca8 	bl	8003ec8 <_printf_float>
 8006578:	4607      	mov	r7, r0
 800657a:	1c78      	adds	r0, r7, #1
 800657c:	d1d6      	bne.n	800652c <_vfiprintf_r+0x1bc>
 800657e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006580:	07d9      	lsls	r1, r3, #31
 8006582:	d405      	bmi.n	8006590 <_vfiprintf_r+0x220>
 8006584:	89ab      	ldrh	r3, [r5, #12]
 8006586:	059a      	lsls	r2, r3, #22
 8006588:	d402      	bmi.n	8006590 <_vfiprintf_r+0x220>
 800658a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800658c:	f000 faaf 	bl	8006aee <__retarget_lock_release_recursive>
 8006590:	89ab      	ldrh	r3, [r5, #12]
 8006592:	065b      	lsls	r3, r3, #25
 8006594:	f53f af12 	bmi.w	80063bc <_vfiprintf_r+0x4c>
 8006598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800659a:	e711      	b.n	80063c0 <_vfiprintf_r+0x50>
 800659c:	ab03      	add	r3, sp, #12
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	462a      	mov	r2, r5
 80065a2:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <_vfiprintf_r+0x258>)
 80065a4:	a904      	add	r1, sp, #16
 80065a6:	4630      	mov	r0, r6
 80065a8:	f7fd ff32 	bl	8004410 <_printf_i>
 80065ac:	e7e4      	b.n	8006578 <_vfiprintf_r+0x208>
 80065ae:	bf00      	nop
 80065b0:	08007964 	.word	0x08007964
 80065b4:	08007984 	.word	0x08007984
 80065b8:	08007944 	.word	0x08007944
 80065bc:	080077ec 	.word	0x080077ec
 80065c0:	080077f6 	.word	0x080077f6
 80065c4:	08003ec9 	.word	0x08003ec9
 80065c8:	0800634b 	.word	0x0800634b
 80065cc:	080077f2 	.word	0x080077f2

080065d0 <__swbuf_r>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	460e      	mov	r6, r1
 80065d4:	4614      	mov	r4, r2
 80065d6:	4605      	mov	r5, r0
 80065d8:	b118      	cbz	r0, 80065e2 <__swbuf_r+0x12>
 80065da:	6983      	ldr	r3, [r0, #24]
 80065dc:	b90b      	cbnz	r3, 80065e2 <__swbuf_r+0x12>
 80065de:	f000 f9e7 	bl	80069b0 <__sinit>
 80065e2:	4b21      	ldr	r3, [pc, #132]	; (8006668 <__swbuf_r+0x98>)
 80065e4:	429c      	cmp	r4, r3
 80065e6:	d12b      	bne.n	8006640 <__swbuf_r+0x70>
 80065e8:	686c      	ldr	r4, [r5, #4]
 80065ea:	69a3      	ldr	r3, [r4, #24]
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	071a      	lsls	r2, r3, #28
 80065f2:	d52f      	bpl.n	8006654 <__swbuf_r+0x84>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	b36b      	cbz	r3, 8006654 <__swbuf_r+0x84>
 80065f8:	6923      	ldr	r3, [r4, #16]
 80065fa:	6820      	ldr	r0, [r4, #0]
 80065fc:	1ac0      	subs	r0, r0, r3
 80065fe:	6963      	ldr	r3, [r4, #20]
 8006600:	b2f6      	uxtb	r6, r6
 8006602:	4283      	cmp	r3, r0
 8006604:	4637      	mov	r7, r6
 8006606:	dc04      	bgt.n	8006612 <__swbuf_r+0x42>
 8006608:	4621      	mov	r1, r4
 800660a:	4628      	mov	r0, r5
 800660c:	f000 f93c 	bl	8006888 <_fflush_r>
 8006610:	bb30      	cbnz	r0, 8006660 <__swbuf_r+0x90>
 8006612:	68a3      	ldr	r3, [r4, #8]
 8006614:	3b01      	subs	r3, #1
 8006616:	60a3      	str	r3, [r4, #8]
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	6022      	str	r2, [r4, #0]
 800661e:	701e      	strb	r6, [r3, #0]
 8006620:	6963      	ldr	r3, [r4, #20]
 8006622:	3001      	adds	r0, #1
 8006624:	4283      	cmp	r3, r0
 8006626:	d004      	beq.n	8006632 <__swbuf_r+0x62>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	07db      	lsls	r3, r3, #31
 800662c:	d506      	bpl.n	800663c <__swbuf_r+0x6c>
 800662e:	2e0a      	cmp	r6, #10
 8006630:	d104      	bne.n	800663c <__swbuf_r+0x6c>
 8006632:	4621      	mov	r1, r4
 8006634:	4628      	mov	r0, r5
 8006636:	f000 f927 	bl	8006888 <_fflush_r>
 800663a:	b988      	cbnz	r0, 8006660 <__swbuf_r+0x90>
 800663c:	4638      	mov	r0, r7
 800663e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <__swbuf_r+0x9c>)
 8006642:	429c      	cmp	r4, r3
 8006644:	d101      	bne.n	800664a <__swbuf_r+0x7a>
 8006646:	68ac      	ldr	r4, [r5, #8]
 8006648:	e7cf      	b.n	80065ea <__swbuf_r+0x1a>
 800664a:	4b09      	ldr	r3, [pc, #36]	; (8006670 <__swbuf_r+0xa0>)
 800664c:	429c      	cmp	r4, r3
 800664e:	bf08      	it	eq
 8006650:	68ec      	ldreq	r4, [r5, #12]
 8006652:	e7ca      	b.n	80065ea <__swbuf_r+0x1a>
 8006654:	4621      	mov	r1, r4
 8006656:	4628      	mov	r0, r5
 8006658:	f000 f81a 	bl	8006690 <__swsetup_r>
 800665c:	2800      	cmp	r0, #0
 800665e:	d0cb      	beq.n	80065f8 <__swbuf_r+0x28>
 8006660:	f04f 37ff 	mov.w	r7, #4294967295
 8006664:	e7ea      	b.n	800663c <__swbuf_r+0x6c>
 8006666:	bf00      	nop
 8006668:	08007964 	.word	0x08007964
 800666c:	08007984 	.word	0x08007984
 8006670:	08007944 	.word	0x08007944

08006674 <__ascii_wctomb>:
 8006674:	b149      	cbz	r1, 800668a <__ascii_wctomb+0x16>
 8006676:	2aff      	cmp	r2, #255	; 0xff
 8006678:	bf85      	ittet	hi
 800667a:	238a      	movhi	r3, #138	; 0x8a
 800667c:	6003      	strhi	r3, [r0, #0]
 800667e:	700a      	strbls	r2, [r1, #0]
 8006680:	f04f 30ff 	movhi.w	r0, #4294967295
 8006684:	bf98      	it	ls
 8006686:	2001      	movls	r0, #1
 8006688:	4770      	bx	lr
 800668a:	4608      	mov	r0, r1
 800668c:	4770      	bx	lr
	...

08006690 <__swsetup_r>:
 8006690:	4b32      	ldr	r3, [pc, #200]	; (800675c <__swsetup_r+0xcc>)
 8006692:	b570      	push	{r4, r5, r6, lr}
 8006694:	681d      	ldr	r5, [r3, #0]
 8006696:	4606      	mov	r6, r0
 8006698:	460c      	mov	r4, r1
 800669a:	b125      	cbz	r5, 80066a6 <__swsetup_r+0x16>
 800669c:	69ab      	ldr	r3, [r5, #24]
 800669e:	b913      	cbnz	r3, 80066a6 <__swsetup_r+0x16>
 80066a0:	4628      	mov	r0, r5
 80066a2:	f000 f985 	bl	80069b0 <__sinit>
 80066a6:	4b2e      	ldr	r3, [pc, #184]	; (8006760 <__swsetup_r+0xd0>)
 80066a8:	429c      	cmp	r4, r3
 80066aa:	d10f      	bne.n	80066cc <__swsetup_r+0x3c>
 80066ac:	686c      	ldr	r4, [r5, #4]
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066b4:	0719      	lsls	r1, r3, #28
 80066b6:	d42c      	bmi.n	8006712 <__swsetup_r+0x82>
 80066b8:	06dd      	lsls	r5, r3, #27
 80066ba:	d411      	bmi.n	80066e0 <__swsetup_r+0x50>
 80066bc:	2309      	movs	r3, #9
 80066be:	6033      	str	r3, [r6, #0]
 80066c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066c4:	81a3      	strh	r3, [r4, #12]
 80066c6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ca:	e03e      	b.n	800674a <__swsetup_r+0xba>
 80066cc:	4b25      	ldr	r3, [pc, #148]	; (8006764 <__swsetup_r+0xd4>)
 80066ce:	429c      	cmp	r4, r3
 80066d0:	d101      	bne.n	80066d6 <__swsetup_r+0x46>
 80066d2:	68ac      	ldr	r4, [r5, #8]
 80066d4:	e7eb      	b.n	80066ae <__swsetup_r+0x1e>
 80066d6:	4b24      	ldr	r3, [pc, #144]	; (8006768 <__swsetup_r+0xd8>)
 80066d8:	429c      	cmp	r4, r3
 80066da:	bf08      	it	eq
 80066dc:	68ec      	ldreq	r4, [r5, #12]
 80066de:	e7e6      	b.n	80066ae <__swsetup_r+0x1e>
 80066e0:	0758      	lsls	r0, r3, #29
 80066e2:	d512      	bpl.n	800670a <__swsetup_r+0x7a>
 80066e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e6:	b141      	cbz	r1, 80066fa <__swsetup_r+0x6a>
 80066e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ec:	4299      	cmp	r1, r3
 80066ee:	d002      	beq.n	80066f6 <__swsetup_r+0x66>
 80066f0:	4630      	mov	r0, r6
 80066f2:	f7ff fb6f 	bl	8005dd4 <_free_r>
 80066f6:	2300      	movs	r3, #0
 80066f8:	6363      	str	r3, [r4, #52]	; 0x34
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006700:	81a3      	strh	r3, [r4, #12]
 8006702:	2300      	movs	r3, #0
 8006704:	6063      	str	r3, [r4, #4]
 8006706:	6923      	ldr	r3, [r4, #16]
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	f043 0308 	orr.w	r3, r3, #8
 8006710:	81a3      	strh	r3, [r4, #12]
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	b94b      	cbnz	r3, 800672a <__swsetup_r+0x9a>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800671c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006720:	d003      	beq.n	800672a <__swsetup_r+0x9a>
 8006722:	4621      	mov	r1, r4
 8006724:	4630      	mov	r0, r6
 8006726:	f000 fa07 	bl	8006b38 <__smakebuf_r>
 800672a:	89a0      	ldrh	r0, [r4, #12]
 800672c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006730:	f010 0301 	ands.w	r3, r0, #1
 8006734:	d00a      	beq.n	800674c <__swsetup_r+0xbc>
 8006736:	2300      	movs	r3, #0
 8006738:	60a3      	str	r3, [r4, #8]
 800673a:	6963      	ldr	r3, [r4, #20]
 800673c:	425b      	negs	r3, r3
 800673e:	61a3      	str	r3, [r4, #24]
 8006740:	6923      	ldr	r3, [r4, #16]
 8006742:	b943      	cbnz	r3, 8006756 <__swsetup_r+0xc6>
 8006744:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006748:	d1ba      	bne.n	80066c0 <__swsetup_r+0x30>
 800674a:	bd70      	pop	{r4, r5, r6, pc}
 800674c:	0781      	lsls	r1, r0, #30
 800674e:	bf58      	it	pl
 8006750:	6963      	ldrpl	r3, [r4, #20]
 8006752:	60a3      	str	r3, [r4, #8]
 8006754:	e7f4      	b.n	8006740 <__swsetup_r+0xb0>
 8006756:	2000      	movs	r0, #0
 8006758:	e7f7      	b.n	800674a <__swsetup_r+0xba>
 800675a:	bf00      	nop
 800675c:	2000000c 	.word	0x2000000c
 8006760:	08007964 	.word	0x08007964
 8006764:	08007984 	.word	0x08007984
 8006768:	08007944 	.word	0x08007944

0800676c <abort>:
 800676c:	b508      	push	{r3, lr}
 800676e:	2006      	movs	r0, #6
 8006770:	f000 fa52 	bl	8006c18 <raise>
 8006774:	2001      	movs	r0, #1
 8006776:	f7fc f805 	bl	8002784 <_exit>
	...

0800677c <__sflush_r>:
 800677c:	898a      	ldrh	r2, [r1, #12]
 800677e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006782:	4605      	mov	r5, r0
 8006784:	0710      	lsls	r0, r2, #28
 8006786:	460c      	mov	r4, r1
 8006788:	d458      	bmi.n	800683c <__sflush_r+0xc0>
 800678a:	684b      	ldr	r3, [r1, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	dc05      	bgt.n	800679c <__sflush_r+0x20>
 8006790:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	dc02      	bgt.n	800679c <__sflush_r+0x20>
 8006796:	2000      	movs	r0, #0
 8006798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800679c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800679e:	2e00      	cmp	r6, #0
 80067a0:	d0f9      	beq.n	8006796 <__sflush_r+0x1a>
 80067a2:	2300      	movs	r3, #0
 80067a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067a8:	682f      	ldr	r7, [r5, #0]
 80067aa:	602b      	str	r3, [r5, #0]
 80067ac:	d032      	beq.n	8006814 <__sflush_r+0x98>
 80067ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	075a      	lsls	r2, r3, #29
 80067b4:	d505      	bpl.n	80067c2 <__sflush_r+0x46>
 80067b6:	6863      	ldr	r3, [r4, #4]
 80067b8:	1ac0      	subs	r0, r0, r3
 80067ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067bc:	b10b      	cbz	r3, 80067c2 <__sflush_r+0x46>
 80067be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067c0:	1ac0      	subs	r0, r0, r3
 80067c2:	2300      	movs	r3, #0
 80067c4:	4602      	mov	r2, r0
 80067c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067c8:	6a21      	ldr	r1, [r4, #32]
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b0      	blx	r6
 80067ce:	1c43      	adds	r3, r0, #1
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	d106      	bne.n	80067e2 <__sflush_r+0x66>
 80067d4:	6829      	ldr	r1, [r5, #0]
 80067d6:	291d      	cmp	r1, #29
 80067d8:	d82c      	bhi.n	8006834 <__sflush_r+0xb8>
 80067da:	4a2a      	ldr	r2, [pc, #168]	; (8006884 <__sflush_r+0x108>)
 80067dc:	40ca      	lsrs	r2, r1
 80067de:	07d6      	lsls	r6, r2, #31
 80067e0:	d528      	bpl.n	8006834 <__sflush_r+0xb8>
 80067e2:	2200      	movs	r2, #0
 80067e4:	6062      	str	r2, [r4, #4]
 80067e6:	04d9      	lsls	r1, r3, #19
 80067e8:	6922      	ldr	r2, [r4, #16]
 80067ea:	6022      	str	r2, [r4, #0]
 80067ec:	d504      	bpl.n	80067f8 <__sflush_r+0x7c>
 80067ee:	1c42      	adds	r2, r0, #1
 80067f0:	d101      	bne.n	80067f6 <__sflush_r+0x7a>
 80067f2:	682b      	ldr	r3, [r5, #0]
 80067f4:	b903      	cbnz	r3, 80067f8 <__sflush_r+0x7c>
 80067f6:	6560      	str	r0, [r4, #84]	; 0x54
 80067f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067fa:	602f      	str	r7, [r5, #0]
 80067fc:	2900      	cmp	r1, #0
 80067fe:	d0ca      	beq.n	8006796 <__sflush_r+0x1a>
 8006800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006804:	4299      	cmp	r1, r3
 8006806:	d002      	beq.n	800680e <__sflush_r+0x92>
 8006808:	4628      	mov	r0, r5
 800680a:	f7ff fae3 	bl	8005dd4 <_free_r>
 800680e:	2000      	movs	r0, #0
 8006810:	6360      	str	r0, [r4, #52]	; 0x34
 8006812:	e7c1      	b.n	8006798 <__sflush_r+0x1c>
 8006814:	6a21      	ldr	r1, [r4, #32]
 8006816:	2301      	movs	r3, #1
 8006818:	4628      	mov	r0, r5
 800681a:	47b0      	blx	r6
 800681c:	1c41      	adds	r1, r0, #1
 800681e:	d1c7      	bne.n	80067b0 <__sflush_r+0x34>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0c4      	beq.n	80067b0 <__sflush_r+0x34>
 8006826:	2b1d      	cmp	r3, #29
 8006828:	d001      	beq.n	800682e <__sflush_r+0xb2>
 800682a:	2b16      	cmp	r3, #22
 800682c:	d101      	bne.n	8006832 <__sflush_r+0xb6>
 800682e:	602f      	str	r7, [r5, #0]
 8006830:	e7b1      	b.n	8006796 <__sflush_r+0x1a>
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006838:	81a3      	strh	r3, [r4, #12]
 800683a:	e7ad      	b.n	8006798 <__sflush_r+0x1c>
 800683c:	690f      	ldr	r7, [r1, #16]
 800683e:	2f00      	cmp	r7, #0
 8006840:	d0a9      	beq.n	8006796 <__sflush_r+0x1a>
 8006842:	0793      	lsls	r3, r2, #30
 8006844:	680e      	ldr	r6, [r1, #0]
 8006846:	bf08      	it	eq
 8006848:	694b      	ldreq	r3, [r1, #20]
 800684a:	600f      	str	r7, [r1, #0]
 800684c:	bf18      	it	ne
 800684e:	2300      	movne	r3, #0
 8006850:	eba6 0807 	sub.w	r8, r6, r7
 8006854:	608b      	str	r3, [r1, #8]
 8006856:	f1b8 0f00 	cmp.w	r8, #0
 800685a:	dd9c      	ble.n	8006796 <__sflush_r+0x1a>
 800685c:	6a21      	ldr	r1, [r4, #32]
 800685e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006860:	4643      	mov	r3, r8
 8006862:	463a      	mov	r2, r7
 8006864:	4628      	mov	r0, r5
 8006866:	47b0      	blx	r6
 8006868:	2800      	cmp	r0, #0
 800686a:	dc06      	bgt.n	800687a <__sflush_r+0xfe>
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	f04f 30ff 	mov.w	r0, #4294967295
 8006878:	e78e      	b.n	8006798 <__sflush_r+0x1c>
 800687a:	4407      	add	r7, r0
 800687c:	eba8 0800 	sub.w	r8, r8, r0
 8006880:	e7e9      	b.n	8006856 <__sflush_r+0xda>
 8006882:	bf00      	nop
 8006884:	20400001 	.word	0x20400001

08006888 <_fflush_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	690b      	ldr	r3, [r1, #16]
 800688c:	4605      	mov	r5, r0
 800688e:	460c      	mov	r4, r1
 8006890:	b913      	cbnz	r3, 8006898 <_fflush_r+0x10>
 8006892:	2500      	movs	r5, #0
 8006894:	4628      	mov	r0, r5
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	b118      	cbz	r0, 80068a2 <_fflush_r+0x1a>
 800689a:	6983      	ldr	r3, [r0, #24]
 800689c:	b90b      	cbnz	r3, 80068a2 <_fflush_r+0x1a>
 800689e:	f000 f887 	bl	80069b0 <__sinit>
 80068a2:	4b14      	ldr	r3, [pc, #80]	; (80068f4 <_fflush_r+0x6c>)
 80068a4:	429c      	cmp	r4, r3
 80068a6:	d11b      	bne.n	80068e0 <_fflush_r+0x58>
 80068a8:	686c      	ldr	r4, [r5, #4]
 80068aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0ef      	beq.n	8006892 <_fflush_r+0xa>
 80068b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068b4:	07d0      	lsls	r0, r2, #31
 80068b6:	d404      	bmi.n	80068c2 <_fflush_r+0x3a>
 80068b8:	0599      	lsls	r1, r3, #22
 80068ba:	d402      	bmi.n	80068c2 <_fflush_r+0x3a>
 80068bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068be:	f000 f915 	bl	8006aec <__retarget_lock_acquire_recursive>
 80068c2:	4628      	mov	r0, r5
 80068c4:	4621      	mov	r1, r4
 80068c6:	f7ff ff59 	bl	800677c <__sflush_r>
 80068ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068cc:	07da      	lsls	r2, r3, #31
 80068ce:	4605      	mov	r5, r0
 80068d0:	d4e0      	bmi.n	8006894 <_fflush_r+0xc>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	059b      	lsls	r3, r3, #22
 80068d6:	d4dd      	bmi.n	8006894 <_fflush_r+0xc>
 80068d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068da:	f000 f908 	bl	8006aee <__retarget_lock_release_recursive>
 80068de:	e7d9      	b.n	8006894 <_fflush_r+0xc>
 80068e0:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <_fflush_r+0x70>)
 80068e2:	429c      	cmp	r4, r3
 80068e4:	d101      	bne.n	80068ea <_fflush_r+0x62>
 80068e6:	68ac      	ldr	r4, [r5, #8]
 80068e8:	e7df      	b.n	80068aa <_fflush_r+0x22>
 80068ea:	4b04      	ldr	r3, [pc, #16]	; (80068fc <_fflush_r+0x74>)
 80068ec:	429c      	cmp	r4, r3
 80068ee:	bf08      	it	eq
 80068f0:	68ec      	ldreq	r4, [r5, #12]
 80068f2:	e7da      	b.n	80068aa <_fflush_r+0x22>
 80068f4:	08007964 	.word	0x08007964
 80068f8:	08007984 	.word	0x08007984
 80068fc:	08007944 	.word	0x08007944

08006900 <std>:
 8006900:	2300      	movs	r3, #0
 8006902:	b510      	push	{r4, lr}
 8006904:	4604      	mov	r4, r0
 8006906:	e9c0 3300 	strd	r3, r3, [r0]
 800690a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800690e:	6083      	str	r3, [r0, #8]
 8006910:	8181      	strh	r1, [r0, #12]
 8006912:	6643      	str	r3, [r0, #100]	; 0x64
 8006914:	81c2      	strh	r2, [r0, #14]
 8006916:	6183      	str	r3, [r0, #24]
 8006918:	4619      	mov	r1, r3
 800691a:	2208      	movs	r2, #8
 800691c:	305c      	adds	r0, #92	; 0x5c
 800691e:	f7fd fa2b 	bl	8003d78 <memset>
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <std+0x38>)
 8006924:	6263      	str	r3, [r4, #36]	; 0x24
 8006926:	4b05      	ldr	r3, [pc, #20]	; (800693c <std+0x3c>)
 8006928:	62a3      	str	r3, [r4, #40]	; 0x28
 800692a:	4b05      	ldr	r3, [pc, #20]	; (8006940 <std+0x40>)
 800692c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <std+0x44>)
 8006930:	6224      	str	r4, [r4, #32]
 8006932:	6323      	str	r3, [r4, #48]	; 0x30
 8006934:	bd10      	pop	{r4, pc}
 8006936:	bf00      	nop
 8006938:	08006c51 	.word	0x08006c51
 800693c:	08006c73 	.word	0x08006c73
 8006940:	08006cab 	.word	0x08006cab
 8006944:	08006ccf 	.word	0x08006ccf

08006948 <_cleanup_r>:
 8006948:	4901      	ldr	r1, [pc, #4]	; (8006950 <_cleanup_r+0x8>)
 800694a:	f000 b8af 	b.w	8006aac <_fwalk_reent>
 800694e:	bf00      	nop
 8006950:	08006889 	.word	0x08006889

08006954 <__sfmoreglue>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	1e4a      	subs	r2, r1, #1
 8006958:	2568      	movs	r5, #104	; 0x68
 800695a:	4355      	muls	r5, r2
 800695c:	460e      	mov	r6, r1
 800695e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006962:	f7ff fa87 	bl	8005e74 <_malloc_r>
 8006966:	4604      	mov	r4, r0
 8006968:	b140      	cbz	r0, 800697c <__sfmoreglue+0x28>
 800696a:	2100      	movs	r1, #0
 800696c:	e9c0 1600 	strd	r1, r6, [r0]
 8006970:	300c      	adds	r0, #12
 8006972:	60a0      	str	r0, [r4, #8]
 8006974:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006978:	f7fd f9fe 	bl	8003d78 <memset>
 800697c:	4620      	mov	r0, r4
 800697e:	bd70      	pop	{r4, r5, r6, pc}

08006980 <__sfp_lock_acquire>:
 8006980:	4801      	ldr	r0, [pc, #4]	; (8006988 <__sfp_lock_acquire+0x8>)
 8006982:	f000 b8b3 	b.w	8006aec <__retarget_lock_acquire_recursive>
 8006986:	bf00      	nop
 8006988:	2000026c 	.word	0x2000026c

0800698c <__sfp_lock_release>:
 800698c:	4801      	ldr	r0, [pc, #4]	; (8006994 <__sfp_lock_release+0x8>)
 800698e:	f000 b8ae 	b.w	8006aee <__retarget_lock_release_recursive>
 8006992:	bf00      	nop
 8006994:	2000026c 	.word	0x2000026c

08006998 <__sinit_lock_acquire>:
 8006998:	4801      	ldr	r0, [pc, #4]	; (80069a0 <__sinit_lock_acquire+0x8>)
 800699a:	f000 b8a7 	b.w	8006aec <__retarget_lock_acquire_recursive>
 800699e:	bf00      	nop
 80069a0:	20000267 	.word	0x20000267

080069a4 <__sinit_lock_release>:
 80069a4:	4801      	ldr	r0, [pc, #4]	; (80069ac <__sinit_lock_release+0x8>)
 80069a6:	f000 b8a2 	b.w	8006aee <__retarget_lock_release_recursive>
 80069aa:	bf00      	nop
 80069ac:	20000267 	.word	0x20000267

080069b0 <__sinit>:
 80069b0:	b510      	push	{r4, lr}
 80069b2:	4604      	mov	r4, r0
 80069b4:	f7ff fff0 	bl	8006998 <__sinit_lock_acquire>
 80069b8:	69a3      	ldr	r3, [r4, #24]
 80069ba:	b11b      	cbz	r3, 80069c4 <__sinit+0x14>
 80069bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c0:	f7ff bff0 	b.w	80069a4 <__sinit_lock_release>
 80069c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069c8:	6523      	str	r3, [r4, #80]	; 0x50
 80069ca:	4b13      	ldr	r3, [pc, #76]	; (8006a18 <__sinit+0x68>)
 80069cc:	4a13      	ldr	r2, [pc, #76]	; (8006a1c <__sinit+0x6c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80069d2:	42a3      	cmp	r3, r4
 80069d4:	bf04      	itt	eq
 80069d6:	2301      	moveq	r3, #1
 80069d8:	61a3      	streq	r3, [r4, #24]
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 f820 	bl	8006a20 <__sfp>
 80069e0:	6060      	str	r0, [r4, #4]
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 f81c 	bl	8006a20 <__sfp>
 80069e8:	60a0      	str	r0, [r4, #8]
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 f818 	bl	8006a20 <__sfp>
 80069f0:	2200      	movs	r2, #0
 80069f2:	60e0      	str	r0, [r4, #12]
 80069f4:	2104      	movs	r1, #4
 80069f6:	6860      	ldr	r0, [r4, #4]
 80069f8:	f7ff ff82 	bl	8006900 <std>
 80069fc:	68a0      	ldr	r0, [r4, #8]
 80069fe:	2201      	movs	r2, #1
 8006a00:	2109      	movs	r1, #9
 8006a02:	f7ff ff7d 	bl	8006900 <std>
 8006a06:	68e0      	ldr	r0, [r4, #12]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	2112      	movs	r1, #18
 8006a0c:	f7ff ff78 	bl	8006900 <std>
 8006a10:	2301      	movs	r3, #1
 8006a12:	61a3      	str	r3, [r4, #24]
 8006a14:	e7d2      	b.n	80069bc <__sinit+0xc>
 8006a16:	bf00      	nop
 8006a18:	080075c4 	.word	0x080075c4
 8006a1c:	08006949 	.word	0x08006949

08006a20 <__sfp>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	4607      	mov	r7, r0
 8006a24:	f7ff ffac 	bl	8006980 <__sfp_lock_acquire>
 8006a28:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <__sfp+0x84>)
 8006a2a:	681e      	ldr	r6, [r3, #0]
 8006a2c:	69b3      	ldr	r3, [r6, #24]
 8006a2e:	b913      	cbnz	r3, 8006a36 <__sfp+0x16>
 8006a30:	4630      	mov	r0, r6
 8006a32:	f7ff ffbd 	bl	80069b0 <__sinit>
 8006a36:	3648      	adds	r6, #72	; 0x48
 8006a38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	d503      	bpl.n	8006a48 <__sfp+0x28>
 8006a40:	6833      	ldr	r3, [r6, #0]
 8006a42:	b30b      	cbz	r3, 8006a88 <__sfp+0x68>
 8006a44:	6836      	ldr	r6, [r6, #0]
 8006a46:	e7f7      	b.n	8006a38 <__sfp+0x18>
 8006a48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a4c:	b9d5      	cbnz	r5, 8006a84 <__sfp+0x64>
 8006a4e:	4b16      	ldr	r3, [pc, #88]	; (8006aa8 <__sfp+0x88>)
 8006a50:	60e3      	str	r3, [r4, #12]
 8006a52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a56:	6665      	str	r5, [r4, #100]	; 0x64
 8006a58:	f000 f847 	bl	8006aea <__retarget_lock_init_recursive>
 8006a5c:	f7ff ff96 	bl	800698c <__sfp_lock_release>
 8006a60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a68:	6025      	str	r5, [r4, #0]
 8006a6a:	61a5      	str	r5, [r4, #24]
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	4629      	mov	r1, r5
 8006a70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a74:	f7fd f980 	bl	8003d78 <memset>
 8006a78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a80:	4620      	mov	r0, r4
 8006a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a84:	3468      	adds	r4, #104	; 0x68
 8006a86:	e7d9      	b.n	8006a3c <__sfp+0x1c>
 8006a88:	2104      	movs	r1, #4
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	f7ff ff62 	bl	8006954 <__sfmoreglue>
 8006a90:	4604      	mov	r4, r0
 8006a92:	6030      	str	r0, [r6, #0]
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d1d5      	bne.n	8006a44 <__sfp+0x24>
 8006a98:	f7ff ff78 	bl	800698c <__sfp_lock_release>
 8006a9c:	230c      	movs	r3, #12
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	e7ee      	b.n	8006a80 <__sfp+0x60>
 8006aa2:	bf00      	nop
 8006aa4:	080075c4 	.word	0x080075c4
 8006aa8:	ffff0001 	.word	0xffff0001

08006aac <_fwalk_reent>:
 8006aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	4688      	mov	r8, r1
 8006ab4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ab8:	2700      	movs	r7, #0
 8006aba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006abe:	f1b9 0901 	subs.w	r9, r9, #1
 8006ac2:	d505      	bpl.n	8006ad0 <_fwalk_reent+0x24>
 8006ac4:	6824      	ldr	r4, [r4, #0]
 8006ac6:	2c00      	cmp	r4, #0
 8006ac8:	d1f7      	bne.n	8006aba <_fwalk_reent+0xe>
 8006aca:	4638      	mov	r0, r7
 8006acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ad0:	89ab      	ldrh	r3, [r5, #12]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d907      	bls.n	8006ae6 <_fwalk_reent+0x3a>
 8006ad6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ada:	3301      	adds	r3, #1
 8006adc:	d003      	beq.n	8006ae6 <_fwalk_reent+0x3a>
 8006ade:	4629      	mov	r1, r5
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	47c0      	blx	r8
 8006ae4:	4307      	orrs	r7, r0
 8006ae6:	3568      	adds	r5, #104	; 0x68
 8006ae8:	e7e9      	b.n	8006abe <_fwalk_reent+0x12>

08006aea <__retarget_lock_init_recursive>:
 8006aea:	4770      	bx	lr

08006aec <__retarget_lock_acquire_recursive>:
 8006aec:	4770      	bx	lr

08006aee <__retarget_lock_release_recursive>:
 8006aee:	4770      	bx	lr

08006af0 <__swhatbuf_r>:
 8006af0:	b570      	push	{r4, r5, r6, lr}
 8006af2:	460e      	mov	r6, r1
 8006af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af8:	2900      	cmp	r1, #0
 8006afa:	b096      	sub	sp, #88	; 0x58
 8006afc:	4614      	mov	r4, r2
 8006afe:	461d      	mov	r5, r3
 8006b00:	da07      	bge.n	8006b12 <__swhatbuf_r+0x22>
 8006b02:	2300      	movs	r3, #0
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	89b3      	ldrh	r3, [r6, #12]
 8006b08:	061a      	lsls	r2, r3, #24
 8006b0a:	d410      	bmi.n	8006b2e <__swhatbuf_r+0x3e>
 8006b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b10:	e00e      	b.n	8006b30 <__swhatbuf_r+0x40>
 8006b12:	466a      	mov	r2, sp
 8006b14:	f000 f902 	bl	8006d1c <_fstat_r>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	dbf2      	blt.n	8006b02 <__swhatbuf_r+0x12>
 8006b1c:	9a01      	ldr	r2, [sp, #4]
 8006b1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b26:	425a      	negs	r2, r3
 8006b28:	415a      	adcs	r2, r3
 8006b2a:	602a      	str	r2, [r5, #0]
 8006b2c:	e7ee      	b.n	8006b0c <__swhatbuf_r+0x1c>
 8006b2e:	2340      	movs	r3, #64	; 0x40
 8006b30:	2000      	movs	r0, #0
 8006b32:	6023      	str	r3, [r4, #0]
 8006b34:	b016      	add	sp, #88	; 0x58
 8006b36:	bd70      	pop	{r4, r5, r6, pc}

08006b38 <__smakebuf_r>:
 8006b38:	898b      	ldrh	r3, [r1, #12]
 8006b3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b3c:	079d      	lsls	r5, r3, #30
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460c      	mov	r4, r1
 8006b42:	d507      	bpl.n	8006b54 <__smakebuf_r+0x1c>
 8006b44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	6163      	str	r3, [r4, #20]
 8006b50:	b002      	add	sp, #8
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	ab01      	add	r3, sp, #4
 8006b56:	466a      	mov	r2, sp
 8006b58:	f7ff ffca 	bl	8006af0 <__swhatbuf_r>
 8006b5c:	9900      	ldr	r1, [sp, #0]
 8006b5e:	4605      	mov	r5, r0
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7ff f987 	bl	8005e74 <_malloc_r>
 8006b66:	b948      	cbnz	r0, 8006b7c <__smakebuf_r+0x44>
 8006b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6c:	059a      	lsls	r2, r3, #22
 8006b6e:	d4ef      	bmi.n	8006b50 <__smakebuf_r+0x18>
 8006b70:	f023 0303 	bic.w	r3, r3, #3
 8006b74:	f043 0302 	orr.w	r3, r3, #2
 8006b78:	81a3      	strh	r3, [r4, #12]
 8006b7a:	e7e3      	b.n	8006b44 <__smakebuf_r+0xc>
 8006b7c:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <__smakebuf_r+0x7c>)
 8006b7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	6020      	str	r0, [r4, #0]
 8006b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b88:	81a3      	strh	r3, [r4, #12]
 8006b8a:	9b00      	ldr	r3, [sp, #0]
 8006b8c:	6163      	str	r3, [r4, #20]
 8006b8e:	9b01      	ldr	r3, [sp, #4]
 8006b90:	6120      	str	r0, [r4, #16]
 8006b92:	b15b      	cbz	r3, 8006bac <__smakebuf_r+0x74>
 8006b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f000 f8d1 	bl	8006d40 <_isatty_r>
 8006b9e:	b128      	cbz	r0, 8006bac <__smakebuf_r+0x74>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	f043 0301 	orr.w	r3, r3, #1
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	89a0      	ldrh	r0, [r4, #12]
 8006bae:	4305      	orrs	r5, r0
 8006bb0:	81a5      	strh	r5, [r4, #12]
 8006bb2:	e7cd      	b.n	8006b50 <__smakebuf_r+0x18>
 8006bb4:	08006949 	.word	0x08006949

08006bb8 <_malloc_usable_size_r>:
 8006bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bbc:	1f18      	subs	r0, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bfbc      	itt	lt
 8006bc2:	580b      	ldrlt	r3, [r1, r0]
 8006bc4:	18c0      	addlt	r0, r0, r3
 8006bc6:	4770      	bx	lr

08006bc8 <_raise_r>:
 8006bc8:	291f      	cmp	r1, #31
 8006bca:	b538      	push	{r3, r4, r5, lr}
 8006bcc:	4604      	mov	r4, r0
 8006bce:	460d      	mov	r5, r1
 8006bd0:	d904      	bls.n	8006bdc <_raise_r+0x14>
 8006bd2:	2316      	movs	r3, #22
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006bde:	b112      	cbz	r2, 8006be6 <_raise_r+0x1e>
 8006be0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006be4:	b94b      	cbnz	r3, 8006bfa <_raise_r+0x32>
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 f830 	bl	8006c4c <_getpid_r>
 8006bec:	462a      	mov	r2, r5
 8006bee:	4601      	mov	r1, r0
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bf6:	f000 b817 	b.w	8006c28 <_kill_r>
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d00a      	beq.n	8006c14 <_raise_r+0x4c>
 8006bfe:	1c59      	adds	r1, r3, #1
 8006c00:	d103      	bne.n	8006c0a <_raise_r+0x42>
 8006c02:	2316      	movs	r3, #22
 8006c04:	6003      	str	r3, [r0, #0]
 8006c06:	2001      	movs	r0, #1
 8006c08:	e7e7      	b.n	8006bda <_raise_r+0x12>
 8006c0a:	2400      	movs	r4, #0
 8006c0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c10:	4628      	mov	r0, r5
 8006c12:	4798      	blx	r3
 8006c14:	2000      	movs	r0, #0
 8006c16:	e7e0      	b.n	8006bda <_raise_r+0x12>

08006c18 <raise>:
 8006c18:	4b02      	ldr	r3, [pc, #8]	; (8006c24 <raise+0xc>)
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	f7ff bfd3 	b.w	8006bc8 <_raise_r>
 8006c22:	bf00      	nop
 8006c24:	2000000c 	.word	0x2000000c

08006c28 <_kill_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d07      	ldr	r5, [pc, #28]	; (8006c48 <_kill_r+0x20>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	4611      	mov	r1, r2
 8006c34:	602b      	str	r3, [r5, #0]
 8006c36:	f7fb fd95 	bl	8002764 <_kill>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d102      	bne.n	8006c44 <_kill_r+0x1c>
 8006c3e:	682b      	ldr	r3, [r5, #0]
 8006c40:	b103      	cbz	r3, 8006c44 <_kill_r+0x1c>
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	bd38      	pop	{r3, r4, r5, pc}
 8006c46:	bf00      	nop
 8006c48:	20000260 	.word	0x20000260

08006c4c <_getpid_r>:
 8006c4c:	f7fb bd82 	b.w	8002754 <_getpid>

08006c50 <__sread>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	460c      	mov	r4, r1
 8006c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c58:	f000 f894 	bl	8006d84 <_read_r>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	bfab      	itete	ge
 8006c60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c62:	89a3      	ldrhlt	r3, [r4, #12]
 8006c64:	181b      	addge	r3, r3, r0
 8006c66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c6a:	bfac      	ite	ge
 8006c6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c6e:	81a3      	strhlt	r3, [r4, #12]
 8006c70:	bd10      	pop	{r4, pc}

08006c72 <__swrite>:
 8006c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c76:	461f      	mov	r7, r3
 8006c78:	898b      	ldrh	r3, [r1, #12]
 8006c7a:	05db      	lsls	r3, r3, #23
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	4616      	mov	r6, r2
 8006c82:	d505      	bpl.n	8006c90 <__swrite+0x1e>
 8006c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c88:	2302      	movs	r3, #2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f000 f868 	bl	8006d60 <_lseek_r>
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c9a:	81a3      	strh	r3, [r4, #12]
 8006c9c:	4632      	mov	r2, r6
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca6:	f000 b817 	b.w	8006cd8 <_write_r>

08006caa <__sseek>:
 8006caa:	b510      	push	{r4, lr}
 8006cac:	460c      	mov	r4, r1
 8006cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb2:	f000 f855 	bl	8006d60 <_lseek_r>
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	89a3      	ldrh	r3, [r4, #12]
 8006cba:	bf15      	itete	ne
 8006cbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cc6:	81a3      	strheq	r3, [r4, #12]
 8006cc8:	bf18      	it	ne
 8006cca:	81a3      	strhne	r3, [r4, #12]
 8006ccc:	bd10      	pop	{r4, pc}

08006cce <__sclose>:
 8006cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd2:	f000 b813 	b.w	8006cfc <_close_r>
	...

08006cd8 <_write_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4d07      	ldr	r5, [pc, #28]	; (8006cf8 <_write_r+0x20>)
 8006cdc:	4604      	mov	r4, r0
 8006cde:	4608      	mov	r0, r1
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	602a      	str	r2, [r5, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f7fb fd73 	bl	80027d2 <_write>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d102      	bne.n	8006cf6 <_write_r+0x1e>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	b103      	cbz	r3, 8006cf6 <_write_r+0x1e>
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	20000260 	.word	0x20000260

08006cfc <_close_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d06      	ldr	r5, [pc, #24]	; (8006d18 <_close_r+0x1c>)
 8006d00:	2300      	movs	r3, #0
 8006d02:	4604      	mov	r4, r0
 8006d04:	4608      	mov	r0, r1
 8006d06:	602b      	str	r3, [r5, #0]
 8006d08:	f7fb fd7f 	bl	800280a <_close>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d102      	bne.n	8006d16 <_close_r+0x1a>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b103      	cbz	r3, 8006d16 <_close_r+0x1a>
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	20000260 	.word	0x20000260

08006d1c <_fstat_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4d07      	ldr	r5, [pc, #28]	; (8006d3c <_fstat_r+0x20>)
 8006d20:	2300      	movs	r3, #0
 8006d22:	4604      	mov	r4, r0
 8006d24:	4608      	mov	r0, r1
 8006d26:	4611      	mov	r1, r2
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	f7fb fd7a 	bl	8002822 <_fstat>
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	d102      	bne.n	8006d38 <_fstat_r+0x1c>
 8006d32:	682b      	ldr	r3, [r5, #0]
 8006d34:	b103      	cbz	r3, 8006d38 <_fstat_r+0x1c>
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	bd38      	pop	{r3, r4, r5, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000260 	.word	0x20000260

08006d40 <_isatty_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4d06      	ldr	r5, [pc, #24]	; (8006d5c <_isatty_r+0x1c>)
 8006d44:	2300      	movs	r3, #0
 8006d46:	4604      	mov	r4, r0
 8006d48:	4608      	mov	r0, r1
 8006d4a:	602b      	str	r3, [r5, #0]
 8006d4c:	f7fb fd79 	bl	8002842 <_isatty>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d102      	bne.n	8006d5a <_isatty_r+0x1a>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	b103      	cbz	r3, 8006d5a <_isatty_r+0x1a>
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	20000260 	.word	0x20000260

08006d60 <_lseek_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4d07      	ldr	r5, [pc, #28]	; (8006d80 <_lseek_r+0x20>)
 8006d64:	4604      	mov	r4, r0
 8006d66:	4608      	mov	r0, r1
 8006d68:	4611      	mov	r1, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	602a      	str	r2, [r5, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f7fb fd72 	bl	8002858 <_lseek>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d102      	bne.n	8006d7e <_lseek_r+0x1e>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	b103      	cbz	r3, 8006d7e <_lseek_r+0x1e>
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	20000260 	.word	0x20000260

08006d84 <_read_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4d07      	ldr	r5, [pc, #28]	; (8006da4 <_read_r+0x20>)
 8006d88:	4604      	mov	r4, r0
 8006d8a:	4608      	mov	r0, r1
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	2200      	movs	r2, #0
 8006d90:	602a      	str	r2, [r5, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	f7fb fd00 	bl	8002798 <_read>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d102      	bne.n	8006da2 <_read_r+0x1e>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	b103      	cbz	r3, 8006da2 <_read_r+0x1e>
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	bd38      	pop	{r3, r4, r5, pc}
 8006da4:	20000260 	.word	0x20000260

08006da8 <atan2>:
 8006da8:	f000 b802 	b.w	8006db0 <__ieee754_atan2>
 8006dac:	0000      	movs	r0, r0
	...

08006db0 <__ieee754_atan2>:
 8006db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db4:	ec57 6b11 	vmov	r6, r7, d1
 8006db8:	4273      	negs	r3, r6
 8006dba:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006f40 <__ieee754_atan2+0x190>
 8006dbe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006dc2:	4333      	orrs	r3, r6
 8006dc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006dc8:	4573      	cmp	r3, lr
 8006dca:	ec51 0b10 	vmov	r0, r1, d0
 8006dce:	ee11 8a10 	vmov	r8, s2
 8006dd2:	d80a      	bhi.n	8006dea <__ieee754_atan2+0x3a>
 8006dd4:	4244      	negs	r4, r0
 8006dd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006dda:	4304      	orrs	r4, r0
 8006ddc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006de0:	4574      	cmp	r4, lr
 8006de2:	ee10 9a10 	vmov	r9, s0
 8006de6:	468c      	mov	ip, r1
 8006de8:	d907      	bls.n	8006dfa <__ieee754_atan2+0x4a>
 8006dea:	4632      	mov	r2, r6
 8006dec:	463b      	mov	r3, r7
 8006dee:	f7f9 fa55 	bl	800029c <__adddf3>
 8006df2:	ec41 0b10 	vmov	d0, r0, r1
 8006df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dfa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006dfe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e02:	4334      	orrs	r4, r6
 8006e04:	d103      	bne.n	8006e0e <__ieee754_atan2+0x5e>
 8006e06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e0a:	f000 b89d 	b.w	8006f48 <atan>
 8006e0e:	17bc      	asrs	r4, r7, #30
 8006e10:	f004 0402 	and.w	r4, r4, #2
 8006e14:	ea53 0909 	orrs.w	r9, r3, r9
 8006e18:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006e1c:	d107      	bne.n	8006e2e <__ieee754_atan2+0x7e>
 8006e1e:	2c02      	cmp	r4, #2
 8006e20:	d060      	beq.n	8006ee4 <__ieee754_atan2+0x134>
 8006e22:	2c03      	cmp	r4, #3
 8006e24:	d1e5      	bne.n	8006df2 <__ieee754_atan2+0x42>
 8006e26:	a142      	add	r1, pc, #264	; (adr r1, 8006f30 <__ieee754_atan2+0x180>)
 8006e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e2c:	e7e1      	b.n	8006df2 <__ieee754_atan2+0x42>
 8006e2e:	ea52 0808 	orrs.w	r8, r2, r8
 8006e32:	d106      	bne.n	8006e42 <__ieee754_atan2+0x92>
 8006e34:	f1bc 0f00 	cmp.w	ip, #0
 8006e38:	da5f      	bge.n	8006efa <__ieee754_atan2+0x14a>
 8006e3a:	a13f      	add	r1, pc, #252	; (adr r1, 8006f38 <__ieee754_atan2+0x188>)
 8006e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e40:	e7d7      	b.n	8006df2 <__ieee754_atan2+0x42>
 8006e42:	4572      	cmp	r2, lr
 8006e44:	d10f      	bne.n	8006e66 <__ieee754_atan2+0xb6>
 8006e46:	4293      	cmp	r3, r2
 8006e48:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e4c:	d107      	bne.n	8006e5e <__ieee754_atan2+0xae>
 8006e4e:	2c02      	cmp	r4, #2
 8006e50:	d84c      	bhi.n	8006eec <__ieee754_atan2+0x13c>
 8006e52:	4b35      	ldr	r3, [pc, #212]	; (8006f28 <__ieee754_atan2+0x178>)
 8006e54:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006e58:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006e5c:	e7c9      	b.n	8006df2 <__ieee754_atan2+0x42>
 8006e5e:	2c02      	cmp	r4, #2
 8006e60:	d848      	bhi.n	8006ef4 <__ieee754_atan2+0x144>
 8006e62:	4b32      	ldr	r3, [pc, #200]	; (8006f2c <__ieee754_atan2+0x17c>)
 8006e64:	e7f6      	b.n	8006e54 <__ieee754_atan2+0xa4>
 8006e66:	4573      	cmp	r3, lr
 8006e68:	d0e4      	beq.n	8006e34 <__ieee754_atan2+0x84>
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006e70:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e74:	da1e      	bge.n	8006eb4 <__ieee754_atan2+0x104>
 8006e76:	2f00      	cmp	r7, #0
 8006e78:	da01      	bge.n	8006e7e <__ieee754_atan2+0xce>
 8006e7a:	323c      	adds	r2, #60	; 0x3c
 8006e7c:	db1e      	blt.n	8006ebc <__ieee754_atan2+0x10c>
 8006e7e:	4632      	mov	r2, r6
 8006e80:	463b      	mov	r3, r7
 8006e82:	f7f9 fceb 	bl	800085c <__aeabi_ddiv>
 8006e86:	ec41 0b10 	vmov	d0, r0, r1
 8006e8a:	f000 f9fd 	bl	8007288 <fabs>
 8006e8e:	f000 f85b 	bl	8006f48 <atan>
 8006e92:	ec51 0b10 	vmov	r0, r1, d0
 8006e96:	2c01      	cmp	r4, #1
 8006e98:	d013      	beq.n	8006ec2 <__ieee754_atan2+0x112>
 8006e9a:	2c02      	cmp	r4, #2
 8006e9c:	d015      	beq.n	8006eca <__ieee754_atan2+0x11a>
 8006e9e:	2c00      	cmp	r4, #0
 8006ea0:	d0a7      	beq.n	8006df2 <__ieee754_atan2+0x42>
 8006ea2:	a319      	add	r3, pc, #100	; (adr r3, 8006f08 <__ieee754_atan2+0x158>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 f9f6 	bl	8000298 <__aeabi_dsub>
 8006eac:	a318      	add	r3, pc, #96	; (adr r3, 8006f10 <__ieee754_atan2+0x160>)
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	e014      	b.n	8006ede <__ieee754_atan2+0x12e>
 8006eb4:	a118      	add	r1, pc, #96	; (adr r1, 8006f18 <__ieee754_atan2+0x168>)
 8006eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eba:	e7ec      	b.n	8006e96 <__ieee754_atan2+0xe6>
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	e7e9      	b.n	8006e96 <__ieee754_atan2+0xe6>
 8006ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	e793      	b.n	8006df2 <__ieee754_atan2+0x42>
 8006eca:	a30f      	add	r3, pc, #60	; (adr r3, 8006f08 <__ieee754_atan2+0x158>)
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	f7f9 f9e2 	bl	8000298 <__aeabi_dsub>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	a10d      	add	r1, pc, #52	; (adr r1, 8006f10 <__ieee754_atan2+0x160>)
 8006eda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ede:	f7f9 f9db 	bl	8000298 <__aeabi_dsub>
 8006ee2:	e786      	b.n	8006df2 <__ieee754_atan2+0x42>
 8006ee4:	a10a      	add	r1, pc, #40	; (adr r1, 8006f10 <__ieee754_atan2+0x160>)
 8006ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eea:	e782      	b.n	8006df2 <__ieee754_atan2+0x42>
 8006eec:	a10c      	add	r1, pc, #48	; (adr r1, 8006f20 <__ieee754_atan2+0x170>)
 8006eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ef2:	e77e      	b.n	8006df2 <__ieee754_atan2+0x42>
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	e77b      	b.n	8006df2 <__ieee754_atan2+0x42>
 8006efa:	a107      	add	r1, pc, #28	; (adr r1, 8006f18 <__ieee754_atan2+0x168>)
 8006efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f00:	e777      	b.n	8006df2 <__ieee754_atan2+0x42>
 8006f02:	bf00      	nop
 8006f04:	f3af 8000 	nop.w
 8006f08:	33145c07 	.word	0x33145c07
 8006f0c:	3ca1a626 	.word	0x3ca1a626
 8006f10:	54442d18 	.word	0x54442d18
 8006f14:	400921fb 	.word	0x400921fb
 8006f18:	54442d18 	.word	0x54442d18
 8006f1c:	3ff921fb 	.word	0x3ff921fb
 8006f20:	54442d18 	.word	0x54442d18
 8006f24:	3fe921fb 	.word	0x3fe921fb
 8006f28:	080079a8 	.word	0x080079a8
 8006f2c:	080079c0 	.word	0x080079c0
 8006f30:	54442d18 	.word	0x54442d18
 8006f34:	c00921fb 	.word	0xc00921fb
 8006f38:	54442d18 	.word	0x54442d18
 8006f3c:	bff921fb 	.word	0xbff921fb
 8006f40:	7ff00000 	.word	0x7ff00000
 8006f44:	00000000 	.word	0x00000000

08006f48 <atan>:
 8006f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	ec55 4b10 	vmov	r4, r5, d0
 8006f50:	4bc3      	ldr	r3, [pc, #780]	; (8007260 <atan+0x318>)
 8006f52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006f56:	429e      	cmp	r6, r3
 8006f58:	46ab      	mov	fp, r5
 8006f5a:	dd18      	ble.n	8006f8e <atan+0x46>
 8006f5c:	4bc1      	ldr	r3, [pc, #772]	; (8007264 <atan+0x31c>)
 8006f5e:	429e      	cmp	r6, r3
 8006f60:	dc01      	bgt.n	8006f66 <atan+0x1e>
 8006f62:	d109      	bne.n	8006f78 <atan+0x30>
 8006f64:	b144      	cbz	r4, 8006f78 <atan+0x30>
 8006f66:	4622      	mov	r2, r4
 8006f68:	462b      	mov	r3, r5
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	f7f9 f995 	bl	800029c <__adddf3>
 8006f72:	4604      	mov	r4, r0
 8006f74:	460d      	mov	r5, r1
 8006f76:	e006      	b.n	8006f86 <atan+0x3e>
 8006f78:	f1bb 0f00 	cmp.w	fp, #0
 8006f7c:	f300 8131 	bgt.w	80071e2 <atan+0x29a>
 8006f80:	a59b      	add	r5, pc, #620	; (adr r5, 80071f0 <atan+0x2a8>)
 8006f82:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f86:	ec45 4b10 	vmov	d0, r4, r5
 8006f8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8e:	4bb6      	ldr	r3, [pc, #728]	; (8007268 <atan+0x320>)
 8006f90:	429e      	cmp	r6, r3
 8006f92:	dc14      	bgt.n	8006fbe <atan+0x76>
 8006f94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006f98:	429e      	cmp	r6, r3
 8006f9a:	dc0d      	bgt.n	8006fb8 <atan+0x70>
 8006f9c:	a396      	add	r3, pc, #600	; (adr r3, 80071f8 <atan+0x2b0>)
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	ee10 0a10 	vmov	r0, s0
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f7f9 f978 	bl	800029c <__adddf3>
 8006fac:	4baf      	ldr	r3, [pc, #700]	; (800726c <atan+0x324>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f7f9 fdba 	bl	8000b28 <__aeabi_dcmpgt>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d1e6      	bne.n	8006f86 <atan+0x3e>
 8006fb8:	f04f 3aff 	mov.w	sl, #4294967295
 8006fbc:	e02b      	b.n	8007016 <atan+0xce>
 8006fbe:	f000 f963 	bl	8007288 <fabs>
 8006fc2:	4bab      	ldr	r3, [pc, #684]	; (8007270 <atan+0x328>)
 8006fc4:	429e      	cmp	r6, r3
 8006fc6:	ec55 4b10 	vmov	r4, r5, d0
 8006fca:	f300 80bf 	bgt.w	800714c <atan+0x204>
 8006fce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006fd2:	429e      	cmp	r6, r3
 8006fd4:	f300 80a0 	bgt.w	8007118 <atan+0x1d0>
 8006fd8:	ee10 2a10 	vmov	r2, s0
 8006fdc:	ee10 0a10 	vmov	r0, s0
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	f7f9 f95a 	bl	800029c <__adddf3>
 8006fe8:	4ba0      	ldr	r3, [pc, #640]	; (800726c <atan+0x324>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	f7f9 f954 	bl	8000298 <__aeabi_dsub>
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460f      	mov	r7, r1
 8006ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	f7f9 f94d 	bl	800029c <__adddf3>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4630      	mov	r0, r6
 8007008:	4639      	mov	r1, r7
 800700a:	f7f9 fc27 	bl	800085c <__aeabi_ddiv>
 800700e:	f04f 0a00 	mov.w	sl, #0
 8007012:	4604      	mov	r4, r0
 8007014:	460d      	mov	r5, r1
 8007016:	4622      	mov	r2, r4
 8007018:	462b      	mov	r3, r5
 800701a:	4620      	mov	r0, r4
 800701c:	4629      	mov	r1, r5
 800701e:	f7f9 faf3 	bl	8000608 <__aeabi_dmul>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4680      	mov	r8, r0
 8007028:	4689      	mov	r9, r1
 800702a:	f7f9 faed 	bl	8000608 <__aeabi_dmul>
 800702e:	a374      	add	r3, pc, #464	; (adr r3, 8007200 <atan+0x2b8>)
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	4606      	mov	r6, r0
 8007036:	460f      	mov	r7, r1
 8007038:	f7f9 fae6 	bl	8000608 <__aeabi_dmul>
 800703c:	a372      	add	r3, pc, #456	; (adr r3, 8007208 <atan+0x2c0>)
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	f7f9 f92b 	bl	800029c <__adddf3>
 8007046:	4632      	mov	r2, r6
 8007048:	463b      	mov	r3, r7
 800704a:	f7f9 fadd 	bl	8000608 <__aeabi_dmul>
 800704e:	a370      	add	r3, pc, #448	; (adr r3, 8007210 <atan+0x2c8>)
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f7f9 f922 	bl	800029c <__adddf3>
 8007058:	4632      	mov	r2, r6
 800705a:	463b      	mov	r3, r7
 800705c:	f7f9 fad4 	bl	8000608 <__aeabi_dmul>
 8007060:	a36d      	add	r3, pc, #436	; (adr r3, 8007218 <atan+0x2d0>)
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	f7f9 f919 	bl	800029c <__adddf3>
 800706a:	4632      	mov	r2, r6
 800706c:	463b      	mov	r3, r7
 800706e:	f7f9 facb 	bl	8000608 <__aeabi_dmul>
 8007072:	a36b      	add	r3, pc, #428	; (adr r3, 8007220 <atan+0x2d8>)
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	f7f9 f910 	bl	800029c <__adddf3>
 800707c:	4632      	mov	r2, r6
 800707e:	463b      	mov	r3, r7
 8007080:	f7f9 fac2 	bl	8000608 <__aeabi_dmul>
 8007084:	a368      	add	r3, pc, #416	; (adr r3, 8007228 <atan+0x2e0>)
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f7f9 f907 	bl	800029c <__adddf3>
 800708e:	4642      	mov	r2, r8
 8007090:	464b      	mov	r3, r9
 8007092:	f7f9 fab9 	bl	8000608 <__aeabi_dmul>
 8007096:	a366      	add	r3, pc, #408	; (adr r3, 8007230 <atan+0x2e8>)
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	4680      	mov	r8, r0
 800709e:	4689      	mov	r9, r1
 80070a0:	4630      	mov	r0, r6
 80070a2:	4639      	mov	r1, r7
 80070a4:	f7f9 fab0 	bl	8000608 <__aeabi_dmul>
 80070a8:	a363      	add	r3, pc, #396	; (adr r3, 8007238 <atan+0x2f0>)
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	f7f9 f8f3 	bl	8000298 <__aeabi_dsub>
 80070b2:	4632      	mov	r2, r6
 80070b4:	463b      	mov	r3, r7
 80070b6:	f7f9 faa7 	bl	8000608 <__aeabi_dmul>
 80070ba:	a361      	add	r3, pc, #388	; (adr r3, 8007240 <atan+0x2f8>)
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	f7f9 f8ea 	bl	8000298 <__aeabi_dsub>
 80070c4:	4632      	mov	r2, r6
 80070c6:	463b      	mov	r3, r7
 80070c8:	f7f9 fa9e 	bl	8000608 <__aeabi_dmul>
 80070cc:	a35e      	add	r3, pc, #376	; (adr r3, 8007248 <atan+0x300>)
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f7f9 f8e1 	bl	8000298 <__aeabi_dsub>
 80070d6:	4632      	mov	r2, r6
 80070d8:	463b      	mov	r3, r7
 80070da:	f7f9 fa95 	bl	8000608 <__aeabi_dmul>
 80070de:	a35c      	add	r3, pc, #368	; (adr r3, 8007250 <atan+0x308>)
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	f7f9 f8d8 	bl	8000298 <__aeabi_dsub>
 80070e8:	4632      	mov	r2, r6
 80070ea:	463b      	mov	r3, r7
 80070ec:	f7f9 fa8c 	bl	8000608 <__aeabi_dmul>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4640      	mov	r0, r8
 80070f6:	4649      	mov	r1, r9
 80070f8:	f7f9 f8d0 	bl	800029c <__adddf3>
 80070fc:	4622      	mov	r2, r4
 80070fe:	462b      	mov	r3, r5
 8007100:	f7f9 fa82 	bl	8000608 <__aeabi_dmul>
 8007104:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	d14b      	bne.n	80071a6 <atan+0x25e>
 800710e:	4620      	mov	r0, r4
 8007110:	4629      	mov	r1, r5
 8007112:	f7f9 f8c1 	bl	8000298 <__aeabi_dsub>
 8007116:	e72c      	b.n	8006f72 <atan+0x2a>
 8007118:	ee10 0a10 	vmov	r0, s0
 800711c:	4b53      	ldr	r3, [pc, #332]	; (800726c <atan+0x324>)
 800711e:	2200      	movs	r2, #0
 8007120:	4629      	mov	r1, r5
 8007122:	f7f9 f8b9 	bl	8000298 <__aeabi_dsub>
 8007126:	4b51      	ldr	r3, [pc, #324]	; (800726c <atan+0x324>)
 8007128:	4606      	mov	r6, r0
 800712a:	460f      	mov	r7, r1
 800712c:	2200      	movs	r2, #0
 800712e:	4620      	mov	r0, r4
 8007130:	4629      	mov	r1, r5
 8007132:	f7f9 f8b3 	bl	800029c <__adddf3>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4630      	mov	r0, r6
 800713c:	4639      	mov	r1, r7
 800713e:	f7f9 fb8d 	bl	800085c <__aeabi_ddiv>
 8007142:	f04f 0a01 	mov.w	sl, #1
 8007146:	4604      	mov	r4, r0
 8007148:	460d      	mov	r5, r1
 800714a:	e764      	b.n	8007016 <atan+0xce>
 800714c:	4b49      	ldr	r3, [pc, #292]	; (8007274 <atan+0x32c>)
 800714e:	429e      	cmp	r6, r3
 8007150:	da1d      	bge.n	800718e <atan+0x246>
 8007152:	ee10 0a10 	vmov	r0, s0
 8007156:	4b48      	ldr	r3, [pc, #288]	; (8007278 <atan+0x330>)
 8007158:	2200      	movs	r2, #0
 800715a:	4629      	mov	r1, r5
 800715c:	f7f9 f89c 	bl	8000298 <__aeabi_dsub>
 8007160:	4b45      	ldr	r3, [pc, #276]	; (8007278 <atan+0x330>)
 8007162:	4606      	mov	r6, r0
 8007164:	460f      	mov	r7, r1
 8007166:	2200      	movs	r2, #0
 8007168:	4620      	mov	r0, r4
 800716a:	4629      	mov	r1, r5
 800716c:	f7f9 fa4c 	bl	8000608 <__aeabi_dmul>
 8007170:	4b3e      	ldr	r3, [pc, #248]	; (800726c <atan+0x324>)
 8007172:	2200      	movs	r2, #0
 8007174:	f7f9 f892 	bl	800029c <__adddf3>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4630      	mov	r0, r6
 800717e:	4639      	mov	r1, r7
 8007180:	f7f9 fb6c 	bl	800085c <__aeabi_ddiv>
 8007184:	f04f 0a02 	mov.w	sl, #2
 8007188:	4604      	mov	r4, r0
 800718a:	460d      	mov	r5, r1
 800718c:	e743      	b.n	8007016 <atan+0xce>
 800718e:	462b      	mov	r3, r5
 8007190:	ee10 2a10 	vmov	r2, s0
 8007194:	4939      	ldr	r1, [pc, #228]	; (800727c <atan+0x334>)
 8007196:	2000      	movs	r0, #0
 8007198:	f7f9 fb60 	bl	800085c <__aeabi_ddiv>
 800719c:	f04f 0a03 	mov.w	sl, #3
 80071a0:	4604      	mov	r4, r0
 80071a2:	460d      	mov	r5, r1
 80071a4:	e737      	b.n	8007016 <atan+0xce>
 80071a6:	4b36      	ldr	r3, [pc, #216]	; (8007280 <atan+0x338>)
 80071a8:	4e36      	ldr	r6, [pc, #216]	; (8007284 <atan+0x33c>)
 80071aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80071ae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80071b2:	e9da 2300 	ldrd	r2, r3, [sl]
 80071b6:	f7f9 f86f 	bl	8000298 <__aeabi_dsub>
 80071ba:	4622      	mov	r2, r4
 80071bc:	462b      	mov	r3, r5
 80071be:	f7f9 f86b 	bl	8000298 <__aeabi_dsub>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80071ca:	f7f9 f865 	bl	8000298 <__aeabi_dsub>
 80071ce:	f1bb 0f00 	cmp.w	fp, #0
 80071d2:	4604      	mov	r4, r0
 80071d4:	460d      	mov	r5, r1
 80071d6:	f6bf aed6 	bge.w	8006f86 <atan+0x3e>
 80071da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071de:	461d      	mov	r5, r3
 80071e0:	e6d1      	b.n	8006f86 <atan+0x3e>
 80071e2:	a51d      	add	r5, pc, #116	; (adr r5, 8007258 <atan+0x310>)
 80071e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80071e8:	e6cd      	b.n	8006f86 <atan+0x3e>
 80071ea:	bf00      	nop
 80071ec:	f3af 8000 	nop.w
 80071f0:	54442d18 	.word	0x54442d18
 80071f4:	bff921fb 	.word	0xbff921fb
 80071f8:	8800759c 	.word	0x8800759c
 80071fc:	7e37e43c 	.word	0x7e37e43c
 8007200:	e322da11 	.word	0xe322da11
 8007204:	3f90ad3a 	.word	0x3f90ad3a
 8007208:	24760deb 	.word	0x24760deb
 800720c:	3fa97b4b 	.word	0x3fa97b4b
 8007210:	a0d03d51 	.word	0xa0d03d51
 8007214:	3fb10d66 	.word	0x3fb10d66
 8007218:	c54c206e 	.word	0xc54c206e
 800721c:	3fb745cd 	.word	0x3fb745cd
 8007220:	920083ff 	.word	0x920083ff
 8007224:	3fc24924 	.word	0x3fc24924
 8007228:	5555550d 	.word	0x5555550d
 800722c:	3fd55555 	.word	0x3fd55555
 8007230:	2c6a6c2f 	.word	0x2c6a6c2f
 8007234:	bfa2b444 	.word	0xbfa2b444
 8007238:	52defd9a 	.word	0x52defd9a
 800723c:	3fadde2d 	.word	0x3fadde2d
 8007240:	af749a6d 	.word	0xaf749a6d
 8007244:	3fb3b0f2 	.word	0x3fb3b0f2
 8007248:	fe231671 	.word	0xfe231671
 800724c:	3fbc71c6 	.word	0x3fbc71c6
 8007250:	9998ebc4 	.word	0x9998ebc4
 8007254:	3fc99999 	.word	0x3fc99999
 8007258:	54442d18 	.word	0x54442d18
 800725c:	3ff921fb 	.word	0x3ff921fb
 8007260:	440fffff 	.word	0x440fffff
 8007264:	7ff00000 	.word	0x7ff00000
 8007268:	3fdbffff 	.word	0x3fdbffff
 800726c:	3ff00000 	.word	0x3ff00000
 8007270:	3ff2ffff 	.word	0x3ff2ffff
 8007274:	40038000 	.word	0x40038000
 8007278:	3ff80000 	.word	0x3ff80000
 800727c:	bff00000 	.word	0xbff00000
 8007280:	080079f8 	.word	0x080079f8
 8007284:	080079d8 	.word	0x080079d8

08007288 <fabs>:
 8007288:	ec51 0b10 	vmov	r0, r1, d0
 800728c:	ee10 2a10 	vmov	r2, s0
 8007290:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007294:	ec43 2b10 	vmov	d0, r2, r3
 8007298:	4770      	bx	lr
	...

0800729c <_init>:
 800729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729e:	bf00      	nop
 80072a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a2:	bc08      	pop	{r3}
 80072a4:	469e      	mov	lr, r3
 80072a6:	4770      	bx	lr

080072a8 <_fini>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	bf00      	nop
 80072ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ae:	bc08      	pop	{r3}
 80072b0:	469e      	mov	lr, r3
 80072b2:	4770      	bx	lr
